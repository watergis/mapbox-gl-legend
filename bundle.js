(()=>{var e={895:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>Xo});var r={$version:8,$root:{version:{required:!0,type:"enum",values:[8],doc:"Style specification version number. Must be 8.",example:8},name:{type:"string",doc:"A human-readable name for the style.",example:"Bright"},metadata:{type:"*",doc:"Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."},center:{type:"array",value:"number",doc:"Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:[-73.9749,40.7736]},zoom:{type:"number",doc:"Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:12.5},bearing:{type:"number",default:0,period:360,units:"degrees",doc:'Default bearing, in degrees. The bearing is the compass direction that is "up"; for example, a bearing of 90Â° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).',example:29},pitch:{type:"number",default:0,units:"degrees",doc:"Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:50},light:{type:"light",doc:"The global light source.",example:{anchor:"viewport",color:"white",intensity:.4}},terrain:{type:"terrain",doc:"A global modifier that elevates layers and markers based on a DEM data source."},sources:{required:!0,type:"sources",doc:"Data source specifications.",example:{"mapbox-streets":{type:"vector",url:"mapbox://mapbox.mapbox-streets-v6"}}},sprite:{type:"string",doc:"A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",example:"mapbox://sprites/mapbox/bright-v8"},glyphs:{type:"string",doc:"A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",example:"mapbox://fonts/mapbox/{fontstack}/{range}.pbf"},transition:{type:"transition",doc:"A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.",example:{duration:300,delay:0}},layers:{required:!0,type:"array",value:"layer",doc:"Layers will be drawn in the order of this array.",example:[{id:"water",source:"mapbox-streets","source-layer":"water",type:"fill",paint:{"fill-color":"#00ffff"}}]}},sources:{"*":{type:"source",doc:"Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."}},source:["source_vector","source_raster","source_raster_dem","source_geojson","source_video","source_image"],source_vector:{type:{required:!0,type:"enum",values:{vector:{doc:"A vector tile source."}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},scheme:{type:"enum",values:{xyz:{doc:"Slippy map tilenames scheme."},tms:{doc:"OSGeo spec scheme."}},default:"xyz",doc:"Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},promoteId:{type:"promoteId",doc:"A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers."},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source's tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_raster:{type:{required:!0,type:"enum",values:{raster:{doc:"A raster tile source."}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},tileSize:{type:"number",default:512,units:"pixels",doc:"The minimum visual size to display tiles for this layer. Only configurable for raster layers."},scheme:{type:"enum",values:{xyz:{doc:"Slippy map tilenames scheme."},tms:{doc:"OSGeo spec scheme."}},default:"xyz",doc:"Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source's tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_raster_dem:{type:{required:!0,type:"enum",values:{"raster-dem":{doc:"A RGB-encoded raster DEM source"}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},tileSize:{type:"number",default:512,units:"pixels",doc:"The minimum visual size to display tiles for this layer. Only configurable for raster layers."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},encoding:{type:"enum",values:{terrarium:{doc:"Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."},mapbox:{doc:"Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."}},default:"mapbox",doc:"The encoding used by this source. Mapbox Terrain RGB is used by default"},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source's tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_geojson:{type:{required:!0,type:"enum",values:{geojson:{doc:"A GeoJSON data source."}},doc:"The data type of the GeoJSON source."},data:{type:"*",doc:"A URL to a GeoJSON file, or inline GeoJSON."},maxzoom:{type:"number",default:18,doc:"Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},buffer:{type:"number",default:128,maximum:512,minimum:0,doc:"Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."},filter:{type:"*",doc:"An expression for filtering features prior to processing them for rendering."},tolerance:{type:"number",default:.375,doc:"Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."},cluster:{type:"boolean",default:!1,doc:"If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\n * `cluster` Is `true` if the point is a cluster \n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\n * `point_count` Number of original points grouped into this cluster\n * `point_count_abbreviated` An abbreviated point count"},clusterRadius:{type:"number",default:50,minimum:0,doc:"Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."},clusterMaxZoom:{type:"number",doc:"Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15."},clusterMinPoints:{type:"number",doc:"Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`."},clusterProperties:{type:"*",doc:'An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{"property_name": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `"+"` or `"max"`) â it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\n\nExample: `{"sum": ["+", ["get", "scalerank"]]}`.\n\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `["accumulated"]` value, e.g.:\n`{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}`'},lineMetrics:{type:"boolean",default:!1,doc:"Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."},generateId:{type:"boolean",default:!1,doc:"Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."},promoteId:{type:"promoteId",doc:"A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."}},source_video:{type:{required:!0,type:"enum",values:{video:{doc:"A video data source."}},doc:"The data type of the video source."},urls:{required:!0,type:"array",value:"string",doc:"URLs to video content in order of preferred format."},coordinates:{required:!0,doc:"Corners of video specified in longitude, latitude pairs.",type:"array",length:4,value:{type:"array",length:2,value:"number",doc:"A single longitude, latitude pair."}}},source_image:{type:{required:!0,type:"enum",values:{image:{doc:"An image data source."}},doc:"The data type of the image source."},url:{required:!0,type:"string",doc:"URL that points to an image."},coordinates:{required:!0,doc:"Corners of image specified in longitude, latitude pairs.",type:"array",length:4,value:{type:"array",length:2,value:"number",doc:"A single longitude, latitude pair."}}},layer:{id:{type:"string",doc:"Unique layer name.",required:!0},type:{type:"enum",values:{fill:{doc:"A filled polygon with an optional stroked border.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},line:{doc:"A stroked line.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},symbol:{doc:"An icon or a text label.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},circle:{doc:"A filled circle.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},heatmap:{doc:"A heatmap.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"fill-extrusion":{doc:"An extruded (3D) polygon.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},raster:{doc:"Raster map textures such as satellite imagery.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},hillshade:{doc:"Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},background:{doc:"The background color or pattern of the map.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},sky:{doc:"A spherical dome around the map that is always rendered behind all other layers.","sdk-support":{"basic functionality":{js:"2.0.0"}}}},doc:"Rendering type of this layer.",required:!0},metadata:{type:"*",doc:"Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."},source:{type:"string",doc:"Name of a source description to be used for this layer. Required for all layer types except `background`."},"source-layer":{type:"string",doc:"Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."},minzoom:{type:"number",minimum:0,maximum:24,doc:"The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."},maxzoom:{type:"number",minimum:0,maximum:24,doc:"The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."},filter:{type:"filter",doc:"A expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `feature-state` expression is not supported in filter expressions."},layout:{type:"layout",doc:"Layout properties for the layer."},paint:{type:"paint",doc:"Default paint properties for this layer."}},layout:["layout_fill","layout_line","layout_circle","layout_heatmap","layout_fill-extrusion","layout_symbol","layout_raster","layout_hillshade","layout_background","layout_sky"],layout_background:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_sky:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"2.0.0"}},"property-type":"constant"}},layout_fill:{"fill-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"},"data-driven styling":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_circle:{"circle-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.2.0",ios:"5.9.0",macos:"0.16.0"},"data-driven styling":{js:"1.2.0",android:"9.2.0",ios:"5.9.0",macos:"0.16.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_heatmap:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},"property-type":"constant"}},"layout_fill-extrusion":{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},"property-type":"constant"}},layout_line:{"line-cap":{type:"enum",values:{butt:{doc:"A cap with a squared-off end which is drawn to the exact endpoint of the line."},round:{doc:"A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."},square:{doc:"A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."}},default:"butt",doc:"The display of line endings.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"line-join":{type:"enum",values:{bevel:{doc:"A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."},round:{doc:"A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."},miter:{doc:"A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."}},default:"miter",doc:"The display of lines when joining.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-miter-limit":{type:"number",default:2,doc:"Used to automatically convert miter joins to bevel joins for sharp angles.",requires:[{"line-join":"miter"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-round-limit":{type:"number",default:1.05,doc:"Used to automatically convert round joins to miter joins for shallow angles.",requires:[{"line-join":"round"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"},"data-driven styling":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_symbol:{"symbol-placement":{type:"enum",values:{point:{doc:"The label is placed at the point where the geometry is located."},line:{doc:"The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."},"line-center":{doc:"The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."}},default:"point",doc:"Label placement relative to its geometry.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`line-center` value":{js:"0.47.0",android:"6.4.0",ios:"4.3.0",macos:"0.10.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"symbol-spacing":{type:"number",default:250,minimum:1,units:"pixels",doc:"Distance between two symbol anchors.",requires:[{"symbol-placement":"line"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"symbol-avoid-edges":{type:"boolean",default:!1,doc:"If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"symbol-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.","sdk-support":{"basic functionality":{js:"0.53.0",android:"7.4.0",ios:"4.11.0",macos:"0.14.0"},"data-driven styling":{js:"0.53.0",android:"7.4.0",ios:"4.11.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"symbol-z-order":{type:"enum",values:{auto:{doc:"Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."},"viewport-y":{doc:"Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."},source:{doc:"Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."}},default:"auto",doc:"Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.","sdk-support":{"basic functionality":{js:"0.49.0",android:"6.6.0",ios:"4.5.0",macos:"0.12.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-allow-overlap":{type:"boolean",default:!1,doc:"If true, the icon will be visible even if it collides with other previously drawn symbols.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-ignore-placement":{type:"boolean",default:!1,doc:"If true, other symbols can be visible even if they collide with the icon.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-optional":{type:"boolean",default:!1,doc:"If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",requires:["icon-image","text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-rotation-alignment":{type:"enum",values:{map:{doc:"When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."},viewport:{doc:"Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."},auto:{doc:"When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."}},default:"auto",doc:"In combination with `symbol-placement`, determines the rotation behavior of icons.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-size":{type:"number",default:1,minimum:0,units:"factor of the original icon size",doc:"Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-text-fit":{type:"enum",values:{none:{doc:"The icon is displayed at its intrinsic aspect ratio."},width:{doc:"The icon is scaled in the x-dimension to fit the width of the text."},height:{doc:"The icon is scaled in the y-dimension to fit the height of the text."},both:{doc:"The icon is scaled in both x- and y-dimensions."}},default:"none",doc:"Scales the icon to fit around the associated text.",requires:["icon-image","text-field"],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"},"stretchable icons":{js:"1.6.0",android:"9.2.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-text-fit-padding":{type:"array",value:"number",length:4,default:[0,0,0,0],units:"pixels",doc:"Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",requires:["icon-image","text-field",{"icon-text-fit":["both","width","height"]}],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-image":{type:"resolvedImage",doc:"Name of image in sprite to use for drawing an image background.",tokens:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-rotate":{type:"number",default:0,period:360,units:"degrees",doc:"Rotates the icon clockwise.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.21.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-padding":{type:"number",default:2,minimum:0,units:"pixels",doc:"Size of the additional area around the icon bounding box used for detecting symbol collisions.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-keep-upright":{type:"boolean",default:!1,doc:"If true, the icon may be flipped to prevent it from being rendered upside-down.",requires:["icon-image",{"icon-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-offset":{type:"array",value:"number",length:2,default:[0,0],doc:"Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-anchor":{type:"enum",values:{center:{doc:"The center of the icon is placed closest to the anchor."},left:{doc:"The left side of the icon is placed closest to the anchor."},right:{doc:"The right side of the icon is placed closest to the anchor."},top:{doc:"The top of the icon is placed closest to the anchor."},bottom:{doc:"The bottom of the icon is placed closest to the anchor."},"top-left":{doc:"The top left corner of the icon is placed closest to the anchor."},"top-right":{doc:"The top right corner of the icon is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the icon is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the icon is placed closest to the anchor."}},default:"center",doc:"Part of the icon placed closest to the anchor.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-pitch-alignment":{type:"enum",values:{map:{doc:"The icon is aligned to the plane of the map."},viewport:{doc:"The icon is aligned to the plane of the viewport."},auto:{doc:"Automatically matches the value of `icon-rotation-alignment`."}},default:"auto",doc:"Orientation of icon when map is pitched.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-pitch-alignment":{type:"enum",values:{map:{doc:"The text is aligned to the plane of the map."},viewport:{doc:"The text is aligned to the plane of the viewport."},auto:{doc:"Automatically matches the value of `text-rotation-alignment`."}},default:"auto",doc:"Orientation of text when map is pitched.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-rotation-alignment":{type:"enum",values:{map:{doc:"When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."},viewport:{doc:"Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."},auto:{doc:"When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."}},default:"auto",doc:"In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-field":{type:"formatted",default:"",tokens:!0,doc:"Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-font":{type:"array",value:"string",default:["Open Sans Regular","Arial Unicode MS Regular"],doc:"Font stack to use for displaying text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-size":{type:"number",default:16,minimum:0,units:"pixels",doc:"Font size.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-max-width":{type:"number",default:10,minimum:0,units:"ems",doc:"The maximum line width for text wrapping.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-line-height":{type:"number",default:1.2,units:"ems",doc:"Text leading value for multi-line text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-letter-spacing":{type:"number",default:0,units:"ems",doc:"Text tracking amount.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-justify":{type:"enum",values:{auto:{doc:"The text is aligned towards the anchor position."},left:{doc:"The text is aligned to the left."},center:{doc:"The text is centered."},right:{doc:"The text is aligned to the right."}},default:"center",doc:"Text justification options.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"},auto:{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-radial-offset":{type:"number",units:"ems",default:0,doc:"Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.","sdk-support":{"basic functionality":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"},"data-driven styling":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},requires:["text-field"],"property-type":"data-driven",expression:{interpolated:!0,parameters:["zoom","feature"]}},"text-variable-anchor":{type:"array",value:"enum",values:{center:{doc:"The center of the text is placed closest to the anchor."},left:{doc:"The left side of the text is placed closest to the anchor."},right:{doc:"The right side of the text is placed closest to the anchor."},top:{doc:"The top of the text is placed closest to the anchor."},bottom:{doc:"The bottom of the text is placed closest to the anchor."},"top-left":{doc:"The top left corner of the text is placed closest to the anchor."},"top-right":{doc:"The top right corner of the text is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the text is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the text is placed closest to the anchor."}},requires:["text-field",{"symbol-placement":["point"]}],doc:"To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.","sdk-support":{"basic functionality":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-anchor":{type:"enum",values:{center:{doc:"The center of the text is placed closest to the anchor."},left:{doc:"The left side of the text is placed closest to the anchor."},right:{doc:"The right side of the text is placed closest to the anchor."},top:{doc:"The top of the text is placed closest to the anchor."},bottom:{doc:"The bottom of the text is placed closest to the anchor."},"top-left":{doc:"The top left corner of the text is placed closest to the anchor."},"top-right":{doc:"The top right corner of the text is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the text is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the text is placed closest to the anchor."}},default:"center",doc:"Part of the text placed closest to the anchor.",requires:["text-field",{"!":"text-variable-anchor"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-max-angle":{type:"number",default:45,units:"degrees",doc:"Maximum angle change between adjacent characters.",requires:["text-field",{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-writing-mode":{type:"array",value:"enum",values:{horizontal:{doc:"If a text's language supports horizontal writing mode, symbols with point placement would be laid out horizontally."},vertical:{doc:"If a text's language supports vertical writing mode, symbols with point placement would be laid out vertically."}},doc:"The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesnât support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. The order of elements in an array define priority order for the placement of an orientation variant.",requires:["text-field",{"symbol-placement":["point"]}],"sdk-support":{"basic functionality":{js:"1.3.0",android:"8.3.0",ios:"5.3.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-rotate":{type:"number",default:0,period:360,units:"degrees",doc:"Rotates the text clockwise.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-padding":{type:"number",default:2,minimum:0,units:"pixels",doc:"Size of the additional area around the text bounding box used for detecting symbol collisions.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-keep-upright":{type:"boolean",default:!0,doc:"If true, the text may be flipped vertically to prevent it from being rendered upside-down.",requires:["text-field",{"text-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-transform":{type:"enum",values:{none:{doc:"The text is not altered."},uppercase:{doc:"Forces all letters to be displayed in uppercase."},lowercase:{doc:"Forces all letters to be displayed in lowercase."}},default:"none",doc:"Specifies how to capitalize text, similar to the CSS `text-transform` property.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-offset":{type:"array",doc:"Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",value:"number",units:"ems",length:2,default:[0,0],requires:["text-field",{"!":"text-radial-offset"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-allow-overlap":{type:"boolean",default:!1,doc:"If true, the text will be visible even if it collides with other previously drawn symbols.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-ignore-placement":{type:"boolean",default:!1,doc:"If true, other symbols can be visible even if they collide with the text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-optional":{type:"boolean",default:!1,doc:"If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",requires:["text-field","icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_raster:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_hillshade:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},"property-type":"constant"}},filter:{type:"array",value:"*",doc:"A filter selects specific features from a layer."},filter_operator:{type:"enum",values:{"==":{doc:'`["==", key, value]` equality: `feature[key] = value`'},"!=":{doc:'`["!=", key, value]` inequality: `feature[key] â  value`'},">":{doc:'`[">", key, value]` greater than: `feature[key] > value`'},">=":{doc:'`[">=", key, value]` greater than or equal: `feature[key] â¥ value`'},"<":{doc:'`["<", key, value]` less than: `feature[key] < value`'},"<=":{doc:'`["<=", key, value]` less than or equal: `feature[key] â¤ value`'},in:{doc:'`["in", key, v0, ..., vn]` set inclusion: `feature[key] â {v0, ..., vn}`'},"!in":{doc:'`["!in", key, v0, ..., vn]` set exclusion: `feature[key] â {v0, ..., vn}`'},all:{doc:'`["all", f0, ..., fn]` logical `AND`: `f0 â§ ... â§ fn`'},any:{doc:'`["any", f0, ..., fn]` logical `OR`: `f0 â¨ ... â¨ fn`'},none:{doc:'`["none", f0, ..., fn]` logical `NOR`: `Â¬f0 â§ ... â§ Â¬fn`'},has:{doc:'`["has", key]` `feature[key]` exists'},"!has":{doc:'`["!has", key]` `feature[key]` does not exist'},within:{doc:'`["within", object]` feature geometry is within object geometry'}},doc:"The filter operator."},geometry_type:{type:"enum",values:{Point:{doc:"Filter to point geometries."},LineString:{doc:"Filter to line geometries."},Polygon:{doc:"Filter to polygon geometries."}},doc:"The geometry type for the filter to select."},function:{expression:{type:"expression",doc:"An expression."},stops:{type:"array",doc:"An array of stops.",value:"function_stop"},base:{type:"number",default:1,minimum:0,doc:"The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."},property:{type:"string",doc:"The name of a feature property to use as the function input.",default:"$zoom"},type:{type:"enum",values:{identity:{doc:"Return the input value as the output value."},exponential:{doc:"Generate an output by interpolating between stops just less than and just greater than the function input."},interval:{doc:"Return the output value of the stop just less than the function input."},categorical:{doc:"Return the output value of the stop equal to the function input."}},doc:"The interpolation strategy to use in function evaluation.",default:"exponential"},colorSpace:{type:"enum",values:{rgb:{doc:"Use the RGB color space to interpolate color values"},lab:{doc:"Use the LAB color space to interpolate color values."},hcl:{doc:"Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."}},doc:"The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",default:"rgb"},default:{type:"*",required:!1,doc:"A value to serve as a fallback function result when a value isn't otherwise available. It is used in the following circumstances:\n* In categorical functions, when the feature value does not match any of the stop domain values.\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\nIf no default is provided, the style property's default is used in these circumstances."}},function_stop:{type:"array",minimum:0,maximum:24,value:["number","color"],length:2,doc:"Zoom level and value pair."},expression:{type:"array",value:"*",minimum:1,doc:"An expression defines a function that can be used for data-driven style properties or feature filters."},expression_name:{doc:"",type:"enum",values:{let:{doc:'Binds expressions to named variables, which can then be referenced in the result expression using ["var", "variable_name"].',group:"Variable binding","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},var:{doc:'References variable bound using "let".',group:"Variable binding","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},literal:{doc:"Provides a literal array or object value.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},array:{doc:"Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},at:{doc:"Retrieves an item from an array.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},in:{doc:"Determines whether an item exists in an array or a substring exists in a string.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.6.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}}},"index-of":{doc:"Returns the first position at which an item can be found in an array or a substring can be found in a string, or `-1` if the input cannot be found. Accepts an optional index from where to begin the search.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.10.0"}}},slice:{doc:"Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.10.0"}}},case:{doc:"Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},match:{doc:'Selects the output whose label value matches the input value, or the fallback value if no match is found. The input can be any expression (e.g. `["get", "building_type"]`). Each label must be either:\n - a single literal value; or\n - an array of literal values, whose values must be all strings or all numbers (e.g. `[100, 101]` or `["c", "b"]`). The input matches if any of the values in the array matches, similar to the `"in"` operator.\nEach label must be unique. If the input type does not match the type of the labels, the result will be the fallback value.',group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},coalesce:{doc:"Evaluates each expression in turn until the first non-null value is obtained, and returns that value.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},step:{doc:'Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},interpolate:{doc:'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\n\nInterpolation types:\n- `["linear"]`: Interpolates linearly between the pair of stops just less than and just greater than the input.\n- `["exponential", base]`: Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\n- `["cubic-bezier", x1, y1, x2, y2]`: Interpolates using the cubic bezier curve defined by the given control points.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"interpolate-hcl":{doc:'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.49.0"}}},"interpolate-lab":{doc:'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.49.0"}}},ln2:{doc:"Returns mathematical constant ln(2).",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},pi:{doc:"Returns the mathematical constant pi.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},e:{doc:"Returns the mathematical constant e.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},typeof:{doc:"Returns a string describing the type of the given value.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},string:{doc:"Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},number:{doc:"Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},boolean:{doc:"Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},object:{doc:"Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},collator:{doc:"Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",group:"Types","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},format:{doc:'Returns a `formatted` string for displaying mixed-format text in the `text-field` property. The input may contain a string literal or expression, including an [`\'image\'`](#types-image) expression. Strings may be followed by a style override object that supports the following properties:\n- `"text-font"`: Overrides the font stack specified by the root layout property.\n- `"text-color"`: Overrides the color specified by the root paint property.\n- `"font-scale"`: Applies a scaling factor on `text-size` as specified by the root layout property.',group:"Types","sdk-support":{"basic functionality":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"text-font":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"font-scale":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"text-color":{js:"1.3.0",android:"7.3.0",ios:"4.10.0",macos:"0.14.0"},image:{js:"1.6.0",android:"8.6.0",ios:"5.7.0",macos:"0.15.0"}}},image:{doc:"Returns an `image` type for use in `icon-image`, `*-pattern` entries and as a section in the `format` expression. If set, the `image` argument will check that the requested image exists in the style and will return either the resolved image name or `null`, depending on whether or not the image is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `image` argument.",group:"Types","sdk-support":{"basic functionality":{js:"1.4.0",android:"8.6.0",ios:"5.7.0",macos:"0.15.0"}}},"number-format":{doc:"Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",group:"Types","sdk-support":{"basic functionality":{js:"0.54.0"}}},"to-string":{doc:'Converts the input value to a string. If the input is `null`, the result is `""`. If the input is a boolean, the result is `"true"` or `"false"`. If the input is a number, it is converted to a string as specified by the ["NumberToString" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a color, it is converted to a string of the form `"rgba(r,g,b,a)"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.',group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-number":{doc:'Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the ["ToNumber Applied to the String Type" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.',group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-boolean":{doc:"Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-rgba":{doc:"Returns a four-element array containing the input color's red, green, blue, and alpha components, in that order.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-color":{doc:"Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},rgb:{doc:"Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},rgba:{doc:"Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},get:{doc:"Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns null if the requested property is missing.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},has:{doc:"Tests for the presence of an property value in the current feature's properties, or from another object if a second argument is provided.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},length:{doc:"Gets the length of an array or string.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},properties:{doc:'Gets the feature properties object.  Note that in some cases, it may be more efficient to use ["get", "property_name"] directly.',group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"feature-state":{doc:"Retrieves a property value from the current feature's state. Returns null if the requested property is not present on the feature's state. A feature's state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\"feature-state\"] can only be used with paint properties that support data-driven styling.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.46.0"}}},"geometry-type":{doc:"Gets the feature's geometry type: `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},id:{doc:"Gets the feature's id, if it has one.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},zoom:{doc:'Gets the current zoom level.  Note that in style layout and paint properties, ["zoom"] may only appear as the input to a top-level "step" or "interpolate" expression.',group:"Zoom","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"heatmap-density":{doc:"Gets the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",group:"Heatmap","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"line-progress":{doc:"Gets the progress along a gradient line. Can only be used in the `line-gradient` property.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.6.0",macos:"0.12.0"}}},"sky-radial-progress":{doc:"Gets the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches `sky-gradient-radius`. Can only be used in the `sky-gradient` property.",group:"sky","sdk-support":{"basic functionality":{js:"2.0.0"}}},accumulated:{doc:"Gets the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.53.0"}}},"+":{doc:"Returns the sum of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"*":{doc:"Returns the product of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"-":{doc:"For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"/":{doc:"Returns the result of floating point division of the first input by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"%":{doc:"Returns the remainder after integer division of the first input by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"^":{doc:"Returns the result of raising the first input to the power specified by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},sqrt:{doc:"Returns the square root of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},log10:{doc:"Returns the base-ten logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},ln:{doc:"Returns the natural logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},log2:{doc:"Returns the base-two logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},sin:{doc:"Returns the sine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},cos:{doc:"Returns the cosine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},tan:{doc:"Returns the tangent of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},asin:{doc:"Returns the arcsine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},acos:{doc:"Returns the arccosine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},atan:{doc:"Returns the arctangent of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},min:{doc:"Returns the minimum value of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},max:{doc:"Returns the maximum value of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},round:{doc:'Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `["round", -1.5]` evaluates to -2.',group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},abs:{doc:"Returns the absolute value of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},ceil:{doc:"Returns the smallest integer that is greater than or equal to the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},floor:{doc:"Returns the largest integer that is less than or equal to the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},distance:{doc:"Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.",group:"Math","sdk-support":{"basic functionality":{android:"9.2.0",ios:"5.9.0",macos:"0.16.0"}}},"==":{doc:"Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"!=":{doc:"Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},">":{doc:"Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"<":{doc:"Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},">=":{doc:"Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"<=":{doc:"Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},all:{doc:"Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},any:{doc:"Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"!":{doc:"Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},within:{doc:"Returns `true` if the evaluated feature is fully contained inside a boundary of the input geometry, `false` otherwise. The input value can be a valid GeoJSON of type `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Supported features for evaluation:\n- `Point`: Returns `false` if a point is on the boundary or falls outside the boundary.\n- `LineString`: Returns `false` if any part of a line falls outside the boundary, the line intersects the boundary, or a line's endpoint is on the boundary.",group:"Decision","sdk-support":{"basic functionality":{js:"1.9.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}}},"is-supported-script":{doc:"Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",group:"String","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.6.0"}}},upcase:{doc:"Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},downcase:{doc:"Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},concat:{doc:"Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"resolved-locale":{doc:"Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",group:"String","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}}}},light:{anchor:{type:"enum",default:"viewport",values:{map:{doc:"The position of the light source is aligned to the rotation of the map."},viewport:{doc:"The position of the light source is aligned to the rotation of the viewport."}},"property-type":"data-constant",transition:!1,expression:{interpolated:!1,parameters:["zoom"]},doc:"Whether extruded geometries are lit relative to the map or viewport.",example:"map","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},position:{type:"array",default:[1.15,210,30],length:3,value:"number","property-type":"data-constant",transition:!0,expression:{interpolated:!0,parameters:["zoom"]},doc:"Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0Â° (0Â° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0Â° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0Â°, directly above, to 180Â°, directly below).",example:[1.5,90,80],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},color:{type:"color","property-type":"data-constant",default:"#ffffff",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Color tint for lighting extruded geometries.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},intensity:{type:"number","property-type":"data-constant",default:.5,minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}}},terrain:{source:{type:"string",doc:"Name of a source of `raster_dem` type to be used for terrain elevation.",required:!0},exaggeration:{type:"number","property-type":"data-constant",default:1,minimum:0,maximum:1e3,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.","sdk-support":{"basic functionality":{js:"2.0.0"}}}},paint:["paint_fill","paint_line","paint_circle","paint_heatmap","paint_fill-extrusion","paint_symbol","paint_raster","paint_hillshade","paint_background","paint_sky"],paint_fill:{"fill-antialias":{type:"boolean",default:!0,doc:"Whether or not the fill should be antialiased.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.21.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-color":{type:"color",default:"#000000",doc:"The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",transition:!0,requires:[{"!":"fill-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.19.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-outline-color":{type:"color",doc:"The outline color of the fill. Matches the value of `fill-color` if unspecified.",transition:!0,requires:[{"!":"fill-pattern"},{"fill-antialias":!0}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.19.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-translate-anchor":{type:"enum",values:{map:{doc:"The fill is translated relative to the map."},viewport:{doc:"The fill is translated relative to the viewport."}},doc:"Controls the frame of reference for `fill-translate`.",default:"map",requires:["fill-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"}},"paint_fill-extrusion":{"fill-extrusion-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",transition:!0,"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-color":{type:"color",default:"#000000",doc:"The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",transition:!0,requires:[{"!":"fill-extrusion-pattern"}],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-translate-anchor":{type:"enum",values:{map:{doc:"The fill extrusion is translated relative to the map."},viewport:{doc:"The fill extrusion is translated relative to the viewport."}},doc:"Controls the frame of reference for `fill-extrusion-translate`.",default:"map",requires:["fill-extrusion-translate"],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"},"fill-extrusion-height":{type:"number",default:0,minimum:0,units:"meters",doc:"The height with which to extrude this layer.",transition:!0,"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-base":{type:"number",default:0,minimum:0,units:"meters",doc:"The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",transition:!0,requires:["fill-extrusion-height"],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-vertical-gradient":{type:"boolean",default:!0,doc:"Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",transition:!1,"sdk-support":{"basic functionality":{js:"0.50.0",ios:"4.7.0",macos:"0.13.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"}},paint_line:{"line-opacity":{type:"number",doc:"The opacity at which the line will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-color":{type:"color",doc:"The color with which the line will be drawn.",default:"#000000",transition:!0,requires:[{"!":"line-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.23.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-translate-anchor":{type:"enum",values:{map:{doc:"The line is translated relative to the map."},viewport:{doc:"The line is translated relative to the viewport."}},doc:"Controls the frame of reference for `line-translate`.",default:"map",requires:["line-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"line-width":{type:"number",default:1,minimum:0,transition:!0,units:"pixels",doc:"Stroke thickness.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-gap-width":{type:"number",default:0,minimum:0,doc:"Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",transition:!0,units:"pixels","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-offset":{type:"number",default:0,doc:"The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",transition:!0,units:"pixels","sdk-support":{"basic functionality":{js:"0.12.1",android:"3.0.0",ios:"3.1.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Blur applied to the line, in pixels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-dasharray":{type:"array",value:"number",doc:"Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",minimum:0,transition:!0,units:"line widths",requires:[{"!":"line-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"cross-faded"},"line-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"},"line-gradient":{type:"color",doc:'Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.',transition:!1,requires:[{"!":"line-dasharray"},{"!":"line-pattern"},{source:"geojson",has:{lineMetrics:!0}}],"sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.4.0",macos:"0.11.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["line-progress"]},"property-type":"color-ramp"}},paint_circle:{"circle-radius":{type:"number",default:5,minimum:0,transition:!0,units:"pixels",doc:"Circle radius.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.18.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-color":{type:"color",default:"#000000",doc:"The fill color of the circle.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.18.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-blur":{type:"number",default:0,doc:"Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.20.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-opacity":{type:"number",doc:"The opacity at which the circle will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.20.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"circle-translate-anchor":{type:"enum",values:{map:{doc:"The circle is translated relative to the map."},viewport:{doc:"The circle is translated relative to the viewport."}},doc:"Controls the frame of reference for `circle-translate`.",default:"map",requires:["circle-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-pitch-scale":{type:"enum",values:{map:{doc:"Circles are scaled according to their apparent distance to the camera."},viewport:{doc:"Circles are not scaled."}},default:"map",doc:"Controls the scaling behavior of the circle when the map is pitched.","sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-pitch-alignment":{type:"enum",values:{map:{doc:"The circle is aligned to the plane of the map."},viewport:{doc:"The circle is aligned to the plane of the viewport."}},default:"viewport",doc:"Orientation of circle when map is pitched.","sdk-support":{"basic functionality":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-stroke-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.","sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-color":{type:"color",default:"#000000",doc:"The stroke color of the circle.",transition:!0,"sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-opacity":{type:"number",doc:"The opacity of the circle's stroke.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"}},paint_heatmap:{"heatmap-radius":{type:"number",default:30,minimum:1,transition:!0,units:"pixels",doc:"Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-weight":{type:"number",default:1,minimum:0,transition:!1,doc:"A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-intensity":{type:"number",default:1,minimum:0,transition:!0,doc:"Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"heatmap-color":{type:"color",default:["interpolate",["linear"],["heatmap-density"],0,"rgba(0, 0, 255, 0)",.1,"royalblue",.3,"cyan",.5,"lime",.7,"yellow",1,"red"],doc:'Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmap-density"]` as input.',transition:!1,"sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["heatmap-density"]},"property-type":"color-ramp"},"heatmap-opacity":{type:"number",doc:"The global opacity at which the heatmap layer will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_symbol:{"icon-opacity":{doc:"The opacity at which the icon will be drawn.",type:"number",default:1,minimum:0,maximum:1,transition:!0,requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-color":{type:"color",default:"#000000",transition:!0,doc:"The color of the icon. This can only be used with sdf icons.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-color":{type:"color",default:"rgba(0, 0, 0, 0)",transition:!0,doc:"The color of the icon's halo. Icon halos can only be used with SDF icons.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Distance of halo to the icon outline.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Fade out the halo towards the outside.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-translate-anchor":{type:"enum",values:{map:{doc:"Icons are translated relative to the map."},viewport:{doc:"Icons are translated relative to the viewport."}},doc:"Controls the frame of reference for `icon-translate`.",default:"map",requires:["icon-image","icon-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-opacity":{type:"number",doc:"The opacity at which the text will be drawn.",default:1,minimum:0,maximum:1,transition:!0,requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-color":{type:"color",doc:"The color with which the text will be drawn.",default:"#000000",transition:!0,overridable:!0,requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-color":{type:"color",default:"rgba(0, 0, 0, 0)",transition:!0,doc:"The color of the text's halo, which helps it stand out from backgrounds.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"The halo's fadeout distance towards the outside.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-translate-anchor":{type:"enum",values:{map:{doc:"The text is translated relative to the map."},viewport:{doc:"The text is translated relative to the viewport."}},doc:"Controls the frame of reference for `text-translate`.",default:"map",requires:["text-field","text-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"}},paint_raster:{"raster-opacity":{type:"number",doc:"The opacity at which the image will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-hue-rotate":{type:"number",default:0,period:360,transition:!0,units:"degrees",doc:"Rotates hues around the color wheel.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-brightness-min":{type:"number",doc:"Increase or reduce the brightness of the image. The value is the minimum brightness.",default:0,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-brightness-max":{type:"number",doc:"Increase or reduce the brightness of the image. The value is the maximum brightness.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-saturation":{type:"number",doc:"Increase or reduce the saturation of the image.",default:0,minimum:-1,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-contrast":{type:"number",doc:"Increase or reduce the contrast of the image.",default:0,minimum:-1,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-resampling":{type:"enum",doc:"The resampling/interpolation method to use for overscaling, also known as texture magnification filter",values:{linear:{doc:"(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"},nearest:{doc:"Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"}},default:"linear","sdk-support":{"basic functionality":{js:"0.47.0",android:"6.3.0",ios:"4.2.0",macos:"0.9.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"raster-fade-duration":{type:"number",default:300,minimum:0,transition:!1,units:"milliseconds",doc:"Fade duration when a new tile is added.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_hillshade:{"hillshade-illumination-direction":{type:"number",default:335,minimum:0,maximum:359,doc:"The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",transition:!1,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-illumination-anchor":{type:"enum",values:{map:{doc:"The hillshade illumination is relative to the north direction."},viewport:{doc:"The hillshade illumination is relative to the top of the viewport."}},default:"viewport",doc:"Direction of light source when map is rotated.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-exaggeration":{type:"number",doc:"Intensity of the hillshade",default:.5,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-shadow-color":{type:"color",default:"#000000",doc:"The shading color of areas that face away from the light source.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-highlight-color":{type:"color",default:"#FFFFFF",doc:"The shading color of areas that faces towards the light source.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-accent-color":{type:"color",default:"#000000",doc:"The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_background:{"background-color":{type:"color",default:"#000000",doc:"The color with which the background will be drawn.",transition:!0,requires:[{"!":"background-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"background-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"cross-faded"},"background-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity at which the background will be drawn.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_sky:{"sky-type":{type:"enum",values:{gradient:{doc:"Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."},atmosphere:{doc:"Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."}},default:"atmosphere",doc:"The type of the sky","sdk-support":{"basic functionality":{js:"2.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun":{type:"array",value:"number",length:2,units:"degrees",minimum:[0,0],maximum:[360,180],transition:!1,doc:"Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0Â° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0Â° is directly above, at zenith, and 90Â° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.","sdk-support":{"basic functionality":{js:"2.0.0"}},requires:[{"sky-type":"atmosphere"}],expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun-intensity":{type:"number",requires:[{"sky-type":"atmosphere"}],default:10,minimum:0,maximum:100,transition:!1,doc:"Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.","sdk-support":{"basic functionality":{js:"2.0.0"}},"property-type":"data-constant"},"sky-gradient-center":{type:"array",requires:[{"sky-type":"gradient"}],value:"number",default:[0,0],length:2,units:"degrees",minimum:[0,0],maximum:[360,180],transition:!1,doc:"Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0Â° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0Â° is directly above, at zenith, and 90Â° at the horizon.","sdk-support":{"basic functionality":{js:"2.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-gradient-radius":{type:"number",requires:[{"sky-type":"gradient"}],default:90,minimum:0,maximum:180,transition:!1,doc:"The angular distance (measured in degrees) from `sky-gradient-center` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `sky-gradient-center`.","sdk-support":{"basic functionality":{js:"2.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-gradient":{type:"color",default:["interpolate",["linear"],["sky-radial-progress"],.8,"#87ceeb",1,"white"],doc:"Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `sky-radial-progress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `sky-gradient-radius`] centered at the position specified by `sky-gradient-center`.",transition:!1,requires:[{"sky-type":"gradient"}],"sdk-support":{"basic functionality":{js:"2.0.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["sky-radial-progress"]},"property-type":"color-ramp"},"sky-atmosphere-halo-color":{type:"color",default:"white",doc:"A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",transition:!1,requires:[{"sky-type":"atmosphere"}],"sdk-support":{"basic functionality":{js:"2.0.0"}},"property-type":"data-constant"},"sky-atmosphere-color":{type:"color",default:"white",doc:"A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",transition:!1,requires:[{"sky-type":"atmosphere"}],"sdk-support":{"basic functionality":{js:"2.0.0"}},"property-type":"data-constant"},"sky-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire sky layer.",transition:!0,"sdk-support":{"basic functionality":{js:"2.0.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},transition:{duration:{type:"number",default:300,minimum:0,units:"milliseconds",doc:"Time allotted for transitions to complete."},delay:{type:"number",default:0,minimum:0,units:"milliseconds",doc:"Length of time before a transition begins."}},"property-type":{"data-driven":{type:"property-type",doc:"Property is interpolable and can be represented using a property expression."},"cross-faded":{type:"property-type",doc:"Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms."},"cross-faded-data-driven":{type:"property-type",doc:"Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms. It can be represented using a property expression."},"color-ramp":{type:"property-type",doc:"Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."},"data-constant":{type:"property-type",doc:"Property is interpolable but cannot be represented using a property expression."},constant:{type:"property-type",doc:"Property is constant across all zoom levels and property values."}},promoteId:{"*":{type:"string",doc:"A name of a feature property to use as ID for feature state."}}},n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==o.g?o.g:"undefined"!=typeof self?self:{};function i(e,t){return e(t={exports:{}},t.exports),t.exports}var a=i((function(e,t){!function(o){var r=t&&!t.nodeType&&t,i=e&&!e.nodeType&&e,a="object"==typeof n&&n;a.global!==a&&a.window!==a&&a.self!==a||(o=a);var s,l,u=2147483647,c=36,p=/^xn--/,d=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},y=Math.floor,m=String.fromCharCode;function g(e){throw RangeError(f[e])}function b(e,t){for(var o=e.length,r=[];o--;)r[o]=t(e[o]);return r}function v(e,t){var o=e.split("@"),r="";return o.length>1&&(r=o[0]+"@",e=o[1]),r+b((e=e.replace(h,".")).split("."),t).join(".")}function x(e){for(var t,o,r=[],n=0,i=e.length;n<i;)(t=e.charCodeAt(n++))>=55296&&t<=56319&&n<i?56320==(64512&(o=e.charCodeAt(n++)))?r.push(((1023&t)<<10)+(1023&o)+65536):(r.push(t),n--):r.push(t);return r}function w(e){return b(e,(function(e){var t="";return e>65535&&(t+=m((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+m(e)})).join("")}function k(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function j(e,t,o){var r=0;for(e=o?y(e/700):e>>1,e+=y(e/t);e>455;r+=c)e=y(e/35);return y(r+36*e/(e+38))}function z(e){var t,o,r,n,i,a,s,l,p,d,h,f=[],m=e.length,b=0,v=128,x=72;for((o=e.lastIndexOf("-"))<0&&(o=0),r=0;r<o;++r)e.charCodeAt(r)>=128&&g("not-basic"),f.push(e.charCodeAt(r));for(n=o>0?o+1:0;n<m;){for(i=b,a=1,s=c;n>=m&&g("invalid-input"),((l=(h=e.charCodeAt(n++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:c)>=c||l>y((u-b)/a))&&g("overflow"),b+=l*a,!(l<(p=s<=x?1:s>=x+26?26:s-x));s+=c)a>y(u/(d=c-p))&&g("overflow"),a*=d;x=j(b-i,t=f.length+1,0==i),y(b/t)>u-v&&g("overflow"),v+=y(b/t),b%=t,f.splice(b++,0,v)}return w(f)}function S(e){var t,o,r,n,i,a,s,l,p,d,h,f,b,v,w,z=[];for(f=(e=x(e)).length,t=128,o=0,i=72,a=0;a<f;++a)(h=e[a])<128&&z.push(m(h));for(r=n=z.length,n&&z.push("-");r<f;){for(s=u,a=0;a<f;++a)(h=e[a])>=t&&h<s&&(s=h);for(s-t>y((u-o)/(b=r+1))&&g("overflow"),o+=(s-t)*b,t=s,a=0;a<f;++a)if((h=e[a])<t&&++o>u&&g("overflow"),h==t){for(l=o,p=c;!(l<(d=p<=i?1:p>=i+26?26:p-i));p+=c)w=l-d,v=c-d,z.push(m(k(d+w%v,0))),l=y(w/v);z.push(m(k(l,0))),i=j(o,b,r==n),o=0,++r}++o,++t}return z.join("")}if(s={version:"1.3.2",ucs2:{decode:x,encode:w},decode:z,encode:S,toASCII:function(e){return v(e,(function(e){return d.test(e)?"xn--"+S(e):e}))},toUnicode:function(e){return v(e,(function(e){return p.test(e)?z(e.slice(4).toLowerCase()):e}))}},r&&i)if(e.exports==r)i.exports=s;else for(l in s)s.hasOwnProperty(l)&&(r[l]=s[l]);else o.punycode=s}(n)})),s=function(e){return"string"==typeof e},l=function(e){return"object"==typeof e&&null!==e},u=function(e){return null===e};function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var p=function(e,t,o,r){t=t||"&",o=o||"=";var n={};if("string"!=typeof e||0===e.length)return n;var i=/\+/g;e=e.split(t);var a=1e3;r&&"number"==typeof r.maxKeys&&(a=r.maxKeys);var s=e.length;a>0&&s>a&&(s=a);for(var l=0;l<s;++l){var u,p,d,h,f=e[l].replace(i,"%20"),y=f.indexOf(o);y>=0?(u=f.substr(0,y),p=f.substr(y+1)):(u=f,p=""),d=decodeURIComponent(u),h=decodeURIComponent(p),c(n,d)?Array.isArray(n[d])?n[d].push(h):n[d]=[n[d],h]:n[d]=h}return n},d=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},h=function(e,t,o,r){return t=t||"&",o=o||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(r){var n=encodeURIComponent(d(r))+o;return Array.isArray(e[r])?e[r].map((function(e){return n+encodeURIComponent(d(e))})).join(t):n+encodeURIComponent(d(e[r]))})).join(t):r?encodeURIComponent(d(r))+o+encodeURIComponent(d(e)):""},f=i((function(e,t){t.decode=t.parse=p,t.encode=t.stringify=h}));function y(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}f.decode,f.parse,f.encode,f.stringify;var m=/^([a-z0-9.+-]+:)/i,g=/:[0-9]*$/,b=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,v=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),x=["'"].concat(v),w=["%","/","?",";","#"].concat(x),k=["/","?","#"],j=/^[+a-z0-9A-Z_-]{0,63}$/,z=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,S={javascript:!0,"javascript:":!0},T={javascript:!0,"javascript:":!0},_={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function C(e,...t){for(const o of t)for(const t in o)e[t]=o[t];return e}y.prototype.parse=function(e,t,o){if(!s(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var r=e.indexOf("?"),n=-1!==r&&r<e.indexOf("#")?"?":"#",i=e.split(n);i[0]=i[0].replace(/\\/g,"/");var l=e=i.join(n);if(l=l.trim(),!o&&1===e.split("#").length){var u=b.exec(l);if(u)return this.path=l,this.href=l,this.pathname=u[1],u[2]?(this.search=u[2],this.query=t?f.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var c=m.exec(l);if(c){var p=(c=c[0]).toLowerCase();this.protocol=p,l=l.substr(c.length)}if(o||c||l.match(/^\/\/[^@\/]+@[^@\/]+/)){var d="//"===l.substr(0,2);!d||c&&T[c]||(l=l.substr(2),this.slashes=!0)}if(!T[c]&&(d||c&&!_[c])){for(var h,y,g=-1,v=0;v<k.length;v++)-1!==(C=l.indexOf(k[v]))&&(-1===g||C<g)&&(g=C);for(-1!==(y=-1===g?l.lastIndexOf("@"):l.lastIndexOf("@",g))&&(h=l.slice(0,y),l=l.slice(y+1),this.auth=decodeURIComponent(h)),g=-1,v=0;v<w.length;v++){var C;-1!==(C=l.indexOf(w[v]))&&(-1===g||C<g)&&(g=C)}-1===g&&(g=l.length),this.host=l.slice(0,g),l=l.slice(g),this.parseHost(),this.hostname=this.hostname||"";var A="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!A)for(var E=this.hostname.split(/\./),I=(v=0,E.length);v<I;v++){var $=E[v];if($&&!$.match(j)){for(var q="",O=0,R=$.length;O<R;O++)$.charCodeAt(O)>127?q+="x":q+=$[O];if(!q.match(j)){var M=E.slice(0,v),L=E.slice(v+1),N=$.match(z);N&&(M.push(N[1]),L.unshift(N[2])),L.length&&(l="/"+L.join(".")+l),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),A||(this.hostname=a.toASCII(this.hostname));var D=this.port?":"+this.port:"",P=this.hostname||"";this.host=P+D,this.href+=this.host,A&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==l[0]&&(l="/"+l))}if(!S[p])for(v=0,I=x.length;v<I;v++){var F=x[v];if(-1!==l.indexOf(F)){var U=encodeURIComponent(F);U===F&&(U=escape(F)),l=l.split(F).join(U)}}var B=l.indexOf("#");-1!==B&&(this.hash=l.substr(B),l=l.slice(0,B));var J=l.indexOf("?");if(-1!==J?(this.search=l.substr(J),this.query=l.substr(J+1),t&&(this.query=f.parse(this.query)),l=l.slice(0,J)):t&&(this.search="",this.query={}),l&&(this.pathname=l),_[p]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){D=this.pathname||"";var W=this.search||"";this.path=D+W}return this.href=this.format(),this},y.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",o=this.pathname||"",r=this.hash||"",n=!1,i="";this.host?n=e+this.host:this.hostname&&(n=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(n+=":"+this.port)),this.query&&l(this.query)&&Object.keys(this.query).length&&(i=f.stringify(this.query));var a=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||_[t])&&!1!==n?(n="//"+(n||""),o&&"/"!==o.charAt(0)&&(o="/"+o)):n||(n=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),t+n+(o=o.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+r},y.prototype.resolve=function(e){return this.resolveObject(function(e,t,o){if(e&&l(e)&&e instanceof y)return e;var r=new y;return r.parse(e,t,o),r}(e,!1,!0)).format()},y.prototype.resolveObject=function(e){if(s(e)){var t=new y;t.parse(e,!1,!0),e=t}for(var o=new y,r=Object.keys(this),n=0;n<r.length;n++){var i=r[n];o[i]=this[i]}if(o.hash=e.hash,""===e.href)return o.href=o.format(),o;if(e.slashes&&!e.protocol){for(var a=Object.keys(e),l=0;l<a.length;l++){var c=a[l];"protocol"!==c&&(o[c]=e[c])}return _[o.protocol]&&o.hostname&&!o.pathname&&(o.path=o.pathname="/"),o.href=o.format(),o}if(e.protocol&&e.protocol!==o.protocol){if(!_[e.protocol]){for(var p=Object.keys(e),d=0;d<p.length;d++){var h=p[d];o[h]=e[h]}return o.href=o.format(),o}if(o.protocol=e.protocol,e.host||T[e.protocol])o.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),o.pathname=f.join("/")}if(o.search=e.search,o.query=e.query,o.host=e.host||"",o.auth=e.auth,o.hostname=e.hostname||e.host,o.port=e.port,o.pathname||o.search){var m=o.pathname||"",g=o.search||"";o.path=m+g}return o.slashes=o.slashes||e.slashes,o.href=o.format(),o}var b=o.pathname&&"/"===o.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=v||b||o.host&&e.pathname,w=x,k=o.pathname&&o.pathname.split("/")||[],j=(f=e.pathname&&e.pathname.split("/")||[],o.protocol&&!_[o.protocol]);if(j&&(o.hostname="",o.port=null,o.host&&(""===k[0]?k[0]=o.host:k.unshift(o.host)),o.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===k[0])),v)o.host=e.host||""===e.host?e.host:o.host,o.hostname=e.hostname||""===e.hostname?e.hostname:o.hostname,o.search=e.search,o.query=e.query,k=f;else if(f.length)k||(k=[]),k.pop(),k=k.concat(f),o.search=e.search,o.query=e.query;else if(null!=e.search)return j&&(o.hostname=o.host=k.shift(),(E=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@"))&&(o.auth=E.shift(),o.host=o.hostname=E.shift())),o.search=e.search,o.query=e.query,u(o.pathname)&&u(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.href=o.format(),o;if(!k.length)return o.pathname=null,o.search?o.path="/"+o.search:o.path=null,o.href=o.format(),o;for(var z=k.slice(-1)[0],S=(o.host||e.host||k.length>1)&&("."===z||".."===z)||""===z,C=0,A=k.length;A>=0;A--)"."===(z=k[A])?k.splice(A,1):".."===z?(k.splice(A,1),C++):C&&(k.splice(A,1),C--);if(!x&&!w)for(;C--;C)k.unshift("..");!x||""===k[0]||k[0]&&"/"===k[0].charAt(0)||k.unshift(""),S&&"/"!==k.join("/").substr(-1)&&k.push("");var E,I=""===k[0]||k[0]&&"/"===k[0].charAt(0);return j&&(o.hostname=o.host=I?"":k.length?k.shift():"",(E=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@"))&&(o.auth=E.shift(),o.host=o.hostname=E.shift())),(x=x||o.host&&k.length)&&!I&&k.unshift(""),k.length?o.pathname=k.join("/"):(o.pathname=null,o.path=null),u(o.pathname)&&u(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.auth=e.auth||o.auth,o.slashes=o.slashes||e.slashes,o.href=o.format(),o},y.prototype.parseHost=function(){var e=this.host,t=g.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)};class A extends Error{constructor(e,t){super(t),this.message=t,this.key=e}}class E{constructor(e,t=[]){this.parent=e,this.bindings={};for(const[e,o]of t)this.bindings[e]=o}concat(e){return new E(this,e)}get(e){if(this.bindings[e])return this.bindings[e];if(this.parent)return this.parent.get(e);throw new Error(`${e} not found in scope.`)}has(e){return!!this.bindings[e]||!!this.parent&&this.parent.has(e)}}const I={kind:"null"},$={kind:"number"},q={kind:"string"},O={kind:"boolean"},R={kind:"color"},M={kind:"object"},L={kind:"value"},N={kind:"collator"},D={kind:"formatted"},P={kind:"resolvedImage"};function F(e,t){return{kind:"array",itemType:e,N:t}}function U(e){if("array"===e.kind){const t=U(e.itemType);return"number"==typeof e.N?`array<${t}, ${e.N}>`:"value"===e.itemType.kind?"array":`array<${t}>`}return e.kind}const B=[I,$,q,O,R,D,M,F(L),P];function J(e,t){if("error"===t.kind)return null;if("array"===e.kind){if("array"===t.kind&&(0===t.N&&"value"===t.itemType.kind||!J(e.itemType,t.itemType))&&("number"!=typeof e.N||e.N===t.N))return null}else{if(e.kind===t.kind)return null;if("value"===e.kind)for(const e of B)if(!J(e,t))return null}return`Expected ${U(e)} but found ${U(t)} instead.`}function W(e,t){return t.some((t=>t.kind===e.kind))}function G(e,t){return t.some((t=>"null"===t?null===e:"array"===t?Array.isArray(e):"object"===t?e&&!Array.isArray(e)&&"object"==typeof e:t===typeof e))}var V=i((function(e,t){var o={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],rebeccapurple:[102,51,153,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]};function r(e){return(e=Math.round(e))<0?0:e>255?255:e}function n(e){return e<0?0:e>1?1:e}function i(e){return"%"===e[e.length-1]?r(parseFloat(e)/100*255):r(parseInt(e))}function a(e){return"%"===e[e.length-1]?n(parseFloat(e)/100):n(parseFloat(e))}function s(e,t,o){return o<0?o+=1:o>1&&(o-=1),6*o<1?e+(t-e)*o*6:2*o<1?t:3*o<2?e+(t-e)*(2/3-o)*6:e}try{t.parseCSSColor=function(e){var t,n=e.replace(/ /g,"").toLowerCase();if(n in o)return o[n].slice();if("#"===n[0])return 4===n.length?(t=parseInt(n.substr(1),16))>=0&&t<=4095?[(3840&t)>>4|(3840&t)>>8,240&t|(240&t)>>4,15&t|(15&t)<<4,1]:null:7===n.length&&(t=parseInt(n.substr(1),16))>=0&&t<=16777215?[(16711680&t)>>16,(65280&t)>>8,255&t,1]:null;var l=n.indexOf("("),u=n.indexOf(")");if(-1!==l&&u+1===n.length){var c=n.substr(0,l),p=n.substr(l+1,u-(l+1)).split(","),d=1;switch(c){case"rgba":if(4!==p.length)return null;d=a(p.pop());case"rgb":return 3!==p.length?null:[i(p[0]),i(p[1]),i(p[2]),d];case"hsla":if(4!==p.length)return null;d=a(p.pop());case"hsl":if(3!==p.length)return null;var h=(parseFloat(p[0])%360+360)%360/360,f=a(p[1]),y=a(p[2]),m=y<=.5?y*(f+1):y+f-y*f,g=2*y-m;return[r(255*s(g,m,h+1/3)),r(255*s(g,m,h)),r(255*s(g,m,h-1/3)),d];default:return null}}return null}}catch(e){}})).parseCSSColor;class H{constructor(e,t,o,r=1){this.r=e,this.g=t,this.b=o,this.a=r}static parse(e){if(!e)return;if(e instanceof H)return e;if("string"!=typeof e)return;const t=V(e);return t?new H(t[0]/255*t[3],t[1]/255*t[3],t[2]/255*t[3],t[3]):void 0}toString(){const[e,t,o,r]=this.toArray();return`rgba(${Math.round(e)},${Math.round(t)},${Math.round(o)},${r})`}toArray(){const{r:e,g:t,b:o,a:r}=this;return 0===r?[0,0,0,0]:[255*e/r,255*t/r,255*o/r,r]}}H.black=new H(0,0,0,1),H.white=new H(1,1,1,1),H.transparent=new H(0,0,0,0),H.red=new H(1,0,0,1),H.blue=new H(0,0,1,1);class X{constructor(e,t,o){this.sensitivity=e?t?"variant":"case":t?"accent":"base",this.locale=o,this.collator=new Intl.Collator(this.locale?this.locale:[],{sensitivity:this.sensitivity,usage:"search"})}compare(e,t){return this.collator.compare(e,t)}resolvedLocale(){return new Intl.Collator(this.locale?this.locale:[]).resolvedOptions().locale}}class Z{constructor(e,t,o,r,n){this.text=e,this.image=t,this.scale=o,this.fontStack=r,this.textColor=n}}class K{constructor(e){this.sections=e}static fromString(e){return new K([new Z(e,null,null,null,null)])}isEmpty(){return 0===this.sections.length||!this.sections.some((e=>0!==e.text.length||e.image&&0!==e.image.name.length))}static factory(e){return e instanceof K?e:K.fromString(e)}toString(){return 0===this.sections.length?"":this.sections.map((e=>e.text)).join("")}serialize(){const e=["format"];for(const t of this.sections){if(t.image){e.push(["image",t.image.name]);continue}e.push(t.text);const o={};t.fontStack&&(o["text-font"]=["literal",t.fontStack.split(",")]),t.scale&&(o["font-scale"]=t.scale),t.textColor&&(o["text-color"]=["rgba"].concat(t.textColor.toArray())),e.push(o)}return e}}class Y{constructor(e){this.name=e.name,this.available=e.available}toString(){return this.name}static fromString(e){return e?new Y({name:e,available:!1}):null}serialize(){return["image",this.name]}}function Q(e,t,o,r){return"number"==typeof e&&e>=0&&e<=255&&"number"==typeof t&&t>=0&&t<=255&&"number"==typeof o&&o>=0&&o<=255?void 0===r||"number"==typeof r&&r>=0&&r<=1?null:`Invalid rgba value [${[e,t,o,r].join(", ")}]: 'a' must be between 0 and 1.`:`Invalid rgba value [${("number"==typeof r?[e,t,o,r]:[e,t,o]).join(", ")}]: 'r', 'g', and 'b' must be between 0 and 255.`}function ee(e){if(null===e)return!0;if("string"==typeof e)return!0;if("boolean"==typeof e)return!0;if("number"==typeof e)return!0;if(e instanceof H)return!0;if(e instanceof X)return!0;if(e instanceof K)return!0;if(e instanceof Y)return!0;if(Array.isArray(e)){for(const t of e)if(!ee(t))return!1;return!0}if("object"==typeof e){for(const t in e)if(!ee(e[t]))return!1;return!0}return!1}function te(e){if(null===e)return I;if("string"==typeof e)return q;if("boolean"==typeof e)return O;if("number"==typeof e)return $;if(e instanceof H)return R;if(e instanceof X)return N;if(e instanceof K)return D;if(e instanceof Y)return P;if(Array.isArray(e)){const t=e.length;let o;for(const t of e){const e=te(t);if(o){if(o===e)continue;o=L;break}o=e}return F(o||L,t)}return M}function oe(e){const t=typeof e;return null===e?"":"string"===t||"number"===t||"boolean"===t?String(e):e instanceof H||e instanceof K||e instanceof Y?e.toString():JSON.stringify(e)}class re{constructor(e,t){this.type=e,this.value=t}static parse(e,t){if(2!==e.length)return t.error(`'literal' expression requires exactly one argument, but found ${e.length-1} instead.`);if(!ee(e[1]))return t.error("invalid value");const o=e[1];let r=te(o);const n=t.expectedType;return"array"!==r.kind||0!==r.N||!n||"array"!==n.kind||"number"==typeof n.N&&0!==n.N||(r=n),new re(r,o)}evaluate(){return this.value}eachChild(){}outputDefined(){return!0}serialize(){return"array"===this.type.kind||"object"===this.type.kind?["literal",this.value]:this.value instanceof H?["rgba"].concat(this.value.toArray()):this.value instanceof K?this.value.serialize():this.value}}class ne{constructor(e){this.name="ExpressionEvaluationError",this.message=e}toJSON(){return this.message}}const ie={string:q,number:$,boolean:O,object:M};class ae{constructor(e,t){this.type=e,this.args=t}static parse(e,t){if(e.length<2)return t.error("Expected at least one argument.");let o,r=1;const n=e[0];if("array"===n){let n,i;if(e.length>2){const o=e[1];if("string"!=typeof o||!(o in ie)||"object"===o)return t.error('The item type argument of "array" must be one of string, number, boolean',1);n=ie[o],r++}else n=L;if(e.length>3){if(null!==e[2]&&("number"!=typeof e[2]||e[2]<0||e[2]!==Math.floor(e[2])))return t.error('The length argument to "array" must be a positive integer literal',2);i=e[2],r++}o=F(n,i)}else o=ie[n];const i=[];for(;r<e.length;r++){const o=t.parse(e[r],r,L);if(!o)return null;i.push(o)}return new ae(o,i)}evaluate(e){for(let t=0;t<this.args.length;t++){const o=this.args[t].evaluate(e);if(!J(this.type,te(o)))return o;if(t===this.args.length-1)throw new ne(`Expected value to be of type ${U(this.type)}, but found ${U(te(o))} instead.`)}return null}eachChild(e){this.args.forEach(e)}outputDefined(){return this.args.every((e=>e.outputDefined()))}serialize(){const e=this.type,t=[e.kind];if("array"===e.kind){const o=e.itemType;if("string"===o.kind||"number"===o.kind||"boolean"===o.kind){t.push(o.kind);const r=e.N;("number"==typeof r||this.args.length>1)&&t.push(r)}}return t.concat(this.args.map((e=>e.serialize())))}}class se{constructor(e){this.type=D,this.sections=e}static parse(e,t){if(e.length<2)return t.error("Expected at least one argument.");const o=e[1];if(!Array.isArray(o)&&"object"==typeof o)return t.error("First argument must be an image or text section.");const r=[];let n=!1;for(let o=1;o<=e.length-1;++o){const i=e[o];if(n&&"object"==typeof i&&!Array.isArray(i)){n=!1;let e=null;if(i["font-scale"]&&(e=t.parse(i["font-scale"],1,$),!e))return null;let o=null;if(i["text-font"]&&(o=t.parse(i["text-font"],1,F(q)),!o))return null;let a=null;if(i["text-color"]&&(a=t.parse(i["text-color"],1,R),!a))return null;const s=r[r.length-1];s.scale=e,s.font=o,s.textColor=a}else{const i=t.parse(e[o],1,L);if(!i)return null;const a=i.type.kind;if("string"!==a&&"value"!==a&&"null"!==a&&"resolvedImage"!==a)return t.error("Formatted text type must be 'string', 'value', 'image' or 'null'.");n=!0,r.push({content:i,scale:null,font:null,textColor:null})}}return new se(r)}evaluate(e){return new K(this.sections.map((t=>{const o=t.content.evaluate(e);return te(o)===P?new Z("",o,null,null,null):new Z(oe(o),null,t.scale?t.scale.evaluate(e):null,t.font?t.font.evaluate(e).join(","):null,t.textColor?t.textColor.evaluate(e):null)})))}eachChild(e){for(const t of this.sections)e(t.content),t.scale&&e(t.scale),t.font&&e(t.font),t.textColor&&e(t.textColor)}outputDefined(){return!1}serialize(){const e=["format"];for(const t of this.sections){e.push(t.content.serialize());const o={};t.scale&&(o["font-scale"]=t.scale.serialize()),t.font&&(o["text-font"]=t.font.serialize()),t.textColor&&(o["text-color"]=t.textColor.serialize()),e.push(o)}return e}}class le{constructor(e){this.type=P,this.input=e}static parse(e,t){if(2!==e.length)return t.error("Expected two arguments.");const o=t.parse(e[1],1,q);return o?new le(o):t.error("No image name provided.")}evaluate(e){const t=this.input.evaluate(e),o=Y.fromString(t);return o&&e.availableImages&&(o.available=e.availableImages.indexOf(t)>-1),o}eachChild(e){e(this.input)}outputDefined(){return!1}serialize(){return["image",this.input.serialize()]}}const ue={"to-boolean":O,"to-color":R,"to-number":$,"to-string":q};class ce{constructor(e,t){this.type=e,this.args=t}static parse(e,t){if(e.length<2)return t.error("Expected at least one argument.");const o=e[0];if(("to-boolean"===o||"to-string"===o)&&2!==e.length)return t.error("Expected one argument.");const r=ue[o],n=[];for(let o=1;o<e.length;o++){const r=t.parse(e[o],o,L);if(!r)return null;n.push(r)}return new ce(r,n)}evaluate(e){if("boolean"===this.type.kind)return Boolean(this.args[0].evaluate(e));if("color"===this.type.kind){let t,o;for(const r of this.args){if(t=r.evaluate(e),o=null,t instanceof H)return t;if("string"==typeof t){const o=e.parseColor(t);if(o)return o}else if(Array.isArray(t)&&(o=t.length<3||t.length>4?`Invalid rbga value ${JSON.stringify(t)}: expected an array containing either three or four numeric values.`:Q(t[0],t[1],t[2],t[3]),!o))return new H(t[0]/255,t[1]/255,t[2]/255,t[3])}throw new ne(o||`Could not parse color from value '${"string"==typeof t?t:String(JSON.stringify(t))}'`)}if("number"===this.type.kind){let t=null;for(const o of this.args){if(t=o.evaluate(e),null===t)return 0;const r=Number(t);if(!isNaN(r))return r}throw new ne(`Could not convert ${JSON.stringify(t)} to number.`)}return"formatted"===this.type.kind?K.fromString(oe(this.args[0].evaluate(e))):"resolvedImage"===this.type.kind?Y.fromString(oe(this.args[0].evaluate(e))):oe(this.args[0].evaluate(e))}eachChild(e){this.args.forEach(e)}outputDefined(){return this.args.every((e=>e.outputDefined()))}serialize(){if("formatted"===this.type.kind)return new se([{content:this.args[0],scale:null,font:null,textColor:null}]).serialize();if("resolvedImage"===this.type.kind)return new le(this.args[0]).serialize();const e=[`to-${this.type.kind}`];return this.eachChild((t=>{e.push(t.serialize())})),e}}const pe=["Unknown","Point","LineString","Polygon"];class de{constructor(){this.globals=null,this.feature=null,this.featureState=null,this.formattedSection=null,this._parseColorCache={},this.availableImages=null,this.canonical=null}id(){return this.feature&&"id"in this.feature?this.feature.id:null}geometryType(){return this.feature?"number"==typeof this.feature.type?pe[this.feature.type]:this.feature.type:null}geometry(){return this.feature&&"geometry"in this.feature?this.feature.geometry:null}canonicalID(){return this.canonical}properties(){return this.feature&&this.feature.properties||{}}parseColor(e){let t=this._parseColorCache[e];return t||(t=this._parseColorCache[e]=H.parse(e)),t}}class he{constructor(e,t,o,r){this.name=e,this.type=t,this._evaluate=o,this.args=r}evaluate(e){return this._evaluate(e,this.args)}eachChild(e){this.args.forEach(e)}outputDefined(){return!1}serialize(){return[this.name].concat(this.args.map((e=>e.serialize())))}static parse(e,t){const o=e[0],r=he.definitions[o];if(!r)return t.error(`Unknown expression "${o}". If you wanted a literal array, use ["literal", [...]].`,0);const n=Array.isArray(r)?r[0]:r.type,i=Array.isArray(r)?[[r[1],r[2]]]:r.overloads,a=i.filter((([t])=>!Array.isArray(t)||t.length===e.length-1));let s=null;for(const[r,i]of a){s=new Le(t.registry,t.path,null,t.scope);const a=[];let l=!1;for(let t=1;t<e.length;t++){const o=e[t],n=Array.isArray(r)?r[t-1]:r.type,i=s.parse(o,1+a.length,n);if(!i){l=!0;break}a.push(i)}if(!l)if(Array.isArray(r)&&r.length!==a.length)s.error(`Expected ${r.length} arguments, but found ${a.length} instead.`);else{for(let e=0;e<a.length;e++){const t=Array.isArray(r)?r[e]:r.type,o=a[e];s.concat(e+1).checkSubtype(t,o.type)}if(0===s.errors.length)return new he(o,n,i,a)}}if(1===a.length)t.errors.push(...s.errors);else{const o=(a.length?a:i).map((([e])=>{return t=e,Array.isArray(t)?`(${t.map(U).join(", ")})`:`(${U(t.type)}...)`;var t})).join(" | "),r=[];for(let o=1;o<e.length;o++){const n=t.parse(e[o],1+r.length);if(!n)return null;r.push(U(n.type))}t.error(`Expected arguments of type ${o}, but found (${r.join(", ")}) instead.`)}return null}static register(e,t){he.definitions=t;for(const o in t)e[o]=he}}class fe{constructor(e,t,o){this.type=N,this.locale=o,this.caseSensitive=e,this.diacriticSensitive=t}static parse(e,t){if(2!==e.length)return t.error("Expected one argument.");const o=e[1];if("object"!=typeof o||Array.isArray(o))return t.error("Collator options argument must be an object.");const r=t.parse(void 0!==o["case-sensitive"]&&o["case-sensitive"],1,O);if(!r)return null;const n=t.parse(void 0!==o["diacritic-sensitive"]&&o["diacritic-sensitive"],1,O);if(!n)return null;let i=null;return o.locale&&(i=t.parse(o.locale,1,q),!i)?null:new fe(r,n,i)}evaluate(e){return new X(this.caseSensitive.evaluate(e),this.diacriticSensitive.evaluate(e),this.locale?this.locale.evaluate(e):null)}eachChild(e){e(this.caseSensitive),e(this.diacriticSensitive),this.locale&&e(this.locale)}outputDefined(){return!1}serialize(){const e={};return e["case-sensitive"]=this.caseSensitive.serialize(),e["diacritic-sensitive"]=this.diacriticSensitive.serialize(),this.locale&&(e.locale=this.locale.serialize()),["collator",e]}}const ye=8192;function me(e,t){e[0]=Math.min(e[0],t[0]),e[1]=Math.min(e[1],t[1]),e[2]=Math.max(e[2],t[0]),e[3]=Math.max(e[3],t[1])}function ge(e,t){return!(e[0]<=t[0]||e[2]>=t[2]||e[1]<=t[1]||e[3]>=t[3])}function be(e,t){const o=(180+e[0])/360,r=(n=e[1],(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+n*Math.PI/360)))/360);var n;const i=Math.pow(2,t.z);return[Math.round(o*i*ye),Math.round(r*i*ye)]}function ve(e,t,o){const r=e[0]-t[0],n=e[1]-t[1],i=e[0]-o[0],a=e[1]-o[1];return r*a-i*n==0&&r*i<=0&&n*a<=0}function xe(e,t){let o=!1;for(let a=0,s=t.length;a<s;a++){const s=t[a];for(let t=0,a=s.length;t<a-1;t++){if(ve(e,s[t],s[t+1]))return!1;r=e,n=s[t],i=s[t+1],n[1]>r[1]!=i[1]>r[1]&&r[0]<(i[0]-n[0])*(r[1]-n[1])/(i[1]-n[1])+n[0]&&(o=!o)}}var r,n,i;return o}function we(e,t){for(let o=0;o<t.length;o++)if(xe(e,t[o]))return!0;return!1}function ke(e,t,o,r){const n=e[0]-o[0],i=e[1]-o[1],a=t[0]-o[0],s=t[1]-o[1],l=r[0]-o[0],u=r[1]-o[1],c=n*u-l*i,p=a*u-l*s;return c>0&&p<0||c<0&&p>0}function je(e,t,o,r){const n=[t[0]-e[0],t[1]-e[1]];return 0!=(i=[r[0]-o[0],r[1]-o[1]])[0]*(a=n)[1]-i[1]*a[0]&&!(!ke(e,t,o,r)||!ke(o,r,e,t));var i,a}function ze(e,t,o){for(const r of o)for(let o=0;o<r.length-1;++o)if(je(e,t,r[o],r[o+1]))return!0;return!1}function Se(e,t){for(let o=0;o<e.length;++o)if(!xe(e[o],t))return!1;for(let o=0;o<e.length-1;++o)if(ze(e[o],e[o+1],t))return!1;return!0}function Te(e,t){for(let o=0;o<t.length;o++)if(Se(e,t[o]))return!0;return!1}function _e(e,t,o){const r=[];for(let n=0;n<e.length;n++){const i=[];for(let r=0;r<e[n].length;r++){const a=be(e[n][r],o);me(t,a),i.push(a)}r.push(i)}return r}function Ce(e,t,o){const r=[];for(let n=0;n<e.length;n++){const i=_e(e[n],t,o);r.push(i)}return r}function Ae(e,t,o,r){if(e[0]<o[0]||e[0]>o[2]){const t=.5*r;let n=e[0]-o[0]>t?-r:o[0]-e[0]>t?r:0;0===n&&(n=e[0]-o[2]>t?-r:o[2]-e[0]>t?r:0),e[0]+=n}me(t,e)}function Ee(e,t,o,r){const n=Math.pow(2,r.z)*ye,i=[r.x*ye,r.y*ye],a=[];for(const r of e)for(const e of r){const r=[e.x+i[0],e.y+i[1]];Ae(r,t,o,n),a.push(r)}return a}function Ie(e,t,o,r){const n=Math.pow(2,r.z)*ye,i=[r.x*ye,r.y*ye],a=[];for(const o of e){const e=[];for(const r of o){const o=[r.x+i[0],r.y+i[1]];me(t,o),e.push(o)}a.push(e)}if(t[2]-t[0]<=n/2){(s=t)[0]=s[1]=1/0,s[2]=s[3]=-1/0;for(const e of a)for(const r of e)Ae(r,t,o,n)}var s;return a}class $e{constructor(e,t){this.type=O,this.geojson=e,this.geometries=t}static parse(e,t){if(2!==e.length)return t.error(`'within' expression requires exactly one argument, but found ${e.length-1} instead.`);if(ee(e[1])){const t=e[1];if("FeatureCollection"===t.type)for(let e=0;e<t.features.length;++e){const o=t.features[e].geometry.type;if("Polygon"===o||"MultiPolygon"===o)return new $e(t,t.features[e].geometry)}else if("Feature"===t.type){const e=t.geometry.type;if("Polygon"===e||"MultiPolygon"===e)return new $e(t,t.geometry)}else if("Polygon"===t.type||"MultiPolygon"===t.type)return new $e(t,t)}return t.error("'within' expression requires valid geojson object that contains polygon geometry type.")}evaluate(e){if(null!=e.geometry()&&null!=e.canonicalID()){if("Point"===e.geometryType())return function(e,t){const o=[1/0,1/0,-1/0,-1/0],r=[1/0,1/0,-1/0,-1/0],n=e.canonicalID();if("Polygon"===t.type){const i=_e(t.coordinates,r,n),a=Ee(e.geometry(),o,r,n);if(!ge(o,r))return!1;for(const e of a)if(!xe(e,i))return!1}if("MultiPolygon"===t.type){const i=Ce(t.coordinates,r,n),a=Ee(e.geometry(),o,r,n);if(!ge(o,r))return!1;for(const e of a)if(!we(e,i))return!1}return!0}(e,this.geometries);if("LineString"===e.geometryType())return function(e,t){const o=[1/0,1/0,-1/0,-1/0],r=[1/0,1/0,-1/0,-1/0],n=e.canonicalID();if("Polygon"===t.type){const i=_e(t.coordinates,r,n),a=Ie(e.geometry(),o,r,n);if(!ge(o,r))return!1;for(const e of a)if(!Se(e,i))return!1}if("MultiPolygon"===t.type){const i=Ce(t.coordinates,r,n),a=Ie(e.geometry(),o,r,n);if(!ge(o,r))return!1;for(const e of a)if(!Te(e,i))return!1}return!0}(e,this.geometries)}return!1}eachChild(){}outputDefined(){return!0}serialize(){return["within",this.geojson]}}function qe(e){if(e instanceof he){if("get"===e.name&&1===e.args.length)return!1;if("feature-state"===e.name)return!1;if("has"===e.name&&1===e.args.length)return!1;if("properties"===e.name||"geometry-type"===e.name||"id"===e.name)return!1;if(/^filter-/.test(e.name))return!1}if(e instanceof $e)return!1;let t=!0;return e.eachChild((e=>{t&&!qe(e)&&(t=!1)})),t}function Oe(e){if(e instanceof he&&"feature-state"===e.name)return!1;let t=!0;return e.eachChild((e=>{t&&!Oe(e)&&(t=!1)})),t}function Re(e,t){if(e instanceof he&&t.indexOf(e.name)>=0)return!1;let o=!0;return e.eachChild((e=>{o&&!Re(e,t)&&(o=!1)})),o}class Me{constructor(e,t){this.type=t.type,this.name=e,this.boundExpression=t}static parse(e,t){if(2!==e.length||"string"!=typeof e[1])return t.error("'var' expression requires exactly one string literal argument.");const o=e[1];return t.scope.has(o)?new Me(o,t.scope.get(o)):t.error(`Unknown variable "${o}". Make sure "${o}" has been bound in an enclosing "let" expression before using it.`,1)}evaluate(e){return this.boundExpression.evaluate(e)}eachChild(){}outputDefined(){return!1}serialize(){return["var",this.name]}}class Le{constructor(e,t=[],o,r=new E,n=[]){this.registry=e,this.path=t,this.key=t.map((e=>`[${e}]`)).join(""),this.scope=r,this.errors=n,this.expectedType=o}parse(e,t,o,r,n={}){return t?this.concat(t,o,r)._parse(e,n):this._parse(e,n)}_parse(e,t){function o(e,t,o){return"assert"===o?new ae(t,[e]):"coerce"===o?new ce(t,[e]):e}if(null!==e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e||(e=["literal",e]),Array.isArray(e)){if(0===e.length)return this.error('Expected an array with at least one element. If you wanted a literal array, use ["literal", []].');const r=e[0];if("string"!=typeof r)return this.error(`Expression name must be a string, but found ${typeof r} instead. If you wanted a literal array, use ["literal", [...]].`,0),null;const n=this.registry[r];if(n){let r=n.parse(e,this);if(!r)return null;if(this.expectedType){const e=this.expectedType,n=r.type;if("string"!==e.kind&&"number"!==e.kind&&"boolean"!==e.kind&&"object"!==e.kind&&"array"!==e.kind||"value"!==n.kind)if("color"!==e.kind&&"formatted"!==e.kind&&"resolvedImage"!==e.kind||"value"!==n.kind&&"string"!==n.kind){if(this.checkSubtype(e,n))return null}else r=o(r,e,t.typeAnnotation||"coerce");else r=o(r,e,t.typeAnnotation||"assert")}if(!(r instanceof re)&&"resolvedImage"!==r.type.kind&&Ne(r)){const e=new de;try{r=new re(r.type,r.evaluate(e))}catch(e){return this.error(e.message),null}}return r}return this.error(`Unknown expression "${r}". If you wanted a literal array, use ["literal", [...]].`,0)}return void 0===e?this.error("'undefined' value invalid. Use null instead."):"object"==typeof e?this.error('Bare objects invalid. Use ["literal", {...}] instead.'):this.error(`Expected an array, but found ${typeof e} instead.`)}concat(e,t,o){const r="number"==typeof e?this.path.concat(e):this.path,n=o?this.scope.concat(o):this.scope;return new Le(this.registry,r,t||null,n,this.errors)}error(e,...t){const o=`${this.key}${t.map((e=>`[${e}]`)).join("")}`;this.errors.push(new A(o,e))}checkSubtype(e,t){const o=J(e,t);return o&&this.error(o),o}}function Ne(e){if(e instanceof Me)return Ne(e.boundExpression);if(e instanceof he&&"error"===e.name)return!1;if(e instanceof fe)return!1;if(e instanceof $e)return!1;const t=e instanceof ce||e instanceof ae;let o=!0;return e.eachChild((e=>{o=t?o&&Ne(e):o&&e instanceof re})),!!o&&qe(e)&&Re(e,["zoom","heatmap-density","line-progress","sky-radial-progress","accumulated","is-supported-script"])}function De(e,t){const o=e.length-1;let r,n,i=0,a=o,s=0;for(;i<=a;)if(s=Math.floor((i+a)/2),r=e[s],n=e[s+1],r<=t){if(s===o||t<n)return s;i=s+1}else{if(!(r>t))throw new ne("Input is not a number.");a=s-1}return 0}class Pe{constructor(e,t,o){this.type=e,this.input=t,this.labels=[],this.outputs=[];for(const[e,t]of o)this.labels.push(e),this.outputs.push(t)}static parse(e,t){if(e.length-1<4)return t.error(`Expected at least 4 arguments, but found only ${e.length-1}.`);if((e.length-1)%2!=0)return t.error("Expected an even number of arguments.");const o=t.parse(e[1],1,$);if(!o)return null;const r=[];let n=null;t.expectedType&&"value"!==t.expectedType.kind&&(n=t.expectedType);for(let o=1;o<e.length;o+=2){const i=1===o?-1/0:e[o],a=e[o+1],s=o,l=o+1;if("number"!=typeof i)return t.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.',s);if(r.length&&r[r.length-1][0]>=i)return t.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.',s);const u=t.parse(a,l,n);if(!u)return null;n=n||u.type,r.push([i,u])}return new Pe(n,o,r)}evaluate(e){const t=this.labels,o=this.outputs;if(1===t.length)return o[0].evaluate(e);const r=this.input.evaluate(e);if(r<=t[0])return o[0].evaluate(e);const n=t.length;return r>=t[n-1]?o[n-1].evaluate(e):o[De(t,r)].evaluate(e)}eachChild(e){e(this.input);for(const t of this.outputs)e(t)}outputDefined(){return this.outputs.every((e=>e.outputDefined()))}serialize(){const e=["step",this.input.serialize()];for(let t=0;t<this.labels.length;t++)t>0&&e.push(this.labels[t]),e.push(this.outputs[t].serialize());return e}}var Fe=Ue;function Ue(e,t,o,r){this.cx=3*e,this.bx=3*(o-e)-this.cx,this.ax=1-this.cx-this.bx,this.cy=3*t,this.by=3*(r-t)-this.cy,this.ay=1-this.cy-this.by,this.p1x=e,this.p1y=r,this.p2x=o,this.p2y=r}function Be(e,t,o){return e*(1-o)+t*o}Ue.prototype.sampleCurveX=function(e){return((this.ax*e+this.bx)*e+this.cx)*e},Ue.prototype.sampleCurveY=function(e){return((this.ay*e+this.by)*e+this.cy)*e},Ue.prototype.sampleCurveDerivativeX=function(e){return(3*this.ax*e+2*this.bx)*e+this.cx},Ue.prototype.solveCurveX=function(e,t){var o,r,n,i,a;for(void 0===t&&(t=1e-6),n=e,a=0;a<8;a++){if(i=this.sampleCurveX(n)-e,Math.abs(i)<t)return n;var s=this.sampleCurveDerivativeX(n);if(Math.abs(s)<1e-6)break;n-=i/s}if((n=e)<(o=0))return o;if(n>(r=1))return r;for(;o<r;){if(i=this.sampleCurveX(n),Math.abs(i-e)<t)return n;e>i?o=n:r=n,n=.5*(r-o)+o}return n},Ue.prototype.solve=function(e,t){return this.sampleCurveY(this.solveCurveX(e,t))};var Je=Object.freeze({__proto__:null,number:Be,color:function(e,t,o){return new H(Be(e.r,t.r,o),Be(e.g,t.g,o),Be(e.b,t.b,o),Be(e.a,t.a,o))},array:function(e,t,o){return e.map(((e,r)=>Be(e,t[r],o)))}});const We=.95047,Ge=1.08883,Ve=4/29,He=6/29,Xe=3*He*He,Ze=Math.PI/180,Ke=180/Math.PI;function Ye(e){return e>.008856451679035631?Math.pow(e,1/3):e/Xe+Ve}function Qe(e){return e>He?e*e*e:Xe*(e-Ve)}function et(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function tt(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function ot(e){const t=tt(e.r),o=tt(e.g),r=tt(e.b),n=Ye((.4124564*t+.3575761*o+.1804375*r)/We),i=Ye((.2126729*t+.7151522*o+.072175*r)/1);return{l:116*i-16,a:500*(n-i),b:200*(i-Ye((.0193339*t+.119192*o+.9503041*r)/Ge)),alpha:e.a}}function rt(e){let t=(e.l+16)/116,o=isNaN(e.a)?t:t+e.a/500,r=isNaN(e.b)?t:t-e.b/200;return t=1*Qe(t),o=We*Qe(o),r=Ge*Qe(r),new H(et(3.2404542*o-1.5371385*t-.4985314*r),et(-.969266*o+1.8760108*t+.041556*r),et(.0556434*o-.2040259*t+1.0572252*r),e.alpha)}function nt(e,t,o){const r=t-e;return e+o*(r>180||r<-180?r-360*Math.round(r/360):r)}const it={forward:ot,reverse:rt,interpolate:function(e,t,o){return{l:Be(e.l,t.l,o),a:Be(e.a,t.a,o),b:Be(e.b,t.b,o),alpha:Be(e.alpha,t.alpha,o)}}},at={forward:function(e){const{l:t,a:o,b:r}=ot(e),n=Math.atan2(r,o)*Ke;return{h:n<0?n+360:n,c:Math.sqrt(o*o+r*r),l:t,alpha:e.a}},reverse:function(e){const t=e.h*Ze,o=e.c;return rt({l:e.l,a:Math.cos(t)*o,b:Math.sin(t)*o,alpha:e.alpha})},interpolate:function(e,t,o){return{h:nt(e.h,t.h,o),c:Be(e.c,t.c,o),l:Be(e.l,t.l,o),alpha:Be(e.alpha,t.alpha,o)}}};var st=Object.freeze({__proto__:null,lab:it,hcl:at});class lt{constructor(e,t,o,r,n){this.type=e,this.operator=t,this.interpolation=o,this.input=r,this.labels=[],this.outputs=[];for(const[e,t]of n)this.labels.push(e),this.outputs.push(t)}static interpolationFactor(e,t,o,r){let n=0;if("exponential"===e.name)n=ut(t,e.base,o,r);else if("linear"===e.name)n=ut(t,1,o,r);else if("cubic-bezier"===e.name){const i=e.controlPoints;n=new Fe(i[0],i[1],i[2],i[3]).solve(ut(t,1,o,r))}return n}static parse(e,t){let[o,r,n,...i]=e;if(!Array.isArray(r)||0===r.length)return t.error("Expected an interpolation type expression.",1);if("linear"===r[0])r={name:"linear"};else if("exponential"===r[0]){const e=r[1];if("number"!=typeof e)return t.error("Exponential interpolation requires a numeric base.",1,1);r={name:"exponential",base:e}}else{if("cubic-bezier"!==r[0])return t.error(`Unknown interpolation type ${String(r[0])}`,1,0);{const e=r.slice(1);if(4!==e.length||e.some((e=>"number"!=typeof e||e<0||e>1)))return t.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.",1);r={name:"cubic-bezier",controlPoints:e}}}if(e.length-1<4)return t.error(`Expected at least 4 arguments, but found only ${e.length-1}.`);if((e.length-1)%2!=0)return t.error("Expected an even number of arguments.");if(n=t.parse(n,2,$),!n)return null;const a=[];let s=null;"interpolate-hcl"===o||"interpolate-lab"===o?s=R:t.expectedType&&"value"!==t.expectedType.kind&&(s=t.expectedType);for(let e=0;e<i.length;e+=2){const o=i[e],r=i[e+1],n=e+3,l=e+4;if("number"!=typeof o)return t.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.',n);if(a.length&&a[a.length-1][0]>=o)return t.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.',n);const u=t.parse(r,l,s);if(!u)return null;s=s||u.type,a.push([o,u])}return"number"===s.kind||"color"===s.kind||"array"===s.kind&&"number"===s.itemType.kind&&"number"==typeof s.N?new lt(s,o,r,n,a):t.error(`Type ${U(s)} is not interpolatable.`)}evaluate(e){const t=this.labels,o=this.outputs;if(1===t.length)return o[0].evaluate(e);const r=this.input.evaluate(e);if(r<=t[0])return o[0].evaluate(e);const n=t.length;if(r>=t[n-1])return o[n-1].evaluate(e);const i=De(t,r),a=t[i],s=t[i+1],l=lt.interpolationFactor(this.interpolation,r,a,s),u=o[i].evaluate(e),c=o[i+1].evaluate(e);return"interpolate"===this.operator?Je[this.type.kind.toLowerCase()](u,c,l):"interpolate-hcl"===this.operator?at.reverse(at.interpolate(at.forward(u),at.forward(c),l)):it.reverse(it.interpolate(it.forward(u),it.forward(c),l))}eachChild(e){e(this.input);for(const t of this.outputs)e(t)}outputDefined(){return this.outputs.every((e=>e.outputDefined()))}serialize(){let e;e="linear"===this.interpolation.name?["linear"]:"exponential"===this.interpolation.name?1===this.interpolation.base?["linear"]:["exponential",this.interpolation.base]:["cubic-bezier"].concat(this.interpolation.controlPoints);const t=[this.operator,e,this.input.serialize()];for(let e=0;e<this.labels.length;e++)t.push(this.labels[e],this.outputs[e].serialize());return t}}function ut(e,t,o,r){const n=r-o,i=e-o;return 0===n?0:1===t?i/n:(Math.pow(t,i)-1)/(Math.pow(t,n)-1)}class ct{constructor(e,t){this.type=e,this.args=t}static parse(e,t){if(e.length<2)return t.error("Expectected at least one argument.");let o=null;const r=t.expectedType;r&&"value"!==r.kind&&(o=r);const n=[];for(const r of e.slice(1)){const e=t.parse(r,1+n.length,o,void 0,{typeAnnotation:"omit"});if(!e)return null;o=o||e.type,n.push(e)}const i=r&&n.some((e=>J(r,e.type)));return new ct(i?L:o,n)}evaluate(e){let t,o=null,r=0;for(const n of this.args)if(r++,o=n.evaluate(e),o&&o instanceof Y&&!o.available&&(t||(t=o.name),o=null,r===this.args.length&&(o=t)),null!==o)break;return o}eachChild(e){this.args.forEach(e)}outputDefined(){return this.args.every((e=>e.outputDefined()))}serialize(){const e=["coalesce"];return this.eachChild((t=>{e.push(t.serialize())})),e}}class pt{constructor(e,t){this.type=t.type,this.bindings=[].concat(e),this.result=t}evaluate(e){return this.result.evaluate(e)}eachChild(e){for(const t of this.bindings)e(t[1]);e(this.result)}static parse(e,t){if(e.length<4)return t.error(`Expected at least 3 arguments, but found ${e.length-1} instead.`);const o=[];for(let r=1;r<e.length-1;r+=2){const n=e[r];if("string"!=typeof n)return t.error(`Expected string, but found ${typeof n} instead.`,r);if(/[^a-zA-Z0-9_]/.test(n))return t.error("Variable names must contain only alphanumeric characters or '_'.",r);const i=t.parse(e[r+1],r+1);if(!i)return null;o.push([n,i])}const r=t.parse(e[e.length-1],e.length-1,t.expectedType,o);return r?new pt(o,r):null}outputDefined(){return this.result.outputDefined()}serialize(){const e=["let"];for(const[t,o]of this.bindings)e.push(t,o.serialize());return e.push(this.result.serialize()),e}}class dt{constructor(e,t,o){this.type=e,this.index=t,this.input=o}static parse(e,t){if(3!==e.length)return t.error(`Expected 2 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,$),r=t.parse(e[2],2,F(t.expectedType||L));if(!o||!r)return null;const n=r.type;return new dt(n.itemType,o,r)}evaluate(e){const t=this.index.evaluate(e),o=this.input.evaluate(e);if(t<0)throw new ne(`Array index out of bounds: ${t} < 0.`);if(t>=o.length)throw new ne(`Array index out of bounds: ${t} > ${o.length-1}.`);if(t!==Math.floor(t))throw new ne(`Array index must be an integer, but found ${t} instead.`);return o[t]}eachChild(e){e(this.index),e(this.input)}outputDefined(){return!1}serialize(){return["at",this.index.serialize(),this.input.serialize()]}}class ht{constructor(e,t){this.type=O,this.needle=e,this.haystack=t}static parse(e,t){if(3!==e.length)return t.error(`Expected 2 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,L),r=t.parse(e[2],2,L);return o&&r?W(o.type,[O,q,$,I,L])?new ht(o,r):t.error(`Expected first argument to be of type boolean, string, number or null, but found ${U(o.type)} instead`):null}evaluate(e){const t=this.needle.evaluate(e),o=this.haystack.evaluate(e);if(!o)return!1;if(!G(t,["boolean","string","number","null"]))throw new ne(`Expected first argument to be of type boolean, string, number or null, but found ${U(te(t))} instead.`);if(!G(o,["string","array"]))throw new ne(`Expected second argument to be of type array or string, but found ${U(te(o))} instead.`);return o.indexOf(t)>=0}eachChild(e){e(this.needle),e(this.haystack)}outputDefined(){return!0}serialize(){return["in",this.needle.serialize(),this.haystack.serialize()]}}class ft{constructor(e,t,o){this.type=$,this.needle=e,this.haystack=t,this.fromIndex=o}static parse(e,t){if(e.length<=2||e.length>=5)return t.error(`Expected 3 or 4 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,L),r=t.parse(e[2],2,L);if(!o||!r)return null;if(!W(o.type,[O,q,$,I,L]))return t.error(`Expected first argument to be of type boolean, string, number or null, but found ${U(o.type)} instead`);if(4===e.length){const n=t.parse(e[3],3,$);return n?new ft(o,r,n):null}return new ft(o,r)}evaluate(e){const t=this.needle.evaluate(e),o=this.haystack.evaluate(e);if(!G(t,["boolean","string","number","null"]))throw new ne(`Expected first argument to be of type boolean, string, number or null, but found ${U(te(t))} instead.`);if(!G(o,["string","array"]))throw new ne(`Expected second argument to be of type array or string, but found ${U(te(o))} instead.`);if(this.fromIndex){const r=this.fromIndex.evaluate(e);return o.indexOf(t,r)}return o.indexOf(t)}eachChild(e){e(this.needle),e(this.haystack),this.fromIndex&&e(this.fromIndex)}outputDefined(){return!1}serialize(){if(null!=this.fromIndex&&void 0!==this.fromIndex){const e=this.fromIndex.serialize();return["index-of",this.needle.serialize(),this.haystack.serialize(),e]}return["index-of",this.needle.serialize(),this.haystack.serialize()]}}class yt{constructor(e,t,o,r,n,i){this.inputType=e,this.type=t,this.input=o,this.cases=r,this.outputs=n,this.otherwise=i}static parse(e,t){if(e.length<5)return t.error(`Expected at least 4 arguments, but found only ${e.length-1}.`);if(e.length%2!=1)return t.error("Expected an even number of arguments.");let o,r;t.expectedType&&"value"!==t.expectedType.kind&&(r=t.expectedType);const n={},i=[];for(let a=2;a<e.length-1;a+=2){let s=e[a];const l=e[a+1];Array.isArray(s)||(s=[s]);const u=t.concat(a);if(0===s.length)return u.error("Expected at least one branch label.");for(const e of s){if("number"!=typeof e&&"string"!=typeof e)return u.error("Branch labels must be numbers or strings.");if("number"==typeof e&&Math.abs(e)>Number.MAX_SAFE_INTEGER)return u.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);if("number"==typeof e&&Math.floor(e)!==e)return u.error("Numeric branch labels must be integer values.");if(o){if(u.checkSubtype(o,te(e)))return null}else o=te(e);if(void 0!==n[String(e)])return u.error("Branch labels must be unique.");n[String(e)]=i.length}const c=t.parse(l,a,r);if(!c)return null;r=r||c.type,i.push(c)}const a=t.parse(e[1],1,L);if(!a)return null;const s=t.parse(e[e.length-1],e.length-1,r);return s?"value"!==a.type.kind&&t.concat(1).checkSubtype(o,a.type)?null:new yt(o,r,a,n,i,s):null}evaluate(e){const t=this.input.evaluate(e);return(te(t)===this.inputType&&this.outputs[this.cases[t]]||this.otherwise).evaluate(e)}eachChild(e){e(this.input),this.outputs.forEach(e),e(this.otherwise)}outputDefined(){return this.outputs.every((e=>e.outputDefined()))&&this.otherwise.outputDefined()}serialize(){const e=["match",this.input.serialize()],t=Object.keys(this.cases).sort(),o=[],r={};for(const e of t){const t=r[this.cases[e]];void 0===t?(r[this.cases[e]]=o.length,o.push([this.cases[e],[e]])):o[t][1].push(e)}const n=e=>"number"===this.inputType.kind?Number(e):e;for(const[t,r]of o)1===r.length?e.push(n(r[0])):e.push(r.map(n)),e.push(this.outputs[t].serialize());return e.push(this.otherwise.serialize()),e}}class mt{constructor(e,t,o){this.type=e,this.branches=t,this.otherwise=o}static parse(e,t){if(e.length<4)return t.error(`Expected at least 3 arguments, but found only ${e.length-1}.`);if(e.length%2!=0)return t.error("Expected an odd number of arguments.");let o;t.expectedType&&"value"!==t.expectedType.kind&&(o=t.expectedType);const r=[];for(let n=1;n<e.length-1;n+=2){const i=t.parse(e[n],n,O);if(!i)return null;const a=t.parse(e[n+1],n+1,o);if(!a)return null;r.push([i,a]),o=o||a.type}const n=t.parse(e[e.length-1],e.length-1,o);return n?new mt(o,r,n):null}evaluate(e){for(const[t,o]of this.branches)if(t.evaluate(e))return o.evaluate(e);return this.otherwise.evaluate(e)}eachChild(e){for(const[t,o]of this.branches)e(t),e(o);e(this.otherwise)}outputDefined(){return this.branches.every((([e,t])=>t.outputDefined()))&&this.otherwise.outputDefined()}serialize(){const e=["case"];return this.eachChild((t=>{e.push(t.serialize())})),e}}class gt{constructor(e,t,o,r){this.type=e,this.input=t,this.beginIndex=o,this.endIndex=r}static parse(e,t){if(e.length<=2||e.length>=5)return t.error(`Expected 3 or 4 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,L),r=t.parse(e[2],2,$);if(!o||!r)return null;if(!W(o.type,[F(L),q,L]))return t.error(`Expected first argument to be of type array or string, but found ${U(o.type)} instead`);if(4===e.length){const n=t.parse(e[3],3,$);return n?new gt(o.type,o,r,n):null}return new gt(o.type,o,r)}evaluate(e){const t=this.input.evaluate(e),o=this.beginIndex.evaluate(e);if(!G(t,["string","array"]))throw new ne(`Expected first argument to be of type array or string, but found ${U(te(t))} instead.`);if(this.endIndex){const r=this.endIndex.evaluate(e);return t.slice(o,r)}return t.slice(o)}eachChild(e){e(this.input),e(this.beginIndex),this.endIndex&&e(this.endIndex)}outputDefined(){return!1}serialize(){if(null!=this.endIndex&&void 0!==this.endIndex){const e=this.endIndex.serialize();return["slice",this.input.serialize(),this.beginIndex.serialize(),e]}return["slice",this.input.serialize(),this.beginIndex.serialize()]}}function bt(e,t){return"=="===e||"!="===e?"boolean"===t.kind||"string"===t.kind||"number"===t.kind||"null"===t.kind||"value"===t.kind:"string"===t.kind||"number"===t.kind||"value"===t.kind}function vt(e,t,o,r){return 0===r.compare(t,o)}function xt(e,t,o){const r="=="!==e&&"!="!==e;return class n{constructor(e,t,o){this.type=O,this.lhs=e,this.rhs=t,this.collator=o,this.hasUntypedArgument="value"===e.type.kind||"value"===t.type.kind}static parse(e,t){if(3!==e.length&&4!==e.length)return t.error("Expected two or three arguments.");const o=e[0];let i=t.parse(e[1],1,L);if(!i)return null;if(!bt(o,i.type))return t.concat(1).error(`"${o}" comparisons are not supported for type '${U(i.type)}'.`);let a=t.parse(e[2],2,L);if(!a)return null;if(!bt(o,a.type))return t.concat(2).error(`"${o}" comparisons are not supported for type '${U(a.type)}'.`);if(i.type.kind!==a.type.kind&&"value"!==i.type.kind&&"value"!==a.type.kind)return t.error(`Cannot compare types '${U(i.type)}' and '${U(a.type)}'.`);r&&("value"===i.type.kind&&"value"!==a.type.kind?i=new ae(a.type,[i]):"value"!==i.type.kind&&"value"===a.type.kind&&(a=new ae(i.type,[a])));let s=null;if(4===e.length){if("string"!==i.type.kind&&"string"!==a.type.kind&&"value"!==i.type.kind&&"value"!==a.type.kind)return t.error("Cannot use collator to compare non-string types.");if(s=t.parse(e[3],3,N),!s)return null}return new n(i,a,s)}evaluate(n){const i=this.lhs.evaluate(n),a=this.rhs.evaluate(n);if(r&&this.hasUntypedArgument){const t=te(i),o=te(a);if(t.kind!==o.kind||"string"!==t.kind&&"number"!==t.kind)throw new ne(`Expected arguments for "${e}" to be (string, string) or (number, number), but found (${t.kind}, ${o.kind}) instead.`)}if(this.collator&&!r&&this.hasUntypedArgument){const e=te(i),o=te(a);if("string"!==e.kind||"string"!==o.kind)return t(n,i,a)}return this.collator?o(n,i,a,this.collator.evaluate(n)):t(n,i,a)}eachChild(e){e(this.lhs),e(this.rhs),this.collator&&e(this.collator)}outputDefined(){return!0}serialize(){const t=[e];return this.eachChild((e=>{t.push(e.serialize())})),t}}}const wt=xt("==",(function(e,t,o){return t===o}),vt),kt=xt("!=",(function(e,t,o){return t!==o}),(function(e,t,o,r){return!vt(0,t,o,r)})),jt=xt("<",(function(e,t,o){return t<o}),(function(e,t,o,r){return r.compare(t,o)<0})),zt=xt(">",(function(e,t,o){return t>o}),(function(e,t,o,r){return r.compare(t,o)>0})),St=xt("<=",(function(e,t,o){return t<=o}),(function(e,t,o,r){return r.compare(t,o)<=0})),Tt=xt(">=",(function(e,t,o){return t>=o}),(function(e,t,o,r){return r.compare(t,o)>=0}));class _t{constructor(e,t,o,r,n){this.type=q,this.number=e,this.locale=t,this.currency=o,this.minFractionDigits=r,this.maxFractionDigits=n}static parse(e,t){if(3!==e.length)return t.error("Expected two arguments.");const o=t.parse(e[1],1,$);if(!o)return null;const r=e[2];if("object"!=typeof r||Array.isArray(r))return t.error("NumberFormat options argument must be an object.");let n=null;if(r.locale&&(n=t.parse(r.locale,1,q),!n))return null;let i=null;if(r.currency&&(i=t.parse(r.currency,1,q),!i))return null;let a=null;if(r["min-fraction-digits"]&&(a=t.parse(r["min-fraction-digits"],1,$),!a))return null;let s=null;return r["max-fraction-digits"]&&(s=t.parse(r["max-fraction-digits"],1,$),!s)?null:new _t(o,n,i,a,s)}evaluate(e){return new Intl.NumberFormat(this.locale?this.locale.evaluate(e):[],{style:this.currency?"currency":"decimal",currency:this.currency?this.currency.evaluate(e):void 0,minimumFractionDigits:this.minFractionDigits?this.minFractionDigits.evaluate(e):void 0,maximumFractionDigits:this.maxFractionDigits?this.maxFractionDigits.evaluate(e):void 0}).format(this.number.evaluate(e))}eachChild(e){e(this.number),this.locale&&e(this.locale),this.currency&&e(this.currency),this.minFractionDigits&&e(this.minFractionDigits),this.maxFractionDigits&&e(this.maxFractionDigits)}outputDefined(){return!1}serialize(){const e={};return this.locale&&(e.locale=this.locale.serialize()),this.currency&&(e.currency=this.currency.serialize()),this.minFractionDigits&&(e["min-fraction-digits"]=this.minFractionDigits.serialize()),this.maxFractionDigits&&(e["max-fraction-digits"]=this.maxFractionDigits.serialize()),["number-format",this.number.serialize(),e]}}class Ct{constructor(e){this.type=$,this.input=e}static parse(e,t){if(2!==e.length)return t.error(`Expected 1 argument, but found ${e.length-1} instead.`);const o=t.parse(e[1],1);return o?"array"!==o.type.kind&&"string"!==o.type.kind&&"value"!==o.type.kind?t.error(`Expected argument of type string or array, but found ${U(o.type)} instead.`):new Ct(o):null}evaluate(e){const t=this.input.evaluate(e);if("string"==typeof t)return t.length;if(Array.isArray(t))return t.length;throw new ne(`Expected value to be of type string or array, but found ${U(te(t))} instead.`)}eachChild(e){e(this.input)}outputDefined(){return!1}serialize(){const e=["length"];return this.eachChild((t=>{e.push(t.serialize())})),e}}const At={"==":wt,"!=":kt,">":zt,"<":jt,">=":Tt,"<=":St,array:ae,at:dt,boolean:ae,case:mt,coalesce:ct,collator:fe,format:se,image:le,in:ht,"index-of":ft,interpolate:lt,"interpolate-hcl":lt,"interpolate-lab":lt,length:Ct,let:pt,literal:re,match:yt,number:ae,"number-format":_t,object:ae,slice:gt,step:Pe,string:ae,"to-boolean":ce,"to-color":ce,"to-number":ce,"to-string":ce,var:Me,within:$e};function Et(e,[t,o,r,n]){t=t.evaluate(e),o=o.evaluate(e),r=r.evaluate(e);const i=n?n.evaluate(e):1,a=Q(t,o,r,i);if(a)throw new ne(a);return new H(t/255*i,o/255*i,r/255*i,i)}function It(e,t){return e in t}function $t(e,t){const o=t[e];return void 0===o?null:o}function qt(e){return{type:e}}function Ot(e){return{result:"success",value:e}}function Rt(e){return{result:"error",value:e}}function Mt(e){return"data-driven"===e["property-type"]||"cross-faded-data-driven"===e["property-type"]}function Lt(e){return!!e.expression&&e.expression.parameters.indexOf("zoom")>-1}function Nt(e){return!!e.expression&&e.expression.interpolated}function Dt(e){return e instanceof Number?"number":e instanceof String?"string":e instanceof Boolean?"boolean":Array.isArray(e)?"array":null===e?"null":typeof e}function Pt(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)}function Ft(e){return e}function Ut(e,t){const o="color"===t.type,r=e.stops&&"object"==typeof e.stops[0][0],n=r||void 0!==e.property,i=r||!n,a=e.type||(Nt(t)?"exponential":"interval");if(o&&((e=C({},e)).stops&&(e.stops=e.stops.map((e=>[e[0],H.parse(e[1])]))),e.default?e.default=H.parse(e.default):e.default=H.parse(t.default)),e.colorSpace&&"rgb"!==e.colorSpace&&!st[e.colorSpace])throw new Error(`Unknown color space: ${e.colorSpace}`);let s,l,u;if("exponential"===a)s=Gt;else if("interval"===a)s=Wt;else if("categorical"===a){s=Jt,l=Object.create(null);for(const t of e.stops)l[t[0]]=t[1];u=typeof e.stops[0][0]}else{if("identity"!==a)throw new Error(`Unknown function type "${a}"`);s=Vt}if(r){const o={},r=[];for(let t=0;t<e.stops.length;t++){const n=e.stops[t],i=n[0].zoom;void 0===o[i]&&(o[i]={zoom:i,type:e.type,property:e.property,default:e.default,stops:[]},r.push(i)),o[i].stops.push([n[0].value,n[1]])}const n=[];for(const e of r)n.push([o[e].zoom,Ut(o[e],t)]);const i={name:"linear"};return{kind:"composite",interpolationType:i,interpolationFactor:lt.interpolationFactor.bind(void 0,i),zoomStops:n.map((e=>e[0])),evaluate:({zoom:o},r)=>Gt({stops:n,base:e.base},t,o).evaluate(o,r)}}if(i){const o="exponential"===a?{name:"exponential",base:void 0!==e.base?e.base:1}:null;return{kind:"camera",interpolationType:o,interpolationFactor:lt.interpolationFactor.bind(void 0,o),zoomStops:e.stops.map((e=>e[0])),evaluate:({zoom:o})=>s(e,t,o,l,u)}}return{kind:"source",evaluate(o,r){const n=r&&r.properties?r.properties[e.property]:void 0;return void 0===n?Bt(e.default,t.default):s(e,t,n,l,u)}}}function Bt(e,t,o){return void 0!==e?e:void 0!==t?t:void 0!==o?o:void 0}function Jt(e,t,o,r,n){return Bt(typeof o===n?r[o]:void 0,e.default,t.default)}function Wt(e,t,o){if("number"!==Dt(o))return Bt(e.default,t.default);const r=e.stops.length;if(1===r)return e.stops[0][1];if(o<=e.stops[0][0])return e.stops[0][1];if(o>=e.stops[r-1][0])return e.stops[r-1][1];const n=De(e.stops.map((e=>e[0])),o);return e.stops[n][1]}function Gt(e,t,o){const r=void 0!==e.base?e.base:1;if("number"!==Dt(o))return Bt(e.default,t.default);const n=e.stops.length;if(1===n)return e.stops[0][1];if(o<=e.stops[0][0])return e.stops[0][1];if(o>=e.stops[n-1][0])return e.stops[n-1][1];const i=De(e.stops.map((e=>e[0])),o),a=function(e,t,o,r){const n=r-o,i=e-o;return 0===n?0:1===t?i/n:(Math.pow(t,i)-1)/(Math.pow(t,n)-1)}(o,r,e.stops[i][0],e.stops[i+1][0]),s=e.stops[i][1],l=e.stops[i+1][1];let u=Je[t.type]||Ft;if(e.colorSpace&&"rgb"!==e.colorSpace){const t=st[e.colorSpace];u=(e,o)=>t.reverse(t.interpolate(t.forward(e),t.forward(o),a))}return"function"==typeof s.evaluate?{evaluate(...e){const t=s.evaluate.apply(void 0,e),o=l.evaluate.apply(void 0,e);if(void 0!==t&&void 0!==o)return u(t,o,a)}}:u(s,l,a)}function Vt(e,t,o){return"color"===t.type?o=H.parse(o):"formatted"===t.type?o=K.fromString(o.toString()):"resolvedImage"===t.type?o=Y.fromString(o.toString()):Dt(o)===t.type||"enum"===t.type&&t.values[o]||(o=void 0),Bt(o,e.default,t.default)}he.register(At,{error:[{kind:"error"},[q],(e,[t])=>{throw new ne(t.evaluate(e))}],typeof:[q,[L],(e,[t])=>U(te(t.evaluate(e)))],"to-rgba":[F($,4),[R],(e,[t])=>t.evaluate(e).toArray()],rgb:[R,[$,$,$],Et],rgba:[R,[$,$,$,$],Et],has:{type:O,overloads:[[[q],(e,[t])=>It(t.evaluate(e),e.properties())],[[q,M],(e,[t,o])=>It(t.evaluate(e),o.evaluate(e))]]},get:{type:L,overloads:[[[q],(e,[t])=>$t(t.evaluate(e),e.properties())],[[q,M],(e,[t,o])=>$t(t.evaluate(e),o.evaluate(e))]]},"feature-state":[L,[q],(e,[t])=>$t(t.evaluate(e),e.featureState||{})],properties:[M,[],e=>e.properties()],"geometry-type":[q,[],e=>e.geometryType()],id:[L,[],e=>e.id()],zoom:[$,[],e=>e.globals.zoom],"heatmap-density":[$,[],e=>e.globals.heatmapDensity||0],"line-progress":[$,[],e=>e.globals.lineProgress||0],"sky-radial-progress":[$,[],e=>e.globals.skyRadialProgress||0],accumulated:[L,[],e=>void 0===e.globals.accumulated?null:e.globals.accumulated],"+":[$,qt($),(e,t)=>{let o=0;for(const r of t)o+=r.evaluate(e);return o}],"*":[$,qt($),(e,t)=>{let o=1;for(const r of t)o*=r.evaluate(e);return o}],"-":{type:$,overloads:[[[$,$],(e,[t,o])=>t.evaluate(e)-o.evaluate(e)],[[$],(e,[t])=>-t.evaluate(e)]]},"/":[$,[$,$],(e,[t,o])=>t.evaluate(e)/o.evaluate(e)],"%":[$,[$,$],(e,[t,o])=>t.evaluate(e)%o.evaluate(e)],ln2:[$,[],()=>Math.LN2],pi:[$,[],()=>Math.PI],e:[$,[],()=>Math.E],"^":[$,[$,$],(e,[t,o])=>Math.pow(t.evaluate(e),o.evaluate(e))],sqrt:[$,[$],(e,[t])=>Math.sqrt(t.evaluate(e))],log10:[$,[$],(e,[t])=>Math.log(t.evaluate(e))/Math.LN10],ln:[$,[$],(e,[t])=>Math.log(t.evaluate(e))],log2:[$,[$],(e,[t])=>Math.log(t.evaluate(e))/Math.LN2],sin:[$,[$],(e,[t])=>Math.sin(t.evaluate(e))],cos:[$,[$],(e,[t])=>Math.cos(t.evaluate(e))],tan:[$,[$],(e,[t])=>Math.tan(t.evaluate(e))],asin:[$,[$],(e,[t])=>Math.asin(t.evaluate(e))],acos:[$,[$],(e,[t])=>Math.acos(t.evaluate(e))],atan:[$,[$],(e,[t])=>Math.atan(t.evaluate(e))],min:[$,qt($),(e,t)=>Math.min(...t.map((t=>t.evaluate(e))))],max:[$,qt($),(e,t)=>Math.max(...t.map((t=>t.evaluate(e))))],abs:[$,[$],(e,[t])=>Math.abs(t.evaluate(e))],round:[$,[$],(e,[t])=>{const o=t.evaluate(e);return o<0?-Math.round(-o):Math.round(o)}],floor:[$,[$],(e,[t])=>Math.floor(t.evaluate(e))],ceil:[$,[$],(e,[t])=>Math.ceil(t.evaluate(e))],"filter-==":[O,[q,L],(e,[t,o])=>e.properties()[t.value]===o.value],"filter-id-==":[O,[L],(e,[t])=>e.id()===t.value],"filter-type-==":[O,[q],(e,[t])=>e.geometryType()===t.value],"filter-<":[O,[q,L],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r<n}],"filter-id-<":[O,[L],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o<r}],"filter->":[O,[q,L],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r>n}],"filter-id->":[O,[L],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o>r}],"filter-<=":[O,[q,L],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r<=n}],"filter-id-<=":[O,[L],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o<=r}],"filter->=":[O,[q,L],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r>=n}],"filter-id->=":[O,[L],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o>=r}],"filter-has":[O,[L],(e,[t])=>t.value in e.properties()],"filter-has-id":[O,[],e=>null!==e.id()&&void 0!==e.id()],"filter-type-in":[O,[F(q)],(e,[t])=>t.value.indexOf(e.geometryType())>=0],"filter-id-in":[O,[F(L)],(e,[t])=>t.value.indexOf(e.id())>=0],"filter-in-small":[O,[q,F(L)],(e,[t,o])=>o.value.indexOf(e.properties()[t.value])>=0],"filter-in-large":[O,[q,F(L)],(e,[t,o])=>function(e,t,o,r){for(;o<=r;){const n=o+r>>1;if(t[n]===e)return!0;t[n]>e?r=n-1:o=n+1}return!1}(e.properties()[t.value],o.value,0,o.value.length-1)],all:{type:O,overloads:[[[O,O],(e,[t,o])=>t.evaluate(e)&&o.evaluate(e)],[qt(O),(e,t)=>{for(const o of t)if(!o.evaluate(e))return!1;return!0}]]},any:{type:O,overloads:[[[O,O],(e,[t,o])=>t.evaluate(e)||o.evaluate(e)],[qt(O),(e,t)=>{for(const o of t)if(o.evaluate(e))return!0;return!1}]]},"!":[O,[O],(e,[t])=>!t.evaluate(e)],"is-supported-script":[O,[q],(e,[t])=>{const o=e.globals&&e.globals.isSupportedScript;return!o||o(t.evaluate(e))}],upcase:[q,[q],(e,[t])=>t.evaluate(e).toUpperCase()],downcase:[q,[q],(e,[t])=>t.evaluate(e).toLowerCase()],concat:[q,qt(L),(e,t)=>t.map((t=>oe(t.evaluate(e)))).join("")],"resolved-locale":[q,[N],(e,[t])=>t.evaluate(e).resolvedLocale()]});class Ht{constructor(e,t){var o;this.expression=e,this._warningHistory={},this._evaluator=new de,this._defaultValue=t?"color"===(o=t).type&&Pt(o.default)?new H(0,0,0,0):"color"===o.type?H.parse(o.default)||null:void 0===o.default?null:o.default:null,this._enumValues=t&&"enum"===t.type?t.values:null}evaluateWithoutErrorHandling(e,t,o,r,n,i){return this._evaluator.globals=e,this._evaluator.feature=t,this._evaluator.featureState=o,this._evaluator.canonical=r,this._evaluator.availableImages=n||null,this._evaluator.formattedSection=i,this.expression.evaluate(this._evaluator)}evaluate(e,t,o,r,n,i){this._evaluator.globals=e,this._evaluator.feature=t||null,this._evaluator.featureState=o||null,this._evaluator.canonical=r,this._evaluator.availableImages=n||null,this._evaluator.formattedSection=i||null;try{const e=this.expression.evaluate(this._evaluator);if(null==e||"number"==typeof e&&e!=e)return this._defaultValue;if(this._enumValues&&!(e in this._enumValues))throw new ne(`Expected value to be one of ${Object.keys(this._enumValues).map((e=>JSON.stringify(e))).join(", ")}, but found ${JSON.stringify(e)} instead.`);return e}catch(e){return this._warningHistory[e.message]||(this._warningHistory[e.message]=!0,"undefined"!=typeof console&&console.warn(e.message)),this._defaultValue}}}function Xt(e){return Array.isArray(e)&&e.length>0&&"string"==typeof e[0]&&e[0]in At}function Zt(e,t){const o=new Le(At,[],t?function(e){const t={color:R,string:q,number:$,enum:q,boolean:O,formatted:D,resolvedImage:P};return"array"===e.type?F(t[e.value]||L,e.length):t[e.type]}(t):void 0),r=o.parse(e,void 0,void 0,void 0,t&&"string"===t.type?{typeAnnotation:"coerce"}:void 0);return r?Ot(new Ht(r,t)):Rt(o.errors)}class Kt{constructor(e,t){this.kind=e,this._styleExpression=t,this.isStateDependent="constant"!==e&&!Oe(t.expression)}evaluateWithoutErrorHandling(e,t,o,r,n,i){return this._styleExpression.evaluateWithoutErrorHandling(e,t,o,r,n,i)}evaluate(e,t,o,r,n,i){return this._styleExpression.evaluate(e,t,o,r,n,i)}}class Yt{constructor(e,t,o,r){this.kind=e,this.zoomStops=o,this._styleExpression=t,this.isStateDependent="camera"!==e&&!Oe(t.expression),this.interpolationType=r}evaluateWithoutErrorHandling(e,t,o,r,n,i){return this._styleExpression.evaluateWithoutErrorHandling(e,t,o,r,n,i)}evaluate(e,t,o,r,n,i){return this._styleExpression.evaluate(e,t,o,r,n,i)}interpolationFactor(e,t,o){return this.interpolationType?lt.interpolationFactor(this.interpolationType,e,t,o):0}}function Qt(e,t){if("error"===(e=Zt(e,t)).result)return e;const o=e.value.expression,r=qe(o);if(!r&&!Mt(t))return Rt([new A("","data expressions not supported")]);const n=Re(o,["zoom"]);if(!n&&!Lt(t))return Rt([new A("","zoom expressions not supported")]);const i=to(o);if(!i&&!n)return Rt([new A("",'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);if(i instanceof A)return Rt([i]);if(i instanceof lt&&!Nt(t))return Rt([new A("",'"interpolate" expressions cannot be used with this property')]);if(!i)return Ot(new Kt(r?"constant":"source",e.value));const a=i instanceof lt?i.interpolation:void 0;return Ot(new Yt(r?"camera":"composite",e.value,i.labels,a))}class eo{constructor(e,t){this._parameters=e,this._specification=t,C(this,Ut(this._parameters,this._specification))}static deserialize(e){return new eo(e._parameters,e._specification)}static serialize(e){return{_parameters:e._parameters,_specification:e._specification}}}function to(e){let t=null;if(e instanceof pt)t=to(e.result);else if(e instanceof ct){for(const o of e.args)if(t=to(o),t)break}else(e instanceof Pe||e instanceof lt)&&e.input instanceof he&&"zoom"===e.input.name&&(t=e);return t instanceof A||e.eachChild((e=>{const o=to(e);o instanceof A?t=o:!t&&o?t=new A("",'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.'):t&&o&&t!==o&&(t=new A("",'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.'))})),t}function oo(e){return"object"==typeof e?["literal",e]:e}function ro(e){switch(e.colorSpace){case"hcl":return"interpolate-hcl";case"lab":return"interpolate-lab";default:return"interpolate"}}function no(e,t){const o=oo(function(e,t){return void 0!==e?e:void 0!==t?t:void 0}(e.default,t.default));return void 0===o&&"resolvedImage"===t.type?"":o}function io(e,t,o){const r=lo(e,t),n=["get",e.property];if("categorical"===r&&"boolean"==typeof o[0][0]){const r=["case"];for(const e of o)r.push(["==",n,e[0]],e[1]);return r.push(no(e,t)),r}if("categorical"===r){const r=["match",n];for(const e of o)so(r,e[0],e[1],!1);return r.push(no(e,t)),r}if("interval"===r){const t=["step",["number",n]];for(const e of o)so(t,e[0],e[1],!0);return ao(t),void 0===e.default?t:["case",["==",["typeof",n],"number"],t,oo(e.default)]}if("exponential"===r){const t=void 0!==e.base?e.base:1,r=[ro(e),1===t?["linear"]:["exponential",t],["number",n]];for(const e of o)so(r,e[0],e[1],!1);return void 0===e.default?r:["case",["==",["typeof",n],"number"],r,oo(e.default)]}throw new Error(`Unknown property function type ${r}`)}function ao(e){"step"===e[0]&&3===e.length&&(e.push(0),e.push(e[3]))}function so(e,t,o,r){e.length>3&&t===e[e.length-2]||(r&&2===e.length||e.push(t),e.push(o))}function lo(e,t){return e.type?e.type:t.expression.interpolated?"exponential":"interval"}function uo(e){const t=["concat"],o=/{([^{}]+)}/g;let r=0;for(let n=o.exec(e);null!==n;n=o.exec(e)){const i=e.slice(r,o.lastIndex-n[0].length);r=o.lastIndex,i.length>0&&t.push(i),t.push(["get",n[1]])}if(1===t.length)return e;if(r<e.length)t.push(e.slice(r));else if(2===t.length)return["to-string",t[1]];return t}function co(e){if(!0===e||!1===e)return!0;if(!Array.isArray(e)||0===e.length)return!1;switch(e[0]){case"has":return e.length>=2&&"$id"!==e[1]&&"$type"!==e[1];case"in":return e.length>=3&&("string"!=typeof e[1]||Array.isArray(e[2]));case"!in":case"!has":case"none":return!1;case"==":case"!=":case">":case">=":case"<":case"<=":return 3!==e.length||Array.isArray(e[1])||Array.isArray(e[2]);case"any":case"all":for(const t of e.slice(1))if(!co(t)&&"boolean"!=typeof t)return!1;return!0;default:return!0}}class po{constructor(e,t,o,r){this.message=(e?`${e}: `:"")+o,r&&(this.identifier=r),null!=t&&t.__line__&&(this.line=t.__line__)}}class ho{constructor(e){this.error=e,this.message=e.message;const t=e.message.match(/line (\d+)/);this.line=t?parseInt(t[1],10):0}}function fo(e){const t=e.key,o=e.value;return o?[new po(t,o,"constants have been deprecated as of v8")]:[]}function yo(e){return e instanceof Number||e instanceof String||e instanceof Boolean?e.valueOf():e}function mo(e){if(Array.isArray(e))return e.map(mo);if(e instanceof Object&&!(e instanceof Number||e instanceof String||e instanceof Boolean)){const t={};for(const o in e)t[o]=mo(e[o]);return t}return yo(e)}function go(e){const t=e.key,o=e.value,r=e.valueSpec||{},n=e.objectElementValidators||{},i=e.style,a=e.styleSpec;let s=[];const l=Dt(o);if("object"!==l)return[new po(t,o,`object expected, ${l} found`)];for(const e in o){const l=e.split(".")[0],u=r[l]||r["*"];let c;if(n[l])c=n[l];else if(r[l])c=Ro;else if(n["*"])c=n["*"];else{if(!r["*"]){s.push(new po(t,o[e],`unknown property "${e}"`));continue}c=Ro}s=s.concat(c({key:(t?`${t}.`:t)+e,value:o[e],valueSpec:u,style:i,styleSpec:a,object:o,objectKey:e},o))}for(const e in r)n[e]||r[e].required&&void 0===r[e].default&&void 0===o[e]&&s.push(new po(t,o,`missing required property "${e}"`));return s}function bo(e){const t=e.value,o=e.valueSpec,r=e.style,n=e.styleSpec,i=e.key,a=e.arrayElementValidator||Ro;if("array"!==Dt(t))return[new po(i,t,`array expected, ${Dt(t)} found`)];if(o.length&&t.length!==o.length)return[new po(i,t,`array length ${o.length} expected, length ${t.length} found`)];if(o["min-length"]&&t.length<o["min-length"])return[new po(i,t,`array length at least ${o["min-length"]} expected, length ${t.length} found`)];let s={type:o.value,values:o.values,minimum:o.minimum,maximum:o.maximum};n.$version<7&&(s.function=o.function),"object"===Dt(o.value)&&(s=o.value);let l=[];for(let e=0;e<t.length;e++)l=l.concat(a({array:t,arrayIndex:e,value:t[e],valueSpec:s,style:r,styleSpec:n,key:`${i}[${e}]`}));return l}function vo(e){const t=e.key,o=e.value,r=e.valueSpec;let n=Dt(o);if("number"===n&&o!=o&&(n="NaN"),"number"!==n)return[new po(t,o,`number expected, ${n} found`)];if("minimum"in r){let n=r.minimum;if("array"===Dt(r.minimum)){const t=e.arrayIndex;n=r.minimum[t]}if(o<n)return[new po(t,o,`${o} is less than the minimum value ${n}`)]}if("maximum"in r){let n=r.maximum;if("array"===Dt(r.maximum)){const t=e.arrayIndex;n=r.maximum[t]}if(o>n)return[new po(t,o,`${o} is greater than the maximum value ${n}`)]}return[]}function xo(e){const t=e.valueSpec,o=yo(e.value.type);let r,n,i,a={};const s="categorical"!==o&&void 0===e.value.property,l=!s,u="array"===Dt(e.value.stops)&&"array"===Dt(e.value.stops[0])&&"object"===Dt(e.value.stops[0][0]),c=go({key:e.key,value:e.value,valueSpec:e.styleSpec.function,style:e.style,styleSpec:e.styleSpec,objectElementValidators:{stops:function(e){if("identity"===o)return[new po(e.key,e.value,'identity function may not have a "stops" property')];let t=[];const r=e.value;return t=t.concat(bo({key:e.key,value:r,valueSpec:e.valueSpec,style:e.style,styleSpec:e.styleSpec,arrayElementValidator:p})),"array"===Dt(r)&&0===r.length&&t.push(new po(e.key,r,"array must have at least one stop")),t},default:function(e){return Ro({key:e.key,value:e.value,valueSpec:t,style:e.style,styleSpec:e.styleSpec})}}});return"identity"===o&&s&&c.push(new po(e.key,e.value,'missing required property "property"')),"identity"===o||e.value.stops||c.push(new po(e.key,e.value,'missing required property "stops"')),"exponential"===o&&e.valueSpec.expression&&!Nt(e.valueSpec)&&c.push(new po(e.key,e.value,"exponential functions not supported")),e.styleSpec.$version>=8&&(l&&!Mt(e.valueSpec)?c.push(new po(e.key,e.value,"property functions not supported")):s&&!Lt(e.valueSpec)&&c.push(new po(e.key,e.value,"zoom functions not supported"))),"categorical"!==o&&!u||void 0!==e.value.property||c.push(new po(e.key,e.value,'"property" property is required')),c;function p(e){let o=[];const r=e.value,s=e.key;if("array"!==Dt(r))return[new po(s,r,`array expected, ${Dt(r)} found`)];if(2!==r.length)return[new po(s,r,`array length 2 expected, length ${r.length} found`)];if(u){if("object"!==Dt(r[0]))return[new po(s,r,`object expected, ${Dt(r[0])} found`)];if(void 0===r[0].zoom)return[new po(s,r,"object stop key must have zoom")];if(void 0===r[0].value)return[new po(s,r,"object stop key must have value")];if(i&&i>yo(r[0].zoom))return[new po(s,r[0].zoom,"stop zoom values must appear in ascending order")];yo(r[0].zoom)!==i&&(i=yo(r[0].zoom),n=void 0,a={}),o=o.concat(go({key:`${s}[0]`,value:r[0],valueSpec:{zoom:{}},style:e.style,styleSpec:e.styleSpec,objectElementValidators:{zoom:vo,value:d}}))}else o=o.concat(d({key:`${s}[0]`,value:r[0],valueSpec:{},style:e.style,styleSpec:e.styleSpec},r));return Xt(mo(r[1]))?o.concat([new po(`${s}[1]`,r[1],"expressions are not allowed in function stops.")]):o.concat(Ro({key:`${s}[1]`,value:r[1],valueSpec:t,style:e.style,styleSpec:e.styleSpec}))}function d(e,i){const s=Dt(e.value),l=yo(e.value),u=null!==e.value?e.value:i;if(r){if(s!==r)return[new po(e.key,u,`${s} stop domain type must match previous stop domain type ${r}`)]}else r=s;if("number"!==s&&"string"!==s&&"boolean"!==s)return[new po(e.key,u,"stop domain value must be a number, string, or boolean")];if("number"!==s&&"categorical"!==o){let r=`number expected, ${s} found`;return Mt(t)&&void 0===o&&(r+='\nIf you intended to use a categorical function, specify `"type": "categorical"`.'),[new po(e.key,u,r)]}return"categorical"!==o||"number"!==s||isFinite(l)&&Math.floor(l)===l?"categorical"!==o&&"number"===s&&void 0!==n&&l<n?[new po(e.key,u,"stop domain values must appear in ascending order")]:(n=l,"categorical"===o&&l in a?[new po(e.key,u,"stop domain values must be unique")]:(a[l]=!0,[])):[new po(e.key,u,`integer expected, found ${l}`)]}}function wo(e){const t=("property"===e.expressionContext?Qt:Zt)(mo(e.value),e.valueSpec);if("error"===t.result)return t.value.map((t=>new po(`${e.key}${t.key}`,e.value,t.message)));const o=t.value.expression||t.value._styleExpression.expression;if("property"===e.expressionContext&&"text-font"===e.propertyKey&&!o.outputDefined())return[new po(e.key,e.value,`Invalid data expression for "${e.propertyKey}". Output values must be contained as literals within the expression.`)];if("property"===e.expressionContext&&"layout"===e.propertyType&&!Oe(o))return[new po(e.key,e.value,'"feature-state" data expressions are not supported with layout properties.')];if("filter"===e.expressionContext&&!Oe(o))return[new po(e.key,e.value,'"feature-state" data expressions are not supported with filters.')];if(e.expressionContext&&0===e.expressionContext.indexOf("cluster")){if(!Re(o,["zoom","feature-state"]))return[new po(e.key,e.value,'"zoom" and "feature-state" expressions are not supported with cluster properties.')];if("cluster-initial"===e.expressionContext&&!qe(o))return[new po(e.key,e.value,"Feature data expressions are not supported with initial expression part of cluster properties.")]}return[]}function ko(e){const t=e.key,o=e.value,r=e.valueSpec,n=[];return Array.isArray(r.values)?-1===r.values.indexOf(yo(o))&&n.push(new po(t,o,`expected one of [${r.values.join(", ")}], ${JSON.stringify(o)} found`)):-1===Object.keys(r.values).indexOf(yo(o))&&n.push(new po(t,o,`expected one of [${Object.keys(r.values).join(", ")}], ${JSON.stringify(o)} found`)),n}function jo(e){return co(mo(e.value))?wo(C({},e,{expressionContext:"filter",valueSpec:{value:"boolean"}})):zo(e)}function zo(e){const t=e.value,o=e.key;if("array"!==Dt(t))return[new po(o,t,`array expected, ${Dt(t)} found`)];const r=e.styleSpec;let n,i=[];if(t.length<1)return[new po(o,t,"filter array must have at least 1 element")];switch(i=i.concat(ko({key:`${o}[0]`,value:t[0],valueSpec:r.filter_operator,style:e.style,styleSpec:e.styleSpec})),yo(t[0])){case"<":case"<=":case">":case">=":t.length>=2&&"$type"===yo(t[1])&&i.push(new po(o,t,`"$type" cannot be use with operator "${t[0]}"`));case"==":case"!=":3!==t.length&&i.push(new po(o,t,`filter array for operator "${t[0]}" must have 3 elements`));case"in":case"!in":t.length>=2&&(n=Dt(t[1]),"string"!==n&&i.push(new po(`${o}[1]`,t[1],`string expected, ${n} found`)));for(let a=2;a<t.length;a++)n=Dt(t[a]),"$type"===yo(t[1])?i=i.concat(ko({key:`${o}[${a}]`,value:t[a],valueSpec:r.geometry_type,style:e.style,styleSpec:e.styleSpec})):"string"!==n&&"number"!==n&&"boolean"!==n&&i.push(new po(`${o}[${a}]`,t[a],`string, number, or boolean expected, ${n} found`));break;case"any":case"all":case"none":for(let r=1;r<t.length;r++)i=i.concat(zo({key:`${o}[${r}]`,value:t[r],style:e.style,styleSpec:e.styleSpec}));break;case"has":case"!has":n=Dt(t[1]),2!==t.length?i.push(new po(o,t,`filter array for "${t[0]}" operator must have 2 elements`)):"string"!==n&&i.push(new po(`${o}[1]`,t[1],`string expected, ${n} found`));break;case"within":n=Dt(t[1]),2!==t.length?i.push(new po(o,t,`filter array for "${t[0]}" operator must have 2 elements`)):"object"!==n&&i.push(new po(`${o}[1]`,t[1],`object expected, ${n} found`))}return i}function So(e,t){const o=e.key,r=e.style,n=e.styleSpec,i=e.value,a=e.objectKey,s=n[`${t}_${e.layerType}`];if(!s)return[];const l=a.match(/^(.*)-transition$/);if("paint"===t&&l&&s[l[1]]&&s[l[1]].transition)return Ro({key:o,value:i,valueSpec:n.transition,style:r,styleSpec:n});const u=e.valueSpec||s[a];if(!u)return[new po(o,i,`unknown property "${a}"`)];let c;if("string"===Dt(i)&&Mt(u)&&!u.tokens&&(c=/^{([^}]+)}$/.exec(i)))return[new po(o,i,`"${a}" does not support interpolation syntax\nUse an identity property function instead: \`{ "type": "identity", "property": ${JSON.stringify(c[1])} }\`.`)];const p=[];return"symbol"===e.layerType&&("text-field"===a&&r&&!r.glyphs&&p.push(new po(o,i,'use of "text-field" requires a style "glyphs" property')),"text-font"===a&&Pt(mo(i))&&"identity"===yo(i.type)&&p.push(new po(o,i,'"text-font" does not support identity functions'))),p.concat(Ro({key:e.key,value:i,valueSpec:u,style:r,styleSpec:n,expressionContext:"property",propertyType:t,propertyKey:a}))}function To(e){return So(e,"paint")}function _o(e){return So(e,"layout")}function Co(e){let t=[];const o=e.value,r=e.key,n=e.style,i=e.styleSpec;o.type||o.ref||t.push(new po(r,o,'either "type" or "ref" is required'));let a=yo(o.type);const s=yo(o.ref);if(o.id){const i=yo(o.id);for(let a=0;a<e.arrayIndex;a++){const e=n.layers[a];yo(e.id)===i&&t.push(new po(r,o.id,`duplicate layer id "${o.id}", previously used at line ${e.id.__line__}`))}}if("ref"in o){let e;["type","source","source-layer","filter","layout"].forEach((e=>{e in o&&t.push(new po(r,o[e],`"${e}" is prohibited for ref layers`))})),n.layers.forEach((t=>{yo(t.id)===s&&(e=t)})),e?e.ref?t.push(new po(r,o.ref,"ref cannot reference another ref layer")):a=yo(e.type):t.push(new po(r,o.ref,`ref layer "${s}" not found`))}else if("background"!==a&&"sky"!==a)if(o.source){const e=n.sources&&n.sources[o.source],i=e&&yo(e.type);e?"vector"===i&&"raster"===a?t.push(new po(r,o.source,`layer "${o.id}" requires a raster source`)):"raster"===i&&"raster"!==a?t.push(new po(r,o.source,`layer "${o.id}" requires a vector source`)):"vector"!==i||o["source-layer"]?"raster-dem"===i&&"hillshade"!==a?t.push(new po(r,o.source,"raster-dem source can only be used with layer type 'hillshade'.")):"line"!==a||!o.paint||!o.paint["line-gradient"]||"geojson"===i&&e.lineMetrics||t.push(new po(r,o,`layer "${o.id}" specifies a line-gradient, which requires a GeoJSON source with \`lineMetrics\` enabled.`)):t.push(new po(r,o,`layer "${o.id}" must specify a "source-layer"`)):t.push(new po(r,o.source,`source "${o.source}" not found`))}else t.push(new po(r,o,'missing required property "source"'));return t=t.concat(go({key:r,value:o,valueSpec:i.layer,style:e.style,styleSpec:e.styleSpec,objectElementValidators:{"*":()=>[],type:()=>Ro({key:`${r}.type`,value:o.type,valueSpec:i.layer.type,style:e.style,styleSpec:e.styleSpec,object:o,objectKey:"type"}),filter:jo,layout:e=>go({layer:o,key:e.key,value:e.value,style:e.style,styleSpec:e.styleSpec,objectElementValidators:{"*":e=>_o(C({layerType:a},e))}}),paint:e=>go({layer:o,key:e.key,value:e.value,style:e.style,styleSpec:e.styleSpec,objectElementValidators:{"*":e=>To(C({layerType:a},e))}})}})),t}function Ao(e){const t=e.value,o=e.key,r=Dt(t);return"string"!==r?[new po(o,t,`string expected, ${r} found`)]:[]}const Eo={promoteId:function({key:e,value:t}){if("string"===Dt(t))return Ao({key:e,value:t});{const o=[];for(const r in t)o.push(...Ao({key:`${e}.${r}`,value:t[r]}));return o}}};function Io(e){const t=e.value,o=e.key,r=e.styleSpec,n=e.style;if(!t.type)return[new po(o,t,'"type" is required')];const i=yo(t.type);let a;switch(i){case"vector":case"raster":case"raster-dem":return a=go({key:o,value:t,valueSpec:r[`source_${i.replace("-","_")}`],style:e.style,styleSpec:r,objectElementValidators:Eo}),a;case"geojson":if(a=go({key:o,value:t,valueSpec:r.source_geojson,style:n,styleSpec:r,objectElementValidators:Eo}),t.cluster)for(const e in t.clusterProperties){const[r,n]=t.clusterProperties[e],i="string"==typeof r?[r,["accumulated"],["get",e]]:r;a.push(...wo({key:`${o}.${e}.map`,value:n,expressionContext:"cluster-map"})),a.push(...wo({key:`${o}.${e}.reduce`,value:i,expressionContext:"cluster-reduce"}))}return a;case"video":return go({key:o,value:t,valueSpec:r.source_video,style:n,styleSpec:r});case"image":return go({key:o,value:t,valueSpec:r.source_image,style:n,styleSpec:r});case"canvas":return[new po(o,null,"Please use runtime APIs to add canvas sources, rather than including them in stylesheets.","source.canvas")];default:return ko({key:`${o}.type`,value:t.type,valueSpec:{values:["vector","raster","raster-dem","geojson","video","image"]},style:n,styleSpec:r})}}function $o(e){const t=e.value,o=e.styleSpec,r=o.light,n=e.style;let i=[];const a=Dt(t);if(void 0===t)return i;if("object"!==a)return i=i.concat([new po("light",t,`object expected, ${a} found`)]),i;for(const e in t){const a=e.match(/^(.*)-transition$/);i=a&&r[a[1]]&&r[a[1]].transition?i.concat(Ro({key:e,value:t[e],valueSpec:o.transition,style:n,styleSpec:o})):r[e]?i.concat(Ro({key:e,value:t[e],valueSpec:r[e],style:n,styleSpec:o})):i.concat([new po(e,t[e],`unknown property "${e}"`)])}return i}function qo(e){const t=e.value,o=e.key,r=e.style,n=e.styleSpec,i=n.terrain;let a=[];const s=Dt(t);if(void 0===t)return a;if("object"!==s)return a=a.concat([new po("terrain",t,`object expected, ${s} found`)]),a;for(const e in t){const o=e.match(/^(.*)-transition$/);a=o&&i[o[1]]&&i[o[1]].transition?a.concat(Ro({key:e,value:t[e],valueSpec:n.transition,style:r,styleSpec:n})):i[e]?a.concat(Ro({key:e,value:t[e],valueSpec:i[e],style:r,styleSpec:n})):a.concat([new po(e,t[e],`unknown property "${e}"`)])}if(t.source){const e=r.sources&&r.sources[t.source],n=e&&yo(e.type);e?"raster-dem"!==n&&a.push(new po(o,t.source,`terrain cannot be used with a source of type ${n}, it only be used with a "raster-dem" source type`)):a.push(new po(o,t.source,`source "${t.source}" not found`))}else a.push(new po(o,t,'terrain is missing required property "source"'));return a}const Oo={"*":()=>[],array:bo,boolean:function(e){const t=e.value,o=e.key,r=Dt(t);return"boolean"!==r?[new po(o,t,`boolean expected, ${r} found`)]:[]},number:vo,color:function(e){const t=e.key,o=e.value,r=Dt(o);return"string"!==r?[new po(t,o,`color expected, ${r} found`)]:null===V(o)?[new po(t,o,`color expected, "${o}" found`)]:[]},constants:fo,enum:ko,filter:jo,function:xo,layer:Co,object:go,source:Io,light:$o,terrain:qo,string:Ao,formatted:function(e){return 0===Ao(e).length?[]:wo(e)},resolvedImage:function(e){return 0===Ao(e).length?[]:wo(e)}};function Ro(e){const t=e.value,o=e.valueSpec,r=e.styleSpec;return o.expression&&Pt(yo(t))?xo(e):o.expression&&Xt(mo(t))?wo(e):o.type&&Oo[o.type]?Oo[o.type](e):go(C({},e,{valueSpec:o.type?r[o.type]:o}))}function Mo(e){const t=e.value,o=e.key,r=Ao(e);return r.length||(-1===t.indexOf("{fontstack}")&&r.push(new po(o,t,'"glyphs" url must include a "{fontstack}" token')),-1===t.indexOf("{range}")&&r.push(new po(o,t,'"glyphs" url must include a "{range}" token'))),r}function Lo(e,t=r){let o=[];return o=o.concat(Ro({key:"",value:e,valueSpec:t.$root,styleSpec:t,style:e,objectElementValidators:{glyphs:Mo,"*":()=>[]}})),e.constants&&(o=o.concat(fo({key:"constants",value:e.constants,style:e,styleSpec:t}))),No(o)}function No(e){return[].concat(e).sort(((e,t)=>e.line-t.line))}function Do(e){return function(...t){return No(e.apply(this,t))}}Lo.source=Do(Io),Lo.light=Do($o),Lo.terrain=Do(qo),Lo.layer=Do(Co),Lo.filter=Do(jo),Lo.paintProperty=Do(To),Lo.layoutProperty=Do(_o);var Po=i((function(e,t){var o=function(){var e=function(e,t,o,r){for(o=o||{},r=e.length;r--;o[e[r]]=t);return o},t=[1,12],o=[1,13],r=[1,9],n=[1,10],i=[1,11],a=[1,14],s=[1,15],l=[14,18,22,24],u=[18,22],c=[22,24],p={trace:function(){},yy:{},symbols_:{error:2,JSONString:3,STRING:4,JSONNumber:5,NUMBER:6,JSONNullLiteral:7,NULL:8,JSONBooleanLiteral:9,TRUE:10,FALSE:11,JSONText:12,JSONValue:13,EOF:14,JSONObject:15,JSONArray:16,"{":17,"}":18,JSONMemberList:19,JSONMember:20,":":21,",":22,"[":23,"]":24,JSONElementList:25,$accept:0,$end:1},terminals_:{2:"error",4:"STRING",6:"NUMBER",8:"NULL",10:"TRUE",11:"FALSE",14:"EOF",17:"{",18:"}",21:":",22:",",23:"[",24:"]"},productions_:[0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],performAction:function(e,t,o,r,n,i,a){var s=i.length-1;switch(n){case 1:this.$=new String(e.replace(/\\(\\|")/g,"$1").replace(/\\n/g,"\n").replace(/\\r/g,"\r").replace(/\\t/g,"\t").replace(/\\v/g,"\v").replace(/\\f/g,"\f").replace(/\\b/g,"\b")),this.$.__line__=this._$.first_line;break;case 2:this.$=new Number(e),this.$.__line__=this._$.first_line;break;case 3:this.$=null;break;case 4:this.$=new Boolean(!0),this.$.__line__=this._$.first_line;break;case 5:this.$=new Boolean(!1),this.$.__line__=this._$.first_line;break;case 6:return this.$=i[s-1];case 13:this.$={},Object.defineProperty(this.$,"__line__",{value:this._$.first_line,enumerable:!1});break;case 14:case 19:this.$=i[s-1],Object.defineProperty(this.$,"__line__",{value:this._$.first_line,enumerable:!1});break;case 15:this.$=[i[s-2],i[s]];break;case 16:this.$={},this.$[i[s][0]]=i[s][1];break;case 17:this.$=i[s-2],i[s-2][i[s][0]]=i[s][1];break;case 18:this.$=[],Object.defineProperty(this.$,"__line__",{value:this._$.first_line,enumerable:!1});break;case 20:this.$=[i[s]];break;case 21:this.$=i[s-2],i[s-2].push(i[s])}},table:[{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,12:1,13:2,15:7,16:8,17:a,23:s},{1:[3]},{14:[1,16]},e(l,[2,7]),e(l,[2,8]),e(l,[2,9]),e(l,[2,10]),e(l,[2,11]),e(l,[2,12]),e(l,[2,3]),e(l,[2,4]),e(l,[2,5]),e([14,18,21,22,24],[2,1]),e(l,[2,2]),{3:20,4:t,18:[1,17],19:18,20:19},{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,13:23,15:7,16:8,17:a,23:s,24:[1,21],25:22},{1:[2,6]},e(l,[2,13]),{18:[1,24],22:[1,25]},e(u,[2,16]),{21:[1,26]},e(l,[2,18]),{22:[1,28],24:[1,27]},e(c,[2,20]),e(l,[2,14]),{3:20,4:t,20:29},{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,13:30,15:7,16:8,17:a,23:s},e(l,[2,19]),{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,13:31,15:7,16:8,17:a,23:s},e(u,[2,17]),e(u,[2,15]),e(c,[2,21])],defaultActions:{16:[2,6]},parseError:function(e,t){if(!t.recoverable)throw new Error(e);this.trace(e)},parse:function(e){var t=this,o=[0],r=[null],n=[],i=this.table,a="",s=0,l=0,u=2,c=1,p=n.slice.call(arguments,1),d=Object.create(this.lexer),h={yy:{}};for(var f in this.yy)Object.prototype.hasOwnProperty.call(this.yy,f)&&(h.yy[f]=this.yy[f]);d.setInput(e,h.yy),h.yy.lexer=d,h.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var y=d.yylloc;n.push(y);var m=d.options&&d.options.ranges;function g(){var e;return"number"!=typeof(e=d.lex()||c)&&(e=t.symbols_[e]||e),e}"function"==typeof h.yy.parseError?this.parseError=h.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var b,v,x,w,k,j,z,S,T={};;){if(v=o[o.length-1],this.defaultActions[v]?x=this.defaultActions[v]:(null==b&&(b=g()),x=i[v]&&i[v][b]),void 0===x||!x.length||!x[0]){var _="";for(k in S=[],i[v])this.terminals_[k]&&k>u&&S.push("'"+this.terminals_[k]+"'");_=d.showPosition?"Parse error on line "+(s+1)+":\n"+d.showPosition()+"\nExpecting "+S.join(", ")+", got '"+(this.terminals_[b]||b)+"'":"Parse error on line "+(s+1)+": Unexpected "+(b==c?"end of input":"'"+(this.terminals_[b]||b)+"'"),this.parseError(_,{text:d.match,token:this.terminals_[b]||b,line:d.yylineno,loc:y,expected:S})}if(x[0]instanceof Array&&x.length>1)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+b);switch(x[0]){case 1:o.push(b),r.push(d.yytext),n.push(d.yylloc),o.push(x[1]),b=null,l=d.yyleng,a=d.yytext,s=d.yylineno,y=d.yylloc;break;case 2:if(j=this.productions_[x[1]][1],T.$=r[r.length-j],T._$={first_line:n[n.length-(j||1)].first_line,last_line:n[n.length-1].last_line,first_column:n[n.length-(j||1)].first_column,last_column:n[n.length-1].last_column},m&&(T._$.range=[n[n.length-(j||1)].range[0],n[n.length-1].range[1]]),void 0!==(w=this.performAction.apply(T,[a,l,s,h.yy,x[1],r,n].concat(p))))return w;j&&(o=o.slice(0,-1*j*2),r=r.slice(0,-1*j),n=n.slice(0,-1*j)),o.push(this.productions_[x[1]][0]),r.push(T.$),n.push(T._$),z=i[o[o.length-2]][o[o.length-1]],o.push(z);break;case 3:return!0}}return!0}},d={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,o=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),o.length-1&&(this.yylineno-=o.length-1);var n=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:o?(o.length===r.length?this.yylloc.first_column:0)+r[r.length-o.length].length-o[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[n[0],n[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var o,r,n;if(this.options.backtrack_lexer&&(n={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(n.yylloc.range=this.yylloc.range.slice(0))),(r=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=r.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:r?r[r.length-1].length-r[r.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],o=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),o)return o;if(this._backtrack){for(var i in n)this[i]=n[i];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,o,r;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var n=this._currentRules(),i=0;i<n.length;i++)if((o=this._input.match(this.rules[n[i]]))&&(!t||o[0].length>t[0].length)){if(t=o,r=i,this.options.backtrack_lexer){if(!1!==(e=this.test_match(o,n[i])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,n[r]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){return this.next()||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{},performAction:function(e,t,o,r){switch(o){case 0:break;case 1:return 6;case 2:return t.yytext=t.yytext.substr(1,t.yyleng-2),4;case 3:return 17;case 4:return 18;case 5:return 23;case 6:return 24;case 7:return 22;case 8:return 21;case 9:return 10;case 10:return 11;case 11:return 8;case 12:return 14;case 13:return"INVALID"}},rules:[/^(?:\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:$)/,/^(?:.)/],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13],inclusive:!0}}};function h(){this.yy={}}return p.lexer=d,h.prototype=p,p.Parser=h,new h}();t.parser=o,t.Parser=o.Parser,t.parse=function(){return o.parse.apply(o,arguments)}}));function Fo(e,t=r){let o=e;try{o=function(e){if(e instanceof String||"string"==typeof e||e instanceof Buffer)try{return Po.parse(e.toString())}catch(e){throw new ho(e)}return e}(o)}catch(e){return[e]}return Lo(o,t)}Po.parser,Po.Parser,Po.parse;const Uo={StyleExpression:Ht,isExpression:Xt,isExpressionFilter:co,createExpression:Zt,createPropertyExpression:Qt,normalizePropertyExpression:function(e,t){if(Pt(e))return new eo(e,t);if(Xt(e)){const o=Qt(e,t);if("error"===o.result)throw new Error(o.value.map((e=>`${e.key}: ${e.message}`)).join(", "));return o.value}{let o=e;return"string"==typeof e&&"color"===t.type&&(o=H.parse(e)),{kind:"constant",evaluate:()=>o}}},ZoomConstantExpression:Kt,ZoomDependentExpression:Yt,StylePropertyFunction:eo},Bo={convertFunction:function(e,t){let o=e.stops;if(!o)return function(e,t){const o=["get",e.property];if(void 0===e.default)return"string"===t.type?["string",o]:o;if("enum"===t.type)return["match",o,Object.keys(t.values),o,e.default];{const r=["color"===t.type?"to-color":t.type,o,oo(e.default)];return"array"===t.type&&r.splice(1,0,t.value,t.length||null),r}}(e,t);const r=o&&"object"==typeof o[0][0],n=r||void 0!==e.property,i=r||!n;return o=o.map((e=>!n&&t.tokens&&"string"==typeof e[1]?[e[0],uo(e[1])]:[e[0],oo(e[1])])),r?function(e,t,o){const r={},n={},i=[];for(let t=0;t<o.length;t++){const a=o[t],s=a[0].zoom;void 0===r[s]&&(r[s]={zoom:s,type:e.type,property:e.property,default:e.default},n[s]=[],i.push(s)),n[s].push([a[0].value,a[1]])}if("exponential"===lo({},t)){const o=[ro(e),["linear"],["zoom"]];for(const e of i)so(o,e,io(r[e],t,n[e]),!1);return o}{const e=["step",["zoom"]];for(const o of i)so(e,o,io(r[o],t,n[o]),!0);return ao(e),e}}(e,t,o):i?function(e,t,o,r=["zoom"]){const n=lo(e,t);let i,a=!1;if("interval"===n)i=["step",r],a=!0;else{if("exponential"!==n)throw new Error(`Unknown zoom function type "${n}"`);{const t=void 0!==e.base?e.base:1;i=[ro(e),1===t?["linear"]:["exponential",t],r]}}for(const e of o)so(i,e[0],e[1],a);return ao(i),i}(e,t,o):io(e,t,o)},createFunction:Ut,isFunction:Pt};function Jo(e){var t=e.expr,o=e.layer,r=Math.min(t(o,"paint","circle-radius"),8),n=Math.min(t(o,"paint","circle-stroke-width"),4),i=t(o,"paint","circle-color"),a=t(o,"paint","circle-opacity"),s=t(o,"paint","circle-stroke-color"),l=t(o,"paint","circle-stroke-opacity"),u=r-n/2;return{element:"svg",attributes:{viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg",style:{filter:"blur("+t(o,"paint","circle-blur")*u+"px)"}},children:[{element:"circle",attributes:{key:"l1",cx:10,cy:10,fill:i,opacity:a,r:u}},{element:"circle",attributes:{key:"l2",cx:10,cy:10,fill:"transparent",opacity:l,r,"stroke-width":n,stroke:s}}]}}function Wo(e){var t=e.expr,o=e.layer;return{element:"div",attributes:{style:{width:"100%",height:"100%",backgroundImage:"url("+(0,e.image)(t(o,"paint","fill-pattern"))+")",backgroundColor:t(o,"paint","fill-color"),opacity:t(o,"paint","fill-opacity"),backgroundSize:"66% 66%",backgroundPosition:"center"}}}}function Go(e){var t=e.layer,o=e.expr,r=(0,e.image)(o(t,"paint","line-pattern")),n={stroke:r?"url(#img1)":o(t,"paint","line-color"),strokeWidth:Math.max(2,Math.min(o(t,"paint","line-width"),8)),strokeOpacity:o(t,"paint","line-opacity")},i=n.strokeWidth;return{element:"svg",attributes:{viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg"},children:[{element:"defs",attributes:{key:"defs"},children:[{element:"pattern",attributes:{key:"pattern",id:"img1",x:0,y:0,width:n.strokeWidth,height:n.strokeWidth,patternUnits:"userSpaceOnUse",patternTransform:"translate("+-i/2+" "+-i/2+") rotate(45)"},children:[{element:"image",attributes:{key:"img",xlinkHref:r,x:0,y:0,width:n.strokeWidth,height:n.strokeWidth}}]}]},{element:"path",attributes:{key:"path",style:n,stroke:n.stroke,d:"M0 20 L 20 0"}}]}}function Vo(e){return function(e){var t=e.image,o=(0,e.expr)(e.layer,"layout","icon-image");if(!o)return null;var r=t(o);return r?{element:"div",attributes:{style:{backgroundImage:"url("+r+")",backgroundSize:"contain",backgroundPosition:"center",backgroundRepeat:"no-repeat",width:"100%",height:"100%"}}}:null}(e)||(n=(o=(t=e).expr)(r=t.layer,"paint","text-color"),i=o(r,"paint","text-opacity"),{element:"svg",attributes:{viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg"},children:[{element:"path",attributes:{key:"l1",d:a="M 4,4 L 16,4 L 16,7 L 11.5 7 L 11.5 16 L 8.5 16 L 8.5 7 L 4 7 Z",stroke:o(r,"paint","text-halo-color"),"stroke-width":2*o(r,"paint","text-halo-width"),fill:"transparent","stroke-linejoin":"round"}},{element:"path",attributes:{key:"l2",d:a,fill:"white"}},{element:"path",attributes:{key:"l3",d:a,fill:n,opacity:i}}]});var t,o,r,n,i,a}Fo.parsed=Fo,Fo.latest=Fo;var Ho=[["background"],["circle"],["fill-extrusion"],["fill"],["heatmap"],["hillshade"],["line"],["raster"],["icon","symbol"],["text","symbol"]];const Xo=function(e){var t,o=e.sprite,n=e.layer,i={circle:Jo,symbol:Vo,line:Go,fill:Wo}[n.type],a=(t=e.zoom,function(e,o,n){var i,a,s=(i=n,(a=Ho.find((function(e){return i.startsWith(e[0])})))?a[1]||a[0]:null),l=r[o+"_"+s][n];if(!e[o])return l.default;var u=e[o][n];if(void 0===u)return l.default;if("object"==typeof u){var c;if(!(c=Array.isArray(u)?Uo.createExpression(u).value:Bo.createFunction(u,l)).evaluate)return null;var p=c.evaluate({zoom:t},{});return p?p.name||p:null}return u});return i?i({layer:n,expr:a,image:function(e){if(o&&o.json){var t=o.json[e];if(t)return r=o.image,i=(n=t).x,a=n.y,s=n.width,l=n.height,(u=document.createElement("canvas")).width=2*s,u.height=2*l,u.getContext("2d").drawImage(r,2*i,2*a,2*s,2*l,0,0,2*s,2*l),u.toDataURL()}var r,n,i,a,s,l,u;return null}}):null}},669:(e,t,o)=>{e.exports=o(609)},448:(e,t,o)=>{"use strict";var r=o(867),n=o(26),i=o(372),a=o(327),s=o(97),l=o(109),u=o(985),c=o(61);e.exports=function(e){return new Promise((function(t,o){var p=e.data,d=e.headers;r.isFormData(p)&&delete d["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var f=e.auth.username||"",y=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(f+":"+y)}var m=s(e.baseURL,e.url);if(h.open(e.method.toUpperCase(),a(m,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?l(h.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};n(t,o,i),h=null}},h.onabort=function(){h&&(o(c("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){o(c("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),o(c(t,e,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var g=(e.withCredentials||u(m))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;g&&(d[e.xsrfHeaderName]=g)}if("setRequestHeader"in h&&r.forEach(d,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete d[t]:h.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),o(e),h=null)})),p||(p=null),h.send(p)}))}},609:(e,t,o)=>{"use strict";var r=o(867),n=o(849),i=o(321),a=o(185);function s(e){var t=new i(e),o=n(i.prototype.request,t);return r.extend(o,i.prototype,t),r.extend(o,t),o}var l=s(o(655));l.Axios=i,l.create=function(e){return s(a(l.defaults,e))},l.Cancel=o(263),l.CancelToken=o(972),l.isCancel=o(502),l.all=function(e){return Promise.all(e)},l.spread=o(713),l.isAxiosError=o(268),e.exports=l,e.exports.default=l},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,o)=>{"use strict";var r=o(263);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var o=this;e((function(e){o.reason||(o.reason=new r(e),t(o.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,o)=>{"use strict";var r=o(867),n=o(327),i=o(782),a=o(572),s=o(185);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],o=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)o=o.then(t.shift(),t.shift());return o},l.prototype.getUri=function(e){return e=s(this.defaults,e),n(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,o){return this.request(s(o||{},{method:e,url:t,data:(o||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,o,r){return this.request(s(r||{},{method:e,url:t,data:o}))}})),e.exports=l},782:(e,t,o)=>{"use strict";var r=o(867);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},97:(e,t,o)=>{"use strict";var r=o(793),n=o(303);e.exports=function(e,t){return e&&!r(t)?n(e,t):t}},61:(e,t,o)=>{"use strict";var r=o(481);e.exports=function(e,t,o,n,i){var a=new Error(e);return r(a,t,o,n,i)}},572:(e,t,o)=>{"use strict";var r=o(867),n=o(527),i=o(502),a=o(655);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=n(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,o,r,n){return e.config=t,o&&(e.code=o),e.request=r,e.response=n,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e,t){t=t||{};var o={},n=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function u(n){r.isUndefined(t[n])?r.isUndefined(e[n])||(o[n]=l(void 0,e[n])):o[n]=l(e[n],t[n])}r.forEach(n,(function(e){r.isUndefined(t[e])||(o[e]=l(void 0,t[e]))})),r.forEach(i,u),r.forEach(a,(function(n){r.isUndefined(t[n])?r.isUndefined(e[n])||(o[n]=l(void 0,e[n])):o[n]=l(void 0,t[n])})),r.forEach(s,(function(r){r in t?o[r]=l(e[r],t[r]):r in e&&(o[r]=l(void 0,e[r]))}));var c=n.concat(i).concat(a).concat(s),p=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(p,u),o}},26:(e,t,o)=>{"use strict";var r=o(61);e.exports=function(e,t,o){var n=o.config.validateStatus;o.status&&n&&!n(o.status)?t(r("Request failed with status code "+o.status,o.config,null,o.request,o)):e(o)}},527:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e,t,o){return r.forEach(o,(function(o){e=o(e,t)})),e}},655:(e,t,o)=>{"use strict";var r=o(867),n=o(16),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=o(448)),s),transformRequest:[function(e,t){return n(t,"Accept"),n(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var o=new Array(arguments.length),r=0;r<o.length;r++)o[r]=arguments[r];return e.apply(t,o)}}},327:(e,t,o)=>{"use strict";var r=o(867);function n(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,o){if(!t)return e;var i;if(o)i=o(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(n(t)+"="+n(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,o)=>{"use strict";var r=o(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,o,n,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(o)&&s.push("expires="+new Date(o).toGMTString()),r.isString(n)&&s.push("path="+n),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},985:(e,t,o)=>{"use strict";var r=o(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");function n(e){var r=e;return t&&(o.setAttribute("href",r),r=o.href),o.setAttribute("href",r),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}return e=n(window.location.href),function(t){var o=r.isString(t)?n(t):t;return o.protocol===e.protocol&&o.host===e.host}}():function(){return!0}},16:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e,t){r.forEach(e,(function(o,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=o,delete e[r])}))}},109:(e,t,o)=>{"use strict";var r=o(867),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,o,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),o=r.trim(e.substr(i+1)),t){if(a[t]&&n.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([o]):a[t]?a[t]+", "+o:o}})),a):a}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},867:(e,t,o)=>{"use strict";var r=o(849),n=Object.prototype.toString;function i(e){return"[object Array]"===n.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==n.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===n.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var o=0,r=e.length;o<r;o++)t.call(null,e[o],o,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===n.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===n.call(e)},isFile:function(e){return"[object File]"===n.call(e)},isBlob:function(e){return"[object Blob]"===n.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function o(o,r){l(t[r])&&l(o)?t[r]=e(t[r],o):l(o)?t[r]=e({},o):i(o)?t[r]=o.slice():t[r]=o}for(var r=0,n=arguments.length;r<n;r++)c(arguments[r],o);return t},extend:function(e,t,o){return c(t,(function(t,n){e[n]=o&&"function"==typeof t?r(t,o):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},170:(e,t,o)=>{(t=o(645)(!1)).push([e.id,'.mapboxgl-legend-list\n{\n    display: none;\n}\n\n.mapboxgl-legend-list{\n    overflow-y:scroll;\n    max-height: calc(100vh * 0.7);\n}\n\n.mapboxgl-ctrl-group .mapboxgl-legend-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    /* padding: 8px 8px 6px; */\n    /* text-align: right; */\n    /* width: 100%; */\n    height: auto;\n}\n\n.mapboxgl-legend-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-legend-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-legend-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-legend-switcher\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg height="512pt" viewBox="0 0 512 512.0005" width="512pt" xmlns="http://www.w3.org/2000/svg"><path d="m220 0h-200c-11.046875 0-20 8.953125-20 20v200c0 11.046875 8.953125 20 20 20h200c11.046875 0 20-8.953125 20-20v-200c0-11.046875-8.953125-20-20-20zm-20 200h-160v-160h160zm299.65625 73.523438c-7.472656-3.097657-16.078125-1.386719-21.796875 4.332031l-200 200c-5.722656 5.722656-7.433594 14.324219-4.335937 21.796875 3.097656 7.476562 10.386718 12.347656 18.476562 12.347656h200c11.046875 0 20-8.953125 20-20v-200c0-8.089844-4.871094-15.382812-12.34375-18.476562zm-27.65625 198.476562h-131.714844l131.714844-131.714844zm-80-232c66.167969 0 120-53.832031 120-120s-53.832031-120-120-120-120 53.832031-120 120 53.832031 120 120 120zm0-200c44.113281 0 80 35.886719 80 80s-35.886719 80-80 80-80-35.886719-80-80 35.886719-80 80-80zm-157.859375 266.144531-85.855469 85.855469 85.855469 85.855469c7.8125 7.8125 7.8125 20.476562 0 28.285156-7.808594 7.808594-20.472656 7.8125-28.28125 0l-85.859375-85.855469-85.859375 85.859375c-7.808594 7.808594-20.472656 7.808594-28.28125 0-7.8125-7.8125-7.8125-20.476562 0-28.285156l85.855469-85.859375-85.855469-85.855469c-7.8125-7.8125-7.8125-20.476562 0-28.285156 7.808594-7.8125 20.472656-7.8125 28.28125 0l85.859375 85.855469 85.859375-85.859375c7.808594-7.808594 20.472656-7.808594 28.28125 0 7.8125 7.8125 7.8125 20.476562 0 28.289062zm0 0"/></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\ntable.legend-table{\n    border-collapse:collapse;\n    margin:0 auto;\n    }\ntd.legend-table-td,th.legend-table-th{\n    border:1px solid #ffffff;\n    margin: 10px;\n    padding:2px;\n    text-align: left;\n}\n\n.mapboxgl-legend-close-button{\n    position: absolute;\n    right: 0;\n    top: 0;\n    border: 0;\n    border-radius: 0 3px 0 0;\n    cursor: pointer;\n    background-color: transparent;\n    font-size: 13px;\n    padding-top: 5px;\n    padding-right: 5px;\n}\n\n.mapboxgl-legend-title-label{\n    font-size: 14px; \n    font-weight: bold; \n    margin: 5px;\n}\n\n.mapboxgl-legend-onlyRendered-checkbox{\n    margin: 5px;\n}\n\n.mapboxgl-legend-onlyRendered-label{\n    font-size: 14px; \n    margin: 5px;\n}\n\ntd.legend-table-td > svg{\n    height: 17px;\n}',""]),e.exports=t},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o=function(e,t){var o,r,n,i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var s=(o=a,r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(n," */")),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(o,"}"):o})).join("")},t.i=function(e,o,r){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(n[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&n[l[0]]||(o&&(l[2]?l[2]="".concat(o," and ").concat(l[2]):l[2]=o),t.push(l))}},t}},735:(e,t,o)=>{var r=o(379),n=o(170);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.id,n,""]]);r(n,{insert:"head",singleton:!1}),e.exports=n.locals||{}},379:(e,t,o)=>{"use strict";var r,n=function(){var e={};return function(t){if(void 0===e[t]){var o=document.querySelector(t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}e[t]=o}return e[t]}}(),i=[];function a(e){for(var t=-1,o=0;o<i.length;o++)if(i[o].identifier===e){t=o;break}return t}function s(e,t){for(var o={},r=[],n=0;n<e.length;n++){var s=e[n],l=t.base?s[0]+t.base:s[0],u=o[l]||0,c="".concat(l," ").concat(u);o[l]=u+1;var p=a(c),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(i[p].references++,i[p].updater(d)):i.push({identifier:c,updater:y(d,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=o.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=n(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,o,r){var n=o?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,n);else{var i=document.createTextNode(n),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,o){var r=o.css,n=o.media,i=o.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,f=0;function y(e,t){var o,r,n;if(t.singleton){var i=f++;o=h||(h=l(t)),r=p.bind(null,o,i,!1),n=p.bind(null,o,i,!0)}else o=l(t),r=d.bind(null,o,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(o)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var o=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<o.length;r++){var n=a(o[r]);i[n].references--}for(var l=s(e,t),u=0;u<o.length;u++){var c=a(o[u]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}o=l}}}},588:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(o(507)),i=o(620);o(735),(()=>{const e=new n.default.Map({container:"map",style:"https://narwassco.github.io/mapbox-stylefiles/unvt/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});e.addControl(new n.default.NavigationControl,"top-right"),e.on("load",(function(){const t={pipeline:"Pipeline",pipeline_annotation:"Pipeline Label",meter:"Water Meter","flow meter":"Flow Meter",valve:"Valve",firehydrant:"Fire Hydrant",washout:"Washout",tank:"Tank",tank_annotation:"Tank Label",wtp:"WTP",wtp_annotation:"WTP Label",intake:"Intake",intake_annotation:"Intake Label",parcels:"Parcels",parcels_annotation:"Parcels Label",village:"Village",village_annotation:"Village Label",dma:"DMA","dma-annotation":"DMA Label","contour-line":"Countour","contour-label":"Contour Label",hillshade:"Hillshade"};let o={showDefault:!1,showCheckbox:!1,onlyRendered:!0,reverseOrder:!0};e.addControl(new i.MapboxLegendControl(t,o),"top-right"),o={showDefault:!0,showCheckbox:!0,onlyRendered:!0,reverseOrder:!1},e.addControl(new i.MapboxLegendControl(t,o),"bottom-right"),o={showDefault:!0,showCheckbox:!0,onlyRendered:!1,reverseOrder:!0},e.addControl(new i.MapboxLegendControl({},o),"bottom-left")}))})()},620:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(770);Object.defineProperty(t,"MapboxLegendControl",{enumerable:!0,get:function(){return r.default}})},770:function(e,t,o){"use strict";var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=o(507),a=n(o(895)),s=n(o(669));t.default=class{constructor(e,t){this.uncheckedLayers={},this.options={showDefault:!0,showCheckbox:!0,reverseOrder:!0,onlyRendered:!0,accesstoken:void 0},this.sprite={image:HTMLImageElement,json:JSON},this.targets=e,t&&(this.options=Object.assign(this.options,t)),this.onlyRendered=this.options.onlyRendered,this.onDocumentClick=this.onDocumentClick.bind(this)}getDefaultPosition(){return"top-right"}changeLayerVisibility(e,t){var o,r;t?(this.uncheckedLayers[e]&&delete this.uncheckedLayers[e],null===(o=this.map)||void 0===o||o.setLayoutProperty(e,"visibility","visible")):(this.uncheckedLayers[e]=e,null===(r=this.map)||void 0===r||r.setLayoutProperty(e,"visibility","none"));const n=document.getElementsByName(e);for(let e in n)"number"!=typeof n[e]&&(n[e].checked=t)}createLayerCheckbox(e){var t;if(!this.options.showCheckbox)return;const o=this,r=document.createElement("TD");r.className="legend-table-td";const n=document.createElement("input");n.setAttribute("type","checkbox"),n.setAttribute("name",e.id),n.setAttribute("value",e.id);const i=null===(t=this.map)||void 0===t?void 0:t.getLayoutProperty(e.id,"visibility");if(i){let t=!0;switch(i){case"none":t=!1;break;case"visible":t=!0,n.checked=!0}o.changeLayerVisibility(e.id,t)}else n.checked=!0;return n.addEventListener("click",(function(e){var t,r;const n=null===(t=e.target)||void 0===t?void 0:t.value,i=null===(r=e.target)||void 0===r?void 0:r.checked;o.changeLayerVisibility(n,i)})),r.appendChild(n),r}getLayerLegend(e){const t=this.map,o=null==t?void 0:t.getZoom(),r=this.sprite;let n=a.default({sprite:r,zoom:o,layer:e});if(!n)return;var i=document.createElement("TR");const s=this.createLayerCheckbox(e);s&&i.appendChild(s);var l=document.createElement("TD");switch(l.className="legend-table-td",n.element){case"div":if(n.attributes.style.backgroundImage&&!["url(undefined)","url(null)"].includes(n.attributes.style.backgroundImage)){var u=document.createElement("img");u.src=n.attributes.style.backgroundImage.replace("url(","").replace(")",""),u.alt=e.id,u.style.cssText="height: 17px;",l.appendChild(u)}l.style.backgroundColor=n.attributes.style.backgroundColor,l.style.backgroundPosition=n.attributes.style.backgroundPosition,l.style.backgroundSize=n.attributes.style.backgroundSize,l.style.backgroundRepeat=n.attributes.style.backgroundRepeat,l.style.opacity=n.attributes.style.opacity;break;case"svg":let t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.style.cssText="height: 17px;",t.setAttributeNS(null,"version","1.1"),Object.keys(n.attributes).forEach((e=>{t.setAttribute(e,n.attributes[e]);let o=document.createElementNS("http://www.w3.org/2000/svg","g");n.children.forEach((e=>{var t=document.createElementNS("http://www.w3.org/2000/svg",e.element);Object.keys(e.attributes).forEach((o=>{t.setAttributeNS(null,o,e.attributes[o])})),o.appendChild(t)})),t.appendChild(o)})),document.createElement("label").textContent=this.targets&&this.targets[e.id]?this.targets[e.id]:e.id,l.appendChild(t);break;default:return}var c=document.createElement("TD");c.className="legend-table-td";let p=document.createElement("label");return p.textContent=this.targets&&this.targets[e.id]?this.targets[e.id]:e.id,c.appendChild(p),i.appendChild(l),i.appendChild(c),i}updateLegendControl(){const e=this.map,t={};if(e){const o=e.queryRenderedFeatures();for(let e of o)t[e.layer.id]=e.layer}let o=null==e?void 0:e.getStyle().layers;if(o){for(this.legendTable||(this.legendTable=document.createElement("TABLE"),this.legendTable.className="legend-table",this.legendContainer.appendChild(this.legendTable));this.legendTable.firstChild;)this.legendTable.removeChild(this.legendTable.firstChild);this.options.reverseOrder&&(o=o.reverse()),o.forEach((e=>{if(t[e.id]&&this.uncheckedLayers[e.id]?delete this.uncheckedLayers[e.id]:this.uncheckedLayers[e.id]&&(t[e.id]=e),void 0===this.targets||this.targets&&0===Object.keys(this.targets).length||this.targets&&Object.keys(this.targets).map((e=>e)).includes(e.id)){if(this.onlyRendered&&!t[e.id])return;const o=this.getLayerLegend(e);if(!o)return;this.legendTable.appendChild(o)}}))}}onAdd(e){this.map=e,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.legendContainer=document.createElement("div"),this.legendContainer.classList.add("mapboxgl-legend-list"),this.legendButton=document.createElement("button"),this.legendButton.classList.add("mapboxgl-ctrl-icon"),this.legendButton.classList.add("mapboxgl-legend-switcher"),this.legendButton.addEventListener("click",(()=>{this.legendButton.style.display="none",this.legendContainer.style.display="block"})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.legendButton),this.controlContainer.appendChild(this.legendContainer),this.closeButton=document.createElement("button"),this.closeButton.textContent="x",this.closeButton.classList.add("mapboxgl-legend-close-button"),this.closeButton.addEventListener("click",(()=>{this.legendButton.style.display="block",this.legendContainer.style.display="none"})),this.legendContainer.appendChild(this.closeButton);const t=document.createElement("label");t.classList.add("mapboxgl-legend-title-label"),t.textContent="Legend",this.legendContainer.appendChild(t),this.legendContainer.appendChild(document.createElement("br"));const o=document.createElement("input");o.setAttribute("type","checkbox");const n="mapboxgl-legend-onlyrendered-checkbox-"+100*Math.random();o.setAttribute("id",n),o.classList.add("mapboxgl-legend-onlyRendered-checkbox"),o.checked=this.onlyRendered;const a=this;o.addEventListener("click",(function(e){var t;const o=null===(t=e.target)||void 0===t?void 0:t.checked;a.onlyRendered=!!o,a.updateLegendControl()})),this.legendContainer.appendChild(o);const s=document.createElement("label");s.classList.add("mapboxgl-legend-onlyRendered-label"),s.textContent="Only rendered",s.htmlFor=n,this.legendContainer.appendChild(s),this.legendContainer.appendChild(document.createElement("br")),this.map.on("moveend",(e=>{this.updateLegendControl()}));const l=()=>r(this,void 0,void 0,(function*(){if(e.loaded()){let t=e.getStyle().sprite,o="";t&&t.includes("mapbox://")&&(t=t.replace(/mapbox:\/\//g,i.baseApiUrl).replace(/sprites/g,"/styles/v1"),t=`${t}/sprite`,o=`?access_token=${this.options.accesstoken||i.accessToken}`);const r=Promise.all([this.loadImage(`${t}@2x.png${o}`),this.loadJson(`${t}.json${o}`)]);yield r.then((([e,t])=>{this.setSprite(e,t)})),this.updateLegendControl(),e.off("idle",l)}}));return this.map.on("idle",l),this.options&&1==this.options.showDefault&&(this.legendContainer.style.display="block",this.legendButton.style.display="none"),this.controlContainer}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.legendButton&&(this.legendButton.removeEventListener("click",this.onDocumentClick),this.controlContainer.parentNode.removeChild(this.controlContainer),document.removeEventListener("click",this.onDocumentClick),this.map=void 0)}redraw(){this.updateLegendControl()}onDocumentClick(e){this.controlContainer&&!this.controlContainer.contains(e.target)&&this.legendContainer&&this.legendButton&&this.options&&!0!==this.options.showDefault&&(this.legendContainer.style.display="none",this.legendButton.style.display="block")}setSprite(e,t){this.sprite={image:e,json:t}}loadImage(e){let t=!1;const o=new Promise(((o,r)=>{const n=new Image;n.crossOrigin="Anonymous",n.onload=()=>{t||o(n)},n.onerror=e=>{t||r(e)},n.src=e}));return o.cancel=()=>{t=!0},o}loadJson(e){return s.default.get(e,{responseType:"json"}).then((e=>e.data))}}},507:e=>{"use strict";e.exports=mapboxgl}},t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={id:r,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.exports}o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(588)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,