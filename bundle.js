/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={335:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>Lo});var r={$version:8,$root:{version:{required:!0,type:"enum",values:[8],doc:"Style specification version number. Must be 8.",example:8},name:{type:"string",doc:"A human-readable name for the style.",example:"Bright"},metadata:{type:"*",doc:"Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."},center:{type:"array",value:"number",doc:"Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:[-73.9749,40.7736]},zoom:{type:"number",doc:"Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:12.5},bearing:{type:"number",default:0,period:360,units:"degrees",doc:'Default bearing, in degrees. The bearing is the compass direction that is "up"; for example, a bearing of 90Â° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).',example:29},pitch:{type:"number",default:0,units:"degrees",doc:"Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",example:50},light:{type:"light",doc:"The global light source.",example:{anchor:"viewport",color:"white",intensity:.4}},terrain:{type:"terrain",doc:"A global modifier that elevates layers and markers based on a DEM data source."},fog:{type:"fog",doc:"A global effect that fades layers and markers based on their distance to the camera. The fog can be used to approximate the effect of atmosphere on distant objects and enhance the depth perception of the map when used with terrain or 3D features. Note: fog is renamed to atmosphere in the Android and iOS SDKs and planned to be changed in GL-JS v.3.0.0."},sources:{required:!0,type:"sources",doc:"Data source specifications.",example:{"mapbox-streets":{type:"vector",url:"mapbox://mapbox.mapbox-streets-v6"}}},sprite:{type:"string",doc:"A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",example:"mapbox://sprites/mapbox/bright-v8"},glyphs:{type:"string",doc:"A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",example:"mapbox://fonts/mapbox/{fontstack}/{range}.pbf"},transition:{type:"transition",doc:"A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.",example:{duration:300,delay:0}},projection:{type:"projection",doc:"The projection the map should be rendered in. Supported projections are Mercator, Globe, Albers, Equal Earth, Equirectangular (WGS84), Lambert conformal conic, Natural Earth, and Winkel Tripel. Terrain, sky and fog are supported by only Mercator and globe. CustomLayerInterface is not supported outside of Mercator.",example:{name:"albers",center:[-154,50],parallels:[55,65]}},layers:{required:!0,type:"array",value:"layer",doc:"Layers will be drawn in the order of this array.",example:[{id:"water",source:"mapbox-streets","source-layer":"water",type:"fill",paint:{"fill-color":"#00ffff"}}]}},sources:{"*":{type:"source",doc:"Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."}},source:["source_vector","source_raster","source_raster_dem","source_geojson","source_video","source_image"],source_vector:{type:{required:!0,type:"enum",values:{vector:{doc:"A vector tile source."}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},scheme:{type:"enum",values:{xyz:{doc:"Slippy map tilenames scheme."},tms:{doc:"OSGeo spec scheme."}},default:"xyz",doc:"Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},promoteId:{type:"promoteId",doc:"A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers."},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source's tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_raster:{type:{required:!0,type:"enum",values:{raster:{doc:"A raster tile source."}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},tileSize:{type:"number",default:512,units:"pixels",doc:"The minimum visual size to display tiles for this layer. Only configurable for raster layers."},scheme:{type:"enum",values:{xyz:{doc:"Slippy map tilenames scheme."},tms:{doc:"OSGeo spec scheme."}},default:"xyz",doc:"Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source's tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_raster_dem:{type:{required:!0,type:"enum",values:{"raster-dem":{doc:"A RGB-encoded raster DEM source"}},doc:"The type of the source."},url:{type:"string",doc:"A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."},tiles:{type:"array",value:"string",doc:"An array of one or more tile source URLs, as in the TileJSON spec."},bounds:{type:"array",value:"number",length:4,default:[-180,-85.051129,180,85.051129],doc:"An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."},minzoom:{type:"number",default:0,doc:"Minimum zoom level for which tiles are available, as in the TileJSON spec."},maxzoom:{type:"number",default:22,doc:"Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."},tileSize:{type:"number",default:512,units:"pixels",doc:"The minimum visual size to display tiles for this layer. Only configurable for raster layers."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},encoding:{type:"enum",values:{terrarium:{doc:"Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."},mapbox:{doc:"Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."}},default:"mapbox",doc:"The encoding used by this source. Mapbox Terrain RGB is used by default"},volatile:{type:"boolean",default:!1,doc:"A setting to determine whether a source's tiles are cached locally.","sdk-support":{"basic functionality":{android:"9.3.0",ios:"5.10.0"}}},"*":{type:"*",doc:"Other keys to configure the data source."}},source_geojson:{type:{required:!0,type:"enum",values:{geojson:{doc:"A GeoJSON data source."}},doc:"The data type of the GeoJSON source."},data:{type:"*",doc:"A URL to a GeoJSON file, or inline GeoJSON."},maxzoom:{type:"number",default:18,doc:"Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."},attribution:{type:"string",doc:"Contains an attribution to be displayed when the map is shown to a user."},buffer:{type:"number",default:128,maximum:512,minimum:0,doc:"Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."},filter:{type:"*",doc:"An expression for filtering features prior to processing them for rendering."},tolerance:{type:"number",default:.375,doc:"Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."},cluster:{type:"boolean",default:!1,doc:"If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\n * `cluster` Is `true` if the point is a cluster \n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\n * `point_count` Number of original points grouped into this cluster\n * `point_count_abbreviated` An abbreviated point count"},clusterRadius:{type:"number",default:50,minimum:0,doc:"Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."},clusterMaxZoom:{type:"number",doc:"Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15."},clusterMinPoints:{type:"number",doc:"Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`."},clusterProperties:{type:"*",doc:'An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{"property_name": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `"+"` or `"max"`) â it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\n\nExample: `{"sum": ["+", ["get", "scalerank"]]}`.\n\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `["accumulated"]` value, e.g.:\n`{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}`'},lineMetrics:{type:"boolean",default:!1,doc:"Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."},generateId:{type:"boolean",default:!1,doc:"Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."},promoteId:{type:"promoteId",doc:"A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."}},source_video:{type:{required:!0,type:"enum",values:{video:{doc:"A video data source."}},doc:"The data type of the video source."},urls:{required:!0,type:"array",value:"string",doc:"URLs to video content in order of preferred format."},coordinates:{required:!0,doc:"Corners of video specified in longitude, latitude pairs.",type:"array",length:4,value:{type:"array",length:2,value:"number",doc:"A single longitude, latitude pair."}}},source_image:{type:{required:!0,type:"enum",values:{image:{doc:"An image data source."}},doc:"The data type of the image source."},url:{required:!0,type:"string",doc:"URL that points to an image."},coordinates:{required:!0,doc:"Corners of image specified in longitude, latitude pairs.",type:"array",length:4,value:{type:"array",length:2,value:"number",doc:"A single longitude, latitude pair."}}},layer:{id:{type:"string",doc:"Unique layer name.",required:!0},type:{type:"enum",values:{fill:{doc:"A filled polygon with an optional stroked border.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},line:{doc:"A stroked line.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},symbol:{doc:"An icon or a text label.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},circle:{doc:"A filled circle.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},heatmap:{doc:"A heatmap.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"fill-extrusion":{doc:"An extruded (3D) polygon.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},raster:{doc:"Raster map textures such as satellite imagery.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},hillshade:{doc:"Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},background:{doc:"The background color or pattern of the map.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}}},sky:{doc:"A spherical dome around the map that is always rendered behind all other layers.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}}},doc:"Rendering type of this layer.",required:!0},metadata:{type:"*",doc:"Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."},source:{type:"string",doc:"Name of a source description to be used for this layer. Required for all layer types except `background`."},"source-layer":{type:"string",doc:"Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."},minzoom:{type:"number",minimum:0,maximum:24,doc:"The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."},maxzoom:{type:"number",minimum:0,maximum:24,doc:"The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."},filter:{type:"filter",doc:'An expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `["feature-state", ...]` expression is not supported in filter expressions.  The `["pitch"]` and `["distance-from-center"]` expressions are supported only for filter expressions on the symbol layer.'},layout:{type:"layout",doc:"Layout properties for the layer."},paint:{type:"paint",doc:"Default paint properties for this layer."}},layout:["layout_fill","layout_line","layout_circle","layout_heatmap","layout_fill-extrusion","layout_symbol","layout_raster","layout_hillshade","layout_background","layout_sky"],layout_background:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_sky:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"constant"}},layout_fill:{"fill-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"},"data-driven styling":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_circle:{"circle-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.2.0",ios:"5.9.0",macos:"0.16.0"},"data-driven styling":{js:"1.2.0",android:"9.2.0",ios:"5.9.0",macos:"0.16.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_heatmap:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},"property-type":"constant"}},"layout_fill-extrusion":{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},"property-type":"constant"}},layout_line:{"line-cap":{type:"enum",values:{butt:{doc:"A cap with a squared-off end which is drawn to the exact endpoint of the line."},round:{doc:"A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."},square:{doc:"A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."}},default:"butt",doc:"The display of line endings.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"2.3.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-join":{type:"enum",values:{bevel:{doc:"A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."},round:{doc:"A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."},miter:{doc:"A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."}},default:"miter",doc:"The display of lines when joining.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"line-miter-limit":{type:"number",default:2,doc:"Used to automatically convert miter joins to bevel joins for sharp angles.",requires:[{"line-join":"miter"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-round-limit":{type:"number",default:1.05,doc:"Used to automatically convert round joins to miter joins for shallow angles.",requires:[{"line-join":"round"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.","sdk-support":{"basic functionality":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"},"data-driven styling":{js:"1.2.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_symbol:{"symbol-placement":{type:"enum",values:{point:{doc:"The label is placed at the point where the geometry is located."},line:{doc:"The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."},"line-center":{doc:"The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."}},default:"point",doc:"Label placement relative to its geometry.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`line-center` value":{js:"0.47.0",android:"6.4.0",ios:"4.3.0",macos:"0.10.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"symbol-spacing":{type:"number",default:250,minimum:1,units:"pixels",doc:"Distance between two symbol anchors.",requires:[{"symbol-placement":"line"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"symbol-avoid-edges":{type:"boolean",default:!1,doc:"If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"symbol-sort-key":{type:"number",doc:"Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.","sdk-support":{"basic functionality":{js:"0.53.0",android:"7.4.0",ios:"4.11.0",macos:"0.14.0"},"data-driven styling":{js:"0.53.0",android:"7.4.0",ios:"4.11.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"symbol-z-order":{type:"enum",values:{auto:{doc:"Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."},"viewport-y":{doc:"Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."},source:{doc:"Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."}},default:"auto",doc:"Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.","sdk-support":{"basic functionality":{js:"0.49.0",android:"6.6.0",ios:"4.5.0",macos:"0.12.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-allow-overlap":{type:"boolean",default:!1,doc:"If true, the icon will be visible even if it collides with other previously drawn symbols.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-ignore-placement":{type:"boolean",default:!1,doc:"If true, other symbols can be visible even if they collide with the icon.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-optional":{type:"boolean",default:!1,doc:"If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",requires:["icon-image","text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-rotation-alignment":{type:"enum",values:{map:{doc:"When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."},viewport:{doc:"Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."},auto:{doc:"When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."}},default:"auto",doc:"In combination with `symbol-placement`, determines the rotation behavior of icons.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-size":{type:"number",default:1,minimum:0,units:"factor of the original icon size",doc:"Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-text-fit":{type:"enum",values:{none:{doc:"The icon is displayed at its intrinsic aspect ratio."},width:{doc:"The icon is scaled in the x-dimension to fit the width of the text."},height:{doc:"The icon is scaled in the y-dimension to fit the height of the text."},both:{doc:"The icon is scaled in both x- and y-dimensions."}},default:"none",doc:"Scales the icon to fit around the associated text.",requires:["icon-image","text-field"],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"},"stretchable icons":{js:"1.6.0",android:"9.2.0",ios:"5.8.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-text-fit-padding":{type:"array",value:"number",length:4,default:[0,0,0,0],units:"pixels",doc:"Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",requires:["icon-image","text-field",{"icon-text-fit":["both","width","height"]}],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-image":{type:"resolvedImage",doc:"Name of image in sprite to use for drawing an image background.",tokens:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-rotate":{type:"number",default:0,period:360,units:"degrees",doc:"Rotates the icon clockwise.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.21.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-padding":{type:"number",default:2,minimum:0,units:"pixels",doc:"Size of the additional area around the icon bounding box used for detecting symbol collisions.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-keep-upright":{type:"boolean",default:!1,doc:"If true, the icon may be flipped to prevent it from being rendered upside-down.",requires:["icon-image",{"icon-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"icon-offset":{type:"array",value:"number",length:2,default:[0,0],doc:"Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-anchor":{type:"enum",values:{center:{doc:"The center of the icon is placed closest to the anchor."},left:{doc:"The left side of the icon is placed closest to the anchor."},right:{doc:"The right side of the icon is placed closest to the anchor."},top:{doc:"The top of the icon is placed closest to the anchor."},bottom:{doc:"The bottom of the icon is placed closest to the anchor."},"top-left":{doc:"The top left corner of the icon is placed closest to the anchor."},"top-right":{doc:"The top right corner of the icon is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the icon is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the icon is placed closest to the anchor."}},default:"center",doc:"Part of the icon placed closest to the anchor.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"icon-pitch-alignment":{type:"enum",values:{map:{doc:"The icon is aligned to the plane of the map."},viewport:{doc:"The icon is aligned to the plane of the viewport."},auto:{doc:"Automatically matches the value of `icon-rotation-alignment`."}},default:"auto",doc:"Orientation of icon when map is pitched.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-pitch-alignment":{type:"enum",values:{map:{doc:"The text is aligned to the plane of the map."},viewport:{doc:"The text is aligned to the plane of the viewport."},auto:{doc:"Automatically matches the value of `text-rotation-alignment`."}},default:"auto",doc:"Orientation of text when map is pitched.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-rotation-alignment":{type:"enum",values:{map:{doc:"When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."},viewport:{doc:"Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."},auto:{doc:"When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."}},default:"auto",doc:"In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"`auto` value":{js:"0.25.0",android:"4.2.0",ios:"3.4.0",macos:"0.3.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-field":{type:"formatted",default:"",tokens:!0,doc:"Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-font":{type:"array",value:"string",default:["Open Sans Regular","Arial Unicode MS Regular"],doc:"Font stack to use for displaying text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-size":{type:"number",default:16,minimum:0,units:"pixels",doc:"Font size.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-max-width":{type:"number",default:10,minimum:0,units:"ems",doc:"The maximum line width for text wrapping.",requires:["text-field",{"symbol-placement":["point"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-line-height":{type:"number",default:1.2,units:"ems",doc:"Text leading value for multi-line text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"2.3.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-letter-spacing":{type:"number",default:0,units:"ems",doc:"Text tracking amount.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.40.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-justify":{type:"enum",values:{auto:{doc:"The text is aligned towards the anchor position."},left:{doc:"The text is aligned to the left."},center:{doc:"The text is centered."},right:{doc:"The text is aligned to the right."}},default:"center",doc:"Text justification options.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"},auto:{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-radial-offset":{type:"number",units:"ems",default:0,doc:"Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.","sdk-support":{"basic functionality":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"},"data-driven styling":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},requires:["text-field"],"property-type":"data-driven",expression:{interpolated:!0,parameters:["zoom","feature"]}},"text-variable-anchor":{type:"array",value:"enum",values:{center:{doc:"The center of the text is placed closest to the anchor."},left:{doc:"The left side of the text is placed closest to the anchor."},right:{doc:"The right side of the text is placed closest to the anchor."},top:{doc:"The top of the text is placed closest to the anchor."},bottom:{doc:"The bottom of the text is placed closest to the anchor."},"top-left":{doc:"The top left corner of the text is placed closest to the anchor."},"top-right":{doc:"The top right corner of the text is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the text is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the text is placed closest to the anchor."}},requires:["text-field",{"symbol-placement":["point"]}],doc:"To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.","sdk-support":{"basic functionality":{js:"0.54.0",android:"7.4.0",ios:"4.10.0",macos:"0.14.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-anchor":{type:"enum",values:{center:{doc:"The center of the text is placed closest to the anchor."},left:{doc:"The left side of the text is placed closest to the anchor."},right:{doc:"The right side of the text is placed closest to the anchor."},top:{doc:"The top of the text is placed closest to the anchor."},bottom:{doc:"The bottom of the text is placed closest to the anchor."},"top-left":{doc:"The top left corner of the text is placed closest to the anchor."},"top-right":{doc:"The top right corner of the text is placed closest to the anchor."},"bottom-left":{doc:"The bottom left corner of the text is placed closest to the anchor."},"bottom-right":{doc:"The bottom right corner of the text is placed closest to the anchor."}},default:"center",doc:"Part of the text placed closest to the anchor.",requires:["text-field",{"!":"text-variable-anchor"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-max-angle":{type:"number",default:45,units:"degrees",doc:"Maximum angle change between adjacent characters.",requires:["text-field",{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-writing-mode":{type:"array",value:"enum",values:{horizontal:{doc:"If a text's language supports horizontal writing mode, symbols would be laid out horizontally."},vertical:{doc:"If a text's language supports vertical writing mode, symbols would be laid out vertically."}},doc:"The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesnât support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either ['horizontal', 'vertical'] or ['vertical', 'horizontal'], the order doesn't affect the placement.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"1.3.0",android:"8.3.0",ios:"5.3.0",macos:"0.15.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-rotate":{type:"number",default:0,period:360,units:"degrees",doc:"Rotates the text clockwise.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-padding":{type:"number",default:2,minimum:0,units:"pixels",doc:"Size of the additional area around the text bounding box used for detecting symbol collisions.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-keep-upright":{type:"boolean",default:!0,doc:"If true, the text may be flipped vertically to prevent it from being rendered upside-down.",requires:["text-field",{"text-rotation-alignment":"map"},{"symbol-placement":["line","line-center"]}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-transform":{type:"enum",values:{none:{doc:"The text is not altered."},uppercase:{doc:"Forces all letters to be displayed in uppercase."},lowercase:{doc:"Forces all letters to be displayed in lowercase."}},default:"none",doc:"Specifies how to capitalize text, similar to the CSS `text-transform` property.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-offset":{type:"array",doc:"Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",value:"number",units:"ems",length:2,default:[0,0],requires:["text-field",{"!":"text-radial-offset"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.35.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature"]},"property-type":"data-driven"},"text-allow-overlap":{type:"boolean",default:!1,doc:"If true, the text will be visible even if it collides with other previously drawn symbols.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-ignore-placement":{type:"boolean",default:!1,doc:"If true, other symbols can be visible even if they collide with the text.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-optional":{type:"boolean",default:!1,doc:"If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",requires:["text-field","icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_raster:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},"property-type":"constant"}},layout_hillshade:{visibility:{type:"enum",values:{visible:{doc:"The layer is shown."},none:{doc:"The layer is not shown."}},default:"visible",doc:"Whether this layer is displayed.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},"property-type":"constant"}},filter:{type:"array",value:"*",doc:"A filter selects specific features from a layer."},filter_symbol:{type:"boolean",doc:'Expression which determines whether or not to display a symbol. Symbols support dynamic filtering, meaning this expression can use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature","pitch","distance-from-center"]}},filter_fill:{type:"boolean",doc:'Expression which determines whether or not to display a polygon. Fill layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_line:{type:"boolean",doc:'Expression which determines whether or not to display a Polygon or LineString. Line layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_circle:{type:"boolean",doc:'Expression which determines whether or not to display a circle. Circle layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},"filter_fill-extrusion":{type:"boolean",doc:'Expression which determines whether or not to display a Polygon. Fill-extrusion layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_heatmap:{type:"boolean",doc:'Expression used to determine whether a point is being displayed or not. Heatmap layer does NOT support dynamic filtering, meaning this expression can NOT use the `["pitch"]` and `["distance-from-center"]` expressions to reference the current state of the view.',default:!1,transition:!1,"property-type":"data-driven",expression:{interpolated:!1,parameters:["zoom","feature"]}},filter_operator:{type:"enum",values:{"==":{doc:'`["==", key, value]` equality: `feature[key] = value`'},"!=":{doc:'`["!=", key, value]` inequality: `feature[key] â  value`'},">":{doc:'`[">", key, value]` greater than: `feature[key] > value`'},">=":{doc:'`[">=", key, value]` greater than or equal: `feature[key] â¥ value`'},"<":{doc:'`["<", key, value]` less than: `feature[key] < value`'},"<=":{doc:'`["<=", key, value]` less than or equal: `feature[key] â¤ value`'},in:{doc:'`["in", key, v0, ..., vn]` set inclusion: `feature[key] â {v0, ..., vn}`'},"!in":{doc:'`["!in", key, v0, ..., vn]` set exclusion: `feature[key] â {v0, ..., vn}`'},all:{doc:'`["all", f0, ..., fn]` logical `AND`: `f0 â§ ... â§ fn`'},any:{doc:'`["any", f0, ..., fn]` logical `OR`: `f0 â¨ ... â¨ fn`'},none:{doc:'`["none", f0, ..., fn]` logical `NOR`: `Â¬f0 â§ ... â§ Â¬fn`'},has:{doc:'`["has", key]` `feature[key]` exists'},"!has":{doc:'`["!has", key]` `feature[key]` does not exist'},within:{doc:'`["within", object]` feature geometry is within object geometry'}},doc:"The filter operator."},geometry_type:{type:"enum",values:{Point:{doc:"Filter to point geometries."},LineString:{doc:"Filter to line geometries."},Polygon:{doc:"Filter to polygon geometries."}},doc:"The geometry type for the filter to select."},function:{expression:{type:"expression",doc:"An expression."},stops:{type:"array",doc:"An array of stops.",value:"function_stop"},base:{type:"number",default:1,minimum:0,doc:"The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."},property:{type:"string",doc:"The name of a feature property to use as the function input.",default:"$zoom"},type:{type:"enum",values:{identity:{doc:"Return the input value as the output value."},exponential:{doc:"Generate an output by interpolating between stops just less than and just greater than the function input."},interval:{doc:"Return the output value of the stop just less than the function input."},categorical:{doc:"Return the output value of the stop equal to the function input."}},doc:"The interpolation strategy to use in function evaluation.",default:"exponential"},colorSpace:{type:"enum",values:{rgb:{doc:"Use the RGB color space to interpolate color values"},lab:{doc:"Use the LAB color space to interpolate color values."},hcl:{doc:"Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."}},doc:"The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",default:"rgb"},default:{type:"*",required:!1,doc:"A value to serve as a fallback function result when a value isn't otherwise available. It is used in the following circumstances:\n* In categorical functions, when the feature value does not match any of the stop domain values.\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\nIf no default is provided, the style property's default is used in these circumstances."}},function_stop:{type:"array",minimum:0,maximum:24,value:["number","color"],length:2,doc:"Zoom level and value pair."},expression:{type:"array",value:"*",minimum:1,doc:"An expression defines a function that can be used for data-driven style properties or feature filters."},expression_name:{doc:"",type:"enum",values:{let:{doc:'Binds expressions to named variables, which can then be referenced in the result expression using ["var", "variable_name"].',group:"Variable binding","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},var:{doc:'References variable bound using "let".',group:"Variable binding","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},literal:{doc:"Provides a literal array or object value.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},array:{doc:"Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},at:{doc:"Retrieves an item from an array.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},in:{doc:"Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a [`literal`](#types-literal) expression to hint correct interpretation to the [type system](#type-system).",group:"Lookup","sdk-support":{"basic functionality":{js:"1.6.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}}},"index-of":{doc:"Returns the first position at which an item can be found in an array or a substring can be found in a string, or `-1` if the input cannot be found. Accepts an optional index from where to begin the search.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.10.0"}}},slice:{doc:"Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.",group:"Lookup","sdk-support":{"basic functionality":{js:"1.10.0"}}},case:{doc:"Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},match:{doc:'Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, `["get", "building_type"]`). Each label must be unique, and must be either:\n - a single literal value; or\n - an array of literal values, the values of which must be all strings or all numbers (for example `[100, 101]` or `["c", "b"]`).\n\nThe input matches if any of the values in the array matches using strict equality, similar to the `"in"` operator.\nIf the input type does not match the type of the labels, the result will be the fallback value.',group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},coalesce:{doc:"Evaluates each expression in turn until the first valid value is obtained. Invalid values are `null` and [`'image'`](#types-image) expressions that are unavailable in the style. If all values are invalid, `coalesce` returns the first value listed.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},step:{doc:'Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},interpolate:{doc:'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\n\nInterpolation types:\n- `["linear"]`: Interpolates linearly between the pair of stops just less than and just greater than the input.\n- `["exponential", base]`: Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\n- `["cubic-bezier", x1, y1, x2, y2]`: Interpolates using the cubic bezier curve defined by the given control points.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"interpolate-hcl":{doc:'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.49.0"}}},"interpolate-lab":{doc:'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.',group:"Ramps, scales, curves","sdk-support":{"basic functionality":{js:"0.49.0"}}},ln2:{doc:"Returns mathematical constant ln(2).",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},pi:{doc:"Returns the mathematical constant pi.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},e:{doc:"Returns the mathematical constant e.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},typeof:{doc:"Returns a string describing the type of the given value.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},string:{doc:"Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},number:{doc:"Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},boolean:{doc:"Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},object:{doc:"Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},collator:{doc:"Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",group:"Types","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},format:{doc:'Returns a `formatted` string for displaying mixed-format text in the `text-field` property. The input may contain a string literal or expression, including an [`\'image\'`](#types-image) expression. Strings may be followed by a style override object that supports the following properties:\n- `"text-font"`: Overrides the font stack specified by the root layout property.\n- `"text-color"`: Overrides the color specified by the root paint property.\n- `"font-scale"`: Applies a scaling factor on `text-size` as specified by the root layout property.',group:"Types","sdk-support":{"basic functionality":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"text-font":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"font-scale":{js:"0.48.0",android:"6.7.0",ios:"4.6.0",macos:"0.12.0"},"text-color":{js:"1.3.0",android:"7.3.0",ios:"4.10.0",macos:"0.14.0"},image:{js:"1.6.0",android:"8.6.0",ios:"5.7.0",macos:"0.15.0"}}},image:{doc:"Returns a [`ResolvedImage`](/mapbox-gl-js/style-spec/types/#resolvedimage) for use in [`icon-image`](/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image), `*-pattern` entries, and as a section in the [`'format'`](#types-format) expression. A [`'coalesce'`](#coalesce) expression containing `image` expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `'image'` argument.",group:"Types","sdk-support":{"basic functionality":{js:"1.4.0",android:"8.6.0",ios:"5.7.0",macos:"0.15.0"}}},"number-format":{doc:"Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",group:"Types","sdk-support":{"basic functionality":{js:"0.54.0",android:"8.4.0",ios:"5.4.0",macos:"0.15.0"}}},"to-string":{doc:'Converts the input value to a string. If the input is `null`, the result is `""`. If the input is a [`boolean`](#types-boolean), the result is `"true"` or `"false"`. If the input is a number, it is converted to a string as specified by the ["NumberToString" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a [`color`](#color), it is converted to a string of the form `"rgba(r,g,b,a)"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. If the input is an [`\'image\'`](#types-image) expression, `\'to-string\'` returns the image name. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.',group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-number":{doc:'Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the ["ToNumber Applied to the String Type" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.',group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-boolean":{doc:"Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-rgba":{doc:"Returns a four-element array containing the input color's red, green, blue, and alpha components, in that order.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"to-color":{doc:"Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",group:"Types","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},rgb:{doc:"Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},rgba:{doc:"Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",group:"Color","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},get:{doc:"Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns `null` if the requested property is missing.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},has:{doc:"Tests for the presence of an property value in the current feature's properties, or from another object if a second argument is provided.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},length:{doc:"Returns the length of an array or string.",group:"Lookup","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},properties:{doc:'Returns the feature properties object.  Note that in some cases, it may be more efficient to use `["get", "property_name"]` directly.',group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"feature-state":{doc:"Retrieves a property value from the current feature's state. Returns `null` if the requested property is not present on the feature's state. A feature's state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\"feature-state\"] can only be used with paint properties that support data-driven styling.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.46.0"}}},"geometry-type":{doc:"Returns the feature's geometry type: `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`. `Multi*` feature types are only returned in GeoJSON sources. When working with vector tile sources, use the singular forms.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},id:{doc:"Returns the feature's id, if it has one.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},zoom:{doc:'Returns the current zoom level.  Note that in style layout and paint properties, ["zoom"] may only appear as the input to a top-level "step" or "interpolate" expression.',group:"Camera","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},pitch:{doc:'Returns the current pitch in degrees. `["pitch"]` may only be used in the `filter` expression for a `symbol` layer.',group:"Camera","sdk-support":{"basic functionality":{js:"2.6.0"}}},"distance-from-center":{doc:'Returns the distance of a `symbol` instance from the center of the map. The distance is measured in pixels divided by the height of the map container. It measures 0 at the center, decreases towards the camera and increase away from the camera. For example, if the height of the map is 1000px, a value of -1 means 1000px away from the center towards the camera, and a value of 1 means a distance of 1000px away from the camera from the center. `["distance-from-center"]` may only be used in the `filter` expression for a `symbol` layer.',group:"Camera","sdk-support":{"basic functionality":{js:"2.6.0"}}},"heatmap-density":{doc:"Returns the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",group:"Heatmap","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"line-progress":{doc:"Returns the progress along a gradient line. Can only be used in the `line-gradient` property.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.6.0",macos:"0.12.0"}}},"sky-radial-progress":{doc:"Returns the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches `sky-gradient-radius`. Can only be used in the `sky-gradient` property.",group:"sky","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}},accumulated:{doc:"Returns the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",group:"Feature data","sdk-support":{"basic functionality":{js:"0.53.0",android:"8.4.0",ios:"5.5.0",macos:"0.15.0"}}},"+":{doc:"Returns the sum of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"*":{doc:"Returns the product of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"-":{doc:"For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"/":{doc:"Returns the result of floating point division of the first input by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"%":{doc:"Returns the remainder after integer division of the first input by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"^":{doc:"Returns the result of raising the first input to the power specified by the second.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},sqrt:{doc:"Returns the square root of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.42.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},log10:{doc:"Returns the base-ten logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},ln:{doc:"Returns the natural logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},log2:{doc:"Returns the base-two logarithm of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},sin:{doc:"Returns the sine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},cos:{doc:"Returns the cosine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},tan:{doc:"Returns the tangent of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},asin:{doc:"Returns the arcsine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},acos:{doc:"Returns the arccosine of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},atan:{doc:"Returns the arctangent of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},min:{doc:"Returns the minimum value of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},max:{doc:"Returns the maximum value of the inputs.",group:"Math","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},round:{doc:'Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `["round", -1.5]` evaluates to -2.',group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},abs:{doc:"Returns the absolute value of the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},ceil:{doc:"Returns the smallest integer that is greater than or equal to the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},floor:{doc:"Returns the largest integer that is less than or equal to the input.",group:"Math","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},distance:{doc:"Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.",group:"Math","sdk-support":{"basic functionality":{android:"9.2.0",ios:"5.9.0",macos:"0.16.0"}}},"==":{doc:"Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"!=":{doc:"Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},">":{doc:"Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"<":{doc:"Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},">=":{doc:"Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},"<=":{doc:"Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},collator:{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}},all:{doc:"Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},any:{doc:"Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"!":{doc:"Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",group:"Decision","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},within:{doc:"Returns `true` if the evaluated feature is fully contained inside a boundary of the input geometry, `false` otherwise. The input value can be a valid GeoJSON of type `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Supported features for evaluation:\n- `Point`: Returns `false` if a point is on the boundary or falls outside the boundary.\n- `LineString`: Returns `false` if any part of a line falls outside the boundary, the line intersects the boundary, or a line's endpoint is on the boundary.",group:"Decision","sdk-support":{"basic functionality":{js:"1.9.0",android:"9.1.0",ios:"5.8.0",macos:"0.15.0"}}},"is-supported-script":{doc:"Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",group:"String","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.6.0"}}},upcase:{doc:"Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},downcase:{doc:"Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},concat:{doc:"Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",group:"String","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}}},"resolved-locale":{doc:"Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",group:"String","sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.2.0",macos:"0.9.0"}}}}},fog:{range:{type:"array",default:[.5,10],minimum:-20,maximum:20,length:2,value:"number","property-type":"data-constant",transition:!0,expression:{interpolated:!0,parameters:["zoom"]},doc:"The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.",example:[.5,10],"sdk-support":{"basic functionality":{js:"2.3.0",android:"10.6.0",ios:"10.6.0"}}},color:{type:"color","property-type":"data-constant",default:"#ffffff",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"The color of the atmosphere region immediately below the horizon and within the `range` and above the horizon and within `horizon-blend`. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.","sdk-support":{"basic functionality":{js:"2.3.0",android:"10.6.0",ios:"10.6.0"}}},"high-color":{type:"color","property-type":"data-constant",default:"#245cdf",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"The color of the atmosphere region above the horizon, `high-color` extends further above the horizon than the `color` property and its spread can be controlled with `horizon-blend`. The opacity can be set to `0` to remove the high atmosphere color contribution.","sdk-support":{"basic functionality":{js:"2.9.0",android:"10.6.0",ios:"10.6.0"}}},"space-color":{type:"color","property-type":"data-constant",default:["interpolate",["linear"],["zoom"],4,"#010b19",7,"#367ab9"],expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"The color of the region above the horizon and after the end of the `horizon-blend` contribution. The opacity can be set to `0` to have a transparent background.","sdk-support":{"basic functionality":{js:"2.9.0",android:"10.6.0",ios:"10.6.0"}}},"horizon-blend":{type:"number","property-type":"data-constant",default:["interpolate",["linear"],["zoom"],4,.2,7,.1],minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Horizon blend applies a smooth fade from the color of the atmosphere to the color of space. A value of zero leaves a sharp transition from atmosphere to space. Increasing the value blends the color of atmosphere into increasingly high angles of the sky.","sdk-support":{"basic functionality":{js:"2.3.0",android:"10.6.0",ios:"10.6.0"}}},"star-intensity":{type:"number","property-type":"data-constant",default:["interpolate",["linear"],["zoom"],5,.35,6,0],minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"A value controlling the star intensity where `0` will show no stars and `1` will show stars at their maximum intensity.","sdk-support":{"basic functionality":{js:"2.9.0",android:"10.6.0",ios:"10.6.0"}}}},light:{anchor:{type:"enum",default:"viewport",values:{map:{doc:"The position of the light source is aligned to the rotation of the map."},viewport:{doc:"The position of the light source is aligned to the rotation of the viewport."}},"property-type":"data-constant",transition:!1,expression:{interpolated:!1,parameters:["zoom"]},doc:"Whether extruded geometries are lit relative to the map or viewport.",example:"map","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},position:{type:"array",default:[1.15,210,30],length:3,value:"number","property-type":"data-constant",transition:!0,expression:{interpolated:!0,parameters:["zoom"]},doc:"Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0Â° (0Â° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0Â° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0Â°, directly above, to 180Â°, directly below).",example:[1.5,90,80],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},color:{type:"color","property-type":"data-constant",default:"#ffffff",expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Color tint for lighting extruded geometries.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}},intensity:{type:"number","property-type":"data-constant",default:.5,minimum:0,maximum:1,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}}}},projection:{name:{type:"enum",values:{albers:{doc:"An Albers equal-area projection centered on the continental United States. You can configure the projection for a different region by setting `center` and `parallels` properties. You may want to set max bounds to constrain the map to the relevant region."},equalEarth:{doc:"An Equal Earth projection."},equirectangular:{doc:"An Equirectangular projection. This projection is very similar to the Plate CarrÃ©e projection."},lambertConformalConic:{doc:"A Lambert conformal conic projection. You can configure the projection for a region by setting `center` and `parallels` properties. You may want to set max bounds to constrain the map to the relevant region."},mercator:{doc:"The Mercator projection is the default projection."},naturalEarth:{doc:"A Natural Earth projection."},winkelTripel:{doc:"A Winkel Tripel projection."},globe:{doc:"A globe projection."}},default:"mercator",doc:"The name of the projection to be used for rendering the map.",required:!0,"sdk-support":{"basic functionality":{js:"2.6.0"}}},center:{type:"array",length:2,value:"number","property-type":"data-constant",minimum:[-180,-90],maximum:[180,90],transition:!1,doc:"The reference longitude and latitude of the projection. `center` takes the form of [lng, lat]. This property is only configurable for conic projections (Albers and Lambert Conformal Conic). All other projections are centered on [0, 0].",example:[-96,37.5],requires:[{name:["albers","lambertConformalConic"]}],"sdk-support":{"basic functionality":{js:"2.6.0"}}},parallels:{type:"array",length:2,value:"number","property-type":"data-constant",minimum:[-90,-90],maximum:[90,90],transition:!1,doc:"The standard parallels of the projection, denoting the desired latitude range with minimal distortion. `parallels` takes the form of [lat0, lat1]. This property is only configurable for conic projections (Albers and Lambert Conformal Conic).",example:[29.5,45.5],requires:[{name:["albers","lambertConformalConic"]}],"sdk-support":{"basic functionality":{js:"2.6.0"}}}},terrain:{source:{type:"string",doc:"Name of a source of `raster_dem` type to be used for terrain elevation.",required:!0,"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}},exaggeration:{type:"number","property-type":"data-constant",default:1,minimum:0,maximum:1e3,expression:{interpolated:!0,parameters:["zoom"]},transition:!0,doc:"Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.",requires:["source"],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}}}},paint:["paint_fill","paint_line","paint_circle","paint_heatmap","paint_fill-extrusion","paint_symbol","paint_raster","paint_hillshade","paint_background","paint_sky"],paint_fill:{"fill-antialias":{type:"boolean",default:!0,doc:"Whether or not the fill should be antialiased.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.21.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-color":{type:"color",default:"#000000",doc:"The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",transition:!0,requires:[{"!":"fill-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.19.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-outline-color":{type:"color",doc:"The outline color of the fill. Matches the value of `fill-color` if unspecified.",transition:!0,requires:[{"!":"fill-pattern"},{"fill-antialias":!0}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.19.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-translate-anchor":{type:"enum",values:{map:{doc:"The fill is translated relative to the map."},viewport:{doc:"The fill is translated relative to the viewport."}},doc:"Controls the frame of reference for `fill-translate`.",default:"map",requires:["fill-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"}},"paint_fill-extrusion":{"fill-extrusion-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",transition:!0,"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-color":{type:"color",default:"#000000",doc:"The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",transition:!0,requires:[{"!":"fill-extrusion-pattern"}],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-translate-anchor":{type:"enum",values:{map:{doc:"The fill extrusion is translated relative to the map."},viewport:{doc:"The fill extrusion is translated relative to the viewport."}},doc:"Controls the frame of reference for `fill-extrusion-translate`.",default:"map",requires:["fill-extrusion-translate"],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"fill-extrusion-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"},"fill-extrusion-height":{type:"number",default:0,minimum:0,units:"meters",doc:"The height with which to extrude this layer.",transition:!0,"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-base":{type:"number",default:0,minimum:0,units:"meters",doc:"The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",transition:!0,requires:["fill-extrusion-height"],"sdk-support":{"basic functionality":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"},"data-driven styling":{js:"0.27.0",android:"5.1.0",ios:"3.6.0",macos:"0.5.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"fill-extrusion-vertical-gradient":{type:"boolean",default:!0,doc:"Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",transition:!1,"sdk-support":{"basic functionality":{js:"0.50.0",android:"7.0.0",ios:"4.7.0",macos:"0.13.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"}},paint_line:{"line-opacity":{type:"number",doc:"The opacity at which the line will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-color":{type:"color",doc:"The color with which the line will be drawn.",default:"#000000",transition:!0,requires:[{"!":"line-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.23.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"line-translate-anchor":{type:"enum",values:{map:{doc:"The line is translated relative to the map."},viewport:{doc:"The line is translated relative to the viewport."}},doc:"Controls the frame of reference for `line-translate`.",default:"map",requires:["line-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"line-width":{type:"number",default:1,minimum:0,transition:!0,units:"pixels",doc:"Stroke thickness.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-gap-width":{type:"number",default:0,minimum:0,doc:"Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",transition:!0,units:"pixels","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-offset":{type:"number",default:0,doc:"The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",transition:!0,units:"pixels","sdk-support":{"basic functionality":{js:"0.12.1",android:"3.0.0",ios:"3.1.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Blur applied to the line, in pixels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"line-dasharray":{type:"array",value:"number",doc:"Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",minimum:0,transition:!0,units:"line widths",requires:[{"!":"line-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"2.3.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"},"line-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.49.0",android:"6.5.0",macos:"0.11.0",ios:"4.4.0"}},expression:{interpolated:!1,parameters:["zoom","feature"]},"property-type":"cross-faded-data-driven"},"line-gradient":{type:"color",doc:'Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.',transition:!1,requires:[{"!":"line-pattern"},{source:"geojson",has:{lineMetrics:!0}}],"sdk-support":{"basic functionality":{js:"0.45.0",android:"6.5.0",ios:"4.4.0",macos:"0.11.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["line-progress"]},"property-type":"color-ramp"},"line-trim-offset":{type:"array",value:"number",doc:"The line part between [trim-start, trim-end] will be marked as transparent to make a route vanishing effect. The line trim-off offset is based on the whole line range [0.0, 1.0].",length:2,default:[0,0],minimum:[0,0],maximum:[1,1],transition:!1,requires:[{source:"geojson",has:{lineMetrics:!0}}],"sdk-support":{"basic functionality":{js:"2.9.0",android:"10.5.0",ios:"10.5.0",macos:"10.5.0"}},"property-type":"constant"}},paint_circle:{"circle-radius":{type:"number",default:5,minimum:0,transition:!0,units:"pixels",doc:"Circle radius.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.18.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-color":{type:"color",default:"#000000",doc:"The fill color of the circle.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.18.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-blur":{type:"number",default:0,doc:"Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.20.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-opacity":{type:"number",doc:"The opacity at which the circle will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.20.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"circle-translate-anchor":{type:"enum",values:{map:{doc:"The circle is translated relative to the map."},viewport:{doc:"The circle is translated relative to the viewport."}},doc:"Controls the frame of reference for `circle-translate`.",default:"map",requires:["circle-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-pitch-scale":{type:"enum",values:{map:{doc:"Circles are scaled according to their apparent distance to the camera."},viewport:{doc:"Circles are not scaled."}},default:"map",doc:"Controls the scaling behavior of the circle when the map is pitched.","sdk-support":{"basic functionality":{js:"0.21.0",android:"4.2.0",ios:"3.4.0",macos:"0.2.1"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-pitch-alignment":{type:"enum",values:{map:{doc:"The circle is aligned to the plane of the map."},viewport:{doc:"The circle is aligned to the plane of the viewport."}},default:"viewport",doc:"Orientation of circle when map is pitched.","sdk-support":{"basic functionality":{js:"0.39.0",android:"5.2.0",ios:"3.7.0",macos:"0.6.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"circle-stroke-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.","sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-color":{type:"color",default:"#000000",doc:"The stroke color of the circle.",transition:!0,"sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"circle-stroke-opacity":{type:"number",doc:"The opacity of the circle's stroke.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"},"data-driven styling":{js:"0.29.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"}},paint_heatmap:{"heatmap-radius":{type:"number",default:30,minimum:1,transition:!0,units:"pixels",doc:"Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. `queryRenderedFeatures` on heatmap layers will return points within this radius.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-weight":{type:"number",default:1,minimum:0,transition:!1,doc:"A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"heatmap-intensity":{type:"number",default:1,minimum:0,transition:!0,doc:"Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.","sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"heatmap-color":{type:"color",default:["interpolate",["linear"],["heatmap-density"],0,"rgba(0, 0, 255, 0)",.1,"royalblue",.3,"cyan",.5,"lime",.7,"yellow",1,"red"],doc:'Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmap-density"]` as input.',transition:!1,"sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["heatmap-density"]},"property-type":"color-ramp"},"heatmap-opacity":{type:"number",doc:"The global opacity at which the heatmap layer will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.41.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_symbol:{"icon-opacity":{doc:"The opacity at which the icon will be drawn.",type:"number",default:1,minimum:0,maximum:1,transition:!0,requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-color":{type:"color",default:"#000000",transition:!0,doc:"The color of the icon. This can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-color":{type:"color",default:"rgba(0, 0, 0, 0)",transition:!0,doc:"The color of the icon's halo. Icon halos can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Distance of halo to the icon outline.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-halo-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Fade out the halo towards the outside.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"icon-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",requires:["icon-image"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"icon-translate-anchor":{type:"enum",values:{map:{doc:"Icons are translated relative to the map."},viewport:{doc:"Icons are translated relative to the viewport."}},doc:"Controls the frame of reference for `icon-translate`.",default:"map",requires:["icon-image","icon-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"text-opacity":{type:"number",doc:"The opacity at which the text will be drawn.",default:1,minimum:0,maximum:1,transition:!0,requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-color":{type:"color",doc:"The color with which the text will be drawn.",default:"#000000",transition:!0,overridable:!0,requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-color":{type:"color",default:"rgba(0, 0, 0, 0)",transition:!0,doc:"The color of the text's halo, which helps it stand out from backgrounds.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-width":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-halo-blur":{type:"number",default:0,minimum:0,transition:!0,units:"pixels",doc:"The halo's fadeout distance towards the outside.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{js:"0.33.0",android:"5.0.0",ios:"3.5.0",macos:"0.4.0"}},expression:{interpolated:!0,parameters:["zoom","feature","feature-state"]},"property-type":"data-driven"},"text-translate":{type:"array",value:"number",length:2,default:[0,0],transition:!0,units:"pixels",doc:"Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",requires:["text-field"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"text-translate-anchor":{type:"enum",values:{map:{doc:"The text is translated relative to the map."},viewport:{doc:"The text is translated relative to the viewport."}},doc:"Controls the frame of reference for `text-translate`.",default:"map",requires:["text-field","text-translate"],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"}},paint_raster:{"raster-opacity":{type:"number",doc:"The opacity at which the image will be drawn.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-hue-rotate":{type:"number",default:0,period:360,transition:!0,units:"degrees",doc:"Rotates hues around the color wheel.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-brightness-min":{type:"number",doc:"Increase or reduce the brightness of the image. The value is the minimum brightness.",default:0,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-brightness-max":{type:"number",doc:"Increase or reduce the brightness of the image. The value is the maximum brightness.",default:1,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-saturation":{type:"number",doc:"Increase or reduce the saturation of the image.",default:0,minimum:-1,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-contrast":{type:"number",doc:"Increase or reduce the contrast of the image.",default:0,minimum:-1,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"raster-resampling":{type:"enum",doc:"The resampling/interpolation method to use for overscaling, also known as texture magnification filter",values:{linear:{doc:"(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"},nearest:{doc:"Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"}},default:"linear","sdk-support":{"basic functionality":{js:"0.47.0",android:"6.3.0",ios:"4.2.0",macos:"0.9.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"raster-fade-duration":{type:"number",default:300,minimum:0,transition:!1,units:"milliseconds",doc:"Fade duration when a new tile is added.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_hillshade:{"hillshade-illumination-direction":{type:"number",default:335,minimum:0,maximum:359,doc:"The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",transition:!1,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-illumination-anchor":{type:"enum",values:{map:{doc:"The hillshade illumination is relative to the north direction."},viewport:{doc:"The hillshade illumination is relative to the top of the viewport."}},default:"viewport",doc:"Direction of light source when map is rotated.","sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-exaggeration":{type:"number",doc:"Intensity of the hillshade",default:.5,minimum:0,maximum:1,transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-shadow-color":{type:"color",default:"#000000",doc:"The shading color of areas that face away from the light source.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-highlight-color":{type:"color",default:"#FFFFFF",doc:"The shading color of areas that faces towards the light source.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"hillshade-accent-color":{type:"color",default:"#000000",doc:"The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",transition:!0,"sdk-support":{"basic functionality":{js:"0.43.0",android:"6.0.0",ios:"4.0.0",macos:"0.7.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_background:{"background-color":{type:"color",default:"#000000",doc:"The color with which the background will be drawn.",transition:!0,requires:[{"!":"background-pattern"}],"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"},"background-pattern":{type:"resolvedImage",transition:!0,doc:"Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.","sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"},"data-driven styling":{}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"cross-faded"},"background-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity at which the background will be drawn.",transition:!0,"sdk-support":{"basic functionality":{js:"0.10.0",android:"2.0.1",ios:"2.0.0",macos:"0.1.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},paint_sky:{"sky-type":{type:"enum",values:{gradient:{doc:"Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."},atmosphere:{doc:"Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."}},default:"atmosphere",doc:"The type of the sky","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun":{type:"array",value:"number",length:2,units:"degrees",minimum:[0,0],maximum:[360,180],transition:!1,doc:"Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0Â° north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0Â° is directly above, at zenith, and 90Â° at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},requires:[{"sky-type":"atmosphere"}],expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-atmosphere-sun-intensity":{type:"number",requires:[{"sky-type":"atmosphere"}],default:10,minimum:0,maximum:100,transition:!1,doc:"Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"data-constant"},"sky-gradient-center":{type:"array",requires:[{"sky-type":"gradient"}],value:"number",default:[0,0],length:2,units:"degrees",minimum:[0,0],maximum:[360,180],transition:!1,doc:"Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0Â° north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0Â° is directly above, at zenith, and 90Â° at the horizon.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-gradient-radius":{type:"number",requires:[{"sky-type":"gradient"}],default:90,minimum:0,maximum:180,transition:!1,doc:"The angular distance (measured in degrees) from `sky-gradient-center` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `sky-gradient-center`.","sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!1,parameters:["zoom"]},"property-type":"data-constant"},"sky-gradient":{type:"color",default:["interpolate",["linear"],["sky-radial-progress"],.8,"#87ceeb",1,"white"],doc:"Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `sky-radial-progress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `sky-gradient-radius`] centered at the position specified by `sky-gradient-center`.",transition:!1,requires:[{"sky-type":"gradient"}],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"},"data-driven styling":{}},expression:{interpolated:!0,parameters:["sky-radial-progress"]},"property-type":"color-ramp"},"sky-atmosphere-halo-color":{type:"color",default:"white",doc:"A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",transition:!1,requires:[{"sky-type":"atmosphere"}],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"data-constant"},"sky-atmosphere-color":{type:"color",default:"white",doc:"A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",transition:!1,requires:[{"sky-type":"atmosphere"}],"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},"property-type":"data-constant"},"sky-opacity":{type:"number",default:1,minimum:0,maximum:1,doc:"The opacity of the entire sky layer.",transition:!0,"sdk-support":{"basic functionality":{js:"2.0.0",ios:"10.0.0",android:"10.0.0"}},expression:{interpolated:!0,parameters:["zoom"]},"property-type":"data-constant"}},transition:{duration:{type:"number",default:300,minimum:0,units:"milliseconds",doc:"Time allotted for transitions to complete."},delay:{type:"number",default:0,minimum:0,units:"milliseconds",doc:"Length of time before a transition begins."}},"property-type":{"data-driven":{type:"property-type",doc:"Property is interpolable and can be represented using a property expression."},"cross-faded":{type:"property-type",doc:"Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms."},"cross-faded-data-driven":{type:"property-type",doc:"Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms. It can be represented using a property expression."},"color-ramp":{type:"property-type",doc:"Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."},"data-constant":{type:"property-type",doc:"Property is interpolable but cannot be represented using a property expression."},constant:{type:"property-type",doc:"Property is constant across all zoom levels and property values."}},promoteId:{"*":{type:"string",doc:"A name of a feature property to use as ID for feature state."}}},n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(e){var t={exports:{}};return e(t,t.exports),t.exports}var a=i((function(e,t){!function(o){var r=t&&!t.nodeType&&t,i=e&&!e.nodeType&&e,a="object"==typeof n&&n;a.global!==a&&a.window!==a&&a.self!==a||(o=a);var s,l,u=2147483647,c=36,p=/^xn--/,d=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,y=String.fromCharCode;function g(e){throw RangeError(f[e])}function b(e,t){for(var o=e.length,r=[];o--;)r[o]=t(e[o]);return r}function v(e,t){var o=e.split("@"),r="";return o.length>1&&(r=o[0]+"@",e=o[1]),r+b((e=e.replace(h,".")).split("."),t).join(".")}function x(e){for(var t,o,r=[],n=0,i=e.length;n<i;)(t=e.charCodeAt(n++))>=55296&&t<=56319&&n<i?56320==(64512&(o=e.charCodeAt(n++)))?r.push(((1023&t)<<10)+(1023&o)+65536):(r.push(t),n--):r.push(t);return r}function w(e){return b(e,(function(e){var t="";return e>65535&&(t+=y((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+y(e)})).join("")}function k(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function j(e,t,o){var r=0;for(e=o?m(e/700):e>>1,e+=m(e/t);e>455;r+=c)e=m(e/35);return m(r+36*e/(e+38))}function A(e){var t,o,r,n,i,a,s,l,p,d,h,f=[],y=e.length,b=0,v=128,x=72;for((o=e.lastIndexOf("-"))<0&&(o=0),r=0;r<o;++r)e.charCodeAt(r)>=128&&g("not-basic"),f.push(e.charCodeAt(r));for(n=o>0?o+1:0;n<y;){for(i=b,a=1,s=c;n>=y&&g("invalid-input"),((l=(h=e.charCodeAt(n++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:c)>=c||l>m((u-b)/a))&&g("overflow"),b+=l*a,!(l<(p=s<=x?1:s>=x+26?26:s-x));s+=c)a>m(u/(d=c-p))&&g("overflow"),a*=d;x=j(b-i,t=f.length+1,0==i),m(b/t)>u-v&&g("overflow"),v+=m(b/t),b%=t,f.splice(b++,0,v)}return w(f)}function T(e){var t,o,r,n,i,a,s,l,p,d,h,f,b,v,w,A=[];for(f=(e=x(e)).length,t=128,o=0,i=72,a=0;a<f;++a)(h=e[a])<128&&A.push(y(h));for(r=n=A.length,n&&A.push("-");r<f;){for(s=u,a=0;a<f;++a)(h=e[a])>=t&&h<s&&(s=h);for(s-t>m((u-o)/(b=r+1))&&g("overflow"),o+=(s-t)*b,t=s,a=0;a<f;++a)if((h=e[a])<t&&++o>u&&g("overflow"),h==t){for(l=o,p=c;!(l<(d=p<=i?1:p>=i+26?26:p-i));p+=c)w=l-d,v=c-d,A.push(y(k(d+w%v,0))),l=m(w/v);A.push(y(k(l,0))),i=j(o,b,r==n),o=0,++r}++o,++t}return A.join("")}if(s={version:"1.3.2",ucs2:{decode:x,encode:w},decode:A,encode:T,toASCII:function(e){return v(e,(function(e){return d.test(e)?"xn--"+T(e):e}))},toUnicode:function(e){return v(e,(function(e){return p.test(e)?A(e.slice(4).toLowerCase()):e}))}},r&&i)if(e.exports==r)i.exports=s;else for(l in s)s.hasOwnProperty(l)&&(r[l]=s[l]);else o.punycode=s}(n)})),s=function(e){return"string"==typeof e},l=function(e){return"object"==typeof e&&null!==e},u=function(e){return null===e};function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var p=function(e,t,o,r){t=t||"&",o=o||"=";var n={};if("string"!=typeof e||0===e.length)return n;var i=/\+/g;e=e.split(t);var a=1e3;r&&"number"==typeof r.maxKeys&&(a=r.maxKeys);var s=e.length;a>0&&s>a&&(s=a);for(var l=0;l<s;++l){var u,p,d,h,f=e[l].replace(i,"%20"),m=f.indexOf(o);m>=0?(u=f.substr(0,m),p=f.substr(m+1)):(u=f,p=""),d=decodeURIComponent(u),h=decodeURIComponent(p),c(n,d)?Array.isArray(n[d])?n[d].push(h):n[d]=[n[d],h]:n[d]=h}return n},d=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},h=function(e,t,o,r){return t=t||"&",o=o||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(r){var n=encodeURIComponent(d(r))+o;return Array.isArray(e[r])?e[r].map((function(e){return n+encodeURIComponent(d(e))})).join(t):n+encodeURIComponent(d(e[r]))})).join(t):r?encodeURIComponent(d(r))+o+encodeURIComponent(d(e)):""},f=i((function(e,t){t.decode=t.parse=p,t.encode=t.stringify=h}));function m(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var y=/^([a-z0-9.+-]+:)/i,g=/:[0-9]*$/,b=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,v=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),x=["'"].concat(v),w=["%","/","?",";","#"].concat(x),k=["/","?","#"],j=/^[+a-z0-9A-Z_-]{0,63}$/,A=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,T={javascript:!0,"javascript:":!0},z={javascript:!0,"javascript:":!0},C={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function _(e,...t){for(const o of t)for(const t in o)e[t]=o[t];return e}m.prototype.parse=function(e,t,o){if(!s(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var r=e.indexOf("?"),n=-1!==r&&r<e.indexOf("#")?"?":"#",i=e.split(n);i[0]=i[0].replace(/\\/g,"/");var l=e=i.join(n);if(l=l.trim(),!o&&1===e.split("#").length){var u=b.exec(l);if(u)return this.path=l,this.href=l,this.pathname=u[1],u[2]?(this.search=u[2],this.query=t?f.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var c=y.exec(l);if(c){var p=(c=c[0]).toLowerCase();this.protocol=p,l=l.substr(c.length)}if(o||c||l.match(/^\/\/[^@\/]+@[^@\/]+/)){var d="//"===l.substr(0,2);!d||c&&z[c]||(l=l.substr(2),this.slashes=!0)}if(!z[c]&&(d||c&&!C[c])){for(var h,m,g=-1,v=0;v<k.length;v++)-1!==(_=l.indexOf(k[v]))&&(-1===g||_<g)&&(g=_);for(-1!==(m=-1===g?l.lastIndexOf("@"):l.lastIndexOf("@",g))&&(h=l.slice(0,m),l=l.slice(m+1),this.auth=decodeURIComponent(h)),g=-1,v=0;v<w.length;v++){var _;-1!==(_=l.indexOf(w[v]))&&(-1===g||_<g)&&(g=_)}-1===g&&(g=l.length),this.host=l.slice(0,g),l=l.slice(g),this.parseHost(),this.hostname=this.hostname||"";var E="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!E)for(var S=this.hostname.split(/\./),I=(v=0,S.length);v<I;v++){var R=S[v];if(R&&!R.match(j)){for(var O="",q=0,N=R.length;q<N;q++)R.charCodeAt(q)>127?O+="x":O+=R[q];if(!O.match(j)){var M=S.slice(0,v),L=S.slice(v+1),D=R.match(A);D&&(M.push(D[1]),L.unshift(D[2])),L.length&&(l="/"+L.join(".")+l),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),E||(this.hostname=a.toASCII(this.hostname));var P=this.port?":"+this.port:"",B=this.hostname||"";this.host=B+P,this.href+=this.host,E&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==l[0]&&(l="/"+l))}if(!T[p])for(v=0,I=x.length;v<I;v++){var F=x[v];if(-1!==l.indexOf(F)){var $=encodeURIComponent(F);$===F&&($=escape(F)),l=l.split(F).join($)}}var U=l.indexOf("#");-1!==U&&(this.hash=l.substr(U),l=l.slice(0,U));var W=l.indexOf("?");if(-1!==W?(this.search=l.substr(W),this.query=l.substr(W+1),t&&(this.query=f.parse(this.query)),l=l.slice(0,W)):t&&(this.search="",this.query={}),l&&(this.pathname=l),C[p]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){P=this.pathname||"";var J=this.search||"";this.path=P+J}return this.href=this.format(),this},m.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",o=this.pathname||"",r=this.hash||"",n=!1,i="";this.host?n=e+this.host:this.hostname&&(n=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(n+=":"+this.port)),this.query&&l(this.query)&&Object.keys(this.query).length&&(i=f.stringify(this.query));var a=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||C[t])&&!1!==n?(n="//"+(n||""),o&&"/"!==o.charAt(0)&&(o="/"+o)):n||(n=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),t+n+(o=o.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+r},m.prototype.resolve=function(e){return this.resolveObject(function(e,t,o){if(e&&l(e)&&e instanceof m)return e;var r=new m;return r.parse(e,t,o),r}(e,!1,!0)).format()},m.prototype.resolveObject=function(e){if(s(e)){var t=new m;t.parse(e,!1,!0),e=t}for(var o=new m,r=Object.keys(this),n=0;n<r.length;n++){var i=r[n];o[i]=this[i]}if(o.hash=e.hash,""===e.href)return o.href=o.format(),o;if(e.slashes&&!e.protocol){for(var a=Object.keys(e),l=0;l<a.length;l++){var c=a[l];"protocol"!==c&&(o[c]=e[c])}return C[o.protocol]&&o.hostname&&!o.pathname&&(o.path=o.pathname="/"),o.href=o.format(),o}if(e.protocol&&e.protocol!==o.protocol){if(!C[e.protocol]){for(var p=Object.keys(e),d=0;d<p.length;d++){var h=p[d];o[h]=e[h]}return o.href=o.format(),o}if(o.protocol=e.protocol,e.host||z[e.protocol])o.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),o.pathname=f.join("/")}if(o.search=e.search,o.query=e.query,o.host=e.host||"",o.auth=e.auth,o.hostname=e.hostname||e.host,o.port=e.port,o.pathname||o.search){var y=o.pathname||"",g=o.search||"";o.path=y+g}return o.slashes=o.slashes||e.slashes,o.href=o.format(),o}var b=o.pathname&&"/"===o.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=v||b||o.host&&e.pathname,w=x,k=o.pathname&&o.pathname.split("/")||[],j=(f=e.pathname&&e.pathname.split("/")||[],o.protocol&&!C[o.protocol]);if(j&&(o.hostname="",o.port=null,o.host&&(""===k[0]?k[0]=o.host:k.unshift(o.host)),o.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),x=x&&(""===f[0]||""===k[0])),v)o.host=e.host||""===e.host?e.host:o.host,o.hostname=e.hostname||""===e.hostname?e.hostname:o.hostname,o.search=e.search,o.query=e.query,k=f;else if(f.length)k||(k=[]),k.pop(),k=k.concat(f),o.search=e.search,o.query=e.query;else if(null!=e.search)return j&&(o.hostname=o.host=k.shift(),(S=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@"))&&(o.auth=S.shift(),o.host=o.hostname=S.shift())),o.search=e.search,o.query=e.query,u(o.pathname)&&u(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.href=o.format(),o;if(!k.length)return o.pathname=null,o.search?o.path="/"+o.search:o.path=null,o.href=o.format(),o;for(var A=k.slice(-1)[0],T=(o.host||e.host||k.length>1)&&("."===A||".."===A)||""===A,_=0,E=k.length;E>=0;E--)"."===(A=k[E])?k.splice(E,1):".."===A?(k.splice(E,1),_++):_&&(k.splice(E,1),_--);if(!x&&!w)for(;_--;_)k.unshift("..");!x||""===k[0]||k[0]&&"/"===k[0].charAt(0)||k.unshift(""),T&&"/"!==k.join("/").substr(-1)&&k.push("");var S,I=""===k[0]||k[0]&&"/"===k[0].charAt(0);return j&&(o.hostname=o.host=I?"":k.length?k.shift():"",(S=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@"))&&(o.auth=S.shift(),o.host=o.hostname=S.shift())),(x=x||o.host&&k.length)&&!I&&k.unshift(""),k.length?o.pathname=k.join("/"):(o.pathname=null,o.path=null),u(o.pathname)&&u(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.auth=e.auth||o.auth,o.slashes=o.slashes||e.slashes,o.href=o.format(),o},m.prototype.parseHost=function(){var e=this.host,t=g.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)};class E extends Error{constructor(e,t){super(t),this.message=t,this.key=e}}var S=E;class I{constructor(e,t=[]){this.parent=e,this.bindings={};for(const[e,o]of t)this.bindings[e]=o}concat(e){return new I(this,e)}get(e){if(this.bindings[e])return this.bindings[e];if(this.parent)return this.parent.get(e);throw new Error(`${e} not found in scope.`)}has(e){return!!this.bindings[e]||!!this.parent&&this.parent.has(e)}}var R=I;const O={kind:"null"},q={kind:"number"},N={kind:"string"},M={kind:"boolean"},L={kind:"color"},D={kind:"object"},P={kind:"value"},B={kind:"collator"},F={kind:"formatted"},$={kind:"resolvedImage"};function U(e,t){return{kind:"array",itemType:e,N:t}}function W(e){if("array"===e.kind){const t=W(e.itemType);return"number"==typeof e.N?`array<${t}, ${e.N}>`:"value"===e.itemType.kind?"array":`array<${t}>`}return e.kind}const J=[O,q,N,M,L,F,D,U(P),$];function H(e,t){if("error"===t.kind)return null;if("array"===e.kind){if("array"===t.kind&&(0===t.N&&"value"===t.itemType.kind||!H(e.itemType,t.itemType))&&("number"!=typeof e.N||e.N===t.N))return null}else{if(e.kind===t.kind)return null;if("value"===e.kind)for(const e of J)if(!H(e,t))return null}return`Expected ${W(e)} but found ${W(t)} instead.`}function V(e,t){return t.some((t=>t.kind===e.kind))}function G(e,t){return t.some((t=>"null"===t?null===e:"array"===t?Array.isArray(e):"object"===t?e&&!Array.isArray(e)&&"object"==typeof e:t===typeof e))}var Z=i((function(e,t){var o={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],rebeccapurple:[102,51,153,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]};function r(e){return(e=Math.round(e))<0?0:e>255?255:e}function n(e){return e<0?0:e>1?1:e}function i(e){return"%"===e[e.length-1]?r(parseFloat(e)/100*255):r(parseInt(e))}function a(e){return"%"===e[e.length-1]?n(parseFloat(e)/100):n(parseFloat(e))}function s(e,t,o){return o<0?o+=1:o>1&&(o-=1),6*o<1?e+(t-e)*o*6:2*o<1?t:3*o<2?e+(t-e)*(2/3-o)*6:e}try{t.parseCSSColor=function(e){var t,n=e.replace(/ /g,"").toLowerCase();if(n in o)return o[n].slice();if("#"===n[0])return 4===n.length?(t=parseInt(n.substr(1),16))>=0&&t<=4095?[(3840&t)>>4|(3840&t)>>8,240&t|(240&t)>>4,15&t|(15&t)<<4,1]:null:7===n.length&&(t=parseInt(n.substr(1),16))>=0&&t<=16777215?[(16711680&t)>>16,(65280&t)>>8,255&t,1]:null;var l=n.indexOf("("),u=n.indexOf(")");if(-1!==l&&u+1===n.length){var c=n.substr(0,l),p=n.substr(l+1,u-(l+1)).split(","),d=1;switch(c){case"rgba":if(4!==p.length)return null;d=a(p.pop());case"rgb":return 3!==p.length?null:[i(p[0]),i(p[1]),i(p[2]),d];case"hsla":if(4!==p.length)return null;d=a(p.pop());case"hsl":if(3!==p.length)return null;var h=(parseFloat(p[0])%360+360)%360/360,f=a(p[1]),m=a(p[2]),y=m<=.5?m*(f+1):m+f-m*f,g=2*m-y;return[r(255*s(g,y,h+1/3)),r(255*s(g,y,h)),r(255*s(g,y,h-1/3)),d];default:return null}}return null}}catch(e){}}));class Y{constructor(e,t,o,r=1){this.r=e,this.g=t,this.b=o,this.a=r}static parse(e){if(!e)return;if(e instanceof Y)return e;if("string"!=typeof e)return;const t=Z.parseCSSColor(e);return t?new Y(t[0]/255*t[3],t[1]/255*t[3],t[2]/255*t[3],t[3]):void 0}toString(){const[e,t,o,r]=this.toArray();return`rgba(${Math.round(e)},${Math.round(t)},${Math.round(o)},${r})`}toArray(){const{r:e,g:t,b:o,a:r}=this;return 0===r?[0,0,0,0]:[255*e/r,255*t/r,255*o/r,r]}toArray01(){const{r:e,g:t,b:o,a:r}=this;return 0===r?[0,0,0,0]:[e/r,t/r,o/r,r]}toArray01PremultipliedAlpha(){const{r:e,g:t,b:o,a:r}=this;return[e,t,o,r]}}Y.black=new Y(0,0,0,1),Y.white=new Y(1,1,1,1),Y.transparent=new Y(0,0,0,0),Y.red=new Y(1,0,0,1),Y.blue=new Y(0,0,1,1);var X=Y;class K{constructor(e,t,o){this.sensitivity=e?t?"variant":"case":t?"accent":"base",this.locale=o,this.collator=new Intl.Collator(this.locale?this.locale:[],{sensitivity:this.sensitivity,usage:"search"})}compare(e,t){return this.collator.compare(e,t)}resolvedLocale(){return new Intl.Collator(this.locale?this.locale:[]).resolvedOptions().locale}}class Q{constructor(e,t,o,r,n){this.text=e.normalize?e.normalize():e,this.image=t,this.scale=o,this.fontStack=r,this.textColor=n}}class ee{constructor(e){this.sections=e}static fromString(e){return new ee([new Q(e,null,null,null,null)])}isEmpty(){return 0===this.sections.length||!this.sections.some((e=>0!==e.text.length||e.image&&0!==e.image.name.length))}static factory(e){return e instanceof ee?e:ee.fromString(e)}toString(){return 0===this.sections.length?"":this.sections.map((e=>e.text)).join("")}serialize(){const e=["format"];for(const t of this.sections){if(t.image){e.push(["image",t.image.name]);continue}e.push(t.text);const o={};t.fontStack&&(o["text-font"]=["literal",t.fontStack.split(",")]),t.scale&&(o["font-scale"]=t.scale),t.textColor&&(o["text-color"]=["rgba"].concat(t.textColor.toArray())),e.push(o)}return e}}class te{constructor(e){this.name=e.name,this.available=e.available}toString(){return this.name}static fromString(e){return e?new te({name:e,available:!1}):null}serialize(){return["image",this.name]}}function oe(e,t,o,r){return"number"==typeof e&&e>=0&&e<=255&&"number"==typeof t&&t>=0&&t<=255&&"number"==typeof o&&o>=0&&o<=255?void 0===r||"number"==typeof r&&r>=0&&r<=1?null:`Invalid rgba value [${[e,t,o,r].join(", ")}]: 'a' must be between 0 and 1.`:`Invalid rgba value [${("number"==typeof r?[e,t,o,r]:[e,t,o]).join(", ")}]: 'r', 'g', and 'b' must be between 0 and 255.`}function re(e){if(null===e)return!0;if("string"==typeof e)return!0;if("boolean"==typeof e)return!0;if("number"==typeof e)return!0;if(e instanceof X)return!0;if(e instanceof K)return!0;if(e instanceof ee)return!0;if(e instanceof te)return!0;if(Array.isArray(e)){for(const t of e)if(!re(t))return!1;return!0}if("object"==typeof e){for(const t in e)if(!re(e[t]))return!1;return!0}return!1}function ne(e){if(null===e)return O;if("string"==typeof e)return N;if("boolean"==typeof e)return M;if("number"==typeof e)return q;if(e instanceof X)return L;if(e instanceof K)return B;if(e instanceof ee)return F;if(e instanceof te)return $;if(Array.isArray(e)){const t=e.length;let o;for(const t of e){const e=ne(t);if(o){if(o===e)continue;o=P;break}o=e}return U(o||P,t)}return D}function ie(e){const t=typeof e;return null===e?"":"string"===t||"number"===t||"boolean"===t?String(e):e instanceof X||e instanceof ee||e instanceof te?e.toString():JSON.stringify(e)}class ae{constructor(e,t){this.type=e,this.value=t}static parse(e,t){if(2!==e.length)return t.error(`'literal' expression requires exactly one argument, but found ${e.length-1} instead.`);if(!re(e[1]))return t.error("invalid value");const o=e[1];let r=ne(o);const n=t.expectedType;return"array"!==r.kind||0!==r.N||!n||"array"!==n.kind||"number"==typeof n.N&&0!==n.N||(r=n),new ae(r,o)}evaluate(){return this.value}eachChild(){}outputDefined(){return!0}serialize(){return"array"===this.type.kind||"object"===this.type.kind?["literal",this.value]:this.value instanceof X?["rgba"].concat(this.value.toArray()):this.value instanceof ee?this.value.serialize():this.value}}var se=ae,le=class{constructor(e){this.name="ExpressionEvaluationError",this.message=e}toJSON(){return this.message}};const ue={string:N,number:q,boolean:M,object:D};class ce{constructor(e,t){this.type=e,this.args=t}static parse(e,t){if(e.length<2)return t.error("Expected at least one argument.");let o,r=1;const n=e[0];if("array"===n){let n,i;if(e.length>2){const o=e[1];if("string"!=typeof o||!(o in ue)||"object"===o)return t.error('The item type argument of "array" must be one of string, number, boolean',1);n=ue[o],r++}else n=P;if(e.length>3){if(null!==e[2]&&("number"!=typeof e[2]||e[2]<0||e[2]!==Math.floor(e[2])))return t.error('The length argument to "array" must be a positive integer literal',2);i=e[2],r++}o=U(n,i)}else o=ue[n];const i=[];for(;r<e.length;r++){const o=t.parse(e[r],r,P);if(!o)return null;i.push(o)}return new ce(o,i)}evaluate(e){for(let t=0;t<this.args.length;t++){const o=this.args[t].evaluate(e);if(!H(this.type,ne(o)))return o;if(t===this.args.length-1)throw new le(`Expected value to be of type ${W(this.type)}, but found ${W(ne(o))} instead.`)}return null}eachChild(e){this.args.forEach(e)}outputDefined(){return this.args.every((e=>e.outputDefined()))}serialize(){const e=this.type,t=[e.kind];if("array"===e.kind){const o=e.itemType;if("string"===o.kind||"number"===o.kind||"boolean"===o.kind){t.push(o.kind);const r=e.N;("number"==typeof r||this.args.length>1)&&t.push(r)}}return t.concat(this.args.map((e=>e.serialize())))}}var pe=ce;class de{constructor(e){this.type=F,this.sections=e}static parse(e,t){if(e.length<2)return t.error("Expected at least one argument.");const o=e[1];if(!Array.isArray(o)&&"object"==typeof o)return t.error("First argument must be an image or text section.");const r=[];let n=!1;for(let o=1;o<=e.length-1;++o){const i=e[o];if(n&&"object"==typeof i&&!Array.isArray(i)){n=!1;let e=null;if(i["font-scale"]&&(e=t.parse(i["font-scale"],1,q),!e))return null;let o=null;if(i["text-font"]&&(o=t.parse(i["text-font"],1,U(N)),!o))return null;let a=null;if(i["text-color"]&&(a=t.parse(i["text-color"],1,L),!a))return null;const s=r[r.length-1];s.scale=e,s.font=o,s.textColor=a}else{const i=t.parse(e[o],1,P);if(!i)return null;const a=i.type.kind;if("string"!==a&&"value"!==a&&"null"!==a&&"resolvedImage"!==a)return t.error("Formatted text type must be 'string', 'value', 'image' or 'null'.");n=!0,r.push({content:i,scale:null,font:null,textColor:null})}}return new de(r)}evaluate(e){return new ee(this.sections.map((t=>{const o=t.content.evaluate(e);return ne(o)===$?new Q("",o,null,null,null):new Q(ie(o),null,t.scale?t.scale.evaluate(e):null,t.font?t.font.evaluate(e).join(","):null,t.textColor?t.textColor.evaluate(e):null)})))}eachChild(e){for(const t of this.sections)e(t.content),t.scale&&e(t.scale),t.font&&e(t.font),t.textColor&&e(t.textColor)}outputDefined(){return!1}serialize(){const e=["format"];for(const t of this.sections){e.push(t.content.serialize());const o={};t.scale&&(o["font-scale"]=t.scale.serialize()),t.font&&(o["text-font"]=t.font.serialize()),t.textColor&&(o["text-color"]=t.textColor.serialize()),e.push(o)}return e}}class he{constructor(e){this.type=$,this.input=e}static parse(e,t){if(2!==e.length)return t.error("Expected two arguments.");const o=t.parse(e[1],1,N);return o?new he(o):t.error("No image name provided.")}evaluate(e){const t=this.input.evaluate(e),o=te.fromString(t);return o&&e.availableImages&&(o.available=e.availableImages.indexOf(t)>-1),o}eachChild(e){e(this.input)}outputDefined(){return!1}serialize(){return["image",this.input.serialize()]}}const fe={"to-boolean":M,"to-color":L,"to-number":q,"to-string":N};class me{constructor(e,t){this.type=e,this.args=t}static parse(e,t){if(e.length<2)return t.error("Expected at least one argument.");const o=e[0];if(("to-boolean"===o||"to-string"===o)&&2!==e.length)return t.error("Expected one argument.");const r=fe[o],n=[];for(let o=1;o<e.length;o++){const r=t.parse(e[o],o,P);if(!r)return null;n.push(r)}return new me(r,n)}evaluate(e){if("boolean"===this.type.kind)return Boolean(this.args[0].evaluate(e));if("color"===this.type.kind){let t,o;for(const r of this.args){if(t=r.evaluate(e),o=null,t instanceof X)return t;if("string"==typeof t){const o=e.parseColor(t);if(o)return o}else if(Array.isArray(t)&&(o=t.length<3||t.length>4?`Invalid rbga value ${JSON.stringify(t)}: expected an array containing either three or four numeric values.`:oe(t[0],t[1],t[2],t[3]),!o))return new X(t[0]/255,t[1]/255,t[2]/255,t[3])}throw new le(o||`Could not parse color from value '${"string"==typeof t?t:String(JSON.stringify(t))}'`)}if("number"===this.type.kind){let t=null;for(const o of this.args){if(t=o.evaluate(e),null===t)return 0;const r=Number(t);if(!isNaN(r))return r}throw new le(`Could not convert ${JSON.stringify(t)} to number.`)}return"formatted"===this.type.kind?ee.fromString(ie(this.args[0].evaluate(e))):"resolvedImage"===this.type.kind?te.fromString(ie(this.args[0].evaluate(e))):ie(this.args[0].evaluate(e))}eachChild(e){this.args.forEach(e)}outputDefined(){return this.args.every((e=>e.outputDefined()))}serialize(){if("formatted"===this.type.kind)return new de([{content:this.args[0],scale:null,font:null,textColor:null}]).serialize();if("resolvedImage"===this.type.kind)return new he(this.args[0]).serialize();const e=[`to-${this.type.kind}`];return this.eachChild((t=>{e.push(t.serialize())})),e}}var ye=me;const ge=["Unknown","Point","LineString","Polygon"];var be=class{constructor(){this.globals=null,this.feature=null,this.featureState=null,this.formattedSection=null,this._parseColorCache={},this.availableImages=null,this.canonical=null,this.featureTileCoord=null,this.featureDistanceData=null}id(){return this.feature&&"id"in this.feature&&this.feature.id?this.feature.id:null}geometryType(){return this.feature?"number"==typeof this.feature.type?ge[this.feature.type]:this.feature.type:null}geometry(){return this.feature&&"geometry"in this.feature?this.feature.geometry:null}canonicalID(){return this.canonical}properties(){return this.feature&&this.feature.properties||{}}distanceFromCenter(){if(this.featureTileCoord&&this.featureDistanceData){const e=this.featureDistanceData.center,t=this.featureDistanceData.scale,{x:o,y:r}=this.featureTileCoord,n=o*t-e[0],i=r*t-e[1];return this.featureDistanceData.bearing[0]*n+this.featureDistanceData.bearing[1]*i}return 0}parseColor(e){let t=this._parseColorCache[e];return t||(t=this._parseColorCache[e]=X.parse(e)),t}};class ve{constructor(e,t,o,r){this.name=e,this.type=t,this._evaluate=o,this.args=r}evaluate(e){return this._evaluate(e,this.args)}eachChild(e){this.args.forEach(e)}outputDefined(){return!1}serialize(){return[this.name].concat(this.args.map((e=>e.serialize())))}static parse(e,t){const o=e[0],r=ve.definitions[o];if(!r)return t.error(`Unknown expression "${o}". If you wanted a literal array, use ["literal", [...]].`,0);const n=Array.isArray(r)?r[0]:r.type,i=Array.isArray(r)?[[r[1],r[2]]]:r.overloads,a=i.filter((([t])=>!Array.isArray(t)||t.length===e.length-1));let s=null;for(const[r,i]of a){s=new Ve(t.registry,t.path,null,t.scope);const a=[];let l=!1;for(let t=1;t<e.length;t++){const o=e[t],n=Array.isArray(r)?r[t-1]:r.type,i=s.parse(o,1+a.length,n);if(!i){l=!0;break}a.push(i)}if(!l)if(Array.isArray(r)&&r.length!==a.length)s.error(`Expected ${r.length} arguments, but found ${a.length} instead.`);else{for(let e=0;e<a.length;e++){const t=Array.isArray(r)?r[e]:r.type,o=a[e];s.concat(e+1).checkSubtype(t,o.type)}if(0===s.errors.length)return new ve(o,n,i,a)}}if(1===a.length)t.errors.push(...s.errors);else{const o=(a.length?a:i).map((([e])=>{return t=e,Array.isArray(t)?`(${t.map(W).join(", ")})`:`(${W(t.type)}...)`;var t})).join(" | "),r=[];for(let o=1;o<e.length;o++){const n=t.parse(e[o],1+r.length);if(!n)return null;r.push(W(n.type))}t.error(`Expected arguments of type ${o}, but found (${r.join(", ")}) instead.`)}return null}static register(e,t){ve.definitions=t;for(const o in t)e[o]=ve}}var xe=ve;class we{constructor(e,t,o){this.type=B,this.locale=o,this.caseSensitive=e,this.diacriticSensitive=t}static parse(e,t){if(2!==e.length)return t.error("Expected one argument.");const o=e[1];if("object"!=typeof o||Array.isArray(o))return t.error("Collator options argument must be an object.");const r=t.parse(void 0!==o["case-sensitive"]&&o["case-sensitive"],1,M);if(!r)return null;const n=t.parse(void 0!==o["diacritic-sensitive"]&&o["diacritic-sensitive"],1,M);if(!n)return null;let i=null;return o.locale&&(i=t.parse(o.locale,1,N),!i)?null:new we(r,n,i)}evaluate(e){return new K(this.caseSensitive.evaluate(e),this.diacriticSensitive.evaluate(e),this.locale?this.locale.evaluate(e):null)}eachChild(e){e(this.caseSensitive),e(this.diacriticSensitive),this.locale&&e(this.locale)}outputDefined(){return!1}serialize(){const e={};return e["case-sensitive"]=this.caseSensitive.serialize(),e["diacritic-sensitive"]=this.diacriticSensitive.serialize(),this.locale&&(e.locale=this.locale.serialize()),["collator",e]}}const ke=8192;function je(e,t){e[0]=Math.min(e[0],t[0]),e[1]=Math.min(e[1],t[1]),e[2]=Math.max(e[2],t[0]),e[3]=Math.max(e[3],t[1])}function Ae(e,t){return!(e[0]<=t[0]||e[2]>=t[2]||e[1]<=t[1]||e[3]>=t[3])}function Te(e,t){const o=(180+e[0])/360,r=(n=e[1],(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+n*Math.PI/360)))/360);var n;const i=Math.pow(2,t.z);return[Math.round(o*i*ke),Math.round(r*i*ke)]}function ze(e,t,o){const r=e[0]-t[0],n=e[1]-t[1],i=e[0]-o[0],a=e[1]-o[1];return r*a-i*n==0&&r*i<=0&&n*a<=0}function Ce(e,t){let o=!1;for(let a=0,s=t.length;a<s;a++){const s=t[a];for(let t=0,a=s.length;t<a-1;t++){if(ze(e,s[t],s[t+1]))return!1;r=e,n=s[t],i=s[t+1],n[1]>r[1]!=i[1]>r[1]&&r[0]<(i[0]-n[0])*(r[1]-n[1])/(i[1]-n[1])+n[0]&&(o=!o)}}var r,n,i;return o}function _e(e,t){for(let o=0;o<t.length;o++)if(Ce(e,t[o]))return!0;return!1}function Ee(e,t,o,r){const n=e[0]-o[0],i=e[1]-o[1],a=t[0]-o[0],s=t[1]-o[1],l=r[0]-o[0],u=r[1]-o[1],c=n*u-l*i,p=a*u-l*s;return c>0&&p<0||c<0&&p>0}function Se(e,t,o,r){const n=[t[0]-e[0],t[1]-e[1]];return 0!=(i=[r[0]-o[0],r[1]-o[1]])[0]*(a=n)[1]-i[1]*a[0]&&!(!Ee(e,t,o,r)||!Ee(o,r,e,t));var i,a}function Ie(e,t,o){for(const r of o)for(let o=0;o<r.length-1;++o)if(Se(e,t,r[o],r[o+1]))return!0;return!1}function Re(e,t){for(let o=0;o<e.length;++o)if(!Ce(e[o],t))return!1;for(let o=0;o<e.length-1;++o)if(Ie(e[o],e[o+1],t))return!1;return!0}function Oe(e,t){for(let o=0;o<t.length;o++)if(Re(e,t[o]))return!0;return!1}function qe(e,t,o){const r=[];for(let n=0;n<e.length;n++){const i=[];for(let r=0;r<e[n].length;r++){const a=Te(e[n][r],o);je(t,a),i.push(a)}r.push(i)}return r}function Ne(e,t,o){const r=[];for(let n=0;n<e.length;n++){const i=qe(e[n],t,o);r.push(i)}return r}function Me(e,t,o,r){if(e[0]<o[0]||e[0]>o[2]){const t=.5*r;let n=e[0]-o[0]>t?-r:o[0]-e[0]>t?r:0;0===n&&(n=e[0]-o[2]>t?-r:o[2]-e[0]>t?r:0),e[0]+=n}je(t,e)}function Le(e,t,o,r){const n=Math.pow(2,r.z)*ke,i=[r.x*ke,r.y*ke],a=[];if(!e)return a;for(const r of e)for(const e of r){const r=[e.x+i[0],e.y+i[1]];Me(r,t,o,n),a.push(r)}return a}function De(e,t,o,r){const n=Math.pow(2,r.z)*ke,i=[r.x*ke,r.y*ke],a=[];if(!e)return a;for(const o of e){const e=[];for(const r of o){const o=[r.x+i[0],r.y+i[1]];je(t,o),e.push(o)}a.push(e)}if(t[2]-t[0]<=n/2){(s=t)[0]=s[1]=1/0,s[2]=s[3]=-1/0;for(const e of a)for(const r of e)Me(r,t,o,n)}var s;return a}class Pe{constructor(e,t){this.type=M,this.geojson=e,this.geometries=t}static parse(e,t){if(2!==e.length)return t.error(`'within' expression requires exactly one argument, but found ${e.length-1} instead.`);if(re(e[1])){const t=e[1];if("FeatureCollection"===t.type)for(let e=0;e<t.features.length;++e){const o=t.features[e].geometry.type;if("Polygon"===o||"MultiPolygon"===o)return new Pe(t,t.features[e].geometry)}else if("Feature"===t.type){const e=t.geometry.type;if("Polygon"===e||"MultiPolygon"===e)return new Pe(t,t.geometry)}else if("Polygon"===t.type||"MultiPolygon"===t.type)return new Pe(t,t)}return t.error("'within' expression requires valid geojson object that contains polygon geometry type.")}evaluate(e){if(null!=e.geometry()&&null!=e.canonicalID()){if("Point"===e.geometryType())return function(e,t){const o=[1/0,1/0,-1/0,-1/0],r=[1/0,1/0,-1/0,-1/0],n=e.canonicalID();if(!n)return!1;if("Polygon"===t.type){const i=qe(t.coordinates,r,n),a=Le(e.geometry(),o,r,n);if(!Ae(o,r))return!1;for(const e of a)if(!Ce(e,i))return!1}if("MultiPolygon"===t.type){const i=Ne(t.coordinates,r,n),a=Le(e.geometry(),o,r,n);if(!Ae(o,r))return!1;for(const e of a)if(!_e(e,i))return!1}return!0}(e,this.geometries);if("LineString"===e.geometryType())return function(e,t){const o=[1/0,1/0,-1/0,-1/0],r=[1/0,1/0,-1/0,-1/0],n=e.canonicalID();if(!n)return!1;if("Polygon"===t.type){const i=qe(t.coordinates,r,n),a=De(e.geometry(),o,r,n);if(!Ae(o,r))return!1;for(const e of a)if(!Re(e,i))return!1}if("MultiPolygon"===t.type){const i=Ne(t.coordinates,r,n),a=De(e.geometry(),o,r,n);if(!Ae(o,r))return!1;for(const e of a)if(!Oe(e,i))return!1}return!0}(e,this.geometries)}return!1}eachChild(){}outputDefined(){return!0}serialize(){return["within",this.geojson]}}var Be=Pe;function Fe(e){if(e instanceof xe){if("get"===e.name&&1===e.args.length)return!1;if("feature-state"===e.name)return!1;if("has"===e.name&&1===e.args.length)return!1;if("properties"===e.name||"geometry-type"===e.name||"id"===e.name)return!1;if(/^filter-/.test(e.name))return!1}if(e instanceof Be)return!1;let t=!0;return e.eachChild((e=>{t&&!Fe(e)&&(t=!1)})),t}function $e(e){if(e instanceof xe&&"feature-state"===e.name)return!1;let t=!0;return e.eachChild((e=>{t&&!$e(e)&&(t=!1)})),t}function Ue(e,t){if(e instanceof xe&&t.indexOf(e.name)>=0)return!1;let o=!0;return e.eachChild((e=>{o&&!Ue(e,t)&&(o=!1)})),o}class We{constructor(e,t){this.type=t.type,this.name=e,this.boundExpression=t}static parse(e,t){if(2!==e.length||"string"!=typeof e[1])return t.error("'var' expression requires exactly one string literal argument.");const o=e[1];return t.scope.has(o)?new We(o,t.scope.get(o)):t.error(`Unknown variable "${o}". Make sure "${o}" has been bound in an enclosing "let" expression before using it.`,1)}evaluate(e){return this.boundExpression.evaluate(e)}eachChild(){}outputDefined(){return!1}serialize(){return["var",this.name]}}var Je=We;class He{constructor(e,t=[],o,r=new R,n=[]){this.registry=e,this.path=t,this.key=t.map((e=>`[${e}]`)).join(""),this.scope=r,this.errors=n,this.expectedType=o}parse(e,t,o,r,n={}){return t?this.concat(t,o,r)._parse(e,n):this._parse(e,n)}_parse(e,t){function o(e,t,o){return"assert"===o?new pe(t,[e]):"coerce"===o?new ye(t,[e]):e}if(null!==e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e||(e=["literal",e]),Array.isArray(e)){if(0===e.length)return this.error('Expected an array with at least one element. If you wanted a literal array, use ["literal", []].');const r=e[0];if("string"!=typeof r)return this.error(`Expression name must be a string, but found ${typeof r} instead. If you wanted a literal array, use ["literal", [...]].`,0),null;const n=this.registry[r];if(n){let r=n.parse(e,this);if(!r)return null;if(this.expectedType){const e=this.expectedType,n=r.type;if("string"!==e.kind&&"number"!==e.kind&&"boolean"!==e.kind&&"object"!==e.kind&&"array"!==e.kind||"value"!==n.kind)if("color"!==e.kind&&"formatted"!==e.kind&&"resolvedImage"!==e.kind||"value"!==n.kind&&"string"!==n.kind){if(this.checkSubtype(e,n))return null}else r=o(r,e,t.typeAnnotation||"coerce");else r=o(r,e,t.typeAnnotation||"assert")}if(!(r instanceof se)&&"resolvedImage"!==r.type.kind&&Ge(r)){const e=new be;try{r=new se(r.type,r.evaluate(e))}catch(e){return this.error(e.message),null}}return r}return this.error(`Unknown expression "${r}". If you wanted a literal array, use ["literal", [...]].`,0)}return void 0===e?this.error("'undefined' value invalid. Use null instead."):"object"==typeof e?this.error('Bare objects invalid. Use ["literal", {...}] instead.'):this.error(`Expected an array, but found ${typeof e} instead.`)}concat(e,t,o){const r="number"==typeof e?this.path.concat(e):this.path,n=o?this.scope.concat(o):this.scope;return new He(this.registry,r,t||null,n,this.errors)}error(e,...t){const o=`${this.key}${t.map((e=>`[${e}]`)).join("")}`;this.errors.push(new S(o,e))}checkSubtype(e,t){const o=H(e,t);return o&&this.error(o),o}}var Ve=He;function Ge(e){if(e instanceof Je)return Ge(e.boundExpression);if(e instanceof xe&&"error"===e.name)return!1;if(e instanceof we)return!1;if(e instanceof Be)return!1;const t=e instanceof ye||e instanceof pe;let o=!0;return e.eachChild((e=>{o=t?o&&Ge(e):o&&e instanceof se})),!!o&&Fe(e)&&Ue(e,["zoom","heatmap-density","line-progress","sky-radial-progress","accumulated","is-supported-script","pitch","distance-from-center"])}function Ze(e,t){const o=e.length-1;let r,n,i=0,a=o,s=0;for(;i<=a;)if(s=Math.floor((i+a)/2),r=e[s],n=e[s+1],r<=t){if(s===o||t<n)return s;i=s+1}else{if(!(r>t))throw new le("Input is not a number.");a=s-1}return 0}class Ye{constructor(e,t,o){this.type=e,this.input=t,this.labels=[],this.outputs=[];for(const[e,t]of o)this.labels.push(e),this.outputs.push(t)}static parse(e,t){if(e.length-1<4)return t.error(`Expected at least 4 arguments, but found only ${e.length-1}.`);if((e.length-1)%2!=0)return t.error("Expected an even number of arguments.");const o=t.parse(e[1],1,q);if(!o)return null;const r=[];let n=null;t.expectedType&&"value"!==t.expectedType.kind&&(n=t.expectedType);for(let o=1;o<e.length;o+=2){const i=1===o?-1/0:e[o],a=e[o+1],s=o,l=o+1;if("number"!=typeof i)return t.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.',s);if(r.length&&r[r.length-1][0]>=i)return t.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.',s);const u=t.parse(a,l,n);if(!u)return null;n=n||u.type,r.push([i,u])}return new Ye(n,o,r)}evaluate(e){const t=this.labels,o=this.outputs;if(1===t.length)return o[0].evaluate(e);const r=this.input.evaluate(e);if(r<=t[0])return o[0].evaluate(e);const n=t.length;return r>=t[n-1]?o[n-1].evaluate(e):o[Ze(t,r)].evaluate(e)}eachChild(e){e(this.input);for(const t of this.outputs)e(t)}outputDefined(){return this.outputs.every((e=>e.outputDefined()))}serialize(){const e=["step",this.input.serialize()];for(let t=0;t<this.labels.length;t++)t>0&&e.push(this.labels[t]),e.push(this.outputs[t].serialize());return e}}var Xe=Ye,Ke=Qe;function Qe(e,t,o,r){this.cx=3*e,this.bx=3*(o-e)-this.cx,this.ax=1-this.cx-this.bx,this.cy=3*t,this.by=3*(r-t)-this.cy,this.ay=1-this.cy-this.by,this.p1x=e,this.p1y=r,this.p2x=o,this.p2y=r}function et(e,t,o){return e*(1-o)+t*o}Qe.prototype.sampleCurveX=function(e){return((this.ax*e+this.bx)*e+this.cx)*e},Qe.prototype.sampleCurveY=function(e){return((this.ay*e+this.by)*e+this.cy)*e},Qe.prototype.sampleCurveDerivativeX=function(e){return(3*this.ax*e+2*this.bx)*e+this.cx},Qe.prototype.solveCurveX=function(e,t){var o,r,n,i,a;for(void 0===t&&(t=1e-6),n=e,a=0;a<8;a++){if(i=this.sampleCurveX(n)-e,Math.abs(i)<t)return n;var s=this.sampleCurveDerivativeX(n);if(Math.abs(s)<1e-6)break;n-=i/s}if((n=e)<(o=0))return o;if(n>(r=1))return r;for(;o<r;){if(i=this.sampleCurveX(n),Math.abs(i-e)<t)return n;e>i?o=n:r=n,n=.5*(r-o)+o}return n},Qe.prototype.solve=function(e,t){return this.sampleCurveY(this.solveCurveX(e,t))};var tt=Object.freeze({__proto__:null,number:et,color:function(e,t,o){return new X(et(e.r,t.r,o),et(e.g,t.g,o),et(e.b,t.b,o),et(e.a,t.a,o))},array:function(e,t,o){return e.map(((e,r)=>et(e,t[r],o)))}});const ot=.95047,rt=1.08883,nt=4/29,it=6/29,at=3*it*it,st=Math.PI/180,lt=180/Math.PI;function ut(e){return e>.008856451679035631?Math.pow(e,1/3):e/at+nt}function ct(e){return e>it?e*e*e:at*(e-nt)}function pt(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function dt(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function ht(e){const t=dt(e.r),o=dt(e.g),r=dt(e.b),n=ut((.4124564*t+.3575761*o+.1804375*r)/ot),i=ut((.2126729*t+.7151522*o+.072175*r)/1);return{l:116*i-16,a:500*(n-i),b:200*(i-ut((.0193339*t+.119192*o+.9503041*r)/rt)),alpha:e.a}}function ft(e){let t=(e.l+16)/116,o=isNaN(e.a)?t:t+e.a/500,r=isNaN(e.b)?t:t-e.b/200;return t=1*ct(t),o=ot*ct(o),r=rt*ct(r),new X(pt(3.2404542*o-1.5371385*t-.4985314*r),pt(-.969266*o+1.8760108*t+.041556*r),pt(.0556434*o-.2040259*t+1.0572252*r),e.alpha)}function mt(e,t,o){const r=t-e;return e+o*(r>180||r<-180?r-360*Math.round(r/360):r)}const yt={forward:ht,reverse:ft,interpolate:function(e,t,o){return{l:et(e.l,t.l,o),a:et(e.a,t.a,o),b:et(e.b,t.b,o),alpha:et(e.alpha,t.alpha,o)}}},gt={forward:function(e){const{l:t,a:o,b:r}=ht(e),n=Math.atan2(r,o)*lt;return{h:n<0?n+360:n,c:Math.sqrt(o*o+r*r),l:t,alpha:e.a}},reverse:function(e){const t=e.h*st,o=e.c;return ft({l:e.l,a:Math.cos(t)*o,b:Math.sin(t)*o,alpha:e.alpha})},interpolate:function(e,t,o){return{h:mt(e.h,t.h,o),c:et(e.c,t.c,o),l:et(e.l,t.l,o),alpha:et(e.alpha,t.alpha,o)}}};var bt=Object.freeze({__proto__:null,lab:yt,hcl:gt});class vt{constructor(e,t,o,r,n){this.type=e,this.operator=t,this.interpolation=o,this.input=r,this.labels=[],this.outputs=[];for(const[e,t]of n)this.labels.push(e),this.outputs.push(t)}static interpolationFactor(e,t,o,r){let n=0;if("exponential"===e.name)n=xt(t,e.base,o,r);else if("linear"===e.name)n=xt(t,1,o,r);else if("cubic-bezier"===e.name){const i=e.controlPoints;n=new Ke(i[0],i[1],i[2],i[3]).solve(xt(t,1,o,r))}return n}static parse(e,t){let[o,r,n,...i]=e;if(!Array.isArray(r)||0===r.length)return t.error("Expected an interpolation type expression.",1);if("linear"===r[0])r={name:"linear"};else if("exponential"===r[0]){const e=r[1];if("number"!=typeof e)return t.error("Exponential interpolation requires a numeric base.",1,1);r={name:"exponential",base:e}}else{if("cubic-bezier"!==r[0])return t.error(`Unknown interpolation type ${String(r[0])}`,1,0);{const e=r.slice(1);if(4!==e.length||e.some((e=>"number"!=typeof e||e<0||e>1)))return t.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.",1);r={name:"cubic-bezier",controlPoints:e}}}if(e.length-1<4)return t.error(`Expected at least 4 arguments, but found only ${e.length-1}.`);if((e.length-1)%2!=0)return t.error("Expected an even number of arguments.");if(n=t.parse(n,2,q),!n)return null;const a=[];let s=null;"interpolate-hcl"===o||"interpolate-lab"===o?s=L:t.expectedType&&"value"!==t.expectedType.kind&&(s=t.expectedType);for(let e=0;e<i.length;e+=2){const o=i[e],r=i[e+1],n=e+3,l=e+4;if("number"!=typeof o)return t.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.',n);if(a.length&&a[a.length-1][0]>=o)return t.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.',n);const u=t.parse(r,l,s);if(!u)return null;s=s||u.type,a.push([o,u])}return"number"===s.kind||"color"===s.kind||"array"===s.kind&&"number"===s.itemType.kind&&"number"==typeof s.N?new vt(s,o,r,n,a):t.error(`Type ${W(s)} is not interpolatable.`)}evaluate(e){const t=this.labels,o=this.outputs;if(1===t.length)return o[0].evaluate(e);const r=this.input.evaluate(e);if(r<=t[0])return o[0].evaluate(e);const n=t.length;if(r>=t[n-1])return o[n-1].evaluate(e);const i=Ze(t,r),a=t[i],s=t[i+1],l=vt.interpolationFactor(this.interpolation,r,a,s),u=o[i].evaluate(e),c=o[i+1].evaluate(e);return"interpolate"===this.operator?tt[this.type.kind.toLowerCase()](u,c,l):"interpolate-hcl"===this.operator?gt.reverse(gt.interpolate(gt.forward(u),gt.forward(c),l)):yt.reverse(yt.interpolate(yt.forward(u),yt.forward(c),l))}eachChild(e){e(this.input);for(const t of this.outputs)e(t)}outputDefined(){return this.outputs.every((e=>e.outputDefined()))}serialize(){let e;e="linear"===this.interpolation.name?["linear"]:"exponential"===this.interpolation.name?1===this.interpolation.base?["linear"]:["exponential",this.interpolation.base]:["cubic-bezier"].concat(this.interpolation.controlPoints);const t=[this.operator,e,this.input.serialize()];for(let e=0;e<this.labels.length;e++)t.push(this.labels[e],this.outputs[e].serialize());return t}}function xt(e,t,o,r){const n=r-o,i=e-o;return 0===n?0:1===t?i/n:(Math.pow(t,i)-1)/(Math.pow(t,n)-1)}var wt=vt;class kt{constructor(e,t){this.type=e,this.args=t}static parse(e,t){if(e.length<2)return t.error("Expectected at least one argument.");let o=null;const r=t.expectedType;r&&"value"!==r.kind&&(o=r);const n=[];for(const r of e.slice(1)){const e=t.parse(r,1+n.length,o,void 0,{typeAnnotation:"omit"});if(!e)return null;o=o||e.type,n.push(e)}const i=r&&n.some((e=>H(r,e.type)));return new kt(i?P:o,n)}evaluate(e){let t,o=null,r=0;for(const n of this.args){if(r++,o=n.evaluate(e),o&&o instanceof te&&!o.available&&(t||(t=o),o=null,r===this.args.length))return t;if(null!==o)break}return o}eachChild(e){this.args.forEach(e)}outputDefined(){return this.args.every((e=>e.outputDefined()))}serialize(){const e=["coalesce"];return this.eachChild((t=>{e.push(t.serialize())})),e}}var jt=kt;class At{constructor(e,t){this.type=t.type,this.bindings=[].concat(e),this.result=t}evaluate(e){return this.result.evaluate(e)}eachChild(e){for(const t of this.bindings)e(t[1]);e(this.result)}static parse(e,t){if(e.length<4)return t.error(`Expected at least 3 arguments, but found ${e.length-1} instead.`);const o=[];for(let r=1;r<e.length-1;r+=2){const n=e[r];if("string"!=typeof n)return t.error(`Expected string, but found ${typeof n} instead.`,r);if(/[^a-zA-Z0-9_]/.test(n))return t.error("Variable names must contain only alphanumeric characters or '_'.",r);const i=t.parse(e[r+1],r+1);if(!i)return null;o.push([n,i])}const r=t.parse(e[e.length-1],e.length-1,t.expectedType,o);return r?new At(o,r):null}outputDefined(){return this.result.outputDefined()}serialize(){const e=["let"];for(const[t,o]of this.bindings)e.push(t,o.serialize());return e.push(this.result.serialize()),e}}var Tt=At;class zt{constructor(e,t,o){this.type=e,this.index=t,this.input=o}static parse(e,t){if(3!==e.length)return t.error(`Expected 2 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,q),r=t.parse(e[2],2,U(t.expectedType||P));if(!o||!r)return null;const n=r.type;return new zt(n.itemType,o,r)}evaluate(e){const t=this.index.evaluate(e),o=this.input.evaluate(e);if(t<0)throw new le(`Array index out of bounds: ${t} < 0.`);if(t>=o.length)throw new le(`Array index out of bounds: ${t} > ${o.length-1}.`);if(t!==Math.floor(t))throw new le(`Array index must be an integer, but found ${t} instead.`);return o[t]}eachChild(e){e(this.index),e(this.input)}outputDefined(){return!1}serialize(){return["at",this.index.serialize(),this.input.serialize()]}}var Ct=zt;class _t{constructor(e,t){this.type=M,this.needle=e,this.haystack=t}static parse(e,t){if(3!==e.length)return t.error(`Expected 2 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,P),r=t.parse(e[2],2,P);return o&&r?V(o.type,[M,N,q,O,P])?new _t(o,r):t.error(`Expected first argument to be of type boolean, string, number or null, but found ${W(o.type)} instead`):null}evaluate(e){const t=this.needle.evaluate(e),o=this.haystack.evaluate(e);if(null==o)return!1;if(!G(t,["boolean","string","number","null"]))throw new le(`Expected first argument to be of type boolean, string, number or null, but found ${W(ne(t))} instead.`);if(!G(o,["string","array"]))throw new le(`Expected second argument to be of type array or string, but found ${W(ne(o))} instead.`);return o.indexOf(t)>=0}eachChild(e){e(this.needle),e(this.haystack)}outputDefined(){return!0}serialize(){return["in",this.needle.serialize(),this.haystack.serialize()]}}var Et=_t;class St{constructor(e,t,o){this.type=q,this.needle=e,this.haystack=t,this.fromIndex=o}static parse(e,t){if(e.length<=2||e.length>=5)return t.error(`Expected 3 or 4 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,P),r=t.parse(e[2],2,P);if(!o||!r)return null;if(!V(o.type,[M,N,q,O,P]))return t.error(`Expected first argument to be of type boolean, string, number or null, but found ${W(o.type)} instead`);if(4===e.length){const n=t.parse(e[3],3,q);return n?new St(o,r,n):null}return new St(o,r)}evaluate(e){const t=this.needle.evaluate(e),o=this.haystack.evaluate(e);if(!G(t,["boolean","string","number","null"]))throw new le(`Expected first argument to be of type boolean, string, number or null, but found ${W(ne(t))} instead.`);if(!G(o,["string","array"]))throw new le(`Expected second argument to be of type array or string, but found ${W(ne(o))} instead.`);if(this.fromIndex){const r=this.fromIndex.evaluate(e);return o.indexOf(t,r)}return o.indexOf(t)}eachChild(e){e(this.needle),e(this.haystack),this.fromIndex&&e(this.fromIndex)}outputDefined(){return!1}serialize(){if(null!=this.fromIndex&&void 0!==this.fromIndex){const e=this.fromIndex.serialize();return["index-of",this.needle.serialize(),this.haystack.serialize(),e]}return["index-of",this.needle.serialize(),this.haystack.serialize()]}}var It=St;class Rt{constructor(e,t,o,r,n,i){this.inputType=e,this.type=t,this.input=o,this.cases=r,this.outputs=n,this.otherwise=i}static parse(e,t){if(e.length<5)return t.error(`Expected at least 4 arguments, but found only ${e.length-1}.`);if(e.length%2!=1)return t.error("Expected an even number of arguments.");let o,r;t.expectedType&&"value"!==t.expectedType.kind&&(r=t.expectedType);const n={},i=[];for(let a=2;a<e.length-1;a+=2){let s=e[a];const l=e[a+1];Array.isArray(s)||(s=[s]);const u=t.concat(a);if(0===s.length)return u.error("Expected at least one branch label.");for(const e of s){if("number"!=typeof e&&"string"!=typeof e)return u.error("Branch labels must be numbers or strings.");if("number"==typeof e&&Math.abs(e)>Number.MAX_SAFE_INTEGER)return u.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);if("number"==typeof e&&Math.floor(e)!==e)return u.error("Numeric branch labels must be integer values.");if(o){if(u.checkSubtype(o,ne(e)))return null}else o=ne(e);if(void 0!==n[String(e)])return u.error("Branch labels must be unique.");n[String(e)]=i.length}const c=t.parse(l,a,r);if(!c)return null;r=r||c.type,i.push(c)}const a=t.parse(e[1],1,P);if(!a)return null;const s=t.parse(e[e.length-1],e.length-1,r);return s?"value"!==a.type.kind&&t.concat(1).checkSubtype(o,a.type)?null:new Rt(o,r,a,n,i,s):null}evaluate(e){const t=this.input.evaluate(e);return(ne(t)===this.inputType&&this.outputs[this.cases[t]]||this.otherwise).evaluate(e)}eachChild(e){e(this.input),this.outputs.forEach(e),e(this.otherwise)}outputDefined(){return this.outputs.every((e=>e.outputDefined()))&&this.otherwise.outputDefined()}serialize(){const e=["match",this.input.serialize()],t=Object.keys(this.cases).sort(),o=[],r={};for(const e of t){const t=r[this.cases[e]];void 0===t?(r[this.cases[e]]=o.length,o.push([this.cases[e],[e]])):o[t][1].push(e)}const n=e=>"number"===this.inputType.kind?Number(e):e;for(const[t,r]of o)1===r.length?e.push(n(r[0])):e.push(r.map(n)),e.push(this.outputs[t].serialize());return e.push(this.otherwise.serialize()),e}}var Ot=Rt;class qt{constructor(e,t,o){this.type=e,this.branches=t,this.otherwise=o}static parse(e,t){if(e.length<4)return t.error(`Expected at least 3 arguments, but found only ${e.length-1}.`);if(e.length%2!=0)return t.error("Expected an odd number of arguments.");let o;t.expectedType&&"value"!==t.expectedType.kind&&(o=t.expectedType);const r=[];for(let n=1;n<e.length-1;n+=2){const i=t.parse(e[n],n,M);if(!i)return null;const a=t.parse(e[n+1],n+1,o);if(!a)return null;r.push([i,a]),o=o||a.type}const n=t.parse(e[e.length-1],e.length-1,o);return n?new qt(o,r,n):null}evaluate(e){for(const[t,o]of this.branches)if(t.evaluate(e))return o.evaluate(e);return this.otherwise.evaluate(e)}eachChild(e){for(const[t,o]of this.branches)e(t),e(o);e(this.otherwise)}outputDefined(){return this.branches.every((([e,t])=>t.outputDefined()))&&this.otherwise.outputDefined()}serialize(){const e=["case"];return this.eachChild((t=>{e.push(t.serialize())})),e}}var Nt=qt;class Mt{constructor(e,t,o,r){this.type=e,this.input=t,this.beginIndex=o,this.endIndex=r}static parse(e,t){if(e.length<=2||e.length>=5)return t.error(`Expected 3 or 4 arguments, but found ${e.length-1} instead.`);const o=t.parse(e[1],1,P),r=t.parse(e[2],2,q);if(!o||!r)return null;if(!V(o.type,[U(P),N,P]))return t.error(`Expected first argument to be of type array or string, but found ${W(o.type)} instead`);if(4===e.length){const n=t.parse(e[3],3,q);return n?new Mt(o.type,o,r,n):null}return new Mt(o.type,o,r)}evaluate(e){const t=this.input.evaluate(e),o=this.beginIndex.evaluate(e);if(!G(t,["string","array"]))throw new le(`Expected first argument to be of type array or string, but found ${W(ne(t))} instead.`);if(this.endIndex){const r=this.endIndex.evaluate(e);return t.slice(o,r)}return t.slice(o)}eachChild(e){e(this.input),e(this.beginIndex),this.endIndex&&e(this.endIndex)}outputDefined(){return!1}serialize(){if(null!=this.endIndex&&void 0!==this.endIndex){const e=this.endIndex.serialize();return["slice",this.input.serialize(),this.beginIndex.serialize(),e]}return["slice",this.input.serialize(),this.beginIndex.serialize()]}}var Lt=Mt;function Dt(e,t){return"=="===e||"!="===e?"boolean"===t.kind||"string"===t.kind||"number"===t.kind||"null"===t.kind||"value"===t.kind:"string"===t.kind||"number"===t.kind||"value"===t.kind}function Pt(e,t,o,r){return 0===r.compare(t,o)}function Bt(e,t,o){const r="=="!==e&&"!="!==e;return class n{constructor(e,t,o){this.type=M,this.lhs=e,this.rhs=t,this.collator=o,this.hasUntypedArgument="value"===e.type.kind||"value"===t.type.kind}static parse(e,t){if(3!==e.length&&4!==e.length)return t.error("Expected two or three arguments.");const o=e[0];let i=t.parse(e[1],1,P);if(!i)return null;if(!Dt(o,i.type))return t.concat(1).error(`"${o}" comparisons are not supported for type '${W(i.type)}'.`);let a=t.parse(e[2],2,P);if(!a)return null;if(!Dt(o,a.type))return t.concat(2).error(`"${o}" comparisons are not supported for type '${W(a.type)}'.`);if(i.type.kind!==a.type.kind&&"value"!==i.type.kind&&"value"!==a.type.kind)return t.error(`Cannot compare types '${W(i.type)}' and '${W(a.type)}'.`);r&&("value"===i.type.kind&&"value"!==a.type.kind?i=new pe(a.type,[i]):"value"!==i.type.kind&&"value"===a.type.kind&&(a=new pe(i.type,[a])));let s=null;if(4===e.length){if("string"!==i.type.kind&&"string"!==a.type.kind&&"value"!==i.type.kind&&"value"!==a.type.kind)return t.error("Cannot use collator to compare non-string types.");if(s=t.parse(e[3],3,B),!s)return null}return new n(i,a,s)}evaluate(n){const i=this.lhs.evaluate(n),a=this.rhs.evaluate(n);if(r&&this.hasUntypedArgument){const t=ne(i),o=ne(a);if(t.kind!==o.kind||"string"!==t.kind&&"number"!==t.kind)throw new le(`Expected arguments for "${e}" to be (string, string) or (number, number), but found (${t.kind}, ${o.kind}) instead.`)}if(this.collator&&!r&&this.hasUntypedArgument){const e=ne(i),o=ne(a);if("string"!==e.kind||"string"!==o.kind)return t(n,i,a)}return this.collator?o(n,i,a,this.collator.evaluate(n)):t(n,i,a)}eachChild(e){e(this.lhs),e(this.rhs),this.collator&&e(this.collator)}outputDefined(){return!0}serialize(){const t=[e];return this.eachChild((e=>{t.push(e.serialize())})),t}}}const Ft=Bt("==",(function(e,t,o){return t===o}),Pt),$t=Bt("!=",(function(e,t,o){return t!==o}),(function(e,t,o,r){return!Pt(0,t,o,r)})),Ut=Bt("<",(function(e,t,o){return t<o}),(function(e,t,o,r){return r.compare(t,o)<0})),Wt=Bt(">",(function(e,t,o){return t>o}),(function(e,t,o,r){return r.compare(t,o)>0})),Jt=Bt("<=",(function(e,t,o){return t<=o}),(function(e,t,o,r){return r.compare(t,o)<=0})),Ht=Bt(">=",(function(e,t,o){return t>=o}),(function(e,t,o,r){return r.compare(t,o)>=0}));class Vt{constructor(e,t,o,r,n){this.type=N,this.number=e,this.locale=t,this.currency=o,this.minFractionDigits=r,this.maxFractionDigits=n}static parse(e,t){if(3!==e.length)return t.error("Expected two arguments.");const o=t.parse(e[1],1,q);if(!o)return null;const r=e[2];if("object"!=typeof r||Array.isArray(r))return t.error("NumberFormat options argument must be an object.");let n=null;if(r.locale&&(n=t.parse(r.locale,1,N),!n))return null;let i=null;if(r.currency&&(i=t.parse(r.currency,1,N),!i))return null;let a=null;if(r["min-fraction-digits"]&&(a=t.parse(r["min-fraction-digits"],1,q),!a))return null;let s=null;return r["max-fraction-digits"]&&(s=t.parse(r["max-fraction-digits"],1,q),!s)?null:new Vt(o,n,i,a,s)}evaluate(e){return new Intl.NumberFormat(this.locale?this.locale.evaluate(e):[],{style:this.currency?"currency":"decimal",currency:this.currency?this.currency.evaluate(e):void 0,minimumFractionDigits:this.minFractionDigits?this.minFractionDigits.evaluate(e):void 0,maximumFractionDigits:this.maxFractionDigits?this.maxFractionDigits.evaluate(e):void 0}).format(this.number.evaluate(e))}eachChild(e){e(this.number),this.locale&&e(this.locale),this.currency&&e(this.currency),this.minFractionDigits&&e(this.minFractionDigits),this.maxFractionDigits&&e(this.maxFractionDigits)}outputDefined(){return!1}serialize(){const e={};return this.locale&&(e.locale=this.locale.serialize()),this.currency&&(e.currency=this.currency.serialize()),this.minFractionDigits&&(e["min-fraction-digits"]=this.minFractionDigits.serialize()),this.maxFractionDigits&&(e["max-fraction-digits"]=this.maxFractionDigits.serialize()),["number-format",this.number.serialize(),e]}}class Gt{constructor(e){this.type=q,this.input=e}static parse(e,t){if(2!==e.length)return t.error(`Expected 1 argument, but found ${e.length-1} instead.`);const o=t.parse(e[1],1);return o?"array"!==o.type.kind&&"string"!==o.type.kind&&"value"!==o.type.kind?t.error(`Expected argument of type string or array, but found ${W(o.type)} instead.`):new Gt(o):null}evaluate(e){const t=this.input.evaluate(e);if("string"==typeof t)return t.length;if(Array.isArray(t))return t.length;throw new le(`Expected value to be of type string or array, but found ${W(ne(t))} instead.`)}eachChild(e){e(this.input)}outputDefined(){return!1}serialize(){const e=["length"];return this.eachChild((t=>{e.push(t.serialize())})),e}}const Zt={"==":Ft,"!=":$t,">":Wt,"<":Ut,">=":Ht,"<=":Jt,array:pe,at:Ct,boolean:pe,case:Nt,coalesce:jt,collator:we,format:de,image:he,in:Et,"index-of":It,interpolate:wt,"interpolate-hcl":wt,"interpolate-lab":wt,length:Gt,let:Tt,literal:se,match:Ot,number:pe,"number-format":Vt,object:pe,slice:Lt,step:Xe,string:pe,"to-boolean":ye,"to-color":ye,"to-number":ye,"to-string":ye,var:Je,within:Be};function Yt(e,[t,o,r,n]){t=t.evaluate(e),o=o.evaluate(e),r=r.evaluate(e);const i=n?n.evaluate(e):1,a=oe(t,o,r,i);if(a)throw new le(a);return new X(t/255*i,o/255*i,r/255*i,i)}function Xt(e,t){return e in t}function Kt(e,t){const o=t[e];return void 0===o?null:o}function Qt(e){return{type:e}}xe.register(Zt,{error:[{kind:"error"},[N],(e,[t])=>{throw new le(t.evaluate(e))}],typeof:[N,[P],(e,[t])=>W(ne(t.evaluate(e)))],"to-rgba":[U(q,4),[L],(e,[t])=>t.evaluate(e).toArray()],rgb:[L,[q,q,q],Yt],rgba:[L,[q,q,q,q],Yt],has:{type:M,overloads:[[[N],(e,[t])=>Xt(t.evaluate(e),e.properties())],[[N,D],(e,[t,o])=>Xt(t.evaluate(e),o.evaluate(e))]]},get:{type:P,overloads:[[[N],(e,[t])=>Kt(t.evaluate(e),e.properties())],[[N,D],(e,[t,o])=>Kt(t.evaluate(e),o.evaluate(e))]]},"feature-state":[P,[N],(e,[t])=>Kt(t.evaluate(e),e.featureState||{})],properties:[D,[],e=>e.properties()],"geometry-type":[N,[],e=>e.geometryType()],id:[P,[],e=>e.id()],zoom:[q,[],e=>e.globals.zoom],pitch:[q,[],e=>e.globals.pitch||0],"distance-from-center":[q,[],e=>e.distanceFromCenter()],"heatmap-density":[q,[],e=>e.globals.heatmapDensity||0],"line-progress":[q,[],e=>e.globals.lineProgress||0],"sky-radial-progress":[q,[],e=>e.globals.skyRadialProgress||0],accumulated:[P,[],e=>void 0===e.globals.accumulated?null:e.globals.accumulated],"+":[q,Qt(q),(e,t)=>{let o=0;for(const r of t)o+=r.evaluate(e);return o}],"*":[q,Qt(q),(e,t)=>{let o=1;for(const r of t)o*=r.evaluate(e);return o}],"-":{type:q,overloads:[[[q,q],(e,[t,o])=>t.evaluate(e)-o.evaluate(e)],[[q],(e,[t])=>-t.evaluate(e)]]},"/":[q,[q,q],(e,[t,o])=>t.evaluate(e)/o.evaluate(e)],"%":[q,[q,q],(e,[t,o])=>t.evaluate(e)%o.evaluate(e)],ln2:[q,[],()=>Math.LN2],pi:[q,[],()=>Math.PI],e:[q,[],()=>Math.E],"^":[q,[q,q],(e,[t,o])=>Math.pow(t.evaluate(e),o.evaluate(e))],sqrt:[q,[q],(e,[t])=>Math.sqrt(t.evaluate(e))],log10:[q,[q],(e,[t])=>Math.log(t.evaluate(e))/Math.LN10],ln:[q,[q],(e,[t])=>Math.log(t.evaluate(e))],log2:[q,[q],(e,[t])=>Math.log(t.evaluate(e))/Math.LN2],sin:[q,[q],(e,[t])=>Math.sin(t.evaluate(e))],cos:[q,[q],(e,[t])=>Math.cos(t.evaluate(e))],tan:[q,[q],(e,[t])=>Math.tan(t.evaluate(e))],asin:[q,[q],(e,[t])=>Math.asin(t.evaluate(e))],acos:[q,[q],(e,[t])=>Math.acos(t.evaluate(e))],atan:[q,[q],(e,[t])=>Math.atan(t.evaluate(e))],min:[q,Qt(q),(e,t)=>Math.min(...t.map((t=>t.evaluate(e))))],max:[q,Qt(q),(e,t)=>Math.max(...t.map((t=>t.evaluate(e))))],abs:[q,[q],(e,[t])=>Math.abs(t.evaluate(e))],round:[q,[q],(e,[t])=>{const o=t.evaluate(e);return o<0?-Math.round(-o):Math.round(o)}],floor:[q,[q],(e,[t])=>Math.floor(t.evaluate(e))],ceil:[q,[q],(e,[t])=>Math.ceil(t.evaluate(e))],"filter-==":[M,[N,P],(e,[t,o])=>e.properties()[t.value]===o.value],"filter-id-==":[M,[P],(e,[t])=>e.id()===t.value],"filter-type-==":[M,[N],(e,[t])=>e.geometryType()===t.value],"filter-<":[M,[N,P],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r<n}],"filter-id-<":[M,[P],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o<r}],"filter->":[M,[N,P],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r>n}],"filter-id->":[M,[P],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o>r}],"filter-<=":[M,[N,P],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r<=n}],"filter-id-<=":[M,[P],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o<=r}],"filter->=":[M,[N,P],(e,[t,o])=>{const r=e.properties()[t.value],n=o.value;return typeof r==typeof n&&r>=n}],"filter-id->=":[M,[P],(e,[t])=>{const o=e.id(),r=t.value;return typeof o==typeof r&&o>=r}],"filter-has":[M,[P],(e,[t])=>t.value in e.properties()],"filter-has-id":[M,[],e=>null!==e.id()&&void 0!==e.id()],"filter-type-in":[M,[U(N)],(e,[t])=>t.value.indexOf(e.geometryType())>=0],"filter-id-in":[M,[U(P)],(e,[t])=>t.value.indexOf(e.id())>=0],"filter-in-small":[M,[N,U(P)],(e,[t,o])=>o.value.indexOf(e.properties()[t.value])>=0],"filter-in-large":[M,[N,U(P)],(e,[t,o])=>function(e,t,o,r){for(;o<=r;){const n=o+r>>1;if(t[n]===e)return!0;t[n]>e?r=n-1:o=n+1}return!1}(e.properties()[t.value],o.value,0,o.value.length-1)],all:{type:M,overloads:[[[M,M],(e,[t,o])=>t.evaluate(e)&&o.evaluate(e)],[Qt(M),(e,t)=>{for(const o of t)if(!o.evaluate(e))return!1;return!0}]]},any:{type:M,overloads:[[[M,M],(e,[t,o])=>t.evaluate(e)||o.evaluate(e)],[Qt(M),(e,t)=>{for(const o of t)if(o.evaluate(e))return!0;return!1}]]},"!":[M,[M],(e,[t])=>!t.evaluate(e)],"is-supported-script":[M,[N],(e,[t])=>{const o=e.globals&&e.globals.isSupportedScript;return!o||o(t.evaluate(e))}],upcase:[N,[N],(e,[t])=>t.evaluate(e).toUpperCase()],downcase:[N,[N],(e,[t])=>t.evaluate(e).toLowerCase()],concat:[N,Qt(P),(e,t)=>t.map((t=>ie(t.evaluate(e)))).join("")],"resolved-locale":[N,[B],(e,[t])=>t.evaluate(e).resolvedLocale()]});var eo=Zt;function to(e){return{result:"success",value:e}}function oo(e){return{result:"error",value:e}}function ro(e){return!!e.expression&&e.expression.interpolated}function no(e){return e instanceof Number?"number":e instanceof String?"string":e instanceof Boolean?"boolean":Array.isArray(e)?"array":null===e?"null":typeof e}function io(e){return"object"==typeof e&&null!==e&&!Array.isArray(e)}function ao(e){return e}function so(e,t){const o="color"===t.type,r=e.stops&&"object"==typeof e.stops[0][0],n=r||void 0!==e.property,i=r||!n,a=e.type||(ro(t)?"exponential":"interval");if(o&&((e=_({},e)).stops&&(e.stops=e.stops.map((e=>[e[0],X.parse(e[1])]))),e.default?e.default=X.parse(e.default):e.default=X.parse(t.default)),e.colorSpace&&"rgb"!==e.colorSpace&&!bt[e.colorSpace])throw new Error(`Unknown color space: ${e.colorSpace}`);let s,l,u;if("exponential"===a)s=po;else if("interval"===a)s=co;else if("categorical"===a){s=uo,l=Object.create(null);for(const t of e.stops)l[t[0]]=t[1];u=typeof e.stops[0][0]}else{if("identity"!==a)throw new Error(`Unknown function type "${a}"`);s=ho}if(r){const o={},r=[];for(let t=0;t<e.stops.length;t++){const n=e.stops[t],i=n[0].zoom;void 0===o[i]&&(o[i]={zoom:i,type:e.type,property:e.property,default:e.default,stops:[]},r.push(i)),o[i].stops.push([n[0].value,n[1]])}const n=[];for(const e of r)n.push([o[e].zoom,so(o[e],t)]);const i={name:"linear"};return{kind:"composite",interpolationType:i,interpolationFactor:wt.interpolationFactor.bind(void 0,i),zoomStops:n.map((e=>e[0])),evaluate:({zoom:o},r)=>po({stops:n,base:e.base},t,o).evaluate(o,r)}}if(i){const o="exponential"===a?{name:"exponential",base:void 0!==e.base?e.base:1}:null;return{kind:"camera",interpolationType:o,interpolationFactor:wt.interpolationFactor.bind(void 0,o),zoomStops:e.stops.map((e=>e[0])),evaluate:({zoom:o})=>s(e,t,o,l,u)}}return{kind:"source",evaluate(o,r){const n=r&&r.properties?r.properties[e.property]:void 0;return void 0===n?lo(e.default,t.default):s(e,t,n,l,u)}}}function lo(e,t,o){return void 0!==e?e:void 0!==t?t:void 0!==o?o:void 0}function uo(e,t,o,r,n){return lo(typeof o===n?r[o]:void 0,e.default,t.default)}function co(e,t,o){if("number"!==no(o))return lo(e.default,t.default);const r=e.stops.length;if(1===r)return e.stops[0][1];if(o<=e.stops[0][0])return e.stops[0][1];if(o>=e.stops[r-1][0])return e.stops[r-1][1];const n=Ze(e.stops.map((e=>e[0])),o);return e.stops[n][1]}function po(e,t,o){const r=void 0!==e.base?e.base:1;if("number"!==no(o))return lo(e.default,t.default);const n=e.stops.length;if(1===n)return e.stops[0][1];if(o<=e.stops[0][0])return e.stops[0][1];if(o>=e.stops[n-1][0])return e.stops[n-1][1];const i=Ze(e.stops.map((e=>e[0])),o),a=function(e,t,o,r){const n=r-o,i=e-o;return 0===n?0:1===t?i/n:(Math.pow(t,i)-1)/(Math.pow(t,n)-1)}(o,r,e.stops[i][0],e.stops[i+1][0]),s=e.stops[i][1],l=e.stops[i+1][1];let u=tt[t.type]||ao;if(e.colorSpace&&"rgb"!==e.colorSpace){const t=bt[e.colorSpace];u=(e,o)=>t.reverse(t.interpolate(t.forward(e),t.forward(o),a))}return"function"==typeof s.evaluate?{evaluate(...e){const t=s.evaluate.apply(void 0,e),o=l.evaluate.apply(void 0,e);if(void 0!==t&&void 0!==o)return u(t,o,a)}}:u(s,l,a)}function ho(e,t,o){return"color"===t.type?o=X.parse(o):"formatted"===t.type?o=ee.fromString(o.toString()):"resolvedImage"===t.type?o=te.fromString(o.toString()):no(o)===t.type||"enum"===t.type&&t.values[o]||(o=void 0),lo(o,e.default,t.default)}class fo{constructor(e,t){var o;this.expression=e,this._warningHistory={},this._evaluator=new be,this._defaultValue=t?"color"===(o=t).type&&(io(o.default)||Array.isArray(o.default))?new X(0,0,0,0):"color"===o.type?X.parse(o.default)||null:void 0===o.default?null:o.default:null,this._enumValues=t&&"enum"===t.type?t.values:null}evaluateWithoutErrorHandling(e,t,o,r,n,i,a,s){return this._evaluator.globals=e,this._evaluator.feature=t,this._evaluator.featureState=o,this._evaluator.canonical=r||null,this._evaluator.availableImages=n||null,this._evaluator.formattedSection=i,this._evaluator.featureTileCoord=a||null,this._evaluator.featureDistanceData=s||null,this.expression.evaluate(this._evaluator)}evaluate(e,t,o,r,n,i,a,s){this._evaluator.globals=e,this._evaluator.feature=t||null,this._evaluator.featureState=o||null,this._evaluator.canonical=r||null,this._evaluator.availableImages=n||null,this._evaluator.formattedSection=i||null,this._evaluator.featureTileCoord=a||null,this._evaluator.featureDistanceData=s||null;try{const e=this.expression.evaluate(this._evaluator);if(null==e||"number"==typeof e&&e!=e)return this._defaultValue;if(this._enumValues&&!(e in this._enumValues))throw new le(`Expected value to be one of ${Object.keys(this._enumValues).map((e=>JSON.stringify(e))).join(", ")}, but found ${JSON.stringify(e)} instead.`);return e}catch(e){return this._warningHistory[e.message]||(this._warningHistory[e.message]=!0,"undefined"!=typeof console&&console.warn(e.message)),this._defaultValue}}}function mo(e){return Array.isArray(e)&&e.length>0&&"string"==typeof e[0]&&e[0]in eo}function yo(e,t){const o=new Ve(eo,[],t?function(e){const t={color:L,string:N,number:q,enum:N,boolean:M,formatted:F,resolvedImage:$};return"array"===e.type?U(t[e.value]||P,e.length):t[e.type]}(t):void 0),r=o.parse(e,void 0,void 0,void 0,t&&"string"===t.type?{typeAnnotation:"coerce"}:void 0);return r?to(new fo(r,t)):oo(o.errors)}class go{constructor(e,t){this.kind=e,this._styleExpression=t,this.isStateDependent="constant"!==e&&!$e(t.expression)}evaluateWithoutErrorHandling(e,t,o,r,n,i){return this._styleExpression.evaluateWithoutErrorHandling(e,t,o,r,n,i)}evaluate(e,t,o,r,n,i){return this._styleExpression.evaluate(e,t,o,r,n,i)}}class bo{constructor(e,t,o,r){this.kind=e,this.zoomStops=o,this._styleExpression=t,this.isStateDependent="camera"!==e&&!$e(t.expression),this.interpolationType=r}evaluateWithoutErrorHandling(e,t,o,r,n,i){return this._styleExpression.evaluateWithoutErrorHandling(e,t,o,r,n,i)}evaluate(e,t,o,r,n,i){return this._styleExpression.evaluate(e,t,o,r,n,i)}interpolationFactor(e,t,o){return this.interpolationType?wt.interpolationFactor(this.interpolationType,e,t,o):0}}function vo(e,t){if("error"===(e=yo(e,t)).result)return e;const o=e.value.expression,r=Fe(o);if(!r&&("data-driven"!==(n=t)["property-type"]&&"cross-faded-data-driven"!==n["property-type"]))return oo([new S("","data expressions not supported")]);var n;const i=Ue(o,["zoom","pitch","distance-from-center"]);if(!i&&!function(e){return!!e.expression&&e.expression.parameters.indexOf("zoom")>-1}(t))return oo([new S("","zoom expressions not supported")]);const a=wo(o);if(!a&&!i)return oo([new S("",'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);if(a instanceof S)return oo([a]);if(a instanceof wt&&!ro(t))return oo([new S("",'"interpolate" expressions cannot be used with this property')]);if(!a)return to(new go(r?"constant":"source",e.value));const s=a instanceof wt?a.interpolation:void 0;return to(new bo(r?"camera":"composite",e.value,a.labels,s))}class xo{constructor(e,t){this._parameters=e,this._specification=t,_(this,so(this._parameters,this._specification))}static deserialize(e){return new xo(e._parameters,e._specification)}static serialize(e){return{_parameters:e._parameters,_specification:e._specification}}}function wo(e){let t=null;if(e instanceof Tt)t=wo(e.result);else if(e instanceof jt){for(const o of e.args)if(t=wo(o),t)break}else(e instanceof Xe||e instanceof wt)&&e.input instanceof xe&&"zoom"===e.input.name&&(t=e);return t instanceof S||e.eachChild((e=>{const o=wo(e);o instanceof S?t=o:!t&&o?t=new S("",'"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.'):t&&o&&t!==o&&(t=new S("",'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.'))})),t}function ko(e){return"object"==typeof e?["literal",e]:e}function jo(e){switch(e.colorSpace){case"hcl":return"interpolate-hcl";case"lab":return"interpolate-lab";default:return"interpolate"}}function Ao(e,t){const o=ko(function(e,t){return void 0!==e?e:void 0!==t?t:void 0}(e.default,t.default));return void 0===o&&"resolvedImage"===t.type?"":o}function To(e,t,o){const r=_o(e,t),n=["get",e.property];if("categorical"===r&&"boolean"==typeof o[0][0]){const r=["case"];for(const e of o)r.push(["==",n,e[0]],e[1]);return r.push(Ao(e,t)),r}if("categorical"===r){const r=["match",n];for(const e of o)Co(r,e[0],e[1],!1);return r.push(Ao(e,t)),r}if("interval"===r){const t=["step",["number",n]];for(const e of o)Co(t,e[0],e[1],!0);return zo(t),void 0===e.default?t:["case",["==",["typeof",n],"number"],t,ko(e.default)]}if("exponential"===r){const t=void 0!==e.base?e.base:1,r=[jo(e),1===t?["linear"]:["exponential",t],["number",n]];for(const e of o)Co(r,e[0],e[1],!1);return void 0===e.default?r:["case",["==",["typeof",n],"number"],r,ko(e.default)]}throw new Error(`Unknown property function type ${r}`)}function zo(e){"step"===e[0]&&3===e.length&&(e.push(0),e.push(e[3]))}function Co(e,t,o,r){e.length>3&&t===e[e.length-2]||(r&&2===e.length||e.push(t),e.push(o))}function _o(e,t){return e.type?e.type:t.expression.interpolated?"exponential":"interval"}function Eo(e){const t=["concat"],o=/{([^{}]+)}/g;let r=0;for(let n=o.exec(e);null!==n;n=o.exec(e)){const i=e.slice(r,o.lastIndex-n[0].length);r=o.lastIndex,i.length>0&&t.push(i),t.push(["get",n[1]])}if(1===t.length)return e;if(r<e.length)t.push(e.slice(r));else if(2===t.length)return["to-string",t[1]];return t}new Set(["in","==","!=",">",">=","<","<=","to-boolean"]),i((function(e,t){var o=function(){var e=function(e,t,o,r){for(o=o||{},r=e.length;r--;o[e[r]]=t);return o},t=[1,12],o=[1,13],r=[1,9],n=[1,10],i=[1,11],a=[1,14],s=[1,15],l=[14,18,22,24],u=[18,22],c=[22,24],p={trace:function(){},yy:{},symbols_:{error:2,JSONString:3,STRING:4,JSONNumber:5,NUMBER:6,JSONNullLiteral:7,NULL:8,JSONBooleanLiteral:9,TRUE:10,FALSE:11,JSONText:12,JSONValue:13,EOF:14,JSONObject:15,JSONArray:16,"{":17,"}":18,JSONMemberList:19,JSONMember:20,":":21,",":22,"[":23,"]":24,JSONElementList:25,$accept:0,$end:1},terminals_:{2:"error",4:"STRING",6:"NUMBER",8:"NULL",10:"TRUE",11:"FALSE",14:"EOF",17:"{",18:"}",21:":",22:",",23:"[",24:"]"},productions_:[0,[3,1],[5,1],[7,1],[9,1],[9,1],[12,2],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[15,2],[15,3],[20,3],[19,1],[19,3],[16,2],[16,3],[25,1],[25,3]],performAction:function(e,t,o,r,n,i,a){var s=i.length-1;switch(n){case 1:this.$=new String(e.replace(/\\(\\|")/g,"$1").replace(/\\n/g,"\n").replace(/\\r/g,"\r").replace(/\\t/g,"\t").replace(/\\v/g,"\v").replace(/\\f/g,"\f").replace(/\\b/g,"\b")),this.$.__line__=this._$.first_line;break;case 2:this.$=new Number(e),this.$.__line__=this._$.first_line;break;case 3:this.$=null;break;case 4:this.$=new Boolean(!0),this.$.__line__=this._$.first_line;break;case 5:this.$=new Boolean(!1),this.$.__line__=this._$.first_line;break;case 6:return this.$=i[s-1];case 13:this.$={},Object.defineProperty(this.$,"__line__",{value:this._$.first_line,enumerable:!1});break;case 14:case 19:this.$=i[s-1],Object.defineProperty(this.$,"__line__",{value:this._$.first_line,enumerable:!1});break;case 15:this.$=[i[s-2],i[s]];break;case 16:this.$={},this.$[i[s][0]]=i[s][1];break;case 17:this.$=i[s-2],i[s-2][i[s][0]]=i[s][1];break;case 18:this.$=[],Object.defineProperty(this.$,"__line__",{value:this._$.first_line,enumerable:!1});break;case 20:this.$=[i[s]];break;case 21:this.$=i[s-2],i[s-2].push(i[s])}},table:[{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,12:1,13:2,15:7,16:8,17:a,23:s},{1:[3]},{14:[1,16]},e(l,[2,7]),e(l,[2,8]),e(l,[2,9]),e(l,[2,10]),e(l,[2,11]),e(l,[2,12]),e(l,[2,3]),e(l,[2,4]),e(l,[2,5]),e([14,18,21,22,24],[2,1]),e(l,[2,2]),{3:20,4:t,18:[1,17],19:18,20:19},{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,13:23,15:7,16:8,17:a,23:s,24:[1,21],25:22},{1:[2,6]},e(l,[2,13]),{18:[1,24],22:[1,25]},e(u,[2,16]),{21:[1,26]},e(l,[2,18]),{22:[1,28],24:[1,27]},e(c,[2,20]),e(l,[2,14]),{3:20,4:t,20:29},{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,13:30,15:7,16:8,17:a,23:s},e(l,[2,19]),{3:5,4:t,5:6,6:o,7:3,8:r,9:4,10:n,11:i,13:31,15:7,16:8,17:a,23:s},e(u,[2,17]),e(u,[2,15]),e(c,[2,21])],defaultActions:{16:[2,6]},parseError:function(e,t){if(!t.recoverable)throw new Error(e);this.trace(e)},parse:function(e){var t=this,o=[0],r=[null],n=[],i=this.table,a="",s=0,l=0,u=2,c=1,p=n.slice.call(arguments,1),d=Object.create(this.lexer),h={yy:{}};for(var f in this.yy)Object.prototype.hasOwnProperty.call(this.yy,f)&&(h.yy[f]=this.yy[f]);d.setInput(e,h.yy),h.yy.lexer=d,h.yy.parser=this,void 0===d.yylloc&&(d.yylloc={});var m=d.yylloc;n.push(m);var y=d.options&&d.options.ranges;function g(){var e;return"number"!=typeof(e=d.lex()||c)&&(e=t.symbols_[e]||e),e}"function"==typeof h.yy.parseError?this.parseError=h.yy.parseError:this.parseError=Object.getPrototypeOf(this).parseError;for(var b,v,x,w,k,j,A,T,z={};;){if(v=o[o.length-1],this.defaultActions[v]?x=this.defaultActions[v]:(null==b&&(b=g()),x=i[v]&&i[v][b]),void 0===x||!x.length||!x[0]){var C="";for(k in T=[],i[v])this.terminals_[k]&&k>u&&T.push("'"+this.terminals_[k]+"'");C=d.showPosition?"Parse error on line "+(s+1)+":\n"+d.showPosition()+"\nExpecting "+T.join(", ")+", got '"+(this.terminals_[b]||b)+"'":"Parse error on line "+(s+1)+": Unexpected "+(b==c?"end of input":"'"+(this.terminals_[b]||b)+"'"),this.parseError(C,{text:d.match,token:this.terminals_[b]||b,line:d.yylineno,loc:m,expected:T})}if(x[0]instanceof Array&&x.length>1)throw new Error("Parse Error: multiple actions possible at state: "+v+", token: "+b);switch(x[0]){case 1:o.push(b),r.push(d.yytext),n.push(d.yylloc),o.push(x[1]),b=null,l=d.yyleng,a=d.yytext,s=d.yylineno,m=d.yylloc;break;case 2:if(j=this.productions_[x[1]][1],z.$=r[r.length-j],z._$={first_line:n[n.length-(j||1)].first_line,last_line:n[n.length-1].last_line,first_column:n[n.length-(j||1)].first_column,last_column:n[n.length-1].last_column},y&&(z._$.range=[n[n.length-(j||1)].range[0],n[n.length-1].range[1]]),void 0!==(w=this.performAction.apply(z,[a,l,s,h.yy,x[1],r,n].concat(p))))return w;j&&(o=o.slice(0,-1*j*2),r=r.slice(0,-1*j),n=n.slice(0,-1*j)),o.push(this.productions_[x[1]][0]),r.push(z.$),n.push(z._$),A=i[o[o.length-2]][o[o.length-1]],o.push(A);break;case 3:return!0}}return!0}},d=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e,t){return this.yy=t||this.yy||{},this._input=e,this._more=this._backtrack=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,o=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),o.length-1&&(this.yylineno-=o.length-1);var n=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:o?(o.length===r.length?this.yylloc.first_column:0)+r[r.length-o.length].length-o[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[n[0],n[0]+this.yyleng-t]),this.yyleng=this.yytext.length,this},more:function(){return this._more=!0,this},reject:function(){return this.options.backtrack_lexer?(this._backtrack=!0,this):this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},test_match:function(e,t){var o,r,n;if(this.options.backtrack_lexer&&(n={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done},this.options.ranges&&(n.yylloc.range=this.yylloc.range.slice(0))),(r=e[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=r.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:r?r[r.length-1].length-r[r.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._backtrack=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],o=this.performAction.call(this,this.yy,this,t,this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),o)return o;if(this._backtrack){for(var i in n)this[i]=n[i];return!1}return!1},next:function(){if(this.done)return this.EOF;var e,t,o,r;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var n=this._currentRules(),i=0;i<n.length;i++)if((o=this._input.match(this.rules[n[i]]))&&(!t||o[0].length>t[0].length)){if(t=o,r=i,this.options.backtrack_lexer){if(!1!==(e=this.test_match(o,n[i])))return e;if(this._backtrack){t=!1;continue}return!1}if(!this.options.flex)break}return t?!1!==(e=this.test_match(t,n[r]))&&e:""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){return this.next()||this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.length-1>0?this.conditionStack.pop():this.conditionStack[0]},_currentRules:function(){return this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]?this.conditions[this.conditionStack[this.conditionStack.length-1]].rules:this.conditions.INITIAL.rules},topState:function(e){return(e=this.conditionStack.length-1-Math.abs(e||0))>=0?this.conditionStack[e]:"INITIAL"},pushState:function(e){this.begin(e)},stateStackSize:function(){return this.conditionStack.length},options:{},performAction:function(e,t,o,r){switch(o){case 0:break;case 1:return 6;case 2:return t.yytext=t.yytext.substr(1,t.yyleng-2),4;case 3:return 17;case 4:return 18;case 5:return 23;case 6:return 24;case 7:return 22;case 8:return 21;case 9:return 10;case 10:return 11;case 11:return 8;case 12:return 14;case 13:return"INVALID"}},rules:[/^(?:\s+)/,/^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:$)/,/^(?:.)/],conditions:{INITIAL:{rules:[0,1,2,3,4,5,6,7,8,9,10,11,12,13],inclusive:!0}}};return e}();function h(){this.yy={}}return p.lexer=d,h.prototype=p,p.Parser=h,new h}();t.parser=o,t.Parser=o.Parser,t.parse=function(){return o.parse.apply(o,arguments)}})),new Set(["vector","raster","raster-dem"]);const So={StyleExpression:fo,isExpression:mo,isExpressionFilter:function e(t){if(!0===t||!1===t)return!0;if(!Array.isArray(t)||0===t.length)return!1;switch(t[0]){case"has":return t.length>=2&&"$id"!==t[1]&&"$type"!==t[1];case"in":return t.length>=3&&("string"!=typeof t[1]||Array.isArray(t[2]));case"!in":case"!has":case"none":return!1;case"==":case"!=":case">":case">=":case"<":case"<=":return 3!==t.length||Array.isArray(t[1])||Array.isArray(t[2]);case"any":case"all":for(const o of t.slice(1))if(!e(o)&&"boolean"!=typeof o)return!1;return!0;default:return!0}},createExpression:yo,createPropertyExpression:vo,normalizePropertyExpression:function(e,t){if(io(e))return new xo(e,t);if(mo(e)){const o=vo(e,t);if("error"===o.result)throw new Error(o.value.map((e=>`${e.key}: ${e.message}`)).join(", "));return o.value}{let o=e;return"string"==typeof e&&"color"===t.type&&(o=X.parse(e)),{kind:"constant",evaluate:()=>o}}},ZoomConstantExpression:go,ZoomDependentExpression:bo,StylePropertyFunction:xo},Io={convertFunction:function(e,t){let o=e.stops;if(!o)return function(e,t){const o=["get",e.property];if(void 0===e.default)return"string"===t.type?["string",o]:o;if("enum"===t.type)return["match",o,Object.keys(t.values),o,e.default];{const r=["color"===t.type?"to-color":t.type,o,ko(e.default)];return"array"===t.type&&r.splice(1,0,t.value,t.length||null),r}}(e,t);const r=o&&"object"==typeof o[0][0],n=r||void 0!==e.property,i=r||!n;return o=o.map((e=>!n&&t.tokens&&"string"==typeof e[1]?[e[0],Eo(e[1])]:[e[0],ko(e[1])])),r?function(e,t,o){const r={},n={},i=[];for(let t=0;t<o.length;t++){const a=o[t],s=a[0].zoom;void 0===r[s]&&(r[s]={zoom:s,type:e.type,property:e.property,default:e.default},n[s]=[],i.push(s)),n[s].push([a[0].value,a[1]])}if("exponential"===_o({},t)){const o=[jo(e),["linear"],["zoom"]];for(const e of i)Co(o,e,To(r[e],t,n[e]),!1);return o}{const e=["step",["zoom"]];for(const o of i)Co(e,o,To(r[o],t,n[o]),!0);return zo(e),e}}(e,t,o):i?function(e,t,o,r=["zoom"]){const n=_o(e,t);let i,a=!1;if("interval"===n)i=["step",r],a=!0;else{if("exponential"!==n)throw new Error(`Unknown zoom function type "${n}"`);{const t=void 0!==e.base?e.base:1;i=[jo(e),1===t?["linear"]:["exponential",t],r]}}for(const e of o)Co(i,e[0],e[1],a);return zo(i),i}(e,t,o):To(e,t,o)},createFunction:so,isFunction:io};function Ro(e){var t=e.expr,o=e.layer,r=Math.min(t(o,"paint","circle-radius"),8),n=Math.min(t(o,"paint","circle-stroke-width"),4),i=t(o,"paint","circle-color"),a=t(o,"paint","circle-opacity"),s=t(o,"paint","circle-stroke-color"),l=t(o,"paint","circle-stroke-opacity"),u=r-n/2;return{element:"svg",attributes:{viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg",style:{filter:"blur("+t(o,"paint","circle-blur")*u+"px)"}},children:[{element:"circle",attributes:{key:"l1",cx:10,cy:10,fill:i,opacity:a,r:u}},{element:"circle",attributes:{key:"l2",cx:10,cy:10,fill:"transparent",opacity:l,r,"stroke-width":n,stroke:s}}]}}function Oo(e){var t=e.expr,o=e.layer;return{element:"div",attributes:{style:{width:"100%",height:"100%",backgroundImage:"url("+(0,e.image)(t(o,"paint","fill-pattern"))+")",backgroundColor:t(o,"paint","fill-color"),opacity:t(o,"paint","fill-opacity"),backgroundSize:"66% 66%",backgroundPosition:"center"}}}}function qo(e){var t=e.layer,o=e.expr,r=(0,e.image)(o(t,"paint","line-pattern")),n={stroke:r?"url(#img1)":o(t,"paint","line-color"),strokeWidth:Math.max(2,Math.min(o(t,"paint","line-width"),8)),strokeOpacity:o(t,"paint","line-opacity"),strokeDasharray:o(t,"paint","line-dasharray")},i=n.strokeWidth,a="stroke: "+n.stroke+";";return n.strokeOpacity&&(a+="stroke-opacity: "+n.strokeOpacity+";"),n.strokeDasharray&&(a+="stroke-dasharray: "+n.strokeDasharray+";"),{element:"svg",attributes:{viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg"},children:[{element:"defs",attributes:{key:"defs"},children:[{element:"pattern",attributes:{key:"pattern",id:"img1",x:0,y:0,width:n.strokeWidth,height:n.strokeWidth,patternUnits:"userSpaceOnUse",patternTransform:"translate("+-i/2+" "+-i/2+") rotate(45)"},children:[{element:"image",attributes:{key:"img",xlinkHref:r,x:0,y:0,width:n.strokeWidth,height:n.strokeWidth}}]}]},{element:"path",attributes:{key:"path",style:a,d:"M0 20 L 20 0"}}]}}function No(e){return function(e){var t=e.image,o=(0,e.expr)(e.layer,"layout","icon-image");if(!o)return null;var r=t(o);return r?{element:"div",attributes:{style:{backgroundImage:"url("+r+")",backgroundSize:"contain",backgroundPosition:"center",backgroundRepeat:"no-repeat",width:"100%",height:"100%"}}}:null}(e)||(n=(o=(t=e).expr)(r=t.layer,"paint","text-color"),i=o(r,"paint","text-opacity"),{element:"svg",attributes:{viewBox:"0 0 20 20",xmlns:"http://www.w3.org/2000/svg"},children:[{element:"path",attributes:{key:"l1",d:a="M 4,4 L 16,4 L 16,7 L 11.5 7 L 11.5 16 L 8.5 16 L 8.5 7 L 4 7 Z",stroke:o(r,"paint","text-halo-color"),"stroke-width":2*o(r,"paint","text-halo-width"),fill:"transparent","stroke-linejoin":"round"}},{element:"path",attributes:{key:"l2",d:a,fill:"white"}},{element:"path",attributes:{key:"l3",d:a,fill:n,opacity:i}}]});var t,o,r,n,i,a}var Mo=[["background"],["circle"],["fill-extrusion"],["fill"],["heatmap"],["hillshade"],["line"],["raster"],["icon","symbol"],["text","symbol"]];const Lo=function(e){var t,o=e.sprite,n=e.layer,i={circle:Ro,symbol:No,line:qo,fill:Oo}[n.type],a=(t=e.zoom,function(e,o,n){var i,a,s=(i=n,(a=Mo.find((function(e){return i.startsWith(e[0])})))?a[1]||a[0]:null),l=r[o+"_"+s][n];if(!e[o])return l.default;var u=e[o][n];if(void 0===u)return l.default;if("object"==typeof u){var c;if(Array.isArray(u)){if("array"===l.type)return u;c=So.createExpression(u).value}else c=Io.createFunction(u,l);if(!c.evaluate)return null;var p=c.evaluate({zoom:t},{});return p?p.name||p:null}return u});return i?i({layer:n,expr:a,image:function(e){if(o&&o.json){var t=o.json[e];if(t)return r=o.image,i=(n=t).x,a=n.y,s=n.width,l=n.height,(u=document.createElement("canvas")).width=2*s,u.height=2*l,u.getContext("2d").drawImage(r,2*i,2*a,2*s,2*l,0,0,2*s,2*l),u.toDataURL()}var r,n,i,a,s,l,u;return null}}):null}},669:(e,t,o)=>{e.exports=o(609)},448:(e,t,o)=>{"use strict";var r=o(867),n=o(26),i=o(372),a=o(327),s=o(97),l=o(109),u=o(985),c=o(874),p=o(648),d=o(644),h=o(205);e.exports=function(e){return new Promise((function(t,o){var f,m=e.data,y=e.headers,g=e.responseType;function b(){e.cancelToken&&e.cancelToken.unsubscribe(f),e.signal&&e.signal.removeEventListener("abort",f)}r.isFormData(m)&&r.isStandardBrowserEnv()&&delete y["Content-Type"];var v=new XMLHttpRequest;if(e.auth){var x=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";y.Authorization="Basic "+btoa(x+":"+w)}var k=s(e.baseURL,e.url);function j(){if(v){var r="getAllResponseHeaders"in v?l(v.getAllResponseHeaders()):null,i={data:g&&"text"!==g&&"json"!==g?v.response:v.responseText,status:v.status,statusText:v.statusText,headers:r,config:e,request:v};n((function(e){t(e),b()}),(function(e){o(e),b()}),i),v=null}}if(v.open(e.method.toUpperCase(),a(k,e.params,e.paramsSerializer),!0),v.timeout=e.timeout,"onloadend"in v?v.onloadend=j:v.onreadystatechange=function(){v&&4===v.readyState&&(0!==v.status||v.responseURL&&0===v.responseURL.indexOf("file:"))&&setTimeout(j)},v.onabort=function(){v&&(o(new p("Request aborted",p.ECONNABORTED,e,v)),v=null)},v.onerror=function(){o(new p("Network Error",p.ERR_NETWORK,e,v,v)),v=null},v.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||c;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),o(new p(t,r.clarifyTimeoutError?p.ETIMEDOUT:p.ECONNABORTED,e,v)),v=null},r.isStandardBrowserEnv()){var A=(e.withCredentials||u(k))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;A&&(y[e.xsrfHeaderName]=A)}"setRequestHeader"in v&&r.forEach(y,(function(e,t){void 0===m&&"content-type"===t.toLowerCase()?delete y[t]:v.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(v.withCredentials=!!e.withCredentials),g&&"json"!==g&&(v.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&v.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&v.upload&&v.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(f=function(e){v&&(o(!e||e&&e.type?new d:e),v.abort(),v=null)},e.cancelToken&&e.cancelToken.subscribe(f),e.signal&&(e.signal.aborted?f():e.signal.addEventListener("abort",f))),m||(m=null);var T=h(k);T&&-1===["http","https","file"].indexOf(T)?o(new p("Unsupported protocol "+T+":",p.ERR_BAD_REQUEST,e)):v.send(m)}))}},609:(e,t,o)=>{"use strict";var r=o(867),n=o(849),i=o(321),a=o(185),s=function e(t){var o=new i(t),s=n(i.prototype.request,o);return r.extend(s,i.prototype,o),r.extend(s,o),s.create=function(o){return e(a(t,o))},s}(o(546));s.Axios=i,s.CanceledError=o(644),s.CancelToken=o(972),s.isCancel=o(502),s.VERSION=o(288).version,s.toFormData=o(675),s.AxiosError=o(648),s.Cancel=s.CanceledError,s.all=function(e){return Promise.all(e)},s.spread=o(713),s.isAxiosError=o(268),e.exports=s,e.exports.default=s},972:(e,t,o)=>{"use strict";var r=o(644);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var o=this;this.promise.then((function(e){if(o._listeners){var t,r=o._listeners.length;for(t=0;t<r;t++)o._listeners[t](e);o._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){o.subscribe(e),t=e})).then(e);return r.cancel=function(){o.unsubscribe(t)},r},e((function(e){o.reason||(o.reason=new r(e),t(o.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},n.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},644:(e,t,o)=>{"use strict";var r=o(648);function n(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}o(867).inherits(n,r,{__CANCEL__:!0}),e.exports=n},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,o)=>{"use strict";var r=o(867),n=o(327),i=o(782),a=o(572),s=o(185),l=o(97),u=o(875),c=u.validators;function p(e){this.defaults=e,this.interceptors={request:new i,response:new i}}p.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=s(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var o=t.transitional;void 0!==o&&u.assertOptions(o,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var r=[],n=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(n=n&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var i,l=[];if(this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)})),!n){var p=[a,void 0];for(Array.prototype.unshift.apply(p,r),p=p.concat(l),i=Promise.resolve(t);p.length;)i=i.then(p.shift(),p.shift());return i}for(var d=t;r.length;){var h=r.shift(),f=r.shift();try{d=h(d)}catch(e){f(e);break}}try{i=a(d)}catch(e){return Promise.reject(e)}for(;l.length;)i=i.then(l.shift(),l.shift());return i},p.prototype.getUri=function(e){e=s(this.defaults,e);var t=l(e.baseURL,e.url);return n(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){p.prototype[e]=function(t,o){return this.request(s(o||{},{method:e,url:t,data:(o||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(o,r,n){return this.request(s(n||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:o,data:r}))}}p.prototype[e]=t(),p.prototype[e+"Form"]=t(!0)})),e.exports=p},648:(e,t,o)=>{"use strict";var r=o(867);function n(e,t,o,r,n){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),o&&(this.config=o),r&&(this.request=r),n&&(this.response=n)}r.inherits(n,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=n.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(n,a),Object.defineProperty(i,"isAxiosError",{value:!0}),n.from=function(e,t,o,a,s,l){var u=Object.create(i);return r.toFlatObject(e,u,(function(e){return e!==Error.prototype})),n.call(u,e.message,t,o,a,s),u.name=e.name,l&&Object.assign(u,l),u},e.exports=n},782:(e,t,o)=>{"use strict";var r=o(867);function n(){this.handlers=[]}n.prototype.use=function(e,t,o){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!o&&o.synchronous,runWhen:o?o.runWhen:null}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},97:(e,t,o)=>{"use strict";var r=o(793),n=o(303);e.exports=function(e,t){return e&&!r(t)?n(e,t):t}},572:(e,t,o)=>{"use strict";var r=o(867),n=o(527),i=o(502),a=o(546),s=o(644);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=n.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=n.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=n.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},185:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e,t){t=t||{};var o={};function n(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(o){return r.isUndefined(t[o])?r.isUndefined(e[o])?void 0:n(void 0,e[o]):n(e[o],t[o])}function a(e){if(!r.isUndefined(t[e]))return n(void 0,t[e])}function s(o){return r.isUndefined(t[o])?r.isUndefined(e[o])?void 0:n(void 0,e[o]):n(void 0,t[o])}function l(o){return o in t?n(e[o],t[o]):o in e?n(void 0,e[o]):void 0}var u={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=u[e]||i,n=t(e);r.isUndefined(n)&&t!==l||(o[e]=n)})),o}},26:(e,t,o)=>{"use strict";var r=o(648);e.exports=function(e,t,o){var n=o.config.validateStatus;o.status&&n&&!n(o.status)?t(new r("Request failed with status code "+o.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(o.status/100)-4],o.config,o.request,o)):e(o)}},527:(e,t,o)=>{"use strict";var r=o(867),n=o(546);e.exports=function(e,t,o){var i=this||n;return r.forEach(o,(function(o){e=o.call(i,e,t)})),e}},546:(e,t,o)=>{"use strict";var r=o(867),n=o(16),i=o(648),a=o(874),s=o(675),l={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,p={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=o(448)),c),transformRequest:[function(e,t){if(n(t,"Accept"),n(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var o,i=r.isObject(e),a=t&&t["Content-Type"];if((o=r.isFileList(e))||i&&"multipart/form-data"===a){var l=this.env&&this.env.FormData;return s(o?{"files[]":e}:e,l&&new l)}return i||"application/json"===a?(u(t,"application/json"),function(e,t,o){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||p.transitional,o=t&&t.silentJSONParsing,n=t&&t.forcedJSONParsing,a=!o&&"json"===this.responseType;if(a||n&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i.from(e,i.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:o(623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){p.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){p.headers[e]=r.merge(l)})),e.exports=p},874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},288:e=>{e.exports={version:"0.27.2"}},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var o=new Array(arguments.length),r=0;r<o.length;r++)o[r]=arguments[r];return e.apply(t,o)}}},327:(e,t,o)=>{"use strict";var r=o(867);function n(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,o){if(!t)return e;var i;if(o)i=o(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(n(t)+"="+n(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,o)=>{"use strict";var r=o(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,o,n,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(o)&&s.push("expires="+new Date(o).toGMTString()),r.isString(n)&&s.push("path="+n),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},268:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},985:(e,t,o)=>{"use strict";var r=o(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");function n(e){var r=e;return t&&(o.setAttribute("href",r),r=o.href),o.setAttribute("href",r),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}return e=n(window.location.href),function(t){var o=r.isString(t)?n(t):t;return o.protocol===e.protocol&&o.host===e.host}}():function(){return!0}},16:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e,t){r.forEach(e,(function(o,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=o,delete e[r])}))}},623:e=>{e.exports=null},109:(e,t,o)=>{"use strict";var r=o(867),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,o,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),o=r.trim(e.substr(i+1)),t){if(a[t]&&n.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([o]):a[t]?a[t]+", "+o:o}})),a):a}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},675:(e,t,o)=>{"use strict";var r=o(867);e.exports=function(e,t){t=t||new FormData;var o=[];function n(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(i,a){if(r.isPlainObject(i)||r.isArray(i)){if(-1!==o.indexOf(i))throw Error("Circular reference detected in "+a);o.push(i),r.forEach(i,(function(o,i){if(!r.isUndefined(o)){var s,l=a?a+"."+i:i;if(o&&!a&&"object"==typeof o)if(r.endsWith(i,"{}"))o=JSON.stringify(o);else if(r.endsWith(i,"[]")&&(s=r.toArray(o)))return void s.forEach((function(e){!r.isUndefined(e)&&t.append(l,n(e))}));e(o,l)}})),o.pop()}else t.append(a,n(i))}(e),t}},875:(e,t,o)=>{"use strict";var r=o(288).version,n=o(648),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(o){return typeof o===e||"a"+(t<1?"n ":" ")+e}}));var a={};i.transitional=function(e,t,o){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(o?". "+o:"")}return function(o,r,s){if(!1===e)throw new n(i(r," has been removed"+(t?" in "+t:"")),n.ERR_DEPRECATED);return t&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(o,r,s)}},e.exports={assertOptions:function(e,t,o){if("object"!=typeof e)throw new n("options must be an object",n.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),i=r.length;i-- >0;){var a=r[i],s=t[a];if(s){var l=e[a],u=void 0===l||s(l,a,e);if(!0!==u)throw new n("option "+a+" must be "+u,n.ERR_BAD_OPTION_VALUE)}else if(!0!==o)throw new n("Unknown option "+a,n.ERR_BAD_OPTION)}},validators:i}},867:(e,t,o)=>{"use strict";var r,n=o(849),i=Object.prototype.toString,a=(r=Object.create(null),function(e){var t=i.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function s(e){return e=e.toLowerCase(),function(t){return a(t)===e}}function l(e){return Array.isArray(e)}function u(e){return void 0===e}var c=s("ArrayBuffer");function p(e){return null!==e&&"object"==typeof e}function d(e){if("object"!==a(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var h=s("Date"),f=s("File"),m=s("Blob"),y=s("FileList");function g(e){return"[object Function]"===i.call(e)}var b=s("URLSearchParams");function v(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),l(e))for(var o=0,r=e.length;o<r;o++)t.call(null,e[o],o,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}var x,w=(x="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return x&&e instanceof x});e.exports={isArray:l,isArrayBuffer:c,isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||g(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&c(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:d,isUndefined:u,isDate:h,isFile:f,isBlob:m,isFunction:g,isStream:function(e){return p(e)&&g(e.pipe)},isURLSearchParams:b,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:v,merge:function e(){var t={};function o(o,r){d(t[r])&&d(o)?t[r]=e(t[r],o):d(o)?t[r]=e({},o):l(o)?t[r]=o.slice():t[r]=o}for(var r=0,n=arguments.length;r<n;r++)v(arguments[r],o);return t},extend:function(e,t,o){return v(t,(function(t,r){e[r]=o&&"function"==typeof t?n(t,o):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,o,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,o&&Object.assign(e.prototype,o)},toFlatObject:function(e,t,o){var r,n,i,a={};t=t||{};do{for(n=(r=Object.getOwnPropertyNames(e)).length;n-- >0;)a[i=r[n]]||(t[i]=e[i],a[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!o||o(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:s,endsWith:function(e,t,o){e=String(e),(void 0===o||o>e.length)&&(o=e.length),o-=t.length;var r=e.indexOf(t,o);return-1!==r&&r===o},toArray:function(e){if(!e)return null;var t=e.length;if(u(t))return null;for(var o=new Array(t);t-- >0;)o[t]=e[t];return o},isTypedArray:w,isFileList:y}},170:(e,t,o)=>{"use strict";o.d(t,{Z:()=>d});var r=o(537),n=o.n(r),i=o(645),a=o.n(i),s=o(667),l=o.n(s),u=new URL(o(975),o.b),c=a()(n()),p=l()(u);c.push([e.id,".mapboxgl-legend-list\n{\n    display: none;\n}\n\n.mapboxgl-legend-list{\n    overflow-y:scroll;\n    max-height: calc(100vh * 0.7);\n}\n\n.mapboxgl-ctrl-group .mapboxgl-legend-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    /* padding: 8px 8px 6px; */\n    /* text-align: right; */\n    /* width: 100%; */\n    height: auto;\n}\n\n.mapboxgl-legend-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-legend-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-legend-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-legend-switcher\n{ \n    background: url("+p+");\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\ntable.legend-table{\n    border-collapse:collapse;\n    margin:0 auto;\n    }\ntd.legend-table-td,th.legend-table-th{\n    border:1px solid #ffffff;\n    margin: 10px;\n    padding:2px;\n    text-align: left;\n}\n\n.mapboxgl-legend-close-button{\n    position: absolute;\n    right: 0;\n    top: 0;\n    border: 0;\n    border-radius: 0 3px 0 0;\n    cursor: pointer;\n    background-color: transparent;\n    font-size: 13px;\n    padding-top: 5px;\n    padding-right: 5px;\n}\n\n.mapboxgl-legend-title-label{\n    font-size: 14px; \n    font-weight: bold; \n    margin: 5px;\n}\n\n.mapboxgl-legend-onlyRendered-checkbox{\n    margin: 5px;\n}\n\n.mapboxgl-legend-onlyRendered-label{\n    font-size: 14px; \n    margin: 5px;\n}\n\ntd.legend-table-td > svg{\n    height: 17px;\n}","",{version:3,sources:["webpack://./css/styles.css"],names:[],mappings:"AAAA;;IAEI,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,6BAA6B;AACjC;;AAEA;;IAEI,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,cAAc;IACd,0BAA0B;IAC1B,uBAAuB;IACvB,iBAAiB;IACjB,YAAY;AAChB;;AAEA;;IAEI,iBAAiB;AACrB;;AAEA;;IAEI,qCAAqC;AACzC;;AAEA;;IAEI,0BAA0B;AAC9B;;AAEA;;IAEI,mDAA45C;IAC55C,2BAA2B;IAC3B,4BAA4B;IAC5B,oBAAoB;AACxB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb;AACJ;IACI,wBAAwB;IACxB,YAAY;IACZ,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,MAAM;IACN,SAAS;IACT,wBAAwB;IACxB,eAAe;IACf,6BAA6B;IAC7B,eAAe;IACf,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,eAAe;IACf,WAAW;AACf;;AAEA;IACI,YAAY;AAChB",sourcesContent:['.mapboxgl-legend-list\n{\n    display: none;\n}\n\n.mapboxgl-legend-list{\n    overflow-y:scroll;\n    max-height: calc(100vh * 0.7);\n}\n\n.mapboxgl-ctrl-group .mapboxgl-legend-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    /* padding: 8px 8px 6px; */\n    /* text-align: right; */\n    /* width: 100%; */\n    height: auto;\n}\n\n.mapboxgl-legend-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-legend-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-legend-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-legend-switcher\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg height="512pt" viewBox="0 0 512 512.0005" width="512pt" xmlns="http://www.w3.org/2000/svg"><path d="m220 0h-200c-11.046875 0-20 8.953125-20 20v200c0 11.046875 8.953125 20 20 20h200c11.046875 0 20-8.953125 20-20v-200c0-11.046875-8.953125-20-20-20zm-20 200h-160v-160h160zm299.65625 73.523438c-7.472656-3.097657-16.078125-1.386719-21.796875 4.332031l-200 200c-5.722656 5.722656-7.433594 14.324219-4.335937 21.796875 3.097656 7.476562 10.386718 12.347656 18.476562 12.347656h200c11.046875 0 20-8.953125 20-20v-200c0-8.089844-4.871094-15.382812-12.34375-18.476562zm-27.65625 198.476562h-131.714844l131.714844-131.714844zm-80-232c66.167969 0 120-53.832031 120-120s-53.832031-120-120-120-120 53.832031-120 120 53.832031 120 120 120zm0-200c44.113281 0 80 35.886719 80 80s-35.886719 80-80 80-80-35.886719-80-80 35.886719-80 80-80zm-157.859375 266.144531-85.855469 85.855469 85.855469 85.855469c7.8125 7.8125 7.8125 20.476562 0 28.285156-7.808594 7.808594-20.472656 7.8125-28.28125 0l-85.859375-85.855469-85.859375 85.859375c-7.808594 7.808594-20.472656 7.808594-28.28125 0-7.8125-7.8125-7.8125-20.476562 0-28.285156l85.855469-85.859375-85.855469-85.855469c-7.8125-7.8125-7.8125-20.476562 0-28.285156 7.808594-7.8125 20.472656-7.8125 28.28125 0l85.859375 85.855469 85.859375-85.859375c7.808594-7.808594 20.472656-7.808594 28.28125 0 7.8125 7.8125 7.8125 20.476562 0 28.289062zm0 0"/></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\ntable.legend-table{\n    border-collapse:collapse;\n    margin:0 auto;\n    }\ntd.legend-table-td,th.legend-table-th{\n    border:1px solid #ffffff;\n    margin: 10px;\n    padding:2px;\n    text-align: left;\n}\n\n.mapboxgl-legend-close-button{\n    position: absolute;\n    right: 0;\n    top: 0;\n    border: 0;\n    border-radius: 0 3px 0 0;\n    cursor: pointer;\n    background-color: transparent;\n    font-size: 13px;\n    padding-top: 5px;\n    padding-right: 5px;\n}\n\n.mapboxgl-legend-title-label{\n    font-size: 14px; \n    font-weight: bold; \n    margin: 5px;\n}\n\n.mapboxgl-legend-onlyRendered-checkbox{\n    margin: 5px;\n}\n\n.mapboxgl-legend-onlyRendered-label{\n    font-size: 14px; \n    margin: 5px;\n}\n\ntd.legend-table-td > svg{\n    height: 17px;\n}'],sourceRoot:""}]);const d=c},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",r=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),r&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),r&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,r,n,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),o&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=o):c[2]=o),n&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=n):c[4]="".concat(n)),t.push(c))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(n," */"),a=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},735:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>g});var r=o(379),n=o.n(r),i=o(795),a=o.n(i),s=o(569),l=o.n(s),u=o(565),c=o.n(u),p=o(216),d=o.n(p),h=o(589),f=o.n(h),m=o(170),y={};y.styleTagTransform=f(),y.setAttributes=c(),y.insert=l().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=d(),n()(m.Z,y);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},379:e=>{"use strict";var t=[];function o(e){for(var o=-1,r=0;r<t.length;r++)if(t[r].identifier===e){o=r;break}return o}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,p="".concat(u," ").concat(c);i[u]=c+1;var d=o(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var f=n(h,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function n(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,n){var i=r(e=e||[],n=n||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=o(i[a]);t[s].references--}for(var l=r(e,n),u=0;u<i.length;u++){var c=o(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{"use strict";var t={};e.exports=function(e,o){var r=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(o)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,o)=>{"use strict";e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var r="";o.supports&&(r+="@supports (".concat(o.supports,") {")),o.media&&(r+="@media ".concat(o.media," {"));var n=void 0!==o.layer;n&&(r+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),r+=o.css,n&&(r+="}"),o.media&&(r+="}"),o.supports&&(r+="}");var i=o.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},588:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(o(140)),i=o(620);o(735),(()=>{const e=new n.default.Map({container:"map",style:"https://narwassco.github.io/mapbox-stylefiles/unvt/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});e.addControl(new n.default.NavigationControl,"top-right"),e.on("load",(function(){const t={pipeline:"Pipeline",pipeline_annotation:"Pipeline Label",meter:"Water Meter","flow meter":"Flow Meter",valve:"Valve",firehydrant:"Fire Hydrant",washout:"Washout",tank:"Tank",tank_annotation:"Tank Label",wtp:"WTP",wtp_annotation:"WTP Label",intake:"Intake",intake_annotation:"Intake Label",parcels:"Parcels",parcels_annotation:"Parcels Label",village:"Village",village_annotation:"Village Label",dma:"DMA","dma-annotation":"DMA Label","contour-line":"Countour","contour-label":"Contour Label",hillshade:"Hillshade"};let o={showDefault:!1,showCheckbox:!1,onlyRendered:!0,reverseOrder:!0};e.addControl(new i.MapboxLegendControl(t,o),"top-right"),o={showDefault:!0,showCheckbox:!0,onlyRendered:!0,reverseOrder:!1},e.addControl(new i.MapboxLegendControl(t,o),"bottom-right"),o={showDefault:!0,showCheckbox:!0,onlyRendered:!1,reverseOrder:!0},e.addControl(new i.MapboxLegendControl({},o),"bottom-left"),o={showDefault:!0,showCheckbox:!0,onlyRendered:!0,reverseOrder:!1,title:"Custom Legend"},e.addControl(new i.MapboxLegendControl(t,o),"top-right")}))})()},620:function(e,t,o){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.MapboxLegendControl=void 0;var n=o(770);Object.defineProperty(t,"MapboxLegendControl",{enumerable:!0,get:function(){return r(n).default}})},770:function(e,t,o){"use strict";var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=o(140),a=n(o(335)),s=n(o(669));t.default=class{constructor(e,t){this.uncheckedLayers={},this.options={showDefault:!0,showCheckbox:!0,reverseOrder:!0,onlyRendered:!0,accesstoken:void 0,title:void 0},this.sprite={image:HTMLImageElement,json:JSON},this.targets=e,t&&(this.options=Object.assign(this.options,t)),this.onlyRendered=this.options.onlyRendered,this.onDocumentClick=this.onDocumentClick.bind(this)}getDefaultPosition(){return"top-right"}changeLayerVisibility(e,t){var o,r;t?(this.uncheckedLayers[e]&&delete this.uncheckedLayers[e],null===(o=this.map)||void 0===o||o.setLayoutProperty(e,"visibility","visible")):(this.uncheckedLayers[e]=e,null===(r=this.map)||void 0===r||r.setLayoutProperty(e,"visibility","none"));const n=document.getElementsByName(e);for(let e in n)"number"!=typeof n[e]&&(n[e].checked=t)}createLayerCheckbox(e){var t;if(!this.options.showCheckbox)return;const o=this,r=document.createElement("TD");r.className="legend-table-td";const n=document.createElement("input");n.setAttribute("type","checkbox"),n.setAttribute("name",e.id),n.setAttribute("value",e.id);const i=null===(t=this.map)||void 0===t?void 0:t.getLayoutProperty(e.id,"visibility");if(i){let t=!0;switch(i){case"none":t=!1;break;case"visible":t=!0,n.checked=!0}o.changeLayerVisibility(e.id,t)}else n.checked=!0;return n.addEventListener("click",(function(e){var t,r;const n=null===(t=e.target)||void 0===t?void 0:t.value,i=null===(r=e.target)||void 0===r?void 0:r.checked;o.changeLayerVisibility(n,i)})),r.appendChild(n),r}getLayerLegend(e){const t=this.map,o=null==t?void 0:t.getZoom(),r=this.sprite;let n=(0,a.default)({sprite:r,zoom:o,layer:e});var i=document.createElement("TR");const s=this.createLayerCheckbox(e);s&&i.appendChild(s);var l=document.createElement("TD");if(l.className="legend-table-td",n)switch(n.element){case"div":if(n.attributes.style.backgroundImage&&!["url(undefined)","url(null)"].includes(n.attributes.style.backgroundImage)){var u=document.createElement("img");u.src=n.attributes.style.backgroundImage.replace("url(","").replace(")",""),u.alt=e.id,u.style.cssText="height: 17px;",l.appendChild(u)}l.style.backgroundColor=n.attributes.style.backgroundColor,l.style.backgroundPosition=n.attributes.style.backgroundPosition,l.style.backgroundSize=n.attributes.style.backgroundSize,l.style.backgroundRepeat=n.attributes.style.backgroundRepeat,l.style.opacity=n.attributes.style.opacity;break;case"svg":let t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.style.cssText="height: 17px;",t.setAttributeNS(null,"version","1.1"),Object.keys(n.attributes).forEach((e=>{t.setAttribute(e,n.attributes[e]);let o=document.createElementNS("http://www.w3.org/2000/svg","g");n.children.forEach((e=>{var t=document.createElementNS("http://www.w3.org/2000/svg",e.element);Object.keys(e.attributes).forEach((o=>{t.setAttributeNS(null,o,e.attributes[o])})),o.appendChild(t)})),t.appendChild(o)})),document.createElement("label").textContent=this.targets&&this.targets[e.id]?this.targets[e.id]:e.id,l.appendChild(t);break;default:return void console.log(n.element)}else{const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),o=document.createElementNS("http://www.w3.org/2000/svg","path"),r=document.createElementNS("http://www.w3.org/2000/svg","path");t.setAttribute("fill","none"),t.setAttribute("viewBox","0 0 24 24"),t.setAttribute("stroke","black"),t.classList.add("post-icon"),o.setAttribute("d","M21,0H3A3,3,0,0,0,0,3V21a3,3,0,0,0,3,3H21a3,3,0,0,0,3-3V3A3,3,0,0,0,21,0ZM3,2H21a1,1,0,0,1,1,1V15.86L14.18,9.35a5.06,5.06,0,0,0-6.39-.06L2,13.92V3A1,1,0,0,1,3,2ZM21,22H3a1,1,0,0,1-1-1V16.48l7-5.63a3.06,3.06,0,0,1,3.86,0L22,18.47V21A1,1,0,0,1,21,22Z"),o.setAttribute("stroke-linecap","round"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-width","2"),r.setAttribute("d","M18,9a3,3,0,1,0-3-3A3,3,0,0,0,18,9Zm0-4a1,1,0,1,1-1,1A1,1,0,0,1,18,5Z"),r.setAttribute("stroke-linecap","round"),r.setAttribute("stroke-linejoin","round"),r.setAttribute("stroke-width","2"),t.appendChild(o),t.appendChild(r),document.createElement("label").textContent=this.targets&&this.targets[e.id]?this.targets[e.id]:e.id,l.appendChild(t)}var c=document.createElement("TD");c.className="legend-table-td";let p=document.createElement("label");return p.textContent=this.targets&&this.targets[e.id]?this.targets[e.id]:e.id,c.appendChild(p),i.appendChild(l),i.appendChild(c),i}updateLegendControl(){const e=this.map,t={};if(e){const o=e.queryRenderedFeatures();for(let e of o)t[e.layer.id]=e.layer}let o=null==e?void 0:e.getStyle().layers;if(o){for(this.legendTable||(this.legendTable=document.createElement("TABLE"),this.legendTable.className="legend-table",this.legendContainer.appendChild(this.legendTable));this.legendTable.firstChild;)this.legendTable.removeChild(this.legendTable.firstChild);this.options.reverseOrder&&(o=o.reverse()),o.forEach((e=>{if(t[e.id]&&this.uncheckedLayers[e.id]?delete this.uncheckedLayers[e.id]:this.uncheckedLayers[e.id]&&(t[e.id]=e),void 0===this.targets||this.targets&&0===Object.keys(this.targets).length||this.targets&&Object.keys(this.targets).map((e=>e)).includes(e.id)){if(this.onlyRendered&&!t[e.id])return;const o=this.getLayerLegend(e);if(!o)return;this.legendTable.appendChild(o)}}))}}onAdd(e){this.map=e,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.legendContainer=document.createElement("div"),this.legendContainer.classList.add("mapboxgl-legend-list"),this.legendButton=document.createElement("button"),this.legendButton.classList.add("mapboxgl-ctrl-icon"),this.legendButton.classList.add("mapboxgl-legend-switcher"),this.legendButton.addEventListener("click",(()=>{this.legendButton.style.display="none",this.legendContainer.style.display="block"})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.legendButton),this.controlContainer.appendChild(this.legendContainer),this.closeButton=document.createElement("button"),this.closeButton.textContent="x",this.closeButton.classList.add("mapboxgl-legend-close-button"),this.closeButton.addEventListener("click",(()=>{this.legendButton.style.display="block",this.legendContainer.style.display="none"})),this.legendContainer.appendChild(this.closeButton);const t=document.createElement("label");t.classList.add("mapboxgl-legend-title-label"),t.textContent=this.options.title||"Legend",this.legendContainer.appendChild(t),this.legendContainer.appendChild(document.createElement("br"));const o=document.createElement("input");o.setAttribute("type","checkbox");const n="mapboxgl-legend-onlyrendered-checkbox-"+100*Math.random();o.setAttribute("id",n),o.classList.add("mapboxgl-legend-onlyRendered-checkbox"),o.checked=this.onlyRendered;const a=this;o.addEventListener("click",(function(e){var t;const o=null===(t=e.target)||void 0===t?void 0:t.checked;a.onlyRendered=!!o,a.updateLegendControl()})),this.legendContainer.appendChild(o);const s=document.createElement("label");s.classList.add("mapboxgl-legend-onlyRendered-label"),s.textContent="Only rendered",s.htmlFor=n,this.legendContainer.appendChild(s),this.legendContainer.appendChild(document.createElement("br")),this.map.on("moveend",(e=>{this.updateLegendControl()}));const l=()=>r(this,void 0,void 0,(function*(){if(e.loaded()){let t=e.getStyle().sprite,o="";t&&t.includes("mapbox://")&&(t=t.replace(/mapbox:\/\//g,i.baseApiUrl).replace(/sprites/g,"/styles/v1"),t=`${t}/sprite`,o=`?access_token=${this.options.accesstoken||i.accessToken}`);const r=Promise.all([this.loadImage(`${t}@2x.png${o}`),this.loadJson(`${t}.json${o}`)]);yield r.then((([e,t])=>{this.setSprite(e,t)})),this.updateLegendControl(),e.off("idle",l)}}));return this.map.on("idle",l),this.options&&1==this.options.showDefault&&(this.legendContainer.style.display="block",this.legendButton.style.display="none"),this.controlContainer}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.legendButton&&(this.legendButton.removeEventListener("click",this.onDocumentClick),this.controlContainer.parentNode.removeChild(this.controlContainer),document.removeEventListener("click",this.onDocumentClick),this.map=void 0)}redraw(){this.updateLegendControl()}onDocumentClick(e){this.controlContainer&&!this.controlContainer.contains(e.target)&&this.legendContainer&&this.legendButton&&this.options&&!0!==this.options.showDefault&&(this.legendContainer.style.display="none",this.legendButton.style.display="block")}setSprite(e,t){this.sprite={image:e,json:t}}loadImage(e){let t=!1;const o=new Promise(((o,r)=>{const n=new Image;n.crossOrigin="Anonymous",n.onload=()=>{t||o(n)},n.onerror=e=>{t||r(e)},n.src=e}));return o.cancel=()=>{t=!0},o}loadJson(e){return s.default.get(e,{responseType:"json"}).then((e=>e.data))}}},975:e=>{"use strict";e.exports='data:image/svg+xml;charset=UTF-8,<svg height="512pt" viewBox="0 0 512 512.0005" width="512pt" xmlns="http://www.w3.org/2000/svg"><path d="m220 0h-200c-11.046875 0-20 8.953125-20 20v200c0 11.046875 8.953125 20 20 20h200c11.046875 0 20-8.953125 20-20v-200c0-11.046875-8.953125-20-20-20zm-20 200h-160v-160h160zm299.65625 73.523438c-7.472656-3.097657-16.078125-1.386719-21.796875 4.332031l-200 200c-5.722656 5.722656-7.433594 14.324219-4.335937 21.796875 3.097656 7.476562 10.386718 12.347656 18.476562 12.347656h200c11.046875 0 20-8.953125 20-20v-200c0-8.089844-4.871094-15.382812-12.34375-18.476562zm-27.65625 198.476562h-131.714844l131.714844-131.714844zm-80-232c66.167969 0 120-53.832031 120-120s-53.832031-120-120-120-120 53.832031-120 120 53.832031 120 120 120zm0-200c44.113281 0 80 35.886719 80 80s-35.886719 80-80 80-80-35.886719-80-80 35.886719-80 80-80zm-157.859375 266.144531-85.855469 85.855469 85.855469 85.855469c7.8125 7.8125 7.8125 20.476562 0 28.285156-7.808594 7.808594-20.472656 7.8125-28.28125 0l-85.859375-85.855469-85.859375 85.859375c-7.808594 7.808594-20.472656 7.808594-28.28125 0-7.8125-7.8125-7.8125-20.476562 0-28.285156l85.855469-85.859375-85.855469-85.855469c-7.8125-7.8125-7.8125-20.476562 0-28.285156 7.808594-7.8125 20.472656-7.8125 28.28125 0l85.859375 85.855469 85.859375-85.859375c7.808594-7.808594 20.472656-7.808594 28.28125 0 7.8125 7.8125 7.8125 20.476562 0 28.289062zm0 0"/></svg>'},140:e=>{"use strict";e.exports=mapboxgl}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,o),i.exports}o.m=e,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.b=document.baseURI||self.location.href,o.nc=void 0,o(588)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEVBQUUsR0FDMUQsV0FBYyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUksUUFBVyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQ2xELFdBQWMsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFJLGFBQWdCLENBQUMsSUFBSSxJQUFJLElBQUksR0FDNUQsY0FBaUIsQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFJLGNBQWlCLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FDM0QsY0FBaUIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFJLGNBQWlCLENBQUMsRUFBRSxJQUFJLElBQUksR0FDM0QsV0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUksU0FBWSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQ3JELFlBQWUsQ0FBQyxFQUFFLElBQUksSUFBSSxHQUFJLFFBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUN0RCxRQUFXLENBQUMsSUFBSSxJQUFJLElBQUksR0FBSSxXQUFjLENBQUMsR0FBRyxJQUFJLElBQUksR0FDdEQsVUFBYSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUksWUFBZSxDQUFDLElBQUksSUFBSSxJQUFJLEdBQ3hELFlBQWUsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFJLFFBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUNwRCxVQUFhLENBQUMsSUFBSSxJQUFJLElBQUksR0FBSSxXQUFjLENBQUMsSUFBSSxJQUFJLElBQUksR0FDekQsS0FBUSxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUksVUFBYSxDQUFDLElBQUksSUFBSSxHQUFHLEdBQ2hELEtBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFJLE1BQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUMzQyxZQUFlLENBQUMsSUFBSSxJQUFJLEdBQUcsR0FBSSxLQUFRLENBQUMsSUFBSSxJQUFJLElBQUksR0FDcEQsU0FBWSxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUksUUFBVyxDQUFDLElBQUksSUFBSSxJQUFJLEdBQ3JELFVBQWEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxH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QUVDLEVBQUksRUFBRSxFQUFFLEVBQUVDLEVBQUksRUFBRSxFQUFFLEdBQUdDLEVBQUksR0FBR0MsRUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBR0MsRUFBSSxHQUFHQyxHQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLUCxFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJUixFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJUixFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJUixFQUFFUSxFQUFJLENBQUMsRUFBRSxLQUFLUixFQUFFUSxFQUFJLENBQUMsRUFBRSxLQUFLUixFQUFFUSxFQUFJLENBQUMsRUFBRSxLQUFLUixFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJUixFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJUixFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJUixFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxJQUFJQSxFQUFFUSxFQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUVQLEVBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUVBLEVBQUksRUFBRSxFQUFFLEVBQUVDLEVBQUksRUFBRSxFQUFFLEVBQUVDLEVBQUksRUFBRSxFQUFFLEdBQUdDLEVBQUksR0FBR0MsRUFBSSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHQyxFQUFJLEdBQUdDLEVBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJUCxFQUFFUSxFQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLUixFQUFFUyxFQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBS1QsRUFBRVEsRUFBSSxD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Z2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvQG1hcGJveC9tYXBib3gtZ2wtc3R5bGUtc3BlYy9kaXN0L2luZGV4LmVzLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL0B3YXRlcmdpcy9sZWdlbmQtc3ltYm9sL2Rpc3QvaW5kZXgubW9kZXJuLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9jc3Mvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9jc3Mvc3R5bGVzLmNzcz9lODFhIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvLi9kb2NzL2luZGV4LnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbGliL2luZGV4LnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kLy4vbGliL2xlZ2VuZC1jb250cm9sLnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kL2V4dGVybmFsIHZhciBcIm1hcGJveGdsXCIiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtbGVnZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWxlZ2VuZC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1sZWdlbmQvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkdmVyc2lvbiA9IDg7XG52YXIgJHJvb3QgPSB7XG5cdHZlcnNpb246IHtcblx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IFtcblx0XHRcdDhcblx0XHRdLFxuXHRcdGRvYzogXCJTdHlsZSBzcGVjaWZpY2F0aW9uIHZlcnNpb24gbnVtYmVyLiBNdXN0IGJlIDguXCIsXG5cdFx0ZXhhbXBsZTogOFxuXHR9LFxuXHRuYW1lOiB7XG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiQSBodW1hbi1yZWFkYWJsZSBuYW1lIGZvciB0aGUgc3R5bGUuXCIsXG5cdFx0ZXhhbXBsZTogXCJCcmlnaHRcIlxuXHR9LFxuXHRtZXRhZGF0YToge1xuXHRcdHR5cGU6IFwiKlwiLFxuXHRcdGRvYzogXCJBcmJpdHJhcnkgcHJvcGVydGllcyB1c2VmdWwgdG8gdHJhY2sgd2l0aCB0aGUgc3R5bGVzaGVldCwgYnV0IGRvIG5vdCBpbmZsdWVuY2UgcmVuZGVyaW5nLiBQcm9wZXJ0aWVzIHNob3VsZCBiZSBwcmVmaXhlZCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlICdtYXBib3g6Jy5cIlxuXHR9LFxuXHRjZW50ZXI6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0ZG9jOiBcIkRlZmF1bHQgbWFwIGNlbnRlciBpbiBsb25naXR1ZGUgYW5kIGxhdGl0dWRlLiAgVGhlIHN0eWxlIGNlbnRlciB3aWxsIGJlIHVzZWQgb25seSBpZiB0aGUgbWFwIGhhcyBub3QgYmVlbiBwb3NpdGlvbmVkIGJ5IG90aGVyIG1lYW5zIChlLmcuIG1hcCBvcHRpb25zIG9yIHVzZXIgaW50ZXJhY3Rpb24pLlwiLFxuXHRcdGV4YW1wbGU6IFtcblx0XHRcdC03My45NzQ5LFxuXHRcdFx0NDAuNzczNlxuXHRcdF1cblx0fSxcblx0em9vbToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0ZG9jOiBcIkRlZmF1bHQgem9vbSBsZXZlbC4gIFRoZSBzdHlsZSB6b29tIHdpbGwgYmUgdXNlZCBvbmx5IGlmIHRoZSBtYXAgaGFzIG5vdCBiZWVuIHBvc2l0aW9uZWQgYnkgb3RoZXIgbWVhbnMgKGUuZy4gbWFwIG9wdGlvbnMgb3IgdXNlciBpbnRlcmFjdGlvbikuXCIsXG5cdFx0ZXhhbXBsZTogMTIuNVxuXHR9LFxuXHRiZWFyaW5nOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRwZXJpb2Q6IDM2MCxcblx0XHR1bml0czogXCJkZWdyZWVzXCIsXG5cdFx0ZG9jOiBcIkRlZmF1bHQgYmVhcmluZywgaW4gZGVncmVlcy4gVGhlIGJlYXJpbmcgaXMgdGhlIGNvbXBhc3MgZGlyZWN0aW9uIHRoYXQgaXMgXFxcInVwXFxcIjsgZm9yIGV4YW1wbGUsIGEgYmVhcmluZyBvZiA5MMKwIG9yaWVudHMgdGhlIG1hcCBzbyB0aGF0IGVhc3QgaXMgdXAuIFRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIG9ubHkgaWYgdGhlIG1hcCBoYXMgbm90IGJlZW4gcG9zaXRpb25lZCBieSBvdGhlciBtZWFucyAoZS5nLiBtYXAgb3B0aW9ucyBvciB1c2VyIGludGVyYWN0aW9uKS5cIixcblx0XHRleGFtcGxlOiAyOVxuXHR9LFxuXHRwaXRjaDoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0dW5pdHM6IFwiZGVncmVlc1wiLFxuXHRcdGRvYzogXCJEZWZhdWx0IHBpdGNoLCBpbiBkZWdyZWVzLiBaZXJvIGlzIHBlcnBlbmRpY3VsYXIgdG8gdGhlIHN1cmZhY2UsIGZvciBhIGxvb2sgc3RyYWlnaHQgZG93biBhdCB0aGUgbWFwLCB3aGlsZSBhIGdyZWF0ZXIgdmFsdWUgbGlrZSA2MCBsb29rcyBhaGVhZCB0b3dhcmRzIHRoZSBob3Jpem9uLiBUaGUgc3R5bGUgcGl0Y2ggd2lsbCBiZSB1c2VkIG9ubHkgaWYgdGhlIG1hcCBoYXMgbm90IGJlZW4gcG9zaXRpb25lZCBieSBvdGhlciBtZWFucyAoZS5nLiBtYXAgb3B0aW9ucyBvciB1c2VyIGludGVyYWN0aW9uKS5cIixcblx0XHRleGFtcGxlOiA1MFxuXHR9LFxuXHRsaWdodDoge1xuXHRcdHR5cGU6IFwibGlnaHRcIixcblx0XHRkb2M6IFwiVGhlIGdsb2JhbCBsaWdodCBzb3VyY2UuXCIsXG5cdFx0ZXhhbXBsZToge1xuXHRcdFx0YW5jaG9yOiBcInZpZXdwb3J0XCIsXG5cdFx0XHRjb2xvcjogXCJ3aGl0ZVwiLFxuXHRcdFx0aW50ZW5zaXR5OiAwLjRcblx0XHR9XG5cdH0sXG5cdHRlcnJhaW46IHtcblx0XHR0eXBlOiBcInRlcnJhaW5cIixcblx0XHRkb2M6IFwiQSBnbG9iYWwgbW9kaWZpZXIgdGhhdCBlbGV2YXRlcyBsYXllcnMgYW5kIG1hcmtlcnMgYmFzZWQgb24gYSBERU0gZGF0YSBzb3VyY2UuXCJcblx0fSxcblx0Zm9nOiB7XG5cdFx0dHlwZTogXCJmb2dcIixcblx0XHRkb2M6IFwiQSBnbG9iYWwgZWZmZWN0IHRoYXQgZmFkZXMgbGF5ZXJzIGFuZCBtYXJrZXJzIGJhc2VkIG9uIHRoZWlyIGRpc3RhbmNlIHRvIHRoZSBjYW1lcmEuIFRoZSBmb2cgY2FuIGJlIHVzZWQgdG8gYXBwcm94aW1hdGUgdGhlIGVmZmVjdCBvZiBhdG1vc3BoZXJlIG9uIGRpc3RhbnQgb2JqZWN0cyBhbmQgZW5oYW5jZSB0aGUgZGVwdGggcGVyY2VwdGlvbiBvZiB0aGUgbWFwIHdoZW4gdXNlZCB3aXRoIHRlcnJhaW4gb3IgM0QgZmVhdHVyZXMuIE5vdGU6IGZvZyBpcyByZW5hbWVkIHRvIGF0bW9zcGhlcmUgaW4gdGhlIEFuZHJvaWQgYW5kIGlPUyBTREtzIGFuZCBwbGFubmVkIHRvIGJlIGNoYW5nZWQgaW4gR0wtSlMgdi4zLjAuMC5cIlxuXHR9LFxuXHRzb3VyY2VzOiB7XG5cdFx0cmVxdWlyZWQ6IHRydWUsXG5cdFx0dHlwZTogXCJzb3VyY2VzXCIsXG5cdFx0ZG9jOiBcIkRhdGEgc291cmNlIHNwZWNpZmljYXRpb25zLlwiLFxuXHRcdGV4YW1wbGU6IHtcblx0XHRcdFwibWFwYm94LXN0cmVldHNcIjoge1xuXHRcdFx0XHR0eXBlOiBcInZlY3RvclwiLFxuXHRcdFx0XHR1cmw6IFwibWFwYm94Oi8vbWFwYm94Lm1hcGJveC1zdHJlZXRzLXY2XCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdHNwcml0ZToge1xuXHRcdHR5cGU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIkEgYmFzZSBVUkwgZm9yIHJldHJpZXZpbmcgdGhlIHNwcml0ZSBpbWFnZSBhbmQgbWV0YWRhdGEuIFRoZSBleHRlbnNpb25zIGAucG5nYCwgYC5qc29uYCBhbmQgc2NhbGUgZmFjdG9yIGBAMngucG5nYCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgYXBwZW5kZWQuIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgaWYgYW55IGxheWVyIHVzZXMgdGhlIGBiYWNrZ3JvdW5kLXBhdHRlcm5gLCBgZmlsbC1wYXR0ZXJuYCwgYGxpbmUtcGF0dGVybmAsIGBmaWxsLWV4dHJ1c2lvbi1wYXR0ZXJuYCwgb3IgYGljb24taW1hZ2VgIHByb3BlcnRpZXMuIFRoZSBVUkwgbXVzdCBiZSBhYnNvbHV0ZSwgY29udGFpbmluZyB0aGUgW3NjaGVtZSwgYXV0aG9yaXR5IGFuZCBwYXRoIGNvbXBvbmVudHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VSTCNTeW50YXgpLlwiLFxuXHRcdGV4YW1wbGU6IFwibWFwYm94Oi8vc3ByaXRlcy9tYXBib3gvYnJpZ2h0LXY4XCJcblx0fSxcblx0Z2x5cGhzOiB7XG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiQSBVUkwgdGVtcGxhdGUgZm9yIGxvYWRpbmcgc2lnbmVkLWRpc3RhbmNlLWZpZWxkIGdseXBoIHNldHMgaW4gUEJGIGZvcm1hdC4gVGhlIFVSTCBtdXN0IGluY2x1ZGUgYHtmb250c3RhY2t9YCBhbmQgYHtyYW5nZX1gIHRva2Vucy4gVGhpcyBwcm9wZXJ0eSBpcyByZXF1aXJlZCBpZiBhbnkgbGF5ZXIgdXNlcyB0aGUgYHRleHQtZmllbGRgIGxheW91dCBwcm9wZXJ0eS4gVGhlIFVSTCBtdXN0IGJlIGFic29sdXRlLCBjb250YWluaW5nIHRoZSBbc2NoZW1lLCBhdXRob3JpdHkgYW5kIHBhdGggY29tcG9uZW50c10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVJMI1N5bnRheCkuXCIsXG5cdFx0ZXhhbXBsZTogXCJtYXBib3g6Ly9mb250cy9tYXBib3gve2ZvbnRzdGFja30ve3JhbmdlfS5wYmZcIlxuXHR9LFxuXHR0cmFuc2l0aW9uOiB7XG5cdFx0dHlwZTogXCJ0cmFuc2l0aW9uXCIsXG5cdFx0ZG9jOiBcIkEgZ2xvYmFsIHRyYW5zaXRpb24gZGVmaW5pdGlvbiB0byB1c2UgYXMgYSBkZWZhdWx0IGFjcm9zcyBwcm9wZXJ0aWVzLCB0byBiZSB1c2VkIGZvciB0aW1pbmcgdHJhbnNpdGlvbnMgYmV0d2VlbiBvbmUgdmFsdWUgYW5kIHRoZSBuZXh0IHdoZW4gbm8gcHJvcGVydHktc3BlY2lmaWMgdHJhbnNpdGlvbiBpcyBzZXQuIENvbGxpc2lvbi1iYXNlZCBzeW1ib2wgZmFkaW5nIGlzIGNvbnRyb2xsZWQgaW5kZXBlbmRlbnRseSBvZiB0aGUgc3R5bGUncyBgdHJhbnNpdGlvbmAgcHJvcGVydHkuXCIsXG5cdFx0ZXhhbXBsZToge1xuXHRcdFx0ZHVyYXRpb246IDMwMCxcblx0XHRcdGRlbGF5OiAwXG5cdFx0fVxuXHR9LFxuXHRwcm9qZWN0aW9uOiB7XG5cdFx0dHlwZTogXCJwcm9qZWN0aW9uXCIsXG5cdFx0ZG9jOiBcIlRoZSBwcm9qZWN0aW9uIHRoZSBtYXAgc2hvdWxkIGJlIHJlbmRlcmVkIGluLiBTdXBwb3J0ZWQgcHJvamVjdGlvbnMgYXJlIE1lcmNhdG9yLCBHbG9iZSwgQWxiZXJzLCBFcXVhbCBFYXJ0aCwgRXF1aXJlY3Rhbmd1bGFyIChXR1M4NCksIExhbWJlcnQgY29uZm9ybWFsIGNvbmljLCBOYXR1cmFsIEVhcnRoLCBhbmQgV2lua2VsIFRyaXBlbC4gVGVycmFpbiwgc2t5IGFuZCBmb2cgYXJlIHN1cHBvcnRlZCBieSBvbmx5IE1lcmNhdG9yIGFuZCBnbG9iZS4gQ3VzdG9tTGF5ZXJJbnRlcmZhY2UgaXMgbm90IHN1cHBvcnRlZCBvdXRzaWRlIG9mIE1lcmNhdG9yLlwiLFxuXHRcdGV4YW1wbGU6IHtcblx0XHRcdG5hbWU6IFwiYWxiZXJzXCIsXG5cdFx0XHRjZW50ZXI6IFtcblx0XHRcdFx0LTE1NCxcblx0XHRcdFx0NTBcblx0XHRcdF0sXG5cdFx0XHRwYXJhbGxlbHM6IFtcblx0XHRcdFx0NTUsXG5cdFx0XHRcdDY1XG5cdFx0XHRdXG5cdFx0fVxuXHR9LFxuXHRsYXllcnM6IHtcblx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibGF5ZXJcIixcblx0XHRkb2M6IFwiTGF5ZXJzIHdpbGwgYmUgZHJhd24gaW4gdGhlIG9yZGVyIG9mIHRoaXMgYXJyYXkuXCIsXG5cdFx0ZXhhbXBsZTogW1xuXHRcdFx0e1xuXHRcdFx0XHRpZDogXCJ3YXRlclwiLFxuXHRcdFx0XHRzb3VyY2U6IFwibWFwYm94LXN0cmVldHNcIixcblx0XHRcdFx0XCJzb3VyY2UtbGF5ZXJcIjogXCJ3YXRlclwiLFxuXHRcdFx0XHR0eXBlOiBcImZpbGxcIixcblx0XHRcdFx0cGFpbnQ6IHtcblx0XHRcdFx0XHRcImZpbGwtY29sb3JcIjogXCIjMDBmZmZmXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdF1cblx0fVxufTtcbnZhciBzb3VyY2VzID0ge1xuXHRcIipcIjoge1xuXHRcdHR5cGU6IFwic291cmNlXCIsXG5cdFx0ZG9jOiBcIlNwZWNpZmljYXRpb24gb2YgYSBkYXRhIHNvdXJjZS4gRm9yIHZlY3RvciBhbmQgcmFzdGVyIHNvdXJjZXMsIGVpdGhlciBUaWxlSlNPTiBvciBhIFVSTCB0byBhIFRpbGVKU09OIG11c3QgYmUgcHJvdmlkZWQuIEZvciBpbWFnZSBhbmQgdmlkZW8gc291cmNlcywgYSBVUkwgbXVzdCBiZSBwcm92aWRlZC4gRm9yIEdlb0pTT04gc291cmNlcywgYSBVUkwgb3IgaW5saW5lIEdlb0pTT04gbXVzdCBiZSBwcm92aWRlZC5cIlxuXHR9XG59O1xudmFyIHNvdXJjZSA9IFtcblx0XCJzb3VyY2VfdmVjdG9yXCIsXG5cdFwic291cmNlX3Jhc3RlclwiLFxuXHRcInNvdXJjZV9yYXN0ZXJfZGVtXCIsXG5cdFwic291cmNlX2dlb2pzb25cIixcblx0XCJzb3VyY2VfdmlkZW9cIixcblx0XCJzb3VyY2VfaW1hZ2VcIlxuXTtcbnZhciBzb3VyY2VfdmVjdG9yID0ge1xuXHR0eXBlOiB7XG5cdFx0cmVxdWlyZWQ6IHRydWUsXG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHR2ZWN0b3I6IHtcblx0XHRcdFx0ZG9jOiBcIkEgdmVjdG9yIHRpbGUgc291cmNlLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkb2M6IFwiVGhlIHR5cGUgb2YgdGhlIHNvdXJjZS5cIlxuXHR9LFxuXHR1cmw6IHtcblx0XHR0eXBlOiBcInN0cmluZ1wiLFxuXHRcdGRvYzogXCJBIFVSTCB0byBhIFRpbGVKU09OIHJlc291cmNlLiBTdXBwb3J0ZWQgcHJvdG9jb2xzIGFyZSBgaHR0cDpgLCBgaHR0cHM6YCwgYW5kIGBtYXBib3g6Ly88VGlsZXNldCBJRD5gLlwiXG5cdH0sXG5cdHRpbGVzOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcInN0cmluZ1wiLFxuXHRcdGRvYzogXCJBbiBhcnJheSBvZiBvbmUgb3IgbW9yZSB0aWxlIHNvdXJjZSBVUkxzLCBhcyBpbiB0aGUgVGlsZUpTT04gc3BlYy5cIlxuXHR9LFxuXHRib3VuZHM6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0bGVuZ3RoOiA0LFxuXHRcdFwiZGVmYXVsdFwiOiBbXG5cdFx0XHQtMTgwLFxuXHRcdFx0LTg1LjA1MTEyOSxcblx0XHRcdDE4MCxcblx0XHRcdDg1LjA1MTEyOVxuXHRcdF0sXG5cdFx0ZG9jOiBcIkFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgb2YgdGhlIHNvdXRod2VzdCBhbmQgbm9ydGhlYXN0IGNvcm5lcnMgb2YgdGhlIHNvdXJjZSdzIGJvdW5kaW5nIGJveCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyOiBgW3N3LmxuZywgc3cubGF0LCBuZS5sbmcsIG5lLmxhdF1gLiBXaGVuIHRoaXMgcHJvcGVydHkgaXMgaW5jbHVkZWQgaW4gYSBzb3VyY2UsIG5vIHRpbGVzIG91dHNpZGUgb2YgdGhlIGdpdmVuIGJvdW5kcyBhcmUgcmVxdWVzdGVkIGJ5IE1hcGJveCBHTC5cIlxuXHR9LFxuXHRzY2hlbWU6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdHh5ejoge1xuXHRcdFx0XHRkb2M6IFwiU2xpcHB5IG1hcCB0aWxlbmFtZXMgc2NoZW1lLlwiXG5cdFx0XHR9LFxuXHRcdFx0dG1zOiB7XG5cdFx0XHRcdGRvYzogXCJPU0dlbyBzcGVjIHNjaGVtZS5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwieHl6XCIsXG5cdFx0ZG9jOiBcIkluZmx1ZW5jZXMgdGhlIHkgZGlyZWN0aW9uIG9mIHRoZSB0aWxlIGNvb3JkaW5hdGVzLiBUaGUgZ2xvYmFsLW1lcmNhdG9yIChha2EgU3BoZXJpY2FsIE1lcmNhdG9yKSBwcm9maWxlIGlzIGFzc3VtZWQuXCJcblx0fSxcblx0bWluem9vbToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0ZG9jOiBcIk1pbmltdW0gem9vbSBsZXZlbCBmb3Igd2hpY2ggdGlsZXMgYXJlIGF2YWlsYWJsZSwgYXMgaW4gdGhlIFRpbGVKU09OIHNwZWMuXCJcblx0fSxcblx0bWF4em9vbToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDIyLFxuXHRcdGRvYzogXCJNYXhpbXVtIHpvb20gbGV2ZWwgZm9yIHdoaWNoIHRpbGVzIGFyZSBhdmFpbGFibGUsIGFzIGluIHRoZSBUaWxlSlNPTiBzcGVjLiBEYXRhIGZyb20gdGlsZXMgYXQgdGhlIG1heHpvb20gYXJlIHVzZWQgd2hlbiBkaXNwbGF5aW5nIHRoZSBtYXAgYXQgaGlnaGVyIHpvb20gbGV2ZWxzLlwiXG5cdH0sXG5cdGF0dHJpYnV0aW9uOiB7XG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiQ29udGFpbnMgYW4gYXR0cmlidXRpb24gdG8gYmUgZGlzcGxheWVkIHdoZW4gdGhlIG1hcCBpcyBzaG93biB0byBhIHVzZXIuXCJcblx0fSxcblx0cHJvbW90ZUlkOiB7XG5cdFx0dHlwZTogXCJwcm9tb3RlSWRcIixcblx0XHRkb2M6IFwiQSBwcm9wZXJ0eSB0byB1c2UgYXMgYSBmZWF0dXJlIGlkIChmb3IgZmVhdHVyZSBzdGF0ZSkuIEVpdGhlciBhIHByb3BlcnR5IG5hbWUsIG9yIGFuIG9iamVjdCBvZiB0aGUgZm9ybSBgezxzb3VyY2VMYXllcj46IDxwcm9wZXJ0eU5hbWU+fWAuIElmIHNwZWNpZmllZCBhcyBhIHN0cmluZyBmb3IgYSB2ZWN0b3IgdGlsZSBzb3VyY2UsIHRoZSBzYW1lIHByb3BlcnR5IGlzIHVzZWQgYWNyb3NzIGFsbCBpdHMgc291cmNlIGxheWVycy5cIlxuXHR9LFxuXHR2b2xhdGlsZToge1xuXHRcdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRcdFwiZGVmYXVsdFwiOiBmYWxzZSxcblx0XHRkb2M6IFwiQSBzZXR0aW5nIHRvIGRldGVybWluZSB3aGV0aGVyIGEgc291cmNlJ3MgdGlsZXMgYXJlIGNhY2hlZCBsb2NhbGx5LlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0YW5kcm9pZDogXCI5LjMuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNS4xMC4wXCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdFwiKlwiOiB7XG5cdFx0dHlwZTogXCIqXCIsXG5cdFx0ZG9jOiBcIk90aGVyIGtleXMgdG8gY29uZmlndXJlIHRoZSBkYXRhIHNvdXJjZS5cIlxuXHR9XG59O1xudmFyIHNvdXJjZV9yYXN0ZXIgPSB7XG5cdHR5cGU6IHtcblx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdHJhc3Rlcjoge1xuXHRcdFx0XHRkb2M6IFwiQSByYXN0ZXIgdGlsZSBzb3VyY2UuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgdHlwZSBvZiB0aGUgc291cmNlLlwiXG5cdH0sXG5cdHVybDoge1xuXHRcdHR5cGU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIkEgVVJMIHRvIGEgVGlsZUpTT04gcmVzb3VyY2UuIFN1cHBvcnRlZCBwcm90b2NvbHMgYXJlIGBodHRwOmAsIGBodHRwczpgLCBhbmQgYG1hcGJveDovLzxUaWxlc2V0IElEPmAuXCJcblx0fSxcblx0dGlsZXM6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIkFuIGFycmF5IG9mIG9uZSBvciBtb3JlIHRpbGUgc291cmNlIFVSTHMsIGFzIGluIHRoZSBUaWxlSlNPTiBzcGVjLlwiXG5cdH0sXG5cdGJvdW5kczoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRsZW5ndGg6IDQsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdC0xODAsXG5cdFx0XHQtODUuMDUxMTI5LFxuXHRcdFx0MTgwLFxuXHRcdFx0ODUuMDUxMTI5XG5cdFx0XSxcblx0XHRkb2M6IFwiQW4gYXJyYXkgY29udGFpbmluZyB0aGUgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBvZiB0aGUgc291dGh3ZXN0IGFuZCBub3J0aGVhc3QgY29ybmVycyBvZiB0aGUgc291cmNlJ3MgYm91bmRpbmcgYm94IGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6IGBbc3cubG5nLCBzdy5sYXQsIG5lLmxuZywgbmUubGF0XWAuIFdoZW4gdGhpcyBwcm9wZXJ0eSBpcyBpbmNsdWRlZCBpbiBhIHNvdXJjZSwgbm8gdGlsZXMgb3V0c2lkZSBvZiB0aGUgZ2l2ZW4gYm91bmRzIGFyZSByZXF1ZXN0ZWQgYnkgTWFwYm94IEdMLlwiXG5cdH0sXG5cdG1pbnpvb206IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdGRvYzogXCJNaW5pbXVtIHpvb20gbGV2ZWwgZm9yIHdoaWNoIHRpbGVzIGFyZSBhdmFpbGFibGUsIGFzIGluIHRoZSBUaWxlSlNPTiBzcGVjLlwiXG5cdH0sXG5cdG1heHpvb206IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAyMixcblx0XHRkb2M6IFwiTWF4aW11bSB6b29tIGxldmVsIGZvciB3aGljaCB0aWxlcyBhcmUgYXZhaWxhYmxlLCBhcyBpbiB0aGUgVGlsZUpTT04gc3BlYy4gRGF0YSBmcm9tIHRpbGVzIGF0IHRoZSBtYXh6b29tIGFyZSB1c2VkIHdoZW4gZGlzcGxheWluZyB0aGUgbWFwIGF0IGhpZ2hlciB6b29tIGxldmVscy5cIlxuXHR9LFxuXHR0aWxlU2l6ZToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDUxMixcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiVGhlIG1pbmltdW0gdmlzdWFsIHNpemUgdG8gZGlzcGxheSB0aWxlcyBmb3IgdGhpcyBsYXllci4gT25seSBjb25maWd1cmFibGUgZm9yIHJhc3RlciBsYXllcnMuXCJcblx0fSxcblx0c2NoZW1lOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHR4eXo6IHtcblx0XHRcdFx0ZG9jOiBcIlNsaXBweSBtYXAgdGlsZW5hbWVzIHNjaGVtZS5cIlxuXHRcdFx0fSxcblx0XHRcdHRtczoge1xuXHRcdFx0XHRkb2M6IFwiT1NHZW8gc3BlYyBzY2hlbWUuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcInh5elwiLFxuXHRcdGRvYzogXCJJbmZsdWVuY2VzIHRoZSB5IGRpcmVjdGlvbiBvZiB0aGUgdGlsZSBjb29yZGluYXRlcy4gVGhlIGdsb2JhbC1tZXJjYXRvciAoYWthIFNwaGVyaWNhbCBNZXJjYXRvcikgcHJvZmlsZSBpcyBhc3N1bWVkLlwiXG5cdH0sXG5cdGF0dHJpYnV0aW9uOiB7XG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiQ29udGFpbnMgYW4gYXR0cmlidXRpb24gdG8gYmUgZGlzcGxheWVkIHdoZW4gdGhlIG1hcCBpcyBzaG93biB0byBhIHVzZXIuXCJcblx0fSxcblx0dm9sYXRpbGU6IHtcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0XHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdFx0ZG9jOiBcIkEgc2V0dGluZyB0byBkZXRlcm1pbmUgd2hldGhlciBhIHNvdXJjZSdzIHRpbGVzIGFyZSBjYWNoZWQgbG9jYWxseS5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGFuZHJvaWQ6IFwiOS4zLjBcIixcblx0XHRcdFx0aW9zOiBcIjUuMTAuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRcIipcIjoge1xuXHRcdHR5cGU6IFwiKlwiLFxuXHRcdGRvYzogXCJPdGhlciBrZXlzIHRvIGNvbmZpZ3VyZSB0aGUgZGF0YSBzb3VyY2UuXCJcblx0fVxufTtcbnZhciBzb3VyY2VfcmFzdGVyX2RlbSA9IHtcblx0dHlwZToge1xuXHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0XCJyYXN0ZXItZGVtXCI6IHtcblx0XHRcdFx0ZG9jOiBcIkEgUkdCLWVuY29kZWQgcmFzdGVyIERFTSBzb3VyY2VcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZG9jOiBcIlRoZSB0eXBlIG9mIHRoZSBzb3VyY2UuXCJcblx0fSxcblx0dXJsOiB7XG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiQSBVUkwgdG8gYSBUaWxlSlNPTiByZXNvdXJjZS4gU3VwcG9ydGVkIHByb3RvY29scyBhcmUgYGh0dHA6YCwgYGh0dHBzOmAsIGFuZCBgbWFwYm94Oi8vPFRpbGVzZXQgSUQ+YC5cIlxuXHR9LFxuXHR0aWxlczoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiQW4gYXJyYXkgb2Ygb25lIG9yIG1vcmUgdGlsZSBzb3VyY2UgVVJMcywgYXMgaW4gdGhlIFRpbGVKU09OIHNwZWMuXCJcblx0fSxcblx0Ym91bmRzOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdGxlbmd0aDogNCxcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0LTE4MCxcblx0XHRcdC04NS4wNTExMjksXG5cdFx0XHQxODAsXG5cdFx0XHQ4NS4wNTExMjlcblx0XHRdLFxuXHRcdGRvYzogXCJBbiBhcnJheSBjb250YWluaW5nIHRoZSBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIG9mIHRoZSBzb3V0aHdlc3QgYW5kIG5vcnRoZWFzdCBjb3JuZXJzIG9mIHRoZSBzb3VyY2UncyBib3VuZGluZyBib3ggaW4gdGhlIGZvbGxvd2luZyBvcmRlcjogYFtzdy5sbmcsIHN3LmxhdCwgbmUubG5nLCBuZS5sYXRdYC4gV2hlbiB0aGlzIHByb3BlcnR5IGlzIGluY2x1ZGVkIGluIGEgc291cmNlLCBubyB0aWxlcyBvdXRzaWRlIG9mIHRoZSBnaXZlbiBib3VuZHMgYXJlIHJlcXVlc3RlZCBieSBNYXBib3ggR0wuXCJcblx0fSxcblx0bWluem9vbToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0ZG9jOiBcIk1pbmltdW0gem9vbSBsZXZlbCBmb3Igd2hpY2ggdGlsZXMgYXJlIGF2YWlsYWJsZSwgYXMgaW4gdGhlIFRpbGVKU09OIHNwZWMuXCJcblx0fSxcblx0bWF4em9vbToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDIyLFxuXHRcdGRvYzogXCJNYXhpbXVtIHpvb20gbGV2ZWwgZm9yIHdoaWNoIHRpbGVzIGFyZSBhdmFpbGFibGUsIGFzIGluIHRoZSBUaWxlSlNPTiBzcGVjLiBEYXRhIGZyb20gdGlsZXMgYXQgdGhlIG1heHpvb20gYXJlIHVzZWQgd2hlbiBkaXNwbGF5aW5nIHRoZSBtYXAgYXQgaGlnaGVyIHpvb20gbGV2ZWxzLlwiXG5cdH0sXG5cdHRpbGVTaXplOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogNTEyLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdGRvYzogXCJUaGUgbWluaW11bSB2aXN1YWwgc2l6ZSB0byBkaXNwbGF5IHRpbGVzIGZvciB0aGlzIGxheWVyLiBPbmx5IGNvbmZpZ3VyYWJsZSBmb3IgcmFzdGVyIGxheWVycy5cIlxuXHR9LFxuXHRhdHRyaWJ1dGlvbjoge1xuXHRcdHR5cGU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIkNvbnRhaW5zIGFuIGF0dHJpYnV0aW9uIHRvIGJlIGRpc3BsYXllZCB3aGVuIHRoZSBtYXAgaXMgc2hvd24gdG8gYSB1c2VyLlwiXG5cdH0sXG5cdGVuY29kaW5nOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHR0ZXJyYXJpdW06IHtcblx0XHRcdFx0ZG9jOiBcIlRlcnJhcml1bSBmb3JtYXQgUE5HIHRpbGVzLiBTZWUgaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9lcy9wdWJsaWMtZGF0YXNldHMvdGVycmFpbi8gZm9yIG1vcmUgaW5mby5cIlxuXHRcdFx0fSxcblx0XHRcdG1hcGJveDoge1xuXHRcdFx0XHRkb2M6IFwiTWFwYm94IFRlcnJhaW4gUkdCIHRpbGVzLiBTZWUgaHR0cHM6Ly93d3cubWFwYm94LmNvbS9oZWxwL2FjY2Vzcy1lbGV2YXRpb24tZGF0YS8jbWFwYm94LXRlcnJhaW4tcmdiIGZvciBtb3JlIGluZm8uXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1hcGJveFwiLFxuXHRcdGRvYzogXCJUaGUgZW5jb2RpbmcgdXNlZCBieSB0aGlzIHNvdXJjZS4gTWFwYm94IFRlcnJhaW4gUkdCIGlzIHVzZWQgYnkgZGVmYXVsdFwiXG5cdH0sXG5cdHZvbGF0aWxlOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHRcdGRvYzogXCJBIHNldHRpbmcgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBzb3VyY2UncyB0aWxlcyBhcmUgY2FjaGVkIGxvY2FsbHkuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRhbmRyb2lkOiBcIjkuMy4wXCIsXG5cdFx0XHRcdGlvczogXCI1LjEwLjBcIlxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0XCIqXCI6IHtcblx0XHR0eXBlOiBcIipcIixcblx0XHRkb2M6IFwiT3RoZXIga2V5cyB0byBjb25maWd1cmUgdGhlIGRhdGEgc291cmNlLlwiXG5cdH1cbn07XG52YXIgc291cmNlX2dlb2pzb24gPSB7XG5cdHR5cGU6IHtcblx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdGdlb2pzb246IHtcblx0XHRcdFx0ZG9jOiBcIkEgR2VvSlNPTiBkYXRhIHNvdXJjZS5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZG9jOiBcIlRoZSBkYXRhIHR5cGUgb2YgdGhlIEdlb0pTT04gc291cmNlLlwiXG5cdH0sXG5cdGRhdGE6IHtcblx0XHR0eXBlOiBcIipcIixcblx0XHRkb2M6IFwiQSBVUkwgdG8gYSBHZW9KU09OIGZpbGUsIG9yIGlubGluZSBHZW9KU09OLlwiXG5cdH0sXG5cdG1heHpvb206IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxOCxcblx0XHRkb2M6IFwiTWF4aW11bSB6b29tIGxldmVsIGF0IHdoaWNoIHRvIGNyZWF0ZSB2ZWN0b3IgdGlsZXMgKGhpZ2hlciBtZWFucyBncmVhdGVyIGRldGFpbCBhdCBoaWdoIHpvb20gbGV2ZWxzKS5cIlxuXHR9LFxuXHRhdHRyaWJ1dGlvbjoge1xuXHRcdHR5cGU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIkNvbnRhaW5zIGFuIGF0dHJpYnV0aW9uIHRvIGJlIGRpc3BsYXllZCB3aGVuIHRoZSBtYXAgaXMgc2hvd24gdG8gYSB1c2VyLlwiXG5cdH0sXG5cdGJ1ZmZlcjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEyOCxcblx0XHRtYXhpbXVtOiA1MTIsXG5cdFx0bWluaW11bTogMCxcblx0XHRkb2M6IFwiU2l6ZSBvZiB0aGUgdGlsZSBidWZmZXIgb24gZWFjaCBzaWRlLiBBIHZhbHVlIG9mIDAgcHJvZHVjZXMgbm8gYnVmZmVyLiBBIHZhbHVlIG9mIDUxMiBwcm9kdWNlcyBhIGJ1ZmZlciBhcyB3aWRlIGFzIHRoZSB0aWxlIGl0c2VsZi4gTGFyZ2VyIHZhbHVlcyBwcm9kdWNlIGZld2VyIHJlbmRlcmluZyBhcnRpZmFjdHMgbmVhciB0aWxlIGVkZ2VzIGFuZCBzbG93ZXIgcGVyZm9ybWFuY2UuXCJcblx0fSxcblx0ZmlsdGVyOiB7XG5cdFx0dHlwZTogXCIqXCIsXG5cdFx0ZG9jOiBcIkFuIGV4cHJlc3Npb24gZm9yIGZpbHRlcmluZyBmZWF0dXJlcyBwcmlvciB0byBwcm9jZXNzaW5nIHRoZW0gZm9yIHJlbmRlcmluZy5cIlxuXHR9LFxuXHR0b2xlcmFuY2U6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLjM3NSxcblx0XHRkb2M6IFwiRG91Z2xhcy1QZXVja2VyIHNpbXBsaWZpY2F0aW9uIHRvbGVyYW5jZSAoaGlnaGVyIG1lYW5zIHNpbXBsZXIgZ2VvbWV0cmllcyBhbmQgZmFzdGVyIHBlcmZvcm1hbmNlKS5cIlxuXHR9LFxuXHRjbHVzdGVyOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHRcdGRvYzogXCJJZiB0aGUgZGF0YSBpcyBhIGNvbGxlY3Rpb24gb2YgcG9pbnQgZmVhdHVyZXMsIHNldHRpbmcgdGhpcyB0byB0cnVlIGNsdXN0ZXJzIHRoZSBwb2ludHMgYnkgcmFkaXVzIGludG8gZ3JvdXBzLiBDbHVzdGVyIGdyb3VwcyBiZWNvbWUgbmV3IGBQb2ludGAgZmVhdHVyZXMgaW4gdGhlIHNvdXJjZSB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllczpcXG4gKiBgY2x1c3RlcmAgSXMgYHRydWVgIGlmIHRoZSBwb2ludCBpcyBhIGNsdXN0ZXIgXFxuICogYGNsdXN0ZXJfaWRgIEEgdW5xaXVlIGlkIGZvciB0aGUgY2x1c3RlciB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFtjbHVzdGVyIGluc3BlY3Rpb24gbWV0aG9kc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvYXBpLyNnZW9qc29uc291cmNlI2dldGNsdXN0ZXJleHBhbnNpb256b29tKVxcbiAqIGBwb2ludF9jb3VudGAgTnVtYmVyIG9mIG9yaWdpbmFsIHBvaW50cyBncm91cGVkIGludG8gdGhpcyBjbHVzdGVyXFxuICogYHBvaW50X2NvdW50X2FiYnJldmlhdGVkYCBBbiBhYmJyZXZpYXRlZCBwb2ludCBjb3VudFwiXG5cdH0sXG5cdGNsdXN0ZXJSYWRpdXM6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiA1MCxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdGRvYzogXCJSYWRpdXMgb2YgZWFjaCBjbHVzdGVyIGlmIGNsdXN0ZXJpbmcgaXMgZW5hYmxlZC4gQSB2YWx1ZSBvZiA1MTIgaW5kaWNhdGVzIGEgcmFkaXVzIGVxdWFsIHRvIHRoZSB3aWR0aCBvZiBhIHRpbGUuXCJcblx0fSxcblx0Y2x1c3Rlck1heFpvb206IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJNYXggem9vbSBvbiB3aGljaCB0byBjbHVzdGVyIHBvaW50cyBpZiBjbHVzdGVyaW5nIGlzIGVuYWJsZWQuIERlZmF1bHRzIHRvIG9uZSB6b29tIGxlc3MgdGhhbiBtYXh6b29tIChzbyB0aGF0IGxhc3Qgem9vbSBmZWF0dXJlcyBhcmUgbm90IGNsdXN0ZXJlZCkuIENsdXN0ZXJzIGFyZSByZS1ldmFsdWF0ZWQgYXQgaW50ZWdlciB6b29tIGxldmVscyBzbyBzZXR0aW5nIGNsdXN0ZXJNYXhab29tIHRvIDE0IG1lYW5zIHRoZSBjbHVzdGVycyB3aWxsIGJlIGRpc3BsYXllZCB1bnRpbCB6MTUuXCJcblx0fSxcblx0Y2x1c3Rlck1pblBvaW50czoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0ZG9jOiBcIk1pbmltdW0gbnVtYmVyIG9mIHBvaW50cyBuZWNlc3NhcnkgdG8gZm9ybSBhIGNsdXN0ZXIgaWYgY2x1c3RlcmluZyBpcyBlbmFibGVkLiBEZWZhdWx0cyB0byBgMmAuXCJcblx0fSxcblx0Y2x1c3RlclByb3BlcnRpZXM6IHtcblx0XHR0eXBlOiBcIipcIixcblx0XHRkb2M6IFwiQW4gb2JqZWN0IGRlZmluaW5nIGN1c3RvbSBwcm9wZXJ0aWVzIG9uIHRoZSBnZW5lcmF0ZWQgY2x1c3RlcnMgaWYgY2x1c3RlcmluZyBpcyBlbmFibGVkLCBhZ2dyZWdhdGluZyB2YWx1ZXMgZnJvbSBjbHVzdGVyZWQgcG9pbnRzLiBIYXMgdGhlIGZvcm0gYHtcXFwicHJvcGVydHlfbmFtZVxcXCI6IFtvcGVyYXRvciwgbWFwX2V4cHJlc3Npb25dfWAuIGBvcGVyYXRvcmAgaXMgYW55IGV4cHJlc3Npb24gZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGF0IGxlYXN0IDIgb3BlcmFuZHMgKGUuZy4gYFxcXCIrXFxcImAgb3IgYFxcXCJtYXhcXFwiYCkg4oCUIGl0IGFjY3VtdWxhdGVzIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmcm9tIGNsdXN0ZXJzL3BvaW50cyB0aGUgY2x1c3RlciBjb250YWluczsgYG1hcF9leHByZXNzaW9uYCBwcm9kdWNlcyB0aGUgdmFsdWUgb2YgYSBzaW5nbGUgcG9pbnQuXFxuXFxuRXhhbXBsZTogYHtcXFwic3VtXFxcIjogW1xcXCIrXFxcIiwgW1xcXCJnZXRcXFwiLCBcXFwic2NhbGVyYW5rXFxcIl1dfWAuXFxuXFxuRm9yIG1vcmUgYWR2YW5jZWQgdXNlIGNhc2VzLCBpbiBwbGFjZSBvZiBgb3BlcmF0b3JgLCB5b3UgY2FuIHVzZSBhIGN1c3RvbSByZWR1Y2UgZXhwcmVzc2lvbiB0aGF0IHJlZmVyZW5jZXMgYSBzcGVjaWFsIGBbXFxcImFjY3VtdWxhdGVkXFxcIl1gIHZhbHVlLCBlLmcuOlxcbmB7XFxcInN1bVxcXCI6IFtbXFxcIitcXFwiLCBbXFxcImFjY3VtdWxhdGVkXFxcIl0sIFtcXFwiZ2V0XFxcIiwgXFxcInN1bVxcXCJdXSwgW1xcXCJnZXRcXFwiLCBcXFwic2NhbGVyYW5rXFxcIl1dfWBcIlxuXHR9LFxuXHRsaW5lTWV0cmljczoge1xuXHRcdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRcdFwiZGVmYXVsdFwiOiBmYWxzZSxcblx0XHRkb2M6IFwiV2hldGhlciB0byBjYWxjdWxhdGUgbGluZSBkaXN0YW5jZSBtZXRyaWNzLiBUaGlzIGlzIHJlcXVpcmVkIGZvciBsaW5lIGxheWVycyB0aGF0IHNwZWNpZnkgYGxpbmUtZ3JhZGllbnRgIHZhbHVlcy5cIlxuXHR9LFxuXHRnZW5lcmF0ZUlkOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHRcdGRvYzogXCJXaGV0aGVyIHRvIGdlbmVyYXRlIGlkcyBmb3IgdGhlIGdlb2pzb24gZmVhdHVyZXMuIFdoZW4gZW5hYmxlZCwgdGhlIGBmZWF0dXJlLmlkYCBwcm9wZXJ0eSB3aWxsIGJlIGF1dG8gYXNzaWduZWQgYmFzZWQgb24gaXRzIGluZGV4IGluIHRoZSBgZmVhdHVyZXNgIGFycmF5LCBvdmVyLXdyaXRpbmcgYW55IHByZXZpb3VzIHZhbHVlcy5cIlxuXHR9LFxuXHRwcm9tb3RlSWQ6IHtcblx0XHR0eXBlOiBcInByb21vdGVJZFwiLFxuXHRcdGRvYzogXCJBIHByb3BlcnR5IHRvIHVzZSBhcyBhIGZlYXR1cmUgaWQgKGZvciBmZWF0dXJlIHN0YXRlKS4gRWl0aGVyIGEgcHJvcGVydHkgbmFtZSwgb3IgYW4gb2JqZWN0IG9mIHRoZSBmb3JtIGB7PHNvdXJjZUxheWVyPjogPHByb3BlcnR5TmFtZT59YC5cIlxuXHR9XG59O1xudmFyIHNvdXJjZV92aWRlbyA9IHtcblx0dHlwZToge1xuXHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0dmlkZW86IHtcblx0XHRcdFx0ZG9jOiBcIkEgdmlkZW8gZGF0YSBzb3VyY2UuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgZGF0YSB0eXBlIG9mIHRoZSB2aWRlbyBzb3VyY2UuXCJcblx0fSxcblx0dXJsczoge1xuXHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiVVJMcyB0byB2aWRlbyBjb250ZW50IGluIG9yZGVyIG9mIHByZWZlcnJlZCBmb3JtYXQuXCJcblx0fSxcblx0Y29vcmRpbmF0ZXM6IHtcblx0XHRyZXF1aXJlZDogdHJ1ZSxcblx0XHRkb2M6IFwiQ29ybmVycyBvZiB2aWRlbyBzcGVjaWZpZWQgaW4gbG9uZ2l0dWRlLCBsYXRpdHVkZSBwYWlycy5cIixcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0bGVuZ3RoOiA0LFxuXHRcdHZhbHVlOiB7XG5cdFx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0XHRsZW5ndGg6IDIsXG5cdFx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRcdGRvYzogXCJBIHNpbmdsZSBsb25naXR1ZGUsIGxhdGl0dWRlIHBhaXIuXCJcblx0XHR9XG5cdH1cbn07XG52YXIgc291cmNlX2ltYWdlID0ge1xuXHR0eXBlOiB7XG5cdFx0cmVxdWlyZWQ6IHRydWUsXG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRpbWFnZToge1xuXHRcdFx0XHRkb2M6IFwiQW4gaW1hZ2UgZGF0YSBzb3VyY2UuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgZGF0YSB0eXBlIG9mIHRoZSBpbWFnZSBzb3VyY2UuXCJcblx0fSxcblx0dXJsOiB7XG5cdFx0cmVxdWlyZWQ6IHRydWUsXG5cdFx0dHlwZTogXCJzdHJpbmdcIixcblx0XHRkb2M6IFwiVVJMIHRoYXQgcG9pbnRzIHRvIGFuIGltYWdlLlwiXG5cdH0sXG5cdGNvb3JkaW5hdGVzOiB7XG5cdFx0cmVxdWlyZWQ6IHRydWUsXG5cdFx0ZG9jOiBcIkNvcm5lcnMgb2YgaW1hZ2Ugc3BlY2lmaWVkIGluIGxvbmdpdHVkZSwgbGF0aXR1ZGUgcGFpcnMuXCIsXG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdGxlbmd0aDogNCxcblx0XHR2YWx1ZToge1xuXHRcdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdFx0bGVuZ3RoOiAyLFxuXHRcdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0XHRkb2M6IFwiQSBzaW5nbGUgbG9uZ2l0dWRlLCBsYXRpdHVkZSBwYWlyLlwiXG5cdFx0fVxuXHR9XG59O1xudmFyIGxheWVyID0ge1xuXHRpZDoge1xuXHRcdHR5cGU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIlVuaXF1ZSBsYXllciBuYW1lLlwiLFxuXHRcdHJlcXVpcmVkOiB0cnVlXG5cdH0sXG5cdHR5cGU6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdGZpbGw6IHtcblx0XHRcdFx0ZG9jOiBcIkEgZmlsbGVkIHBvbHlnb24gd2l0aCBhbiBvcHRpb25hbCBzdHJva2VkIGJvcmRlci5cIixcblx0XHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0bGluZToge1xuXHRcdFx0XHRkb2M6IFwiQSBzdHJva2VkIGxpbmUuXCIsXG5cdFx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHN5bWJvbDoge1xuXHRcdFx0XHRkb2M6IFwiQW4gaWNvbiBvciBhIHRleHQgbGFiZWwuXCIsXG5cdFx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNpcmNsZToge1xuXHRcdFx0XHRkb2M6IFwiQSBmaWxsZWQgY2lyY2xlLlwiLFxuXHRcdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRoZWF0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJBIGhlYXRtYXAuXCIsXG5cdFx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdFwiZmlsbC1leHRydXNpb25cIjoge1xuXHRcdFx0XHRkb2M6IFwiQW4gZXh0cnVkZWQgKDNEKSBwb2x5Z29uLlwiLFxuXHRcdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdFx0XHRpb3M6IFwiMy42LjBcIixcblx0XHRcdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRyYXN0ZXI6IHtcblx0XHRcdFx0ZG9jOiBcIlJhc3RlciBtYXAgdGV4dHVyZXMgc3VjaCBhcyBzYXRlbGxpdGUgaW1hZ2VyeS5cIixcblx0XHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0aGlsbHNoYWRlOiB7XG5cdFx0XHRcdGRvYzogXCJDbGllbnQtc2lkZSBoaWxsc2hhZGluZyB2aXN1YWxpemF0aW9uIGJhc2VkIG9uIERFTSBkYXRhLiBDdXJyZW50bHksIHRoZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIE1hcGJveCBUZXJyYWluIFJHQiBhbmQgTWFwemVuIFRlcnJhcml1bSB0aWxlcy5cIixcblx0XHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRcdGpzOiBcIjAuNDMuMFwiLFxuXHRcdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YmFja2dyb3VuZDoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJhY2tncm91bmQgY29sb3Igb3IgcGF0dGVybiBvZiB0aGUgbWFwLlwiLFxuXHRcdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRza3k6IHtcblx0XHRcdFx0ZG9jOiBcIkEgc3BoZXJpY2FsIGRvbWUgYXJvdW5kIHRoZSBtYXAgdGhhdCBpcyBhbHdheXMgcmVuZGVyZWQgYmVoaW5kIGFsbCBvdGhlciBsYXllcnMuXCIsXG5cdFx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRcdFx0aW9zOiBcIjEwLjAuMFwiLFxuXHRcdFx0XHRcdFx0YW5kcm9pZDogXCIxMC4wLjBcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZG9jOiBcIlJlbmRlcmluZyB0eXBlIG9mIHRoaXMgbGF5ZXIuXCIsXG5cdFx0cmVxdWlyZWQ6IHRydWVcblx0fSxcblx0bWV0YWRhdGE6IHtcblx0XHR0eXBlOiBcIipcIixcblx0XHRkb2M6IFwiQXJiaXRyYXJ5IHByb3BlcnRpZXMgdXNlZnVsIHRvIHRyYWNrIHdpdGggdGhlIGxheWVyLCBidXQgZG8gbm90IGluZmx1ZW5jZSByZW5kZXJpbmcuIFByb3BlcnRpZXMgc2hvdWxkIGJlIHByZWZpeGVkIHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgJ21hcGJveDonLlwiXG5cdH0sXG5cdHNvdXJjZToge1xuXHRcdHR5cGU6IFwic3RyaW5nXCIsXG5cdFx0ZG9jOiBcIk5hbWUgb2YgYSBzb3VyY2UgZGVzY3JpcHRpb24gdG8gYmUgdXNlZCBmb3IgdGhpcyBsYXllci4gUmVxdWlyZWQgZm9yIGFsbCBsYXllciB0eXBlcyBleGNlcHQgYGJhY2tncm91bmRgLlwiXG5cdH0sXG5cdFwic291cmNlLWxheWVyXCI6IHtcblx0XHR0eXBlOiBcInN0cmluZ1wiLFxuXHRcdGRvYzogXCJMYXllciB0byB1c2UgZnJvbSBhIHZlY3RvciB0aWxlIHNvdXJjZS4gUmVxdWlyZWQgZm9yIHZlY3RvciB0aWxlIHNvdXJjZXM7IHByb2hpYml0ZWQgZm9yIGFsbCBvdGhlciBzb3VyY2UgdHlwZXMsIGluY2x1ZGluZyBHZW9KU09OIHNvdXJjZXMuXCJcblx0fSxcblx0bWluem9vbToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0bWluaW11bTogMCxcblx0XHRtYXhpbXVtOiAyNCxcblx0XHRkb2M6IFwiVGhlIG1pbmltdW0gem9vbSBsZXZlbCBmb3IgdGhlIGxheWVyLiBBdCB6b29tIGxldmVscyBsZXNzIHRoYW4gdGhlIG1pbnpvb20sIHRoZSBsYXllciB3aWxsIGJlIGhpZGRlbi5cIlxuXHR9LFxuXHRtYXh6b29tOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDI0LFxuXHRcdGRvYzogXCJUaGUgbWF4aW11bSB6b29tIGxldmVsIGZvciB0aGUgbGF5ZXIuIEF0IHpvb20gbGV2ZWxzIGVxdWFsIHRvIG9yIGdyZWF0ZXIgdGhhbiB0aGUgbWF4em9vbSwgdGhlIGxheWVyIHdpbGwgYmUgaGlkZGVuLlwiXG5cdH0sXG5cdGZpbHRlcjoge1xuXHRcdHR5cGU6IFwiZmlsdGVyXCIsXG5cdFx0ZG9jOiBcIkFuIGV4cHJlc3Npb24gc3BlY2lmeWluZyBjb25kaXRpb25zIG9uIHNvdXJjZSBmZWF0dXJlcy4gT25seSBmZWF0dXJlcyB0aGF0IG1hdGNoIHRoZSBmaWx0ZXIgYXJlIGRpc3BsYXllZC4gWm9vbSBleHByZXNzaW9ucyBpbiBmaWx0ZXJzIGFyZSBvbmx5IGV2YWx1YXRlZCBhdCBpbnRlZ2VyIHpvb20gbGV2ZWxzLiBUaGUgYFtcXFwiZmVhdHVyZS1zdGF0ZVxcXCIsIC4uLl1gIGV4cHJlc3Npb24gaXMgbm90IHN1cHBvcnRlZCBpbiBmaWx0ZXIgZXhwcmVzc2lvbnMuICBUaGUgYFtcXFwicGl0Y2hcXFwiXWAgYW5kIGBbXFxcImRpc3RhbmNlLWZyb20tY2VudGVyXFxcIl1gIGV4cHJlc3Npb25zIGFyZSBzdXBwb3J0ZWQgb25seSBmb3IgZmlsdGVyIGV4cHJlc3Npb25zIG9uIHRoZSBzeW1ib2wgbGF5ZXIuXCJcblx0fSxcblx0bGF5b3V0OiB7XG5cdFx0dHlwZTogXCJsYXlvdXRcIixcblx0XHRkb2M6IFwiTGF5b3V0IHByb3BlcnRpZXMgZm9yIHRoZSBsYXllci5cIlxuXHR9LFxuXHRwYWludDoge1xuXHRcdHR5cGU6IFwicGFpbnRcIixcblx0XHRkb2M6IFwiRGVmYXVsdCBwYWludCBwcm9wZXJ0aWVzIGZvciB0aGlzIGxheWVyLlwiXG5cdH1cbn07XG52YXIgbGF5b3V0ID0gW1xuXHRcImxheW91dF9maWxsXCIsXG5cdFwibGF5b3V0X2xpbmVcIixcblx0XCJsYXlvdXRfY2lyY2xlXCIsXG5cdFwibGF5b3V0X2hlYXRtYXBcIixcblx0XCJsYXlvdXRfZmlsbC1leHRydXNpb25cIixcblx0XCJsYXlvdXRfc3ltYm9sXCIsXG5cdFwibGF5b3V0X3Jhc3RlclwiLFxuXHRcImxheW91dF9oaWxsc2hhZGVcIixcblx0XCJsYXlvdXRfYmFja2dyb3VuZFwiLFxuXHRcImxheW91dF9za3lcIlxuXTtcbnZhciBsYXlvdXRfYmFja2dyb3VuZCA9IHtcblx0dmlzaWJpbGl0eToge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0dmlzaWJsZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIHNob3duLlwiXG5cdFx0XHR9LFxuXHRcdFx0bm9uZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIG5vdCBzaG93bi5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwidmlzaWJsZVwiLFxuXHRcdGRvYzogXCJXaGV0aGVyIHRoaXMgbGF5ZXIgaXMgZGlzcGxheWVkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbnN0YW50XCJcblx0fVxufTtcbnZhciBsYXlvdXRfc2t5ID0ge1xuXHR2aXNpYmlsaXR5OiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHR2aXNpYmxlOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgbGF5ZXIgaXMgc2hvd24uXCJcblx0XHRcdH0sXG5cdFx0XHRub25lOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgbGF5ZXIgaXMgbm90IHNob3duLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJ2aXNpYmxlXCIsXG5cdFx0ZG9jOiBcIldoZXRoZXIgdGhpcyBsYXllciBpcyBkaXNwbGF5ZWQuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMTAuMC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbnN0YW50XCJcblx0fVxufTtcbnZhciBsYXlvdXRfZmlsbCA9IHtcblx0XCJmaWxsLXNvcnQta2V5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJTb3J0cyBmZWF0dXJlcyBpbiBhc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gdGhpcyB2YWx1ZS4gRmVhdHVyZXMgd2l0aCBhIGhpZ2hlciBzb3J0IGtleSB3aWxsIGFwcGVhciBhYm92ZSBmZWF0dXJlcyB3aXRoIGEgbG93ZXIgc29ydCBrZXkuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIxLjIuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjkuMS4wXCIsXG5cdFx0XHRcdGlvczogXCI1LjguMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjE1LjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjEuMi4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiOS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjUuOC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTUuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0dmlzaWJpbGl0eToge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0dmlzaWJsZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIHNob3duLlwiXG5cdFx0XHR9LFxuXHRcdFx0bm9uZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIG5vdCBzaG93bi5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwidmlzaWJsZVwiLFxuXHRcdGRvYzogXCJXaGV0aGVyIHRoaXMgbGF5ZXIgaXMgZGlzcGxheWVkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbnN0YW50XCJcblx0fVxufTtcbnZhciBsYXlvdXRfY2lyY2xlID0ge1xuXHRcImNpcmNsZS1zb3J0LWtleVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiU29ydHMgZmVhdHVyZXMgaW4gYXNjZW5kaW5nIG9yZGVyIGJhc2VkIG9uIHRoaXMgdmFsdWUuIEZlYXR1cmVzIHdpdGggYSBoaWdoZXIgc29ydCBrZXkgd2lsbCBhcHBlYXIgYWJvdmUgZmVhdHVyZXMgd2l0aCBhIGxvd2VyIHNvcnQga2V5LlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMS4yLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI5LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNS45LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xNi4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIxLjIuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjkuMi4wXCIsXG5cdFx0XHRcdGlvczogXCI1LjkuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjE2LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdHZpc2liaWxpdHk6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdHZpc2libGU6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYXllciBpcyBzaG93bi5cIlxuXHRcdFx0fSxcblx0XHRcdG5vbmU6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYXllciBpcyBub3Qgc2hvd24uXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcInZpc2libGVcIixcblx0XHRkb2M6IFwiV2hldGhlciB0aGlzIGxheWVyIGlzIGRpc3BsYXllZC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJjb25zdGFudFwiXG5cdH1cbn07XG52YXIgbGF5b3V0X2hlYXRtYXAgPSB7XG5cdHZpc2liaWxpdHk6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdHZpc2libGU6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYXllciBpcyBzaG93bi5cIlxuXHRcdFx0fSxcblx0XHRcdG5vbmU6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYXllciBpcyBub3Qgc2hvd24uXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcInZpc2libGVcIixcblx0XHRkb2M6IFwiV2hldGhlciB0aGlzIGxheWVyIGlzIGRpc3BsYXllZC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJjb25zdGFudFwiXG5cdH1cbn07XG52YXIgbGF5b3V0X2xpbmUgPSB7XG5cdFwibGluZS1jYXBcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0YnV0dDoge1xuXHRcdFx0XHRkb2M6IFwiQSBjYXAgd2l0aCBhIHNxdWFyZWQtb2ZmIGVuZCB3aGljaCBpcyBkcmF3biB0byB0aGUgZXhhY3QgZW5kcG9pbnQgb2YgdGhlIGxpbmUuXCJcblx0XHRcdH0sXG5cdFx0XHRyb3VuZDoge1xuXHRcdFx0XHRkb2M6IFwiQSBjYXAgd2l0aCBhIHJvdW5kZWQgZW5kIHdoaWNoIGlzIGRyYXduIGJleW9uZCB0aGUgZW5kcG9pbnQgb2YgdGhlIGxpbmUgYXQgYSByYWRpdXMgb2Ygb25lLWhhbGYgb2YgdGhlIGxpbmUncyB3aWR0aCBhbmQgY2VudGVyZWQgb24gdGhlIGVuZHBvaW50IG9mIHRoZSBsaW5lLlwiXG5cdFx0XHR9LFxuXHRcdFx0c3F1YXJlOiB7XG5cdFx0XHRcdGRvYzogXCJBIGNhcCB3aXRoIGEgc3F1YXJlZC1vZmYgZW5kIHdoaWNoIGlzIGRyYXduIGJleW9uZCB0aGUgZW5kcG9pbnQgb2YgdGhlIGxpbmUgYXQgYSBkaXN0YW5jZSBvZiBvbmUtaGFsZiBvZiB0aGUgbGluZSdzIHdpZHRoLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJidXR0XCIsXG5cdFx0ZG9jOiBcIlRoZSBkaXNwbGF5IG9mIGxpbmUgZW5kaW5ncy5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMi4zLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwibGluZS1qb2luXCI6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdGJldmVsOiB7XG5cdFx0XHRcdGRvYzogXCJBIGpvaW4gd2l0aCBhIHNxdWFyZWQtb2ZmIGVuZCB3aGljaCBpcyBkcmF3biBiZXlvbmQgdGhlIGVuZHBvaW50IG9mIHRoZSBsaW5lIGF0IGEgZGlzdGFuY2Ugb2Ygb25lLWhhbGYgb2YgdGhlIGxpbmUncyB3aWR0aC5cIlxuXHRcdFx0fSxcblx0XHRcdHJvdW5kOiB7XG5cdFx0XHRcdGRvYzogXCJBIGpvaW4gd2l0aCBhIHJvdW5kZWQgZW5kIHdoaWNoIGlzIGRyYXduIGJleW9uZCB0aGUgZW5kcG9pbnQgb2YgdGhlIGxpbmUgYXQgYSByYWRpdXMgb2Ygb25lLWhhbGYgb2YgdGhlIGxpbmUncyB3aWR0aCBhbmQgY2VudGVyZWQgb24gdGhlIGVuZHBvaW50IG9mIHRoZSBsaW5lLlwiXG5cdFx0XHR9LFxuXHRcdFx0bWl0ZXI6IHtcblx0XHRcdFx0ZG9jOiBcIkEgam9pbiB3aXRoIGEgc2hhcnAsIGFuZ2xlZCBjb3JuZXIgd2hpY2ggaXMgZHJhd24gd2l0aCB0aGUgb3V0ZXIgc2lkZXMgYmV5b25kIHRoZSBlbmRwb2ludCBvZiB0aGUgcGF0aCB1bnRpbCB0aGV5IG1lZXQuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1pdGVyXCIsXG5cdFx0ZG9jOiBcIlRoZSBkaXNwbGF5IG9mIGxpbmVzIHdoZW4gam9pbmluZy5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC40MC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4yLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNy4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNi4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImxpbmUtbWl0ZXItbGltaXRcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDIsXG5cdFx0ZG9jOiBcIlVzZWQgdG8gYXV0b21hdGljYWxseSBjb252ZXJ0IG1pdGVyIGpvaW5zIHRvIGJldmVsIGpvaW5zIGZvciBzaGFycCBhbmdsZXMuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJsaW5lLWpvaW5cIjogXCJtaXRlclwiXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJsaW5lLXJvdW5kLWxpbWl0XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxLjA1LFxuXHRcdGRvYzogXCJVc2VkIHRvIGF1dG9tYXRpY2FsbHkgY29udmVydCByb3VuZCBqb2lucyB0byBtaXRlciBqb2lucyBmb3Igc2hhbGxvdyBhbmdsZXMuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJsaW5lLWpvaW5cIjogXCJyb3VuZFwiXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJsaW5lLXNvcnQta2V5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJTb3J0cyBmZWF0dXJlcyBpbiBhc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gdGhpcyB2YWx1ZS4gRmVhdHVyZXMgd2l0aCBhIGhpZ2hlciBzb3J0IGtleSB3aWxsIGFwcGVhciBhYm92ZSBmZWF0dXJlcyB3aXRoIGEgbG93ZXIgc29ydCBrZXkuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIxLjIuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjkuMS4wXCIsXG5cdFx0XHRcdGlvczogXCI1LjguMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjE1LjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjEuMi4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiOS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjUuOC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTUuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0dmlzaWJpbGl0eToge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0dmlzaWJsZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIHNob3duLlwiXG5cdFx0XHR9LFxuXHRcdFx0bm9uZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIG5vdCBzaG93bi5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwidmlzaWJsZVwiLFxuXHRcdGRvYzogXCJXaGV0aGVyIHRoaXMgbGF5ZXIgaXMgZGlzcGxheWVkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbnN0YW50XCJcblx0fVxufTtcbnZhciBsYXlvdXRfc3ltYm9sID0ge1xuXHRcInN5bWJvbC1wbGFjZW1lbnRcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0cG9pbnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYWJlbCBpcyBwbGFjZWQgYXQgdGhlIHBvaW50IHdoZXJlIHRoZSBnZW9tZXRyeSBpcyBsb2NhdGVkLlwiXG5cdFx0XHR9LFxuXHRcdFx0bGluZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxhYmVsIGlzIHBsYWNlZCBhbG9uZyB0aGUgbGluZSBvZiB0aGUgZ2VvbWV0cnkuIENhbiBvbmx5IGJlIHVzZWQgb24gYExpbmVTdHJpbmdgIGFuZCBgUG9seWdvbmAgZ2VvbWV0cmllcy5cIlxuXHRcdFx0fSxcblx0XHRcdFwibGluZS1jZW50ZXJcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxhYmVsIGlzIHBsYWNlZCBhdCB0aGUgY2VudGVyIG9mIHRoZSBsaW5lIG9mIHRoZSBnZW9tZXRyeS4gQ2FuIG9ubHkgYmUgdXNlZCBvbiBgTGluZVN0cmluZ2AgYW5kIGBQb2x5Z29uYCBnZW9tZXRyaWVzLiBOb3RlIHRoYXQgYSBzaW5nbGUgZmVhdHVyZSBpbiBhIHZlY3RvciB0aWxlIG1heSBjb250YWluIG11bHRpcGxlIGxpbmUgZ2VvbWV0cmllcy5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwicG9pbnRcIixcblx0XHRkb2M6IFwiTGFiZWwgcGxhY2VtZW50IHJlbGF0aXZlIHRvIGl0cyBnZW9tZXRyeS5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJgbGluZS1jZW50ZXJgIHZhbHVlXCI6IHtcblx0XHRcdFx0anM6IFwiMC40Ny4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi40LjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMy4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTAuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwic3ltYm9sLXNwYWNpbmdcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDI1MCxcblx0XHRtaW5pbXVtOiAxLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdGRvYzogXCJEaXN0YW5jZSBiZXR3ZWVuIHR3byBzeW1ib2wgYW5jaG9ycy5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInN5bWJvbC1wbGFjZW1lbnRcIjogXCJsaW5lXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInN5bWJvbC1hdm9pZC1lZGdlc1wiOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHRcdGRvYzogXCJJZiB0cnVlLCB0aGUgc3ltYm9scyB3aWxsIG5vdCBjcm9zcyB0aWxlIGVkZ2VzIHRvIGF2b2lkIG11dHVhbCBjb2xsaXNpb25zLiBSZWNvbW1lbmRlZCBpbiBsYXllcnMgdGhhdCBkb24ndCBoYXZlIGVub3VnaCBwYWRkaW5nIGluIHRoZSB2ZWN0b3IgdGlsZSB0byBwcmV2ZW50IGNvbGxpc2lvbnMsIG9yIGlmIGl0IGlzIGEgcG9pbnQgc3ltYm9sIGxheWVyIHBsYWNlZCBhZnRlciBhIGxpbmUgc3ltYm9sIGxheWVyLiBXaGVuIHVzaW5nIGEgY2xpZW50IHRoYXQgc3VwcG9ydHMgZ2xvYmFsIGNvbGxpc2lvbiBkZXRlY3Rpb24sIGxpa2UgTWFwYm94IEdMIEpTIHZlcnNpb24gMC40Mi4wIG9yIGdyZWF0ZXIsIGVuYWJsaW5nIHRoaXMgcHJvcGVydHkgaXMgbm90IG5lZWRlZCB0byBwcmV2ZW50IGNsaXBwZWQgbGFiZWxzIGF0IHRpbGUgYm91bmRhcmllcy5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwic3ltYm9sLXNvcnQta2V5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJTb3J0cyBmZWF0dXJlcyBpbiBhc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gdGhpcyB2YWx1ZS4gRmVhdHVyZXMgd2l0aCBsb3dlciBzb3J0IGtleXMgYXJlIGRyYXduIGFuZCBwbGFjZWQgZmlyc3QuICBXaGVuIGBpY29uLWFsbG93LW92ZXJsYXBgIG9yIGB0ZXh0LWFsbG93LW92ZXJsYXBgIGlzIGBmYWxzZWAsIGZlYXR1cmVzIHdpdGggYSBsb3dlciBzb3J0IGtleSB3aWxsIGhhdmUgcHJpb3JpdHkgZHVyaW5nIHBsYWNlbWVudC4gV2hlbiBgaWNvbi1hbGxvdy1vdmVybGFwYCBvciBgdGV4dC1hbGxvdy1vdmVybGFwYCBpcyBzZXQgdG8gYHRydWVgLCBmZWF0dXJlcyB3aXRoIGEgaGlnaGVyIHNvcnQga2V5IHdpbGwgb3ZlcmxhcCBvdmVyIGZlYXR1cmVzIHdpdGggYSBsb3dlciBzb3J0IGtleS5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNTMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjcuNC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjExLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xNC4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjUzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI3LjQuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4xMS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJzeW1ib2wtei1vcmRlclwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRhdXRvOiB7XG5cdFx0XHRcdGRvYzogXCJTb3J0cyBzeW1ib2xzIGJ5IGBzeW1ib2wtc29ydC1rZXlgIGlmIHNldC4gT3RoZXJ3aXNlLCBzb3J0cyBzeW1ib2xzIGJ5IHRoZWlyIHktcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IGlmIGBpY29uLWFsbG93LW92ZXJsYXBgIG9yIGB0ZXh0LWFsbG93LW92ZXJsYXBgIGlzIHNldCB0byBgdHJ1ZWAgb3IgYGljb24taWdub3JlLXBsYWNlbWVudGAgb3IgYHRleHQtaWdub3JlLXBsYWNlbWVudGAgaXMgYGZhbHNlYC5cIlxuXHRcdFx0fSxcblx0XHRcdFwidmlld3BvcnQteVwiOiB7XG5cdFx0XHRcdGRvYzogXCJTb3J0cyBzeW1ib2xzIGJ5IHRoZWlyIHktcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0IGlmIGBpY29uLWFsbG93LW92ZXJsYXBgIG9yIGB0ZXh0LWFsbG93LW92ZXJsYXBgIGlzIHNldCB0byBgdHJ1ZWAgb3IgYGljb24taWdub3JlLXBsYWNlbWVudGAgb3IgYHRleHQtaWdub3JlLXBsYWNlbWVudGAgaXMgYGZhbHNlYC5cIlxuXHRcdFx0fSxcblx0XHRcdHNvdXJjZToge1xuXHRcdFx0XHRkb2M6IFwiU29ydHMgc3ltYm9scyBieSBgc3ltYm9sLXNvcnQta2V5YCBpZiBzZXQuIE90aGVyd2lzZSwgbm8gc29ydGluZyBpcyBhcHBsaWVkOyBzeW1ib2xzIGFyZSByZW5kZXJlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgc291cmNlIGRhdGEuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcImF1dG9cIixcblx0XHRkb2M6IFwiRGV0ZXJtaW5lcyB3aGV0aGVyIG92ZXJsYXBwaW5nIHN5bWJvbHMgaW4gdGhlIHNhbWUgbGF5ZXIgYXJlIHJlbmRlcmVkIGluIHRoZSBvcmRlciB0aGF0IHRoZXkgYXBwZWFyIGluIHRoZSBkYXRhIHNvdXJjZSBvciBieSB0aGVpciB5LXBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydC4gVG8gY29udHJvbCB0aGUgb3JkZXIgYW5kIHByaW9yaXRpemF0aW9uIG9mIHN5bWJvbHMgb3RoZXJ3aXNlLCB1c2UgYHN5bWJvbC1zb3J0LWtleWAuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjQ5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjYuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xMi4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJpY29uLWFsbG93LW92ZXJsYXBcIjoge1xuXHRcdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRcdFwiZGVmYXVsdFwiOiBmYWxzZSxcblx0XHRkb2M6IFwiSWYgdHJ1ZSwgdGhlIGljb24gd2lsbCBiZSB2aXNpYmxlIGV2ZW4gaWYgaXQgY29sbGlkZXMgd2l0aCBvdGhlciBwcmV2aW91c2x5IGRyYXduIHN5bWJvbHMuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwiaWNvbi1pbWFnZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaWNvbi1pZ25vcmUtcGxhY2VtZW50XCI6IHtcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0XHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdFx0ZG9jOiBcIklmIHRydWUsIG90aGVyIHN5bWJvbHMgY2FuIGJlIHZpc2libGUgZXZlbiBpZiB0aGV5IGNvbGxpZGUgd2l0aCB0aGUgaWNvbi5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJpY29uLW9wdGlvbmFsXCI6IHtcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0XHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdFx0ZG9jOiBcIklmIHRydWUsIHRleHQgd2lsbCBkaXNwbGF5IHdpdGhvdXQgdGhlaXIgY29ycmVzcG9uZGluZyBpY29ucyB3aGVuIHRoZSBpY29uIGNvbGxpZGVzIHdpdGggb3RoZXIgc3ltYm9scyBhbmQgdGhlIHRleHQgZG9lcyBub3QuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwiaWNvbi1pbWFnZVwiLFxuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJpY29uLXJvdGF0aW9uLWFsaWdubWVudFwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRtYXA6IHtcblx0XHRcdFx0ZG9jOiBcIldoZW4gYHN5bWJvbC1wbGFjZW1lbnRgIGlzIHNldCB0byBgcG9pbnRgLCBhbGlnbnMgaWNvbnMgZWFzdC13ZXN0LiBXaGVuIGBzeW1ib2wtcGxhY2VtZW50YCBpcyBzZXQgdG8gYGxpbmVgIG9yIGBsaW5lLWNlbnRlcmAsIGFsaWducyBpY29uIHgtYXhlcyB3aXRoIHRoZSBsaW5lLlwiXG5cdFx0XHR9LFxuXHRcdFx0dmlld3BvcnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlByb2R1Y2VzIGljb25zIHdob3NlIHgtYXhlcyBhcmUgYWxpZ25lZCB3aXRoIHRoZSB4LWF4aXMgb2YgdGhlIHZpZXdwb3J0LCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgc3ltYm9sLXBsYWNlbWVudGAuXCJcblx0XHRcdH0sXG5cdFx0XHRhdXRvOiB7XG5cdFx0XHRcdGRvYzogXCJXaGVuIGBzeW1ib2wtcGxhY2VtZW50YCBpcyBzZXQgdG8gYHBvaW50YCwgdGhpcyBpcyBlcXVpdmFsZW50IHRvIGB2aWV3cG9ydGAuIFdoZW4gYHN5bWJvbC1wbGFjZW1lbnRgIGlzIHNldCB0byBgbGluZWAgb3IgYGxpbmUtY2VudGVyYCwgdGhpcyBpcyBlcXVpdmFsZW50IHRvIGBtYXBgLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJhdXRvXCIsXG5cdFx0ZG9jOiBcIkluIGNvbWJpbmF0aW9uIHdpdGggYHN5bWJvbC1wbGFjZW1lbnRgLCBkZXRlcm1pbmVzIHRoZSByb3RhdGlvbiBiZWhhdmlvciBvZiBpY29ucy5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImBhdXRvYCB2YWx1ZVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjUuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjQuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjQuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjMuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaWNvbi1zaXplXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dW5pdHM6IFwiZmFjdG9yIG9mIHRoZSBvcmlnaW5hbCBpY29uIHNpemVcIixcblx0XHRkb2M6IFwiU2NhbGVzIHRoZSBvcmlnaW5hbCBzaXplIG9mIHRoZSBpY29uIGJ5IHRoZSBwcm92aWRlZCBmYWN0b3IuIFRoZSBuZXcgcGl4ZWwgc2l6ZSBvZiB0aGUgaW1hZ2Ugd2lsbCBiZSB0aGUgb3JpZ2luYWwgcGl4ZWwgc2l6ZSBtdWx0aXBsaWVkIGJ5IGBpY29uLXNpemVgLiAxIGlzIHRoZSBvcmlnaW5hbCBzaXplOyAzIHRyaXBsZXMgdGhlIHNpemUgb2YgdGhlIGltYWdlLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImljb24taW1hZ2VcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzUuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjYuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjUuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImljb24tdGV4dC1maXRcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bm9uZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGljb24gaXMgZGlzcGxheWVkIGF0IGl0cyBpbnRyaW5zaWMgYXNwZWN0IHJhdGlvLlwiXG5cdFx0XHR9LFxuXHRcdFx0d2lkdGg6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBpY29uIGlzIHNjYWxlZCBpbiB0aGUgeC1kaW1lbnNpb24gdG8gZml0IHRoZSB3aWR0aCBvZiB0aGUgdGV4dC5cIlxuXHRcdFx0fSxcblx0XHRcdGhlaWdodDoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGljb24gaXMgc2NhbGVkIGluIHRoZSB5LWRpbWVuc2lvbiB0byBmaXQgdGhlIGhlaWdodCBvZiB0aGUgdGV4dC5cIlxuXHRcdFx0fSxcblx0XHRcdGJvdGg6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBpY29uIGlzIHNjYWxlZCBpbiBib3RoIHgtIGFuZCB5LWRpbWVuc2lvbnMuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcIm5vbmVcIixcblx0XHRkb2M6IFwiU2NhbGVzIHRoZSBpY29uIHRvIGZpdCBhcm91bmQgdGhlIGFzc29jaWF0ZWQgdGV4dC5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCIsXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjIxLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI0LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy40LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4yLjFcIlxuXHRcdFx0fSxcblx0XHRcdFwic3RyZXRjaGFibGUgaWNvbnNcIjoge1xuXHRcdFx0XHRqczogXCIxLjYuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjkuMi4wXCIsXG5cdFx0XHRcdGlvczogXCI1LjguMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjE1LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcImljb24tdGV4dC1maXQtcGFkZGluZ1wiOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdGxlbmd0aDogNCxcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0MCxcblx0XHRcdDAsXG5cdFx0XHQwLFxuXHRcdFx0MFxuXHRcdF0sXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0ZG9jOiBcIlNpemUgb2YgdGhlIGFkZGl0aW9uYWwgYXJlYSBhZGRlZCB0byBkaW1lbnNpb25zIGRldGVybWluZWQgYnkgYGljb24tdGV4dC1maXRgLCBpbiBjbG9ja3dpc2Ugb3JkZXI6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdC5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCIsXG5cdFx0XHRcInRleHQtZmllbGRcIixcblx0XHRcdHtcblx0XHRcdFx0XCJpY29uLXRleHQtZml0XCI6IFtcblx0XHRcdFx0XHRcImJvdGhcIixcblx0XHRcdFx0XHRcIndpZHRoXCIsXG5cdFx0XHRcdFx0XCJoZWlnaHRcIlxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjEuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjQuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjQuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjIuMVwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJpY29uLWltYWdlXCI6IHtcblx0XHR0eXBlOiBcInJlc29sdmVkSW1hZ2VcIixcblx0XHRkb2M6IFwiTmFtZSBvZiBpbWFnZSBpbiBzcHJpdGUgdG8gdXNlIGZvciBkcmF3aW5nIGFuIGltYWdlIGJhY2tncm91bmQuXCIsXG5cdFx0dG9rZW5zOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjM1LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy42LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC41LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaWNvbi1yb3RhdGVcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0cGVyaW9kOiAzNjAsXG5cdFx0dW5pdHM6IFwiZGVncmVlc1wiLFxuXHRcdGRvYzogXCJSb3RhdGVzIHRoZSBpY29uIGNsb2Nrd2lzZS5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjIxLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJpY29uLXBhZGRpbmdcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDIsXG5cdFx0bWluaW11bTogMCxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiU2l6ZSBvZiB0aGUgYWRkaXRpb25hbCBhcmVhIGFyb3VuZCB0aGUgaWNvbiBib3VuZGluZyBib3ggdXNlZCBmb3IgZGV0ZWN0aW5nIHN5bWJvbCBjb2xsaXNpb25zLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImljb24taW1hZ2VcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaWNvbi1rZWVwLXVwcmlnaHRcIjoge1xuXHRcdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRcdFwiZGVmYXVsdFwiOiBmYWxzZSxcblx0XHRkb2M6IFwiSWYgdHJ1ZSwgdGhlIGljb24gbWF5IGJlIGZsaXBwZWQgdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIHJlbmRlcmVkIHVwc2lkZS1kb3duLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImljb24taW1hZ2VcIixcblx0XHRcdHtcblx0XHRcdFx0XCJpY29uLXJvdGF0aW9uLWFsaWdubWVudFwiOiBcIm1hcFwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInN5bWJvbC1wbGFjZW1lbnRcIjogW1xuXHRcdFx0XHRcdFwibGluZVwiLFxuXHRcdFx0XHRcdFwibGluZS1jZW50ZXJcIlxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaWNvbi1vZmZzZXRcIjoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRsZW5ndGg6IDIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdDAsXG5cdFx0XHQwXG5cdFx0XSxcblx0XHRkb2M6IFwiT2Zmc2V0IGRpc3RhbmNlIG9mIGljb24gZnJvbSBpdHMgYW5jaG9yLiBQb3NpdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgcmlnaHQgYW5kIGRvd24sIHdoaWxlIG5lZ2F0aXZlIHZhbHVlcyBpbmRpY2F0ZSBsZWZ0IGFuZCB1cC4gRWFjaCBjb21wb25lbnQgaXMgbXVsdGlwbGllZCBieSB0aGUgdmFsdWUgb2YgYGljb24tc2l6ZWAgdG8gb2J0YWluIHRoZSBmaW5hbCBvZmZzZXQgaW4gcGl4ZWxzLiBXaGVuIGNvbWJpbmVkIHdpdGggYGljb24tcm90YXRlYCB0aGUgb2Zmc2V0IHdpbGwgYmUgYXMgaWYgdGhlIHJvdGF0ZWQgZGlyZWN0aW9uIHdhcyB1cC5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjI5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJpY29uLWFuY2hvclwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRjZW50ZXI6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBjZW50ZXIgb2YgdGhlIGljb24gaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsZWZ0IHNpZGUgb2YgdGhlIGljb24gaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgcmlnaHQgc2lkZSBvZiB0aGUgaWNvbiBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0dG9wOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdG9wIG9mIHRoZSBpY29uIGlzIHBsYWNlZCBjbG9zZXN0IHRvIHRoZSBhbmNob3IuXCJcblx0XHRcdH0sXG5cdFx0XHRib3R0b206IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBib3R0b20gb2YgdGhlIGljb24gaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdFwidG9wLWxlZnRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgaWNvbiBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0XCJ0b3AtcmlnaHRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIGljb24gaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdFwiYm90dG9tLWxlZnRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgaWNvbiBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0XCJib3R0b20tcmlnaHRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJvdHRvbSByaWdodCBjb3JuZXIgb2YgdGhlIGljb24gaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwiY2VudGVyXCIsXG5cdFx0ZG9jOiBcIlBhcnQgb2YgdGhlIGljb24gcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC40MC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4yLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNy4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNi4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjQwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy43LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC42LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaWNvbi1waXRjaC1hbGlnbm1lbnRcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgaWNvbiBpcyBhbGlnbmVkIHRvIHRoZSBwbGFuZSBvZiB0aGUgbWFwLlwiXG5cdFx0XHR9LFxuXHRcdFx0dmlld3BvcnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBpY29uIGlzIGFsaWduZWQgdG8gdGhlIHBsYW5lIG9mIHRoZSB2aWV3cG9ydC5cIlxuXHRcdFx0fSxcblx0XHRcdGF1dG86IHtcblx0XHRcdFx0ZG9jOiBcIkF1dG9tYXRpY2FsbHkgbWF0Y2hlcyB0aGUgdmFsdWUgb2YgYGljb24tcm90YXRpb24tYWxpZ25tZW50YC5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwiYXV0b1wiLFxuXHRcdGRvYzogXCJPcmllbnRhdGlvbiBvZiBpY29uIHdoZW4gbWFwIGlzIHBpdGNoZWQuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwiaWNvbi1pbWFnZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjcuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjYuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwidGV4dC1waXRjaC1hbGlnbm1lbnRcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSBwbGFuZSBvZiB0aGUgbWFwLlwiXG5cdFx0XHR9LFxuXHRcdFx0dmlld3BvcnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSB0ZXh0IGlzIGFsaWduZWQgdG8gdGhlIHBsYW5lIG9mIHRoZSB2aWV3cG9ydC5cIlxuXHRcdFx0fSxcblx0XHRcdGF1dG86IHtcblx0XHRcdFx0ZG9jOiBcIkF1dG9tYXRpY2FsbHkgbWF0Y2hlcyB0aGUgdmFsdWUgb2YgYHRleHQtcm90YXRpb24tYWxpZ25tZW50YC5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwiYXV0b1wiLFxuXHRcdGRvYzogXCJPcmllbnRhdGlvbiBvZiB0ZXh0IHdoZW4gbWFwIGlzIHBpdGNoZWQuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjEuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjQuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjQuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjIuMVwiXG5cdFx0XHR9LFxuXHRcdFx0XCJgYXV0b2AgdmFsdWVcIjoge1xuXHRcdFx0XHRqczogXCIwLjI1LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI0LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy40LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4zLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInRleHQtcm90YXRpb24tYWxpZ25tZW50XCI6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdG1hcDoge1xuXHRcdFx0XHRkb2M6IFwiV2hlbiBgc3ltYm9sLXBsYWNlbWVudGAgaXMgc2V0IHRvIGBwb2ludGAsIGFsaWducyB0ZXh0IGVhc3Qtd2VzdC4gV2hlbiBgc3ltYm9sLXBsYWNlbWVudGAgaXMgc2V0IHRvIGBsaW5lYCBvciBgbGluZS1jZW50ZXJgLCBhbGlnbnMgdGV4dCB4LWF4ZXMgd2l0aCB0aGUgbGluZS5cIlxuXHRcdFx0fSxcblx0XHRcdHZpZXdwb3J0OiB7XG5cdFx0XHRcdGRvYzogXCJQcm9kdWNlcyBnbHlwaHMgd2hvc2UgeC1heGVzIGFyZSBhbGlnbmVkIHdpdGggdGhlIHgtYXhpcyBvZiB0aGUgdmlld3BvcnQsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBzeW1ib2wtcGxhY2VtZW50YC5cIlxuXHRcdFx0fSxcblx0XHRcdGF1dG86IHtcblx0XHRcdFx0ZG9jOiBcIldoZW4gYHN5bWJvbC1wbGFjZW1lbnRgIGlzIHNldCB0byBgcG9pbnRgLCB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gYHZpZXdwb3J0YC4gV2hlbiBgc3ltYm9sLXBsYWNlbWVudGAgaXMgc2V0IHRvIGBsaW5lYCBvciBgbGluZS1jZW50ZXJgLCB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gYG1hcGAuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcImF1dG9cIixcblx0XHRkb2M6IFwiSW4gY29tYmluYXRpb24gd2l0aCBgc3ltYm9sLXBsYWNlbWVudGAsIGRldGVybWluZXMgdGhlIHJvdGF0aW9uIGJlaGF2aW9yIG9mIHRoZSBpbmRpdmlkdWFsIGdseXBocyBmb3JtaW5nIHRoZSB0ZXh0LlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiYGF1dG9gIHZhbHVlXCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNC4yLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMy4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJ0ZXh0LWZpZWxkXCI6IHtcblx0XHR0eXBlOiBcImZvcm1hdHRlZFwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIlwiLFxuXHRcdHRva2VuczogdHJ1ZSxcblx0XHRkb2M6IFwiVmFsdWUgdG8gdXNlIGZvciBhIHRleHQgbGFiZWwuIElmIGEgcGxhaW4gYHN0cmluZ2AgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIGBmb3JtYXR0ZWRgIHdpdGggZGVmYXVsdC9pbmhlcml0ZWQgZm9ybWF0dGluZyBvcHRpb25zLiBTREYgaW1hZ2VzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGZvcm1hdHRlZCB0ZXh0IGFuZCB3aWxsIGJlIGlnbm9yZWQuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJ0ZXh0LWZvbnRcIjoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJzdHJpbmdcIixcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0XCJPcGVuIFNhbnMgUmVndWxhclwiLFxuXHRcdFx0XCJBcmlhbCBVbmljb2RlIE1TIFJlZ3VsYXJcIlxuXHRcdF0sXG5cdFx0ZG9jOiBcIkZvbnQgc3RhY2sgdG8gdXNlIGZvciBkaXNwbGF5aW5nIHRleHQuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC40My4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcInRleHQtc2l6ZVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMTYsXG5cdFx0bWluaW11bTogMCxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiRm9udCBzaXplLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzUuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjYuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjUuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcInRleHQtbWF4LXdpZHRoXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxMCxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdHVuaXRzOiBcImVtc1wiLFxuXHRcdGRvYzogXCJUaGUgbWF4aW11bSBsaW5lIHdpZHRoIGZvciB0ZXh0IHdyYXBwaW5nLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIixcblx0XHRcdHtcblx0XHRcdFx0XCJzeW1ib2wtcGxhY2VtZW50XCI6IFtcblx0XHRcdFx0XHRcInBvaW50XCJcblx0XHRcdFx0XVxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjcuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjYuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcInRleHQtbGluZS1oZWlnaHRcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEuMixcblx0XHR1bml0czogXCJlbXNcIixcblx0XHRkb2M6IFwiVGV4dCBsZWFkaW5nIHZhbHVlIGZvciBtdWx0aS1saW5lIHRleHQuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMi4zLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJ0ZXh0LWxldHRlci1zcGFjaW5nXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdHVuaXRzOiBcImVtc1wiLFxuXHRcdGRvYzogXCJUZXh0IHRyYWNraW5nIGFtb3VudC5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjQwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy43LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC42LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJ0ZXh0LWp1c3RpZnlcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0YXV0bzoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRleHQgaXMgYWxpZ25lZCB0b3dhcmRzIHRoZSBhbmNob3IgcG9zaXRpb24uXCJcblx0XHRcdH0sXG5cdFx0XHRsZWZ0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSBsZWZ0LlwiXG5cdFx0XHR9LFxuXHRcdFx0Y2VudGVyOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdGV4dCBpcyBjZW50ZXJlZC5cIlxuXHRcdFx0fSxcblx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSByaWdodC5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwiY2VudGVyXCIsXG5cdFx0ZG9jOiBcIlRleHQganVzdGlmaWNhdGlvbiBvcHRpb25zLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjcuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjYuMFwiXG5cdFx0XHR9LFxuXHRcdFx0YXV0bzoge1xuXHRcdFx0XHRqczogXCIwLjU0LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI3LjQuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4xMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJ0ZXh0LXJhZGlhbC1vZmZzZXRcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0dW5pdHM6IFwiZW1zXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0ZG9jOiBcIlJhZGlhbCBvZmZzZXQgb2YgdGV4dCwgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgc3ltYm9sJ3MgYW5jaG9yLiBVc2VmdWwgaW4gY29tYmluYXRpb24gd2l0aCBgdGV4dC12YXJpYWJsZS1hbmNob3JgLCB3aGljaCBkZWZhdWx0cyB0byB1c2luZyB0aGUgdHdvLWRpbWVuc2lvbmFsIGB0ZXh0LW9mZnNldGAgaWYgcHJlc2VudC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNTQuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjcuNC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjEwLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xNC4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjU0LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI3LjQuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4xMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCIsXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCJcblx0XHRcdF1cblx0XHR9XG5cdH0sXG5cdFwidGV4dC12YXJpYWJsZS1hbmNob3JcIjoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRjZW50ZXI6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBjZW50ZXIgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsZWZ0IHNpZGUgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgcmlnaHQgc2lkZSBvZiB0aGUgdGV4dCBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0dG9wOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdG9wIG9mIHRoZSB0ZXh0IGlzIHBsYWNlZCBjbG9zZXN0IHRvIHRoZSBhbmNob3IuXCJcblx0XHRcdH0sXG5cdFx0XHRib3R0b206IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBib3R0b20gb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdFwidG9wLWxlZnRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgdGV4dCBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0XCJ0b3AtcmlnaHRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdFwiYm90dG9tLWxlZnRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgdGV4dCBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0XCJib3R0b20tcmlnaHRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJvdHRvbSByaWdodCBjb3JuZXIgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiLFxuXHRcdFx0e1xuXHRcdFx0XHRcInN5bWJvbC1wbGFjZW1lbnRcIjogW1xuXHRcdFx0XHRcdFwicG9pbnRcIlxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRkb2M6IFwiVG8gaW5jcmVhc2UgdGhlIGNoYW5jZSBvZiBwbGFjaW5nIGhpZ2gtcHJpb3JpdHkgbGFiZWxzIG9uIHRoZSBtYXAsIHlvdSBjYW4gcHJvdmlkZSBhbiBhcnJheSBvZiBgdGV4dC1hbmNob3JgIGxvY2F0aW9uczogdGhlIHJlbmRlcmVyIHdpbGwgYXR0ZW1wdCB0byBwbGFjZSB0aGUgbGFiZWwgYXQgZWFjaCBsb2NhdGlvbiwgaW4gb3JkZXIsIGJlZm9yZSBtb3Zpbmcgb250byB0aGUgbmV4dCBsYWJlbC4gVXNlIGB0ZXh0LWp1c3RpZnk6IGF1dG9gIHRvIGNob29zZSBqdXN0aWZpY2F0aW9uIGJhc2VkIG9uIGFuY2hvciBwb3NpdGlvbi4gVG8gYXBwbHkgYW4gb2Zmc2V0LCB1c2UgdGhlIGB0ZXh0LXJhZGlhbC1vZmZzZXRgIG9yIHRoZSB0d28tZGltZW5zaW9uYWwgYHRleHQtb2Zmc2V0YC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNTQuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjcuNC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjEwLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJ0ZXh0LWFuY2hvclwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRjZW50ZXI6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBjZW50ZXIgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdGxlZnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsZWZ0IHNpZGUgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdHJpZ2h0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgcmlnaHQgc2lkZSBvZiB0aGUgdGV4dCBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0dG9wOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdG9wIG9mIHRoZSB0ZXh0IGlzIHBsYWNlZCBjbG9zZXN0IHRvIHRoZSBhbmNob3IuXCJcblx0XHRcdH0sXG5cdFx0XHRib3R0b206IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBib3R0b20gb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdFwidG9wLWxlZnRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgdGV4dCBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0XCJ0b3AtcmlnaHRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fSxcblx0XHRcdFwiYm90dG9tLWxlZnRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgdGV4dCBpcyBwbGFjZWQgY2xvc2VzdCB0byB0aGUgYW5jaG9yLlwiXG5cdFx0XHR9LFxuXHRcdFx0XCJib3R0b20tcmlnaHRcIjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGJvdHRvbSByaWdodCBjb3JuZXIgb2YgdGhlIHRleHQgaXMgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwiY2VudGVyXCIsXG5cdFx0ZG9jOiBcIlBhcnQgb2YgdGhlIHRleHQgcGxhY2VkIGNsb3Nlc3QgdG8gdGhlIGFuY2hvci5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCIsXG5cdFx0XHR7XG5cdFx0XHRcdFwiIVwiOiBcInRleHQtdmFyaWFibGUtYW5jaG9yXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjM5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy43LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC42LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC1tYXgtYW5nbGVcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDQ1LFxuXHRcdHVuaXRzOiBcImRlZ3JlZXNcIixcblx0XHRkb2M6IFwiTWF4aW11bSBhbmdsZSBjaGFuZ2UgYmV0d2VlbiBhZGphY2VudCBjaGFyYWN0ZXJzLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIixcblx0XHRcdHtcblx0XHRcdFx0XCJzeW1ib2wtcGxhY2VtZW50XCI6IFtcblx0XHRcdFx0XHRcImxpbmVcIixcblx0XHRcdFx0XHRcImxpbmUtY2VudGVyXCJcblx0XHRcdFx0XVxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwidGV4dC13cml0aW5nLW1vZGVcIjoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRob3Jpem9udGFsOiB7XG5cdFx0XHRcdGRvYzogXCJJZiBhIHRleHQncyBsYW5ndWFnZSBzdXBwb3J0cyBob3Jpem9udGFsIHdyaXRpbmcgbW9kZSwgc3ltYm9scyB3b3VsZCBiZSBsYWlkIG91dCBob3Jpem9udGFsbHkuXCJcblx0XHRcdH0sXG5cdFx0XHR2ZXJ0aWNhbDoge1xuXHRcdFx0XHRkb2M6IFwiSWYgYSB0ZXh0J3MgbGFuZ3VhZ2Ugc3VwcG9ydHMgdmVydGljYWwgd3JpdGluZyBtb2RlLCBzeW1ib2xzIHdvdWxkIGJlIGxhaWQgb3V0IHZlcnRpY2FsbHkuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgcHJvcGVydHkgYWxsb3dzIGNvbnRyb2wgb3ZlciBhIHN5bWJvbCdzIG9yaWVudGF0aW9uLiBOb3RlIHRoYXQgdGhlIHByb3BlcnR5IHZhbHVlcyBhY3QgYXMgYSBoaW50LCBzbyB0aGF0IGEgc3ltYm9sIHdob3NlIGxhbmd1YWdlIGRvZXNu4oCZdCBzdXBwb3J0IHRoZSBwcm92aWRlZCBvcmllbnRhdGlvbiB3aWxsIGJlIGxhaWQgb3V0IGluIGl0cyBuYXR1cmFsIG9yaWVudGF0aW9uLiBFeGFtcGxlOiBFbmdsaXNoIHBvaW50IHN5bWJvbCB3aWxsIGJlIHJlbmRlcmVkIGhvcml6b250YWxseSBldmVuIGlmIGFycmF5IHZhbHVlIGNvbnRhaW5zIHNpbmdsZSAndmVydGljYWwnIGVudW0gdmFsdWUuIEZvciBzeW1ib2wgd2l0aCBwb2ludCBwbGFjZW1lbnQsIHRoZSBvcmRlciBvZiBlbGVtZW50cyBpbiBhbiBhcnJheSBkZWZpbmUgcHJpb3JpdHkgb3JkZXIgZm9yIHRoZSBwbGFjZW1lbnQgb2YgYW4gb3JpZW50YXRpb24gdmFyaWFudC4gRm9yIHN5bWJvbCB3aXRoIGxpbmUgcGxhY2VtZW50LCB0aGUgZGVmYXVsdCB0ZXh0IHdyaXRpbmcgbW9kZSBpcyBlaXRoZXIgWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10gb3IgWyd2ZXJ0aWNhbCcsICdob3Jpem9udGFsJ10sIHRoZSBvcmRlciBkb2Vzbid0IGFmZmVjdCB0aGUgcGxhY2VtZW50LlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIxLjMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjguMy4wXCIsXG5cdFx0XHRcdGlvczogXCI1LjMuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjE1LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInRleHQtcm90YXRlXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdHBlcmlvZDogMzYwLFxuXHRcdHVuaXRzOiBcImRlZ3JlZXNcIixcblx0XHRkb2M6IFwiUm90YXRlcyB0aGUgdGV4dCBjbG9ja3dpc2UuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4zNS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC1wYWRkaW5nXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAyLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0ZG9jOiBcIlNpemUgb2YgdGhlIGFkZGl0aW9uYWwgYXJlYSBhcm91bmQgdGhlIHRleHQgYm91bmRpbmcgYm94IHVzZWQgZm9yIGRldGVjdGluZyBzeW1ib2wgY29sbGlzaW9ucy5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInRleHQta2VlcC11cHJpZ2h0XCI6IHtcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0XHRcImRlZmF1bHRcIjogdHJ1ZSxcblx0XHRkb2M6IFwiSWYgdHJ1ZSwgdGhlIHRleHQgbWF5IGJlIGZsaXBwZWQgdmVydGljYWxseSB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgcmVuZGVyZWQgdXBzaWRlLWRvd24uXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiLFxuXHRcdFx0e1xuXHRcdFx0XHRcInRleHQtcm90YXRpb24tYWxpZ25tZW50XCI6IFwibWFwXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwic3ltYm9sLXBsYWNlbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJsaW5lXCIsXG5cdFx0XHRcdFx0XCJsaW5lLWNlbnRlclwiXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJ0ZXh0LXRyYW5zZm9ybVwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRub25lOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdGV4dCBpcyBub3QgYWx0ZXJlZC5cIlxuXHRcdFx0fSxcblx0XHRcdHVwcGVyY2FzZToge1xuXHRcdFx0XHRkb2M6IFwiRm9yY2VzIGFsbCBsZXR0ZXJzIHRvIGJlIGRpc3BsYXllZCBpbiB1cHBlcmNhc2UuXCJcblx0XHRcdH0sXG5cdFx0XHRsb3dlcmNhc2U6IHtcblx0XHRcdFx0ZG9jOiBcIkZvcmNlcyBhbGwgbGV0dGVycyB0byBiZSBkaXNwbGF5ZWQgaW4gbG93ZXJjYXNlLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJub25lXCIsXG5cdFx0ZG9jOiBcIlNwZWNpZmllcyBob3cgdG8gY2FwaXRhbGl6ZSB0ZXh0LCBzaW1pbGFyIHRvIHRoZSBDU1MgYHRleHQtdHJhbnNmb3JtYCBwcm9wZXJ0eS5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC1vZmZzZXRcIjoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHRkb2M6IFwiT2Zmc2V0IGRpc3RhbmNlIG9mIHRleHQgZnJvbSBpdHMgYW5jaG9yLiBQb3NpdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgcmlnaHQgYW5kIGRvd24sIHdoaWxlIG5lZ2F0aXZlIHZhbHVlcyBpbmRpY2F0ZSBsZWZ0IGFuZCB1cC4gSWYgdXNlZCB3aXRoIHRleHQtdmFyaWFibGUtYW5jaG9yLCBpbnB1dCB2YWx1ZXMgd2lsbCBiZSB0YWtlbiBhcyBhYnNvbHV0ZSB2YWx1ZXMuIE9mZnNldHMgYWxvbmcgdGhlIHgtIGFuZCB5LWF4aXMgd2lsbCBiZSBhcHBsaWVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gdGhlIGFuY2hvciBwb3NpdGlvbi5cIixcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHR1bml0czogXCJlbXNcIixcblx0XHRsZW5ndGg6IDIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdDAsXG5cdFx0XHQwXG5cdFx0XSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCIsXG5cdFx0XHR7XG5cdFx0XHRcdFwiIVwiOiBcInRleHQtcmFkaWFsLW9mZnNldFwiXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4zNS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC1hbGxvdy1vdmVybGFwXCI6IHtcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0XHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdFx0ZG9jOiBcIklmIHRydWUsIHRoZSB0ZXh0IHdpbGwgYmUgdmlzaWJsZSBldmVuIGlmIGl0IGNvbGxpZGVzIHdpdGggb3RoZXIgcHJldmlvdXNseSBkcmF3biBzeW1ib2xzLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInRleHQtaWdub3JlLXBsYWNlbWVudFwiOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHRcdGRvYzogXCJJZiB0cnVlLCBvdGhlciBzeW1ib2xzIGNhbiBiZSB2aXNpYmxlIGV2ZW4gaWYgdGhleSBjb2xsaWRlIHdpdGggdGhlIHRleHQuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwidGV4dC1vcHRpb25hbFwiOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHRcdGRvYzogXCJJZiB0cnVlLCBpY29ucyB3aWxsIGRpc3BsYXkgd2l0aG91dCB0aGVpciBjb3JyZXNwb25kaW5nIHRleHQgd2hlbiB0aGUgdGV4dCBjb2xsaWRlcyB3aXRoIG90aGVyIHN5bWJvbHMgYW5kIHRoZSBpY29uIGRvZXMgbm90LlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIixcblx0XHRcdFwiaWNvbi1pbWFnZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdHZpc2liaWxpdHk6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdHZpc2libGU6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYXllciBpcyBzaG93bi5cIlxuXHRcdFx0fSxcblx0XHRcdG5vbmU6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBsYXllciBpcyBub3Qgc2hvd24uXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcInZpc2libGVcIixcblx0XHRkb2M6IFwiV2hldGhlciB0aGlzIGxheWVyIGlzIGRpc3BsYXllZC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJjb25zdGFudFwiXG5cdH1cbn07XG52YXIgbGF5b3V0X3Jhc3RlciA9IHtcblx0dmlzaWJpbGl0eToge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0dmlzaWJsZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIHNob3duLlwiXG5cdFx0XHR9LFxuXHRcdFx0bm9uZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIG5vdCBzaG93bi5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwidmlzaWJsZVwiLFxuXHRcdGRvYzogXCJXaGV0aGVyIHRoaXMgbGF5ZXIgaXMgZGlzcGxheWVkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbnN0YW50XCJcblx0fVxufTtcbnZhciBsYXlvdXRfaGlsbHNoYWRlID0ge1xuXHR2aXNpYmlsaXR5OiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHR2aXNpYmxlOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgbGF5ZXIgaXMgc2hvd24uXCJcblx0XHRcdH0sXG5cdFx0XHRub25lOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgbGF5ZXIgaXMgbm90IHNob3duLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJ2aXNpYmxlXCIsXG5cdFx0ZG9jOiBcIldoZXRoZXIgdGhpcyBsYXllciBpcyBkaXNwbGF5ZWQuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjQzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiY29uc3RhbnRcIlxuXHR9XG59O1xudmFyIGZpbHRlciA9IHtcblx0dHlwZTogXCJhcnJheVwiLFxuXHR2YWx1ZTogXCIqXCIsXG5cdGRvYzogXCJBIGZpbHRlciBzZWxlY3RzIHNwZWNpZmljIGZlYXR1cmVzIGZyb20gYSBsYXllci5cIlxufTtcbnZhciBmaWx0ZXJfc3ltYm9sID0ge1xuXHR0eXBlOiBcImJvb2xlYW5cIixcblx0ZG9jOiBcIkV4cHJlc3Npb24gd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBkaXNwbGF5IGEgc3ltYm9sLiBTeW1ib2xzIHN1cHBvcnQgZHluYW1pYyBmaWx0ZXJpbmcsIG1lYW5pbmcgdGhpcyBleHByZXNzaW9uIGNhbiB1c2UgdGhlIGBbXFxcInBpdGNoXFxcIl1gIGFuZCBgW1xcXCJkaXN0YW5jZS1mcm9tLWNlbnRlclxcXCJdYCBleHByZXNzaW9ucyB0byByZWZlcmVuY2UgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHZpZXcuXCIsXG5cdFwiZGVmYXVsdFwiOiBmYWxzZSxcblx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCIsXG5cdGV4cHJlc3Npb246IHtcblx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcInBpdGNoXCIsXG5cdFx0XHRcImRpc3RhbmNlLWZyb20tY2VudGVyXCJcblx0XHRdXG5cdH1cbn07XG52YXIgZmlsdGVyX2ZpbGwgPSB7XG5cdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRkb2M6IFwiRXhwcmVzc2lvbiB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGRpc3BsYXkgYSBwb2x5Z29uLiBGaWxsIGxheWVyIGRvZXMgTk9UIHN1cHBvcnQgZHluYW1pYyBmaWx0ZXJpbmcsIG1lYW5pbmcgdGhpcyBleHByZXNzaW9uIGNhbiBOT1QgdXNlIHRoZSBgW1xcXCJwaXRjaFxcXCJdYCBhbmQgYFtcXFwiZGlzdGFuY2UtZnJvbS1jZW50ZXJcXFwiXWAgZXhwcmVzc2lvbnMgdG8gcmVmZXJlbmNlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB2aWV3LlwiLFxuXHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiLFxuXHRleHByZXNzaW9uOiB7XG5cdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcInpvb21cIixcblx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XVxuXHR9XG59O1xudmFyIGZpbHRlcl9saW5lID0ge1xuXHR0eXBlOiBcImJvb2xlYW5cIixcblx0ZG9jOiBcIkV4cHJlc3Npb24gd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBkaXNwbGF5IGEgUG9seWdvbiBvciBMaW5lU3RyaW5nLiBMaW5lIGxheWVyIGRvZXMgTk9UIHN1cHBvcnQgZHluYW1pYyBmaWx0ZXJpbmcsIG1lYW5pbmcgdGhpcyBleHByZXNzaW9uIGNhbiBOT1QgdXNlIHRoZSBgW1xcXCJwaXRjaFxcXCJdYCBhbmQgYFtcXFwiZGlzdGFuY2UtZnJvbS1jZW50ZXJcXFwiXWAgZXhwcmVzc2lvbnMgdG8gcmVmZXJlbmNlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB2aWV3LlwiLFxuXHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiLFxuXHRleHByZXNzaW9uOiB7XG5cdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcInpvb21cIixcblx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XVxuXHR9XG59O1xudmFyIGZpbHRlcl9jaXJjbGUgPSB7XG5cdHR5cGU6IFwiYm9vbGVhblwiLFxuXHRkb2M6IFwiRXhwcmVzc2lvbiB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGRpc3BsYXkgYSBjaXJjbGUuIENpcmNsZSBsYXllciBkb2VzIE5PVCBzdXBwb3J0IGR5bmFtaWMgZmlsdGVyaW5nLCBtZWFuaW5nIHRoaXMgZXhwcmVzc2lvbiBjYW4gTk9UIHVzZSB0aGUgYFtcXFwicGl0Y2hcXFwiXWAgYW5kIGBbXFxcImRpc3RhbmNlLWZyb20tY2VudGVyXFxcIl1gIGV4cHJlc3Npb25zIHRvIHJlZmVyZW5jZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgdmlldy5cIixcblx0XCJkZWZhdWx0XCI6IGZhbHNlLFxuXHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIixcblx0ZXhwcmVzc2lvbjoge1xuXHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcImZlYXR1cmVcIlxuXHRcdF1cblx0fVxufTtcbnZhciBmaWx0ZXJfaGVhdG1hcCA9IHtcblx0dHlwZTogXCJib29sZWFuXCIsXG5cdGRvYzogXCJFeHByZXNzaW9uIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBwb2ludCBpcyBiZWluZyBkaXNwbGF5ZWQgb3Igbm90LiBIZWF0bWFwIGxheWVyIGRvZXMgTk9UIHN1cHBvcnQgZHluYW1pYyBmaWx0ZXJpbmcsIG1lYW5pbmcgdGhpcyBleHByZXNzaW9uIGNhbiBOT1QgdXNlIHRoZSBgW1xcXCJwaXRjaFxcXCJdYCBhbmQgYFtcXFwiZGlzdGFuY2UtZnJvbS1jZW50ZXJcXFwiXWAgZXhwcmVzc2lvbnMgdG8gcmVmZXJlbmNlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB2aWV3LlwiLFxuXHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiLFxuXHRleHByZXNzaW9uOiB7XG5cdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcInpvb21cIixcblx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XVxuXHR9XG59O1xudmFyIGZpbHRlcl9vcGVyYXRvciA9IHtcblx0dHlwZTogXCJlbnVtXCIsXG5cdHZhbHVlczoge1xuXHRcdFwiPT1cIjoge1xuXHRcdFx0ZG9jOiBcImBbXFxcIj09XFxcIiwga2V5LCB2YWx1ZV1gIGVxdWFsaXR5OiBgZmVhdHVyZVtrZXldID0gdmFsdWVgXCJcblx0XHR9LFxuXHRcdFwiIT1cIjoge1xuXHRcdFx0ZG9jOiBcImBbXFxcIiE9XFxcIiwga2V5LCB2YWx1ZV1gIGluZXF1YWxpdHk6IGBmZWF0dXJlW2tleV0g4omgIHZhbHVlYFwiXG5cdFx0fSxcblx0XHRcIj5cIjoge1xuXHRcdFx0ZG9jOiBcImBbXFxcIj5cXFwiLCBrZXksIHZhbHVlXWAgZ3JlYXRlciB0aGFuOiBgZmVhdHVyZVtrZXldID4gdmFsdWVgXCJcblx0XHR9LFxuXHRcdFwiPj1cIjoge1xuXHRcdFx0ZG9jOiBcImBbXFxcIj49XFxcIiwga2V5LCB2YWx1ZV1gIGdyZWF0ZXIgdGhhbiBvciBlcXVhbDogYGZlYXR1cmVba2V5XSDiiaUgdmFsdWVgXCJcblx0XHR9LFxuXHRcdFwiPFwiOiB7XG5cdFx0XHRkb2M6IFwiYFtcXFwiPFxcXCIsIGtleSwgdmFsdWVdYCBsZXNzIHRoYW46IGBmZWF0dXJlW2tleV0gPCB2YWx1ZWBcIlxuXHRcdH0sXG5cdFx0XCI8PVwiOiB7XG5cdFx0XHRkb2M6IFwiYFtcXFwiPD1cXFwiLCBrZXksIHZhbHVlXWAgbGVzcyB0aGFuIG9yIGVxdWFsOiBgZmVhdHVyZVtrZXldIOKJpCB2YWx1ZWBcIlxuXHRcdH0sXG5cdFx0XCJpblwiOiB7XG5cdFx0XHRkb2M6IFwiYFtcXFwiaW5cXFwiLCBrZXksIHYwLCAuLi4sIHZuXWAgc2V0IGluY2x1c2lvbjogYGZlYXR1cmVba2V5XSDiiIgge3YwLCAuLi4sIHZufWBcIlxuXHRcdH0sXG5cdFx0XCIhaW5cIjoge1xuXHRcdFx0ZG9jOiBcImBbXFxcIiFpblxcXCIsIGtleSwgdjAsIC4uLiwgdm5dYCBzZXQgZXhjbHVzaW9uOiBgZmVhdHVyZVtrZXldIOKIiSB7djAsIC4uLiwgdm59YFwiXG5cdFx0fSxcblx0XHRhbGw6IHtcblx0XHRcdGRvYzogXCJgW1xcXCJhbGxcXFwiLCBmMCwgLi4uLCBmbl1gIGxvZ2ljYWwgYEFORGA6IGBmMCDiiKcgLi4uIOKIpyBmbmBcIlxuXHRcdH0sXG5cdFx0YW55OiB7XG5cdFx0XHRkb2M6IFwiYFtcXFwiYW55XFxcIiwgZjAsIC4uLiwgZm5dYCBsb2dpY2FsIGBPUmA6IGBmMCDiiKggLi4uIOKIqCBmbmBcIlxuXHRcdH0sXG5cdFx0bm9uZToge1xuXHRcdFx0ZG9jOiBcImBbXFxcIm5vbmVcXFwiLCBmMCwgLi4uLCBmbl1gIGxvZ2ljYWwgYE5PUmA6IGDCrGYwIOKIpyAuLi4g4oinIMKsZm5gXCJcblx0XHR9LFxuXHRcdGhhczoge1xuXHRcdFx0ZG9jOiBcImBbXFxcImhhc1xcXCIsIGtleV1gIGBmZWF0dXJlW2tleV1gIGV4aXN0c1wiXG5cdFx0fSxcblx0XHRcIiFoYXNcIjoge1xuXHRcdFx0ZG9jOiBcImBbXFxcIiFoYXNcXFwiLCBrZXldYCBgZmVhdHVyZVtrZXldYCBkb2VzIG5vdCBleGlzdFwiXG5cdFx0fSxcblx0XHR3aXRoaW46IHtcblx0XHRcdGRvYzogXCJgW1xcXCJ3aXRoaW5cXFwiLCBvYmplY3RdYCBmZWF0dXJlIGdlb21ldHJ5IGlzIHdpdGhpbiBvYmplY3QgZ2VvbWV0cnlcIlxuXHRcdH1cblx0fSxcblx0ZG9jOiBcIlRoZSBmaWx0ZXIgb3BlcmF0b3IuXCJcbn07XG52YXIgZ2VvbWV0cnlfdHlwZSA9IHtcblx0dHlwZTogXCJlbnVtXCIsXG5cdHZhbHVlczoge1xuXHRcdFBvaW50OiB7XG5cdFx0XHRkb2M6IFwiRmlsdGVyIHRvIHBvaW50IGdlb21ldHJpZXMuXCJcblx0XHR9LFxuXHRcdExpbmVTdHJpbmc6IHtcblx0XHRcdGRvYzogXCJGaWx0ZXIgdG8gbGluZSBnZW9tZXRyaWVzLlwiXG5cdFx0fSxcblx0XHRQb2x5Z29uOiB7XG5cdFx0XHRkb2M6IFwiRmlsdGVyIHRvIHBvbHlnb24gZ2VvbWV0cmllcy5cIlxuXHRcdH1cblx0fSxcblx0ZG9jOiBcIlRoZSBnZW9tZXRyeSB0eXBlIGZvciB0aGUgZmlsdGVyIHRvIHNlbGVjdC5cIlxufTtcbnZhciBmdW5jdGlvbl9zdG9wID0ge1xuXHR0eXBlOiBcImFycmF5XCIsXG5cdG1pbmltdW06IDAsXG5cdG1heGltdW06IDI0LFxuXHR2YWx1ZTogW1xuXHRcdFwibnVtYmVyXCIsXG5cdFx0XCJjb2xvclwiXG5cdF0sXG5cdGxlbmd0aDogMixcblx0ZG9jOiBcIlpvb20gbGV2ZWwgYW5kIHZhbHVlIHBhaXIuXCJcbn07XG52YXIgZXhwcmVzc2lvbiQxID0ge1xuXHR0eXBlOiBcImFycmF5XCIsXG5cdHZhbHVlOiBcIipcIixcblx0bWluaW11bTogMSxcblx0ZG9jOiBcIkFuIGV4cHJlc3Npb24gZGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgZm9yIGRhdGEtZHJpdmVuIHN0eWxlIHByb3BlcnRpZXMgb3IgZmVhdHVyZSBmaWx0ZXJzLlwiXG59O1xudmFyIGV4cHJlc3Npb25fbmFtZSA9IHtcblx0ZG9jOiBcIlwiLFxuXHR0eXBlOiBcImVudW1cIixcblx0dmFsdWVzOiB7XG5cdFx0XCJsZXRcIjoge1xuXHRcdFx0ZG9jOiBcIkJpbmRzIGV4cHJlc3Npb25zIHRvIG5hbWVkIHZhcmlhYmxlcywgd2hpY2ggY2FuIHRoZW4gYmUgcmVmZXJlbmNlZCBpbiB0aGUgcmVzdWx0IGV4cHJlc3Npb24gdXNpbmcgW1xcXCJ2YXJcXFwiLCBcXFwidmFyaWFibGVfbmFtZVxcXCJdLlwiLFxuXHRcdFx0Z3JvdXA6IFwiVmFyaWFibGUgYmluZGluZ1wiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJ2YXJcIjoge1xuXHRcdFx0ZG9jOiBcIlJlZmVyZW5jZXMgdmFyaWFibGUgYm91bmQgdXNpbmcgXFxcImxldFxcXCIuXCIsXG5cdFx0XHRncm91cDogXCJWYXJpYWJsZSBiaW5kaW5nXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRsaXRlcmFsOiB7XG5cdFx0XHRkb2M6IFwiUHJvdmlkZXMgYSBsaXRlcmFsIGFycmF5IG9yIG9iamVjdCB2YWx1ZS5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcnJheToge1xuXHRcdFx0ZG9jOiBcIkFzc2VydHMgdGhhdCB0aGUgaW5wdXQgaXMgYW4gYXJyYXkgKG9wdGlvbmFsbHkgd2l0aCBhIHNwZWNpZmljIGl0ZW0gdHlwZSBhbmQgbGVuZ3RoKS4gIElmLCB3aGVuIHRoZSBpbnB1dCBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCwgaXQgaXMgbm90IG9mIHRoZSBhc3NlcnRlZCB0eXBlLCB0aGVuIHRoaXMgYXNzZXJ0aW9uIHdpbGwgY2F1c2UgdGhlIHdob2xlIGV4cHJlc3Npb24gdG8gYmUgYWJvcnRlZC5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhdDoge1xuXHRcdFx0ZG9jOiBcIlJldHJpZXZlcyBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXCIsXG5cdFx0XHRncm91cDogXCJMb29rdXBcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiaW5cIjoge1xuXHRcdFx0ZG9jOiBcIkRldGVybWluZXMgd2hldGhlciBhbiBpdGVtIGV4aXN0cyBpbiBhbiBhcnJheSBvciBhIHN1YnN0cmluZyBleGlzdHMgaW4gYSBzdHJpbmcuIEluIHRoZSBzcGVjaWZpYyBjYXNlIHdoZW4gdGhlIHNlY29uZCBhbmQgdGhpcmQgYXJndW1lbnRzIGFyZSBzdHJpbmcgbGl0ZXJhbHMsIHlvdSBtdXN0IHdyYXAgYXQgbGVhc3Qgb25lIG9mIHRoZW0gaW4gYSBbYGxpdGVyYWxgXSgjdHlwZXMtbGl0ZXJhbCkgZXhwcmVzc2lvbiB0byBoaW50IGNvcnJlY3QgaW50ZXJwcmV0YXRpb24gdG8gdGhlIFt0eXBlIHN5c3RlbV0oI3R5cGUtc3lzdGVtKS5cIixcblx0XHRcdGdyb3VwOiBcIkxvb2t1cFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMS42LjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjkuMS4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjUuOC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC4xNS4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJpbmRleC1vZlwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgZmlyc3QgcG9zaXRpb24gYXQgd2hpY2ggYW4gaXRlbSBjYW4gYmUgZm91bmQgaW4gYW4gYXJyYXkgb3IgYSBzdWJzdHJpbmcgY2FuIGJlIGZvdW5kIGluIGEgc3RyaW5nLCBvciBgLTFgIGlmIHRoZSBpbnB1dCBjYW5ub3QgYmUgZm91bmQuIEFjY2VwdHMgYW4gb3B0aW9uYWwgaW5kZXggZnJvbSB3aGVyZSB0byBiZWdpbiB0aGUgc2VhcmNoLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTG9va3VwXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIxLjEwLjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzbGljZToge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYW4gaXRlbSBmcm9tIGFuIGFycmF5IG9yIGEgc3Vic3RyaW5nIGZyb20gYSBzdHJpbmcgZnJvbSBhIHNwZWNpZmllZCBzdGFydCBpbmRleCwgb3IgYmV0d2VlbiBhIHN0YXJ0IGluZGV4IGFuZCBhbiBlbmQgaW5kZXggaWYgc2V0LiBUaGUgcmV0dXJuIHZhbHVlIGlzIGluY2x1c2l2ZSBvZiB0aGUgc3RhcnQgaW5kZXggYnV0IG5vdCBvZiB0aGUgZW5kIGluZGV4LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTG9va3VwXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIxLjEwLjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImNhc2VcIjoge1xuXHRcdFx0ZG9jOiBcIlNlbGVjdHMgdGhlIGZpcnN0IG91dHB1dCB3aG9zZSBjb3JyZXNwb25kaW5nIHRlc3QgY29uZGl0aW9uIGV2YWx1YXRlcyB0byB0cnVlLCBvciB0aGUgZmFsbGJhY2sgdmFsdWUgb3RoZXJ3aXNlLlwiLFxuXHRcdFx0Z3JvdXA6IFwiRGVjaXNpb25cIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdG1hdGNoOiB7XG5cdFx0XHRkb2M6IFwiU2VsZWN0cyB0aGUgb3V0cHV0IGZvciB3aGljaCB0aGUgbGFiZWwgdmFsdWUgbWF0Y2hlcyB0aGUgaW5wdXQgdmFsdWUsIG9yIHRoZSBmYWxsYmFjayB2YWx1ZSBpZiBubyBtYXRjaCBpcyBmb3VuZC4gVGhlIGlucHV0IGNhbiBiZSBhbnkgZXhwcmVzc2lvbiAoZm9yIGV4YW1wbGUsIGBbXFxcImdldFxcXCIsIFxcXCJidWlsZGluZ190eXBlXFxcIl1gKS4gRWFjaCBsYWJlbCBtdXN0IGJlIHVuaXF1ZSwgYW5kIG11c3QgYmUgZWl0aGVyOlxcbiAtIGEgc2luZ2xlIGxpdGVyYWwgdmFsdWU7IG9yXFxuIC0gYW4gYXJyYXkgb2YgbGl0ZXJhbCB2YWx1ZXMsIHRoZSB2YWx1ZXMgb2Ygd2hpY2ggbXVzdCBiZSBhbGwgc3RyaW5ncyBvciBhbGwgbnVtYmVycyAoZm9yIGV4YW1wbGUgYFsxMDAsIDEwMV1gIG9yIGBbXFxcImNcXFwiLCBcXFwiYlxcXCJdYCkuXFxuXFxuVGhlIGlucHV0IG1hdGNoZXMgaWYgYW55IG9mIHRoZSB2YWx1ZXMgaW4gdGhlIGFycmF5IG1hdGNoZXMgdXNpbmcgc3RyaWN0IGVxdWFsaXR5LCBzaW1pbGFyIHRvIHRoZSBgXFxcImluXFxcImAgb3BlcmF0b3IuXFxuSWYgdGhlIGlucHV0IHR5cGUgZG9lcyBub3QgbWF0Y2ggdGhlIHR5cGUgb2YgdGhlIGxhYmVscywgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBmYWxsYmFjayB2YWx1ZS5cIixcblx0XHRcdGdyb3VwOiBcIkRlY2lzaW9uXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjb2FsZXNjZToge1xuXHRcdFx0ZG9jOiBcIkV2YWx1YXRlcyBlYWNoIGV4cHJlc3Npb24gaW4gdHVybiB1bnRpbCB0aGUgZmlyc3QgdmFsaWQgdmFsdWUgaXMgb2J0YWluZWQuIEludmFsaWQgdmFsdWVzIGFyZSBgbnVsbGAgYW5kIFtgJ2ltYWdlJ2BdKCN0eXBlcy1pbWFnZSkgZXhwcmVzc2lvbnMgdGhhdCBhcmUgdW5hdmFpbGFibGUgaW4gdGhlIHN0eWxlLiBJZiBhbGwgdmFsdWVzIGFyZSBpbnZhbGlkLCBgY29hbGVzY2VgIHJldHVybnMgdGhlIGZpcnN0IHZhbHVlIGxpc3RlZC5cIixcblx0XHRcdGdyb3VwOiBcIkRlY2lzaW9uXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzdGVwOiB7XG5cdFx0XHRkb2M6IFwiUHJvZHVjZXMgZGlzY3JldGUsIHN0ZXBwZWQgcmVzdWx0cyBieSBldmFsdWF0aW5nIGEgcGllY2V3aXNlLWNvbnN0YW50IGZ1bmN0aW9uIGRlZmluZWQgYnkgcGFpcnMgb2YgaW5wdXQgYW5kIG91dHB1dCB2YWx1ZXMgKFxcXCJzdG9wc1xcXCIpLiBUaGUgYGlucHV0YCBtYXkgYmUgYW55IG51bWVyaWMgZXhwcmVzc2lvbiAoZS5nLiwgYFtcXFwiZ2V0XFxcIiwgXFxcInBvcHVsYXRpb25cXFwiXWApLiBTdG9wIGlucHV0cyBtdXN0IGJlIG51bWVyaWMgbGl0ZXJhbHMgaW4gc3RyaWN0bHkgYXNjZW5kaW5nIG9yZGVyLiBSZXR1cm5zIHRoZSBvdXRwdXQgdmFsdWUgb2YgdGhlIHN0b3AganVzdCBsZXNzIHRoYW4gdGhlIGlucHV0LCBvciB0aGUgZmlyc3Qgb3V0cHV0IGlmIHRoZSBpbnB1dCBpcyBsZXNzIHRoYW4gdGhlIGZpcnN0IHN0b3AuXCIsXG5cdFx0XHRncm91cDogXCJSYW1wcywgc2NhbGVzLCBjdXJ2ZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDIuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGludGVycG9sYXRlOiB7XG5cdFx0XHRkb2M6IFwiUHJvZHVjZXMgY29udGludW91cywgc21vb3RoIHJlc3VsdHMgYnkgaW50ZXJwb2xhdGluZyBiZXR3ZWVuIHBhaXJzIG9mIGlucHV0IGFuZCBvdXRwdXQgdmFsdWVzIChcXFwic3RvcHNcXFwiKS4gVGhlIGBpbnB1dGAgbWF5IGJlIGFueSBudW1lcmljIGV4cHJlc3Npb24gKGUuZy4sIGBbXFxcImdldFxcXCIsIFxcXCJwb3B1bGF0aW9uXFxcIl1gKS4gU3RvcCBpbnB1dHMgbXVzdCBiZSBudW1lcmljIGxpdGVyYWxzIGluIHN0cmljdGx5IGFzY2VuZGluZyBvcmRlci4gVGhlIG91dHB1dCB0eXBlIG11c3QgYmUgYG51bWJlcmAsIGBhcnJheTxudW1iZXI+YCwgb3IgYGNvbG9yYC5cXG5cXG5JbnRlcnBvbGF0aW9uIHR5cGVzOlxcbi0gYFtcXFwibGluZWFyXFxcIl1gOiBJbnRlcnBvbGF0ZXMgbGluZWFybHkgYmV0d2VlbiB0aGUgcGFpciBvZiBzdG9wcyBqdXN0IGxlc3MgdGhhbiBhbmQganVzdCBncmVhdGVyIHRoYW4gdGhlIGlucHV0Llxcbi0gYFtcXFwiZXhwb25lbnRpYWxcXFwiLCBiYXNlXWA6IEludGVycG9sYXRlcyBleHBvbmVudGlhbGx5IGJldHdlZW4gdGhlIHN0b3BzIGp1c3QgbGVzcyB0aGFuIGFuZCBqdXN0IGdyZWF0ZXIgdGhhbiB0aGUgaW5wdXQuIGBiYXNlYCBjb250cm9scyB0aGUgcmF0ZSBhdCB3aGljaCB0aGUgb3V0cHV0IGluY3JlYXNlczogaGlnaGVyIHZhbHVlcyBtYWtlIHRoZSBvdXRwdXQgaW5jcmVhc2UgbW9yZSB0b3dhcmRzIHRoZSBoaWdoIGVuZCBvZiB0aGUgcmFuZ2UuIFdpdGggdmFsdWVzIGNsb3NlIHRvIDEgdGhlIG91dHB1dCBpbmNyZWFzZXMgbGluZWFybHkuXFxuLSBgW1xcXCJjdWJpYy1iZXppZXJcXFwiLCB4MSwgeTEsIHgyLCB5Ml1gOiBJbnRlcnBvbGF0ZXMgdXNpbmcgdGhlIGN1YmljIGJlemllciBjdXJ2ZSBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBjb250cm9sIHBvaW50cy5cIixcblx0XHRcdGdyb3VwOiBcIlJhbXBzLCBzY2FsZXMsIGN1cnZlc1wiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40Mi4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJpbnRlcnBvbGF0ZS1oY2xcIjoge1xuXHRcdFx0ZG9jOiBcIlByb2R1Y2VzIGNvbnRpbnVvdXMsIHNtb290aCByZXN1bHRzIGJ5IGludGVycG9sYXRpbmcgYmV0d2VlbiBwYWlycyBvZiBpbnB1dCBhbmQgb3V0cHV0IHZhbHVlcyAoXFxcInN0b3BzXFxcIikuIFdvcmtzIGxpa2UgYGludGVycG9sYXRlYCwgYnV0IHRoZSBvdXRwdXQgdHlwZSBtdXN0IGJlIGBjb2xvcmAsIGFuZCB0aGUgaW50ZXJwb2xhdGlvbiBpcyBwZXJmb3JtZWQgaW4gdGhlIEh1ZS1DaHJvbWEtTHVtaW5hbmNlIGNvbG9yIHNwYWNlLlwiLFxuXHRcdFx0Z3JvdXA6IFwiUmFtcHMsIHNjYWxlcywgY3VydmVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQ5LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImludGVycG9sYXRlLWxhYlwiOiB7XG5cdFx0XHRkb2M6IFwiUHJvZHVjZXMgY29udGludW91cywgc21vb3RoIHJlc3VsdHMgYnkgaW50ZXJwb2xhdGluZyBiZXR3ZWVuIHBhaXJzIG9mIGlucHV0IGFuZCBvdXRwdXQgdmFsdWVzIChcXFwic3RvcHNcXFwiKS4gV29ya3MgbGlrZSBgaW50ZXJwb2xhdGVgLCBidXQgdGhlIG91dHB1dCB0eXBlIG11c3QgYmUgYGNvbG9yYCwgYW5kIHRoZSBpbnRlcnBvbGF0aW9uIGlzIHBlcmZvcm1lZCBpbiB0aGUgQ0lFTEFCIGNvbG9yIHNwYWNlLlwiLFxuXHRcdFx0Z3JvdXA6IFwiUmFtcHMsIHNjYWxlcywgY3VydmVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQ5LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRsbjI6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIG1hdGhlbWF0aWNhbCBjb25zdGFudCBsbigyKS5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHBpOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgbWF0aGVtYXRpY2FsIGNvbnN0YW50IHBpLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZToge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIG1hdGhlbWF0aWNhbCBjb25zdGFudCBlLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJ0eXBlb2ZcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgdHlwZSBvZiB0aGUgZ2l2ZW4gdmFsdWUuXCIsXG5cdFx0XHRncm91cDogXCJUeXBlc1wiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c3RyaW5nOiB7XG5cdFx0XHRkb2M6IFwiQXNzZXJ0cyB0aGF0IHRoZSBpbnB1dCB2YWx1ZSBpcyBhIHN0cmluZy4gSWYgbXVsdGlwbGUgdmFsdWVzIGFyZSBwcm92aWRlZCwgZWFjaCBvbmUgaXMgZXZhbHVhdGVkIGluIG9yZGVyIHVudGlsIGEgc3RyaW5nIGlzIG9idGFpbmVkLiBJZiBub25lIG9mIHRoZSBpbnB1dHMgYXJlIHN0cmluZ3MsIHRoZSBleHByZXNzaW9uIGlzIGFuIGVycm9yLlwiLFxuXHRcdFx0Z3JvdXA6IFwiVHlwZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdG51bWJlcjoge1xuXHRcdFx0ZG9jOiBcIkFzc2VydHMgdGhhdCB0aGUgaW5wdXQgdmFsdWUgaXMgYSBudW1iZXIuIElmIG11bHRpcGxlIHZhbHVlcyBhcmUgcHJvdmlkZWQsIGVhY2ggb25lIGlzIGV2YWx1YXRlZCBpbiBvcmRlciB1bnRpbCBhIG51bWJlciBpcyBvYnRhaW5lZC4gSWYgbm9uZSBvZiB0aGUgaW5wdXRzIGFyZSBudW1iZXJzLCB0aGUgZXhwcmVzc2lvbiBpcyBhbiBlcnJvci5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRib29sZWFuOiB7XG5cdFx0XHRkb2M6IFwiQXNzZXJ0cyB0aGF0IHRoZSBpbnB1dCB2YWx1ZSBpcyBhIGJvb2xlYW4uIElmIG11bHRpcGxlIHZhbHVlcyBhcmUgcHJvdmlkZWQsIGVhY2ggb25lIGlzIGV2YWx1YXRlZCBpbiBvcmRlciB1bnRpbCBhIGJvb2xlYW4gaXMgb2J0YWluZWQuIElmIG5vbmUgb2YgdGhlIGlucHV0cyBhcmUgYm9vbGVhbnMsIHRoZSBleHByZXNzaW9uIGlzIGFuIGVycm9yLlwiLFxuXHRcdFx0Z3JvdXA6IFwiVHlwZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdG9iamVjdDoge1xuXHRcdFx0ZG9jOiBcIkFzc2VydHMgdGhhdCB0aGUgaW5wdXQgdmFsdWUgaXMgYW4gb2JqZWN0LiBJZiBtdWx0aXBsZSB2YWx1ZXMgYXJlIHByb3ZpZGVkLCBlYWNoIG9uZSBpcyBldmFsdWF0ZWQgaW4gb3JkZXIgdW50aWwgYW4gb2JqZWN0IGlzIG9idGFpbmVkLiBJZiBub25lIG9mIHRoZSBpbnB1dHMgYXJlIG9iamVjdHMsIHRoZSBleHByZXNzaW9uIGlzIGFuIGVycm9yLlwiLFxuXHRcdFx0Z3JvdXA6IFwiVHlwZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvbGxhdG9yOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBhIGBjb2xsYXRvcmAgZm9yIHVzZSBpbiBsb2NhbGUtZGVwZW5kZW50IGNvbXBhcmlzb24gb3BlcmF0aW9ucy4gVGhlIGBjYXNlLXNlbnNpdGl2ZWAgYW5kIGBkaWFjcml0aWMtc2Vuc2l0aXZlYCBvcHRpb25zIGRlZmF1bHQgdG8gYGZhbHNlYC4gVGhlIGBsb2NhbGVgIGFyZ3VtZW50IHNwZWNpZmllcyB0aGUgSUVURiBsYW5ndWFnZSB0YWcgb2YgdGhlIGxvY2FsZSB0byB1c2UuIElmIG5vbmUgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGxvY2FsZSBpcyB1c2VkLiBJZiB0aGUgcmVxdWVzdGVkIGxvY2FsZSBpcyBub3QgYXZhaWxhYmxlLCB0aGUgYGNvbGxhdG9yYCB3aWxsIHVzZSBhIHN5c3RlbS1kZWZpbmVkIGZhbGxiYWNrIGxvY2FsZS4gVXNlIGByZXNvbHZlZC1sb2NhbGVgIHRvIHRlc3QgdGhlIHJlc3VsdHMgb2YgbG9jYWxlIGZhbGxiYWNrIGJlaGF2aW9yLlwiLFxuXHRcdFx0Z3JvdXA6IFwiVHlwZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDUuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi41LjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4yLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjkuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGZvcm1hdDoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYSBgZm9ybWF0dGVkYCBzdHJpbmcgZm9yIGRpc3BsYXlpbmcgbWl4ZWQtZm9ybWF0IHRleHQgaW4gdGhlIGB0ZXh0LWZpZWxkYCBwcm9wZXJ0eS4gVGhlIGlucHV0IG1heSBjb250YWluIGEgc3RyaW5nIGxpdGVyYWwgb3IgZXhwcmVzc2lvbiwgaW5jbHVkaW5nIGFuIFtgJ2ltYWdlJ2BdKCN0eXBlcy1pbWFnZSkgZXhwcmVzc2lvbi4gU3RyaW5ncyBtYXkgYmUgZm9sbG93ZWQgYnkgYSBzdHlsZSBvdmVycmlkZSBvYmplY3QgdGhhdCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XFxuLSBgXFxcInRleHQtZm9udFxcXCJgOiBPdmVycmlkZXMgdGhlIGZvbnQgc3RhY2sgc3BlY2lmaWVkIGJ5IHRoZSByb290IGxheW91dCBwcm9wZXJ0eS5cXG4tIGBcXFwidGV4dC1jb2xvclxcXCJgOiBPdmVycmlkZXMgdGhlIGNvbG9yIHNwZWNpZmllZCBieSB0aGUgcm9vdCBwYWludCBwcm9wZXJ0eS5cXG4tIGBcXFwiZm9udC1zY2FsZVxcXCJgOiBBcHBsaWVzIGEgc2NhbGluZyBmYWN0b3Igb24gYHRleHQtc2l6ZWAgYXMgc3BlY2lmaWVkIGJ5IHRoZSByb290IGxheW91dCBwcm9wZXJ0eS5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQ4LjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuNy4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuNi4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC4xMi4wXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0ZXh0LWZvbnRcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDguMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi43LjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC42LjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjEyLjBcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImZvbnQtc2NhbGVcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDguMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi43LjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC42LjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjEyLjBcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRleHQtY29sb3JcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjEuMy4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI3LjMuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjEwLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjE0LjBcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpbWFnZToge1xuXHRcdFx0XHRcdGpzOiBcIjEuNi4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI4LjYuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI1LjcuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuMTUuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGltYWdlOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBhIFtgUmVzb2x2ZWRJbWFnZWBdKC9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy90eXBlcy8jcmVzb2x2ZWRpbWFnZSkgZm9yIHVzZSBpbiBbYGljb24taW1hZ2VgXSgvbWFwYm94LWdsLWpzL3N0eWxlLXNwZWMvbGF5ZXJzLyNsYXlvdXQtc3ltYm9sLWljb24taW1hZ2UpLCBgKi1wYXR0ZXJuYCBlbnRyaWVzLCBhbmQgYXMgYSBzZWN0aW9uIGluIHRoZSBbYCdmb3JtYXQnYF0oI3R5cGVzLWZvcm1hdCkgZXhwcmVzc2lvbi4gQSBbYCdjb2FsZXNjZSdgXSgjY29hbGVzY2UpIGV4cHJlc3Npb24gY29udGFpbmluZyBgaW1hZ2VgIGV4cHJlc3Npb25zIHdpbGwgZXZhbHVhdGUgdG8gdGhlIGZpcnN0IGxpc3RlZCBpbWFnZSB0aGF0IGlzIGN1cnJlbnRseSBpbiB0aGUgc3R5bGUuIFRoaXMgdmFsaWRhdGlvbiBwcm9jZXNzIGlzIHN5bmNocm9ub3VzIGFuZCByZXF1aXJlcyB0aGUgaW1hZ2UgdG8gaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBzdHlsZSBiZWZvcmUgcmVxdWVzdGluZyBpdCBpbiB0aGUgYCdpbWFnZSdgIGFyZ3VtZW50LlwiLFxuXHRcdFx0Z3JvdXA6IFwiVHlwZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjEuNC4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI4LjYuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI1LjcuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuMTUuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibnVtYmVyLWZvcm1hdFwiOiB7XG5cdFx0XHRkb2M6IFwiQ29udmVydHMgdGhlIGlucHV0IG51bWJlciBpbnRvIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHVzaW5nIHRoZSBwcm92aWRpbmcgZm9ybWF0dGluZyBydWxlcy4gSWYgc2V0LCB0aGUgYGxvY2FsZWAgYXJndW1lbnQgc3BlY2lmaWVzIHRoZSBsb2NhbGUgdG8gdXNlLCBhcyBhIEJDUCA0NyBsYW5ndWFnZSB0YWcuIElmIHNldCwgdGhlIGBjdXJyZW5jeWAgYXJndW1lbnQgc3BlY2lmaWVzIGFuIElTTyA0MjE3IGNvZGUgdG8gdXNlIGZvciBjdXJyZW5jeS1zdHlsZSBmb3JtYXR0aW5nLiBJZiBzZXQsIHRoZSBgbWluLWZyYWN0aW9uLWRpZ2l0c2AgYW5kIGBtYXgtZnJhY3Rpb24tZGlnaXRzYCBhcmd1bWVudHMgc3BlY2lmeSB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb25hbCBkaWdpdHMgdG8gaW5jbHVkZS5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjU0LjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjguNC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjUuNC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC4xNS4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJ0by1zdHJpbmdcIjoge1xuXHRcdFx0ZG9jOiBcIkNvbnZlcnRzIHRoZSBpbnB1dCB2YWx1ZSB0byBhIHN0cmluZy4gSWYgdGhlIGlucHV0IGlzIGBudWxsYCwgdGhlIHJlc3VsdCBpcyBgXFxcIlxcXCJgLiBJZiB0aGUgaW5wdXQgaXMgYSBbYGJvb2xlYW5gXSgjdHlwZXMtYm9vbGVhbiksIHRoZSByZXN1bHQgaXMgYFxcXCJ0cnVlXFxcImAgb3IgYFxcXCJmYWxzZVxcXCJgLiBJZiB0aGUgaW5wdXQgaXMgYSBudW1iZXIsIGl0IGlzIGNvbnZlcnRlZCB0byBhIHN0cmluZyBhcyBzcGVjaWZpZWQgYnkgdGhlIFtcXFwiTnVtYmVyVG9TdHJpbmdcXFwiIGFsZ29yaXRobV0oaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9zdHJpbmctYXBwbGllZC10by10aGUtbnVtYmVyLXR5cGUpIG9mIHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIFNwZWNpZmljYXRpb24uIElmIHRoZSBpbnB1dCBpcyBhIFtgY29sb3JgXSgjY29sb3IpLCBpdCBpcyBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcgb2YgdGhlIGZvcm0gYFxcXCJyZ2JhKHIsZyxiLGEpXFxcImAsIHdoZXJlIGByYCwgYGdgLCBhbmQgYGJgIGFyZSBudW1lcmFscyByYW5naW5nIGZyb20gMCB0byAyNTUsIGFuZCBgYWAgcmFuZ2VzIGZyb20gMCB0byAxLiBJZiB0aGUgaW5wdXQgaXMgYW4gW2AnaW1hZ2UnYF0oI3R5cGVzLWltYWdlKSBleHByZXNzaW9uLCBgJ3RvLXN0cmluZydgIHJldHVybnMgdGhlIGltYWdlIG5hbWUuIE90aGVyd2lzZSwgdGhlIGlucHV0IGlzIGNvbnZlcnRlZCB0byBhIHN0cmluZyBpbiB0aGUgZm9ybWF0IHNwZWNpZmllZCBieSB0aGUgW2BKU09OLnN0cmluZ2lmeWBdKGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5KSBmdW5jdGlvbiBvZiB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBTcGVjaWZpY2F0aW9uLlwiLFxuXHRcdFx0Z3JvdXA6IFwiVHlwZXNcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwidG8tbnVtYmVyXCI6IHtcblx0XHRcdGRvYzogXCJDb252ZXJ0cyB0aGUgaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIsIGlmIHBvc3NpYmxlLiBJZiB0aGUgaW5wdXQgaXMgYG51bGxgIG9yIGBmYWxzZWAsIHRoZSByZXN1bHQgaXMgMC4gSWYgdGhlIGlucHV0IGlzIGB0cnVlYCwgdGhlIHJlc3VsdCBpcyAxLiBJZiB0aGUgaW5wdXQgaXMgYSBzdHJpbmcsIGl0IGlzIGNvbnZlcnRlZCB0byBhIG51bWJlciBhcyBzcGVjaWZpZWQgYnkgdGhlIFtcXFwiVG9OdW1iZXIgQXBwbGllZCB0byB0aGUgU3RyaW5nIFR5cGVcXFwiIGFsZ29yaXRobV0oaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9udW1iZXItYXBwbGllZC10by10aGUtc3RyaW5nLXR5cGUpIG9mIHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIFNwZWNpZmljYXRpb24uIElmIG11bHRpcGxlIHZhbHVlcyBhcmUgcHJvdmlkZWQsIGVhY2ggb25lIGlzIGV2YWx1YXRlZCBpbiBvcmRlciB1bnRpbCB0aGUgZmlyc3Qgc3VjY2Vzc2Z1bCBjb252ZXJzaW9uIGlzIG9idGFpbmVkLiBJZiBub25lIG9mIHRoZSBpbnB1dHMgY2FuIGJlIGNvbnZlcnRlZCwgdGhlIGV4cHJlc3Npb24gaXMgYW4gZXJyb3IuXCIsXG5cdFx0XHRncm91cDogXCJUeXBlc1wiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJ0by1ib29sZWFuXCI6IHtcblx0XHRcdGRvYzogXCJDb252ZXJ0cyB0aGUgaW5wdXQgdmFsdWUgdG8gYSBib29sZWFuLiBUaGUgcmVzdWx0IGlzIGBmYWxzZWAgd2hlbiB0aGVuIGlucHV0IGlzIGFuIGVtcHR5IHN0cmluZywgMCwgYGZhbHNlYCwgYG51bGxgLCBvciBgTmFOYDsgb3RoZXJ3aXNlIGl0IGlzIGB0cnVlYC5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInRvLXJnYmFcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYSBmb3VyLWVsZW1lbnQgYXJyYXkgY29udGFpbmluZyB0aGUgaW5wdXQgY29sb3IncyByZWQsIGdyZWVuLCBibHVlLCBhbmQgYWxwaGEgY29tcG9uZW50cywgaW4gdGhhdCBvcmRlci5cIixcblx0XHRcdGdyb3VwOiBcIkNvbG9yXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInRvLWNvbG9yXCI6IHtcblx0XHRcdGRvYzogXCJDb252ZXJ0cyB0aGUgaW5wdXQgdmFsdWUgdG8gYSBjb2xvci4gSWYgbXVsdGlwbGUgdmFsdWVzIGFyZSBwcm92aWRlZCwgZWFjaCBvbmUgaXMgZXZhbHVhdGVkIGluIG9yZGVyIHVudGlsIHRoZSBmaXJzdCBzdWNjZXNzZnVsIGNvbnZlcnNpb24gaXMgb2J0YWluZWQuIElmIG5vbmUgb2YgdGhlIGlucHV0cyBjYW4gYmUgY29udmVydGVkLCB0aGUgZXhwcmVzc2lvbiBpcyBhbiBlcnJvci5cIixcblx0XHRcdGdyb3VwOiBcIlR5cGVzXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZ2I6IHtcblx0XHRcdGRvYzogXCJDcmVhdGVzIGEgY29sb3IgdmFsdWUgZnJvbSByZWQsIGdyZWVuLCBhbmQgYmx1ZSBjb21wb25lbnRzLCB3aGljaCBtdXN0IHJhbmdlIGJldHdlZW4gMCBhbmQgMjU1LCBhbmQgYW4gYWxwaGEgY29tcG9uZW50IG9mIDEuIElmIGFueSBjb21wb25lbnQgaXMgb3V0IG9mIHJhbmdlLCB0aGUgZXhwcmVzc2lvbiBpcyBhbiBlcnJvci5cIixcblx0XHRcdGdyb3VwOiBcIkNvbG9yXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZ2JhOiB7XG5cdFx0XHRkb2M6IFwiQ3JlYXRlcyBhIGNvbG9yIHZhbHVlIGZyb20gcmVkLCBncmVlbiwgYmx1ZSBjb21wb25lbnRzLCB3aGljaCBtdXN0IHJhbmdlIGJldHdlZW4gMCBhbmQgMjU1LCBhbmQgYW4gYWxwaGEgY29tcG9uZW50IHdoaWNoIG11c3QgcmFuZ2UgYmV0d2VlbiAwIGFuZCAxLiBJZiBhbnkgY29tcG9uZW50IGlzIG91dCBvZiByYW5nZSwgdGhlIGV4cHJlc3Npb24gaXMgYW4gZXJyb3IuXCIsXG5cdFx0XHRncm91cDogXCJDb2xvclwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0OiB7XG5cdFx0XHRkb2M6IFwiUmV0cmlldmVzIGEgcHJvcGVydHkgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBmZWF0dXJlJ3MgcHJvcGVydGllcywgb3IgZnJvbSBhbm90aGVyIG9iamVjdCBpZiBhIHNlY29uZCBhcmd1bWVudCBpcyBwcm92aWRlZC4gUmV0dXJucyBgbnVsbGAgaWYgdGhlIHJlcXVlc3RlZCBwcm9wZXJ0eSBpcyBtaXNzaW5nLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTG9va3VwXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoYXM6IHtcblx0XHRcdGRvYzogXCJUZXN0cyBmb3IgdGhlIHByZXNlbmNlIG9mIGFuIHByb3BlcnR5IHZhbHVlIGluIHRoZSBjdXJyZW50IGZlYXR1cmUncyBwcm9wZXJ0aWVzLCBvciBmcm9tIGFub3RoZXIgb2JqZWN0IGlmIGEgc2Vjb25kIGFyZ3VtZW50IGlzIHByb3ZpZGVkLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTG9va3VwXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRsZW5ndGg6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBsZW5ndGggb2YgYW4gYXJyYXkgb3Igc3RyaW5nLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTG9va3VwXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRwcm9wZXJ0aWVzOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgZmVhdHVyZSBwcm9wZXJ0aWVzIG9iamVjdC4gIE5vdGUgdGhhdCBpbiBzb21lIGNhc2VzLCBpdCBtYXkgYmUgbW9yZSBlZmZpY2llbnQgdG8gdXNlIGBbXFxcImdldFxcXCIsIFxcXCJwcm9wZXJ0eV9uYW1lXFxcIl1gIGRpcmVjdGx5LlwiLFxuXHRcdFx0Z3JvdXA6IFwiRmVhdHVyZSBkYXRhXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImZlYXR1cmUtc3RhdGVcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHJpZXZlcyBhIHByb3BlcnR5IHZhbHVlIGZyb20gdGhlIGN1cnJlbnQgZmVhdHVyZSdzIHN0YXRlLiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgcmVxdWVzdGVkIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50IG9uIHRoZSBmZWF0dXJlJ3Mgc3RhdGUuIEEgZmVhdHVyZSdzIHN0YXRlIGlzIG5vdCBwYXJ0IG9mIHRoZSBHZW9KU09OIG9yIHZlY3RvciB0aWxlIGRhdGEsIGFuZCBtdXN0IGJlIHNldCBwcm9ncmFtbWF0aWNhbGx5IG9uIGVhY2ggZmVhdHVyZS4gRmVhdHVyZXMgYXJlIGlkZW50aWZpZWQgYnkgdGhlaXIgYGlkYCBhdHRyaWJ1dGUsIHdoaWNoIG11c3QgYmUgYW4gaW50ZWdlciBvciBhIHN0cmluZyB0aGF0IGNhbiBiZSBjYXN0IHRvIGFuIGludGVnZXIuIE5vdGUgdGhhdCBbXFxcImZlYXR1cmUtc3RhdGVcXFwiXSBjYW4gb25seSBiZSB1c2VkIHdpdGggcGFpbnQgcHJvcGVydGllcyB0aGF0IHN1cHBvcnQgZGF0YS1kcml2ZW4gc3R5bGluZy5cIixcblx0XHRcdGdyb3VwOiBcIkZlYXR1cmUgZGF0YVwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40Ni4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJnZW9tZXRyeS10eXBlXCI6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBmZWF0dXJlJ3MgZ2VvbWV0cnkgdHlwZTogYFBvaW50YCwgYE11bHRpUG9pbnRgLCBgTGluZVN0cmluZ2AsIGBNdWx0aUxpbmVTdHJpbmdgLCBgUG9seWdvbmAsIGBNdWx0aVBvbHlnb25gLiBgTXVsdGkqYCBmZWF0dXJlIHR5cGVzIGFyZSBvbmx5IHJldHVybmVkIGluIEdlb0pTT04gc291cmNlcy4gV2hlbiB3b3JraW5nIHdpdGggdmVjdG9yIHRpbGUgc291cmNlcywgdXNlIHRoZSBzaW5ndWxhciBmb3Jtcy5cIixcblx0XHRcdGdyb3VwOiBcIkZlYXR1cmUgZGF0YVwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aWQ6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBmZWF0dXJlJ3MgaWQsIGlmIGl0IGhhcyBvbmUuXCIsXG5cdFx0XHRncm91cDogXCJGZWF0dXJlIGRhdGFcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHpvb206IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBjdXJyZW50IHpvb20gbGV2ZWwuICBOb3RlIHRoYXQgaW4gc3R5bGUgbGF5b3V0IGFuZCBwYWludCBwcm9wZXJ0aWVzLCBbXFxcInpvb21cXFwiXSBtYXkgb25seSBhcHBlYXIgYXMgdGhlIGlucHV0IHRvIGEgdG9wLWxldmVsIFxcXCJzdGVwXFxcIiBvciBcXFwiaW50ZXJwb2xhdGVcXFwiIGV4cHJlc3Npb24uXCIsXG5cdFx0XHRncm91cDogXCJDYW1lcmFcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHBpdGNoOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgY3VycmVudCBwaXRjaCBpbiBkZWdyZWVzLiBgW1xcXCJwaXRjaFxcXCJdYCBtYXkgb25seSBiZSB1c2VkIGluIHRoZSBgZmlsdGVyYCBleHByZXNzaW9uIGZvciBhIGBzeW1ib2xgIGxheWVyLlwiLFxuXHRcdFx0Z3JvdXA6IFwiQ2FtZXJhXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIyLjYuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGlzdGFuY2UtZnJvbS1jZW50ZXJcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIGRpc3RhbmNlIG9mIGEgYHN5bWJvbGAgaW5zdGFuY2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBtYXAuIFRoZSBkaXN0YW5jZSBpcyBtZWFzdXJlZCBpbiBwaXhlbHMgZGl2aWRlZCBieSB0aGUgaGVpZ2h0IG9mIHRoZSBtYXAgY29udGFpbmVyLiBJdCBtZWFzdXJlcyAwIGF0IHRoZSBjZW50ZXIsIGRlY3JlYXNlcyB0b3dhcmRzIHRoZSBjYW1lcmEgYW5kIGluY3JlYXNlIGF3YXkgZnJvbSB0aGUgY2FtZXJhLiBGb3IgZXhhbXBsZSwgaWYgdGhlIGhlaWdodCBvZiB0aGUgbWFwIGlzIDEwMDBweCwgYSB2YWx1ZSBvZiAtMSBtZWFucyAxMDAwcHggYXdheSBmcm9tIHRoZSBjZW50ZXIgdG93YXJkcyB0aGUgY2FtZXJhLCBhbmQgYSB2YWx1ZSBvZiAxIG1lYW5zIGEgZGlzdGFuY2Ugb2YgMTAwMHB4IGF3YXkgZnJvbSB0aGUgY2FtZXJhIGZyb20gdGhlIGNlbnRlci4gYFtcXFwiZGlzdGFuY2UtZnJvbS1jZW50ZXJcXFwiXWAgbWF5IG9ubHkgYmUgdXNlZCBpbiB0aGUgYGZpbHRlcmAgZXhwcmVzc2lvbiBmb3IgYSBgc3ltYm9sYCBsYXllci5cIixcblx0XHRcdGdyb3VwOiBcIkNhbWVyYVwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMi42LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImhlYXRtYXAtZGVuc2l0eVwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUga2VybmVsIGRlbnNpdHkgZXN0aW1hdGlvbiBvZiBhIHBpeGVsIGluIGEgaGVhdG1hcCBsYXllciwgd2hpY2ggaXMgYSByZWxhdGl2ZSBtZWFzdXJlIG9mIGhvdyBtYW55IGRhdGEgcG9pbnRzIGFyZSBjcm93ZGVkIGFyb3VuZCBhIHBhcnRpY3VsYXIgcGl4ZWwuIENhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGBoZWF0bWFwLWNvbG9yYCBwcm9wZXJ0eS5cIixcblx0XHRcdGdyb3VwOiBcIkhlYXRtYXBcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibGluZS1wcm9ncmVzc1wiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgcHJvZ3Jlc3MgYWxvbmcgYSBncmFkaWVudCBsaW5lLiBDYW4gb25seSBiZSB1c2VkIGluIHRoZSBgbGluZS1ncmFkaWVudGAgcHJvcGVydHkuXCIsXG5cdFx0XHRncm91cDogXCJGZWF0dXJlIGRhdGFcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDUuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi41LjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC42LjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjEyLjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInNreS1yYWRpYWwtcHJvZ3Jlc3NcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIGRpc3RhbmNlIG9mIGEgcG9pbnQgb24gdGhlIHNreSBmcm9tIHRoZSBzdW4gcG9zaXRpb24uIFJldHVybnMgMCBhdCBzdW4gcG9zaXRpb24gYW5kIDEgd2hlbiB0aGUgZGlzdGFuY2UgcmVhY2hlcyBgc2t5LWdyYWRpZW50LXJhZGl1c2AuIENhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIGBza3ktZ3JhZGllbnRgIHByb3BlcnR5LlwiLFxuXHRcdFx0Z3JvdXA6IFwic2t5XCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCIxMC4wLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjEwLjAuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFjY3VtdWxhdGVkOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgdmFsdWUgb2YgYSBjbHVzdGVyIHByb3BlcnR5IGFjY3VtdWxhdGVkIHNvIGZhci4gQ2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgYGNsdXN0ZXJQcm9wZXJ0aWVzYCBvcHRpb24gb2YgYSBjbHVzdGVyZWQgR2VvSlNPTiBzb3VyY2UuXCIsXG5cdFx0XHRncm91cDogXCJGZWF0dXJlIGRhdGFcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNTMuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiOC40LjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNS41LjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjE1LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIitcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIHN1bSBvZiB0aGUgaW5wdXRzLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCIqXCI6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoZSBpbnB1dHMuXCIsXG5cdFx0XHRncm91cDogXCJNYXRoXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIi1cIjoge1xuXHRcdFx0ZG9jOiBcIkZvciB0d28gaW5wdXRzLCByZXR1cm5zIHRoZSByZXN1bHQgb2Ygc3VidHJhY3RpbmcgdGhlIHNlY29uZCBpbnB1dCBmcm9tIHRoZSBmaXJzdC4gRm9yIGEgc2luZ2xlIGlucHV0LCByZXR1cm5zIHRoZSByZXN1bHQgb2Ygc3VidHJhY3RpbmcgaXQgZnJvbSAwLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCIvXCI6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSByZXN1bHQgb2YgZmxvYXRpbmcgcG9pbnQgZGl2aXNpb24gb2YgdGhlIGZpcnN0IGlucHV0IGJ5IHRoZSBzZWNvbmQuXCIsXG5cdFx0XHRncm91cDogXCJNYXRoXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIiVcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIHJlbWFpbmRlciBhZnRlciBpbnRlZ2VyIGRpdmlzaW9uIG9mIHRoZSBmaXJzdCBpbnB1dCBieSB0aGUgc2Vjb25kLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJeXCI6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSByZXN1bHQgb2YgcmFpc2luZyB0aGUgZmlyc3QgaW5wdXQgdG8gdGhlIHBvd2VyIHNwZWNpZmllZCBieSB0aGUgc2Vjb25kLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c3FydDoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIHNxdWFyZSByb290IG9mIHRoZSBpbnB1dC5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDIuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGxvZzEwOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgYmFzZS10ZW4gbG9nYXJpdGhtIG9mIHRoZSBpbnB1dC5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGxuOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgdGhlIGlucHV0LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bG9nMjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIGJhc2UtdHdvIGxvZ2FyaXRobSBvZiB0aGUgaW5wdXQuXCIsXG5cdFx0XHRncm91cDogXCJNYXRoXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzaW46IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBzaW5lIG9mIHRoZSBpbnB1dC5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvczoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIGNvc2luZSBvZiB0aGUgaW5wdXQuXCIsXG5cdFx0XHRncm91cDogXCJNYXRoXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0YW46IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSB0YW5nZW50IG9mIHRoZSBpbnB1dC5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFzaW46IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBhcmNzaW5lIG9mIHRoZSBpbnB1dC5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFjb3M6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBhcmNjb3NpbmUgb2YgdGhlIGlucHV0LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXRhbjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIGFyY3RhbmdlbnQgb2YgdGhlIGlucHV0LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bWluOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZSBvZiB0aGUgaW5wdXRzLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bWF4OiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZSBvZiB0aGUgaW5wdXRzLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cm91bmQ6IHtcblx0XHRcdGRvYzogXCJSb3VuZHMgdGhlIGlucHV0IHRvIHRoZSBuZWFyZXN0IGludGVnZXIuIEhhbGZ3YXkgdmFsdWVzIGFyZSByb3VuZGVkIGF3YXkgZnJvbSB6ZXJvLiBGb3IgZXhhbXBsZSwgYFtcXFwicm91bmRcXFwiLCAtMS41XWAgZXZhbHVhdGVzIHRvIC0yLlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YWJzOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhlIGlucHV0LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y2VpbDoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIHNtYWxsZXN0IGludGVnZXIgdGhhdCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGlucHV0LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Zmxvb3I6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBsYXJnZXN0IGludGVnZXIgdGhhdCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGlucHV0LlwiLFxuXHRcdFx0Z3JvdXA6IFwiTWF0aFwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGlzdGFuY2U6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBzaG9ydGVzdCBkaXN0YW5jZSBpbiBtZXRlcnMgYmV0d2VlbiB0aGUgZXZhbHVhdGVkIGZlYXR1cmUgYW5kIHRoZSBpbnB1dCBnZW9tZXRyeS4gVGhlIGlucHV0IHZhbHVlIGNhbiBiZSBhIHZhbGlkIEdlb0pTT04gb2YgdHlwZSBgUG9pbnRgLCBgTXVsdGlQb2ludGAsIGBMaW5lU3RyaW5nYCwgYE11bHRpTGluZVN0cmluZ2AsIGBQb2x5Z29uYCwgYE11bHRpUG9seWdvbmAsIGBGZWF0dXJlYCwgb3IgYEZlYXR1cmVDb2xsZWN0aW9uYC4gRGlzdGFuY2UgdmFsdWVzIHJldHVybmVkIG1heSB2YXJ5IGluIHByZWNpc2lvbiBkdWUgdG8gbG9zcyBpbiBwcmVjaXNpb24gZnJvbSBlbmNvZGluZyBnZW9tZXRyaWVzLCBwYXJ0aWN1bGFybHkgYmVsb3cgem9vbSBsZXZlbCAxMy5cIixcblx0XHRcdGdyb3VwOiBcIk1hdGhcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiOS4yLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNS45LjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjE2LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIj09XCI6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIGB0cnVlYCBpZiB0aGUgaW5wdXQgdmFsdWVzIGFyZSBlcXVhbCwgYGZhbHNlYCBvdGhlcndpc2UuIFRoZSBjb21wYXJpc29uIGlzIHN0cmljdGx5IHR5cGVkOiB2YWx1ZXMgb2YgZGlmZmVyZW50IHJ1bnRpbWUgdHlwZXMgYXJlIGFsd2F5cyBjb25zaWRlcmVkIHVuZXF1YWwuIENhc2VzIHdoZXJlIHRoZSB0eXBlcyBhcmUga25vd24gdG8gYmUgZGlmZmVyZW50IGF0IHBhcnNlIHRpbWUgYXJlIGNvbnNpZGVyZWQgaW52YWxpZCBhbmQgd2lsbCBwcm9kdWNlIGEgcGFyc2UgZXJyb3IuIEFjY2VwdHMgYW4gb3B0aW9uYWwgYGNvbGxhdG9yYCBhcmd1bWVudCB0byBjb250cm9sIGxvY2FsZS1kZXBlbmRlbnQgc3RyaW5nIGNvbXBhcmlzb25zLlwiLFxuXHRcdFx0Z3JvdXA6IFwiRGVjaXNpb25cIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbGxhdG9yOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjUuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjIuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuOS4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCIhPVwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGlucHV0IHZhbHVlcyBhcmUgbm90IGVxdWFsLCBgZmFsc2VgIG90aGVyd2lzZS4gVGhlIGNvbXBhcmlzb24gaXMgc3RyaWN0bHkgdHlwZWQ6IHZhbHVlcyBvZiBkaWZmZXJlbnQgcnVudGltZSB0eXBlcyBhcmUgYWx3YXlzIGNvbnNpZGVyZWQgdW5lcXVhbC4gQ2FzZXMgd2hlcmUgdGhlIHR5cGVzIGFyZSBrbm93biB0byBiZSBkaWZmZXJlbnQgYXQgcGFyc2UgdGltZSBhcmUgY29uc2lkZXJlZCBpbnZhbGlkIGFuZCB3aWxsIHByb2R1Y2UgYSBwYXJzZSBlcnJvci4gQWNjZXB0cyBhbiBvcHRpb25hbCBgY29sbGF0b3JgIGFyZ3VtZW50IHRvIGNvbnRyb2wgbG9jYWxlLWRlcGVuZGVudCBzdHJpbmcgY29tcGFyaXNvbnMuXCIsXG5cdFx0XHRncm91cDogXCJEZWNpc2lvblwiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0Y29sbGF0b3I6IHtcblx0XHRcdFx0XHRqczogXCIwLjQ1LjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuNS4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMi4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC45LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIj5cIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYHRydWVgIGlmIHRoZSBmaXJzdCBpbnB1dCBpcyBzdHJpY3RseSBncmVhdGVyIHRoYW4gdGhlIHNlY29uZCwgYGZhbHNlYCBvdGhlcndpc2UuIFRoZSBhcmd1bWVudHMgYXJlIHJlcXVpcmVkIHRvIGJlIGVpdGhlciBib3RoIHN0cmluZ3Mgb3IgYm90aCBudW1iZXJzOyBpZiBkdXJpbmcgZXZhbHVhdGlvbiB0aGV5IGFyZSBub3QsIGV4cHJlc3Npb24gZXZhbHVhdGlvbiBwcm9kdWNlcyBhbiBlcnJvci4gQ2FzZXMgd2hlcmUgdGhpcyBjb25zdHJhaW50IGlzIGtub3duIG5vdCB0byBob2xkIGF0IHBhcnNlIHRpbWUgYXJlIGNvbnNpZGVyZWQgaW4gdmFsaWQgYW5kIHdpbGwgcHJvZHVjZSBhIHBhcnNlIGVycm9yLiBBY2NlcHRzIGFuIG9wdGlvbmFsIGBjb2xsYXRvcmAgYXJndW1lbnQgdG8gY29udHJvbCBsb2NhbGUtZGVwZW5kZW50IHN0cmluZyBjb21wYXJpc29ucy5cIixcblx0XHRcdGdyb3VwOiBcIkRlY2lzaW9uXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb2xsYXRvcjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDUuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi41LjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4yLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjkuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiPFwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZpcnN0IGlucHV0IGlzIHN0cmljdGx5IGxlc3MgdGhhbiB0aGUgc2Vjb25kLCBgZmFsc2VgIG90aGVyd2lzZS4gVGhlIGFyZ3VtZW50cyBhcmUgcmVxdWlyZWQgdG8gYmUgZWl0aGVyIGJvdGggc3RyaW5ncyBvciBib3RoIG51bWJlcnM7IGlmIGR1cmluZyBldmFsdWF0aW9uIHRoZXkgYXJlIG5vdCwgZXhwcmVzc2lvbiBldmFsdWF0aW9uIHByb2R1Y2VzIGFuIGVycm9yLiBDYXNlcyB3aGVyZSB0aGlzIGNvbnN0cmFpbnQgaXMga25vd24gbm90IHRvIGhvbGQgYXQgcGFyc2UgdGltZSBhcmUgY29uc2lkZXJlZCBpbiB2YWxpZCBhbmQgd2lsbCBwcm9kdWNlIGEgcGFyc2UgZXJyb3IuIEFjY2VwdHMgYW4gb3B0aW9uYWwgYGNvbGxhdG9yYCBhcmd1bWVudCB0byBjb250cm9sIGxvY2FsZS1kZXBlbmRlbnQgc3RyaW5nIGNvbXBhcmlzb25zLlwiLFxuXHRcdFx0Z3JvdXA6IFwiRGVjaXNpb25cIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbGxhdG9yOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjUuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjIuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuOS4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCI+PVwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZpcnN0IGlucHV0IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgc2Vjb25kLCBgZmFsc2VgIG90aGVyd2lzZS4gVGhlIGFyZ3VtZW50cyBhcmUgcmVxdWlyZWQgdG8gYmUgZWl0aGVyIGJvdGggc3RyaW5ncyBvciBib3RoIG51bWJlcnM7IGlmIGR1cmluZyBldmFsdWF0aW9uIHRoZXkgYXJlIG5vdCwgZXhwcmVzc2lvbiBldmFsdWF0aW9uIHByb2R1Y2VzIGFuIGVycm9yLiBDYXNlcyB3aGVyZSB0aGlzIGNvbnN0cmFpbnQgaXMga25vd24gbm90IHRvIGhvbGQgYXQgcGFyc2UgdGltZSBhcmUgY29uc2lkZXJlZCBpbiB2YWxpZCBhbmQgd2lsbCBwcm9kdWNlIGEgcGFyc2UgZXJyb3IuIEFjY2VwdHMgYW4gb3B0aW9uYWwgYGNvbGxhdG9yYCBhcmd1bWVudCB0byBjb250cm9sIGxvY2FsZS1kZXBlbmRlbnQgc3RyaW5nIGNvbXBhcmlzb25zLlwiLFxuXHRcdFx0Z3JvdXA6IFwiRGVjaXNpb25cIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbGxhdG9yOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjUuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjIuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuOS4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCI8PVwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZpcnN0IGlucHV0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgc2Vjb25kLCBgZmFsc2VgIG90aGVyd2lzZS4gVGhlIGFyZ3VtZW50cyBhcmUgcmVxdWlyZWQgdG8gYmUgZWl0aGVyIGJvdGggc3RyaW5ncyBvciBib3RoIG51bWJlcnM7IGlmIGR1cmluZyBldmFsdWF0aW9uIHRoZXkgYXJlIG5vdCwgZXhwcmVzc2lvbiBldmFsdWF0aW9uIHByb2R1Y2VzIGFuIGVycm9yLiBDYXNlcyB3aGVyZSB0aGlzIGNvbnN0cmFpbnQgaXMga25vd24gbm90IHRvIGhvbGQgYXQgcGFyc2UgdGltZSBhcmUgY29uc2lkZXJlZCBpbiB2YWxpZCBhbmQgd2lsbCBwcm9kdWNlIGEgcGFyc2UgZXJyb3IuIEFjY2VwdHMgYW4gb3B0aW9uYWwgYGNvbGxhdG9yYCBhcmd1bWVudCB0byBjb250cm9sIGxvY2FsZS1kZXBlbmRlbnQgc3RyaW5nIGNvbXBhcmlzb25zLlwiLFxuXHRcdFx0Z3JvdXA6IFwiRGVjaXNpb25cIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvbGxhdG9yOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjUuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjIuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuOS4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YWxsOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIHRoZSBpbnB1dHMgYXJlIGB0cnVlYCwgYGZhbHNlYCBvdGhlcndpc2UuIFRoZSBpbnB1dHMgYXJlIGV2YWx1YXRlZCBpbiBvcmRlciwgYW5kIGV2YWx1YXRpb24gaXMgc2hvcnQtY2lyY3VpdGluZzogb25jZSBhbiBpbnB1dCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgZmFsc2VgLCB0aGUgcmVzdWx0IGlzIGBmYWxzZWAgYW5kIG5vIGZ1cnRoZXIgaW5wdXQgZXhwcmVzc2lvbnMgYXJlIGV2YWx1YXRlZC5cIixcblx0XHRcdGdyb3VwOiBcIkRlY2lzaW9uXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbnk6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIGB0cnVlYCBpZiBhbnkgb2YgdGhlIGlucHV0cyBhcmUgYHRydWVgLCBgZmFsc2VgIG90aGVyd2lzZS4gVGhlIGlucHV0cyBhcmUgZXZhbHVhdGVkIGluIG9yZGVyLCBhbmQgZXZhbHVhdGlvbiBpcyBzaG9ydC1jaXJjdWl0aW5nOiBvbmNlIGFuIGlucHV0IGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGB0cnVlYCwgdGhlIHJlc3VsdCBpcyBgdHJ1ZWAgYW5kIG5vIGZ1cnRoZXIgaW5wdXQgZXhwcmVzc2lvbnMgYXJlIGV2YWx1YXRlZC5cIixcblx0XHRcdGdyb3VwOiBcIkRlY2lzaW9uXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIiFcIjoge1xuXHRcdFx0ZG9jOiBcIkxvZ2ljYWwgbmVnYXRpb24uIFJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBpcyBgZmFsc2VgLCBhbmQgYGZhbHNlYCBpZiB0aGUgaW5wdXQgaXMgYHRydWVgLlwiLFxuXHRcdFx0Z3JvdXA6IFwiRGVjaXNpb25cIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHdpdGhpbjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYHRydWVgIGlmIHRoZSBldmFsdWF0ZWQgZmVhdHVyZSBpcyBmdWxseSBjb250YWluZWQgaW5zaWRlIGEgYm91bmRhcnkgb2YgdGhlIGlucHV0IGdlb21ldHJ5LCBgZmFsc2VgIG90aGVyd2lzZS4gVGhlIGlucHV0IHZhbHVlIGNhbiBiZSBhIHZhbGlkIEdlb0pTT04gb2YgdHlwZSBgUG9seWdvbmAsIGBNdWx0aVBvbHlnb25gLCBgRmVhdHVyZWAsIG9yIGBGZWF0dXJlQ29sbGVjdGlvbmAuIFN1cHBvcnRlZCBmZWF0dXJlcyBmb3IgZXZhbHVhdGlvbjpcXG4tIGBQb2ludGA6IFJldHVybnMgYGZhbHNlYCBpZiBhIHBvaW50IGlzIG9uIHRoZSBib3VuZGFyeSBvciBmYWxscyBvdXRzaWRlIHRoZSBib3VuZGFyeS5cXG4tIGBMaW5lU3RyaW5nYDogUmV0dXJucyBgZmFsc2VgIGlmIGFueSBwYXJ0IG9mIGEgbGluZSBmYWxscyBvdXRzaWRlIHRoZSBib3VuZGFyeSwgdGhlIGxpbmUgaW50ZXJzZWN0cyB0aGUgYm91bmRhcnksIG9yIGEgbGluZSdzIGVuZHBvaW50IGlzIG9uIHRoZSBib3VuZGFyeS5cIixcblx0XHRcdGdyb3VwOiBcIkRlY2lzaW9uXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIxLjkuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiOS4xLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNS44LjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjE1LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImlzLXN1cHBvcnRlZC1zY3JpcHRcIjoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBzdHJpbmcgaXMgZXhwZWN0ZWQgdG8gcmVuZGVyIGxlZ2libHkuIFJldHVybnMgYGZhbHNlYCBpZiB0aGUgaW5wdXQgc3RyaW5nIGNvbnRhaW5zIHNlY3Rpb25zIHRoYXQgY2Fubm90IGJlIHJlbmRlcmVkIHdpdGhvdXQgcG90ZW50aWFsIGxvc3Mgb2YgbWVhbmluZyAoZS5nLiBJbmRpYyBzY3JpcHRzIHRoYXQgcmVxdWlyZSBjb21wbGV4IHRleHQgc2hhcGluZywgb3IgcmlnaHQtdG8tbGVmdCBzY3JpcHRzIGlmIHRoZSB0aGUgYG1hcGJveC1nbC1ydGwtdGV4dGAgcGx1Z2luIGlzIG5vdCBpbiB1c2UgaW4gTWFwYm94IEdMIEpTKS5cIixcblx0XHRcdGdyb3VwOiBcIlN0cmluZ1wiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40NS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjYuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHVwY2FzZToge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgdGhlIGlucHV0IHN0cmluZyBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLiBGb2xsb3dzIHRoZSBVbmljb2RlIERlZmF1bHQgQ2FzZSBDb252ZXJzaW9uIGFsZ29yaXRobSBhbmQgdGhlIGxvY2FsZS1pbnNlbnNpdGl2ZSBjYXNlIG1hcHBpbmdzIGluIHRoZSBVbmljb2RlIENoYXJhY3RlciBEYXRhYmFzZS5cIixcblx0XHRcdGdyb3VwOiBcIlN0cmluZ1wiLFxuXHRcdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZG93bmNhc2U6IHtcblx0XHRcdGRvYzogXCJSZXR1cm5zIHRoZSBpbnB1dCBzdHJpbmcgY29udmVydGVkIHRvIGxvd2VyY2FzZS4gRm9sbG93cyB0aGUgVW5pY29kZSBEZWZhdWx0IENhc2UgQ29udmVyc2lvbiBhbGdvcml0aG0gYW5kIHRoZSBsb2NhbGUtaW5zZW5zaXRpdmUgY2FzZSBtYXBwaW5ncyBpbiB0aGUgVW5pY29kZSBDaGFyYWN0ZXIgRGF0YWJhc2UuXCIsXG5cdFx0XHRncm91cDogXCJTdHJpbmdcIixcblx0XHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvbmNhdDoge1xuXHRcdFx0ZG9jOiBcIlJldHVybnMgYSBgc3RyaW5nYCBjb25zaXN0aW5nIG9mIHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZSBpbnB1dHMuIEVhY2ggaW5wdXQgaXMgY29udmVydGVkIHRvIGEgc3RyaW5nIGFzIGlmIGJ5IGB0by1zdHJpbmdgLlwiLFxuXHRcdFx0Z3JvdXA6IFwiU3RyaW5nXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInJlc29sdmVkLWxvY2FsZVwiOiB7XG5cdFx0XHRkb2M6IFwiUmV0dXJucyB0aGUgSUVURiBsYW5ndWFnZSB0YWcgb2YgdGhlIGxvY2FsZSBiZWluZyB1c2VkIGJ5IHRoZSBwcm92aWRlZCBgY29sbGF0b3JgLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBzeXN0ZW0gbG9jYWxlLCBvciB0byBkZXRlcm1pbmUgaWYgYSByZXF1ZXN0ZWQgbG9jYWxlIHdhcyBzdWNjZXNzZnVsbHkgbG9hZGVkLlwiLFxuXHRcdFx0Z3JvdXA6IFwiU3RyaW5nXCIsXG5cdFx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0XHRqczogXCIwLjQ1LjBcIixcblx0XHRcdFx0XHRhbmRyb2lkOiBcIjYuNS4wXCIsXG5cdFx0XHRcdFx0aW9zOiBcIjQuMi4wXCIsXG5cdFx0XHRcdFx0bWFjb3M6IFwiMC45LjBcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xudmFyIGZvZyA9IHtcblx0cmFuZ2U6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdDAuNSxcblx0XHRcdDEwXG5cdFx0XSxcblx0XHRtaW5pbXVtOiAtMjAsXG5cdFx0bWF4aW11bTogMjAsXG5cdFx0bGVuZ3RoOiAyLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgc3RhcnQgYW5kIGVuZCBkaXN0YW5jZSByYW5nZSBpbiB3aGljaCBmb2cgZmFkZXMgZnJvbSBmdWxseSB0cmFuc3BhcmVudCB0byBmdWxseSBvcGFxdWUuIFRoZSBkaXN0YW5jZSB0byB0aGUgcG9pbnQgYXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwIGlzIGRlZmluZWQgYXMgemVybywgc28gdGhhdCBuZWdhdGl2ZSByYW5nZSB2YWx1ZXMgYXJlIGNsb3NlciB0byB0aGUgY2FtZXJhLCBhbmQgcG9zaXRpdmUgdmFsdWVzIGFyZSBmYXJ0aGVyIGF3YXkuXCIsXG5cdFx0ZXhhbXBsZTogW1xuXHRcdFx0MC41LFxuXHRcdFx0MTBcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi4zLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC42LjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjYuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRjb2xvcjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCIsXG5cdFx0XCJkZWZhdWx0XCI6IFwiI2ZmZmZmZlwiLFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0ZG9jOiBcIlRoZSBjb2xvciBvZiB0aGUgYXRtb3NwaGVyZSByZWdpb24gaW1tZWRpYXRlbHkgYmVsb3cgdGhlIGhvcml6b24gYW5kIHdpdGhpbiB0aGUgYHJhbmdlYCBhbmQgYWJvdmUgdGhlIGhvcml6b24gYW5kIHdpdGhpbiBgaG9yaXpvbi1ibGVuZGAuIFVzaW5nIG9wYWNpdHkgaXMgcmVjb21tZW5kZWQgb25seSBmb3Igc21vb3RobHkgdHJhbnNpdGlvbmluZyBmb2cgb24vb2ZmIGFzIGFueXRoaW5nIGxlc3MgdGhhbiAxMDAlIG9wYWNpdHkgcmVzdWx0cyBpbiBtb3JlIHRpbGVzIGxvYWRlZCBhbmQgZHJhd24uXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjEwLjYuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuNi4wXCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdFwiaGlnaC1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRcImRlZmF1bHRcIjogXCIjMjQ1Y2RmXCIsXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiVGhlIGNvbG9yIG9mIHRoZSBhdG1vc3BoZXJlIHJlZ2lvbiBhYm92ZSB0aGUgaG9yaXpvbiwgYGhpZ2gtY29sb3JgIGV4dGVuZHMgZnVydGhlciBhYm92ZSB0aGUgaG9yaXpvbiB0aGFuIHRoZSBgY29sb3JgIHByb3BlcnR5IGFuZCBpdHMgc3ByZWFkIGNhbiBiZSBjb250cm9sbGVkIHdpdGggYGhvcml6b24tYmxlbmRgLiBUaGUgb3BhY2l0eSBjYW4gYmUgc2V0IHRvIGAwYCB0byByZW1vdmUgdGhlIGhpZ2ggYXRtb3NwaGVyZSBjb2xvciBjb250cmlidXRpb24uXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjEwLjYuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuNi4wXCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdFwic3BhY2UtY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdFwiaW50ZXJwb2xhdGVcIixcblx0XHRcdFtcblx0XHRcdFx0XCJsaW5lYXJcIlxuXHRcdFx0XSxcblx0XHRcdFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF0sXG5cdFx0XHQ0LFxuXHRcdFx0XCIjMDEwYjE5XCIsXG5cdFx0XHQ3LFxuXHRcdFx0XCIjMzY3YWI5XCJcblx0XHRdLFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0ZG9jOiBcIlRoZSBjb2xvciBvZiB0aGUgcmVnaW9uIGFib3ZlIHRoZSBob3Jpem9uIGFuZCBhZnRlciB0aGUgZW5kIG9mIHRoZSBgaG9yaXpvbi1ibGVuZGAgY29udHJpYnV0aW9uLiBUaGUgb3BhY2l0eSBjYW4gYmUgc2V0IHRvIGAwYCB0byBoYXZlIGEgdHJhbnNwYXJlbnQgYmFja2dyb3VuZC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjIuOS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMTAuNi4wXCIsXG5cdFx0XHRcdGlvczogXCIxMC42LjBcIlxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0XCJob3Jpem9uLWJsZW5kXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0XCJpbnRlcnBvbGF0ZVwiLFxuXHRcdFx0W1xuXHRcdFx0XHRcImxpbmVhclwiXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XSxcblx0XHRcdDQsXG5cdFx0XHQwLjIsXG5cdFx0XHQ3LFxuXHRcdFx0MC4xXG5cdFx0XSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEsXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiSG9yaXpvbiBibGVuZCBhcHBsaWVzIGEgc21vb3RoIGZhZGUgZnJvbSB0aGUgY29sb3Igb2YgdGhlIGF0bW9zcGhlcmUgdG8gdGhlIGNvbG9yIG9mIHNwYWNlLiBBIHZhbHVlIG9mIHplcm8gbGVhdmVzIGEgc2hhcnAgdHJhbnNpdGlvbiBmcm9tIGF0bW9zcGhlcmUgdG8gc3BhY2UuIEluY3JlYXNpbmcgdGhlIHZhbHVlIGJsZW5kcyB0aGUgY29sb3Igb2YgYXRtb3NwaGVyZSBpbnRvIGluY3JlYXNpbmdseSBoaWdoIGFuZ2xlcyBvZiB0aGUgc2t5LlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi4zLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC42LjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjYuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRcInN0YXItaW50ZW5zaXR5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0XCJpbnRlcnBvbGF0ZVwiLFxuXHRcdFx0W1xuXHRcdFx0XHRcImxpbmVhclwiXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XSxcblx0XHRcdDUsXG5cdFx0XHQwLjM1LFxuXHRcdFx0Nixcblx0XHRcdDBcblx0XHRdLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGRvYzogXCJBIHZhbHVlIGNvbnRyb2xsaW5nIHRoZSBzdGFyIGludGVuc2l0eSB3aGVyZSBgMGAgd2lsbCBzaG93IG5vIHN0YXJzIGFuZCBgMWAgd2lsbCBzaG93IHN0YXJzIGF0IHRoZWlyIG1heGltdW0gaW50ZW5zaXR5LlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi45LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC42LjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjYuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xudmFyIGxpZ2h0ID0ge1xuXHRhbmNob3I6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHRcImRlZmF1bHRcIjogXCJ2aWV3cG9ydFwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgcG9zaXRpb24gb2YgdGhlIGxpZ2h0IHNvdXJjZSBpcyBhbGlnbmVkIHRvIHRoZSByb3RhdGlvbiBvZiB0aGUgbWFwLlwiXG5cdFx0XHR9LFxuXHRcdFx0dmlld3BvcnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBwb3NpdGlvbiBvZiB0aGUgbGlnaHQgc291cmNlIGlzIGFsaWduZWQgdG8gdGhlIHJvdGF0aW9uIG9mIHRoZSB2aWV3cG9ydC5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiLFxuXHRcdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRkb2M6IFwiV2hldGhlciBleHRydWRlZCBnZW9tZXRyaWVzIGFyZSBsaXQgcmVsYXRpdmUgdG8gdGhlIG1hcCBvciB2aWV3cG9ydC5cIixcblx0XHRleGFtcGxlOiBcIm1hcFwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdHBvc2l0aW9uOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdFwiZGVmYXVsdFwiOiBbXG5cdFx0XHQxLjE1LFxuXHRcdFx0MjEwLFxuXHRcdFx0MzBcblx0XHRdLFxuXHRcdGxlbmd0aDogMyxcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRkb2M6IFwiUG9zaXRpb24gb2YgdGhlIGxpZ2h0IHNvdXJjZSByZWxhdGl2ZSB0byBsaXQgKGV4dHJ1ZGVkKSBnZW9tZXRyaWVzLCBpbiBbciByYWRpYWwgY29vcmRpbmF0ZSwgYSBhemltdXRoYWwgYW5nbGUsIHAgcG9sYXIgYW5nbGVdIHdoZXJlIHIgaW5kaWNhdGVzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGJhc2Ugb2YgYW4gb2JqZWN0IHRvIGl0cyBsaWdodCwgYSBpbmRpY2F0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBsaWdodCByZWxhdGl2ZSB0byAwwrAgKDDCsCB3aGVuIGBsaWdodC5hbmNob3JgIGlzIHNldCB0byBgdmlld3BvcnRgIGNvcnJlc3BvbmRzIHRvIHRoZSB0b3Agb2YgdGhlIHZpZXdwb3J0LCBvciAwwrAgd2hlbiBgbGlnaHQuYW5jaG9yYCBpcyBzZXQgdG8gYG1hcGAgY29ycmVzcG9uZHMgdG8gZHVlIG5vcnRoLCBhbmQgZGVncmVlcyBwcm9jZWVkIGNsb2Nrd2lzZSksIGFuZCBwIGluZGljYXRlcyB0aGUgaGVpZ2h0IG9mIHRoZSBsaWdodCAoZnJvbSAwwrAsIGRpcmVjdGx5IGFib3ZlLCB0byAxODDCsCwgZGlyZWN0bHkgYmVsb3cpLlwiLFxuXHRcdGV4YW1wbGU6IFtcblx0XHRcdDEuNSxcblx0XHRcdDkwLFxuXHRcdFx0ODBcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGNvbG9yOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRcImRlZmF1bHRcIjogXCIjZmZmZmZmXCIsXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiQ29sb3IgdGludCBmb3IgbGlnaHRpbmcgZXh0cnVkZWQgZ2VvbWV0cmllcy5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjcuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjYuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjUuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRpbnRlbnNpdHk6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRcImRlZmF1bHRcIjogMC41LFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGRvYzogXCJJbnRlbnNpdHkgb2YgbGlnaHRpbmcgKG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEpLiBIaWdoZXIgbnVtYmVycyB3aWxsIHByZXNlbnQgYXMgbW9yZSBleHRyZW1lIGNvbnRyYXN0LlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG52YXIgcHJvamVjdGlvbiA9IHtcblx0bmFtZToge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0YWxiZXJzOiB7XG5cdFx0XHRcdGRvYzogXCJBbiBBbGJlcnMgZXF1YWwtYXJlYSBwcm9qZWN0aW9uIGNlbnRlcmVkIG9uIHRoZSBjb250aW5lbnRhbCBVbml0ZWQgU3RhdGVzLiBZb3UgY2FuIGNvbmZpZ3VyZSB0aGUgcHJvamVjdGlvbiBmb3IgYSBkaWZmZXJlbnQgcmVnaW9uIGJ5IHNldHRpbmcgYGNlbnRlcmAgYW5kIGBwYXJhbGxlbHNgIHByb3BlcnRpZXMuIFlvdSBtYXkgd2FudCB0byBzZXQgbWF4IGJvdW5kcyB0byBjb25zdHJhaW4gdGhlIG1hcCB0byB0aGUgcmVsZXZhbnQgcmVnaW9uLlwiXG5cdFx0XHR9LFxuXHRcdFx0ZXF1YWxFYXJ0aDoge1xuXHRcdFx0XHRkb2M6IFwiQW4gRXF1YWwgRWFydGggcHJvamVjdGlvbi5cIlxuXHRcdFx0fSxcblx0XHRcdGVxdWlyZWN0YW5ndWxhcjoge1xuXHRcdFx0XHRkb2M6IFwiQW4gRXF1aXJlY3Rhbmd1bGFyIHByb2plY3Rpb24uIFRoaXMgcHJvamVjdGlvbiBpcyB2ZXJ5IHNpbWlsYXIgdG8gdGhlIFBsYXRlIENhcnLDqWUgcHJvamVjdGlvbi5cIlxuXHRcdFx0fSxcblx0XHRcdGxhbWJlcnRDb25mb3JtYWxDb25pYzoge1xuXHRcdFx0XHRkb2M6IFwiQSBMYW1iZXJ0IGNvbmZvcm1hbCBjb25pYyBwcm9qZWN0aW9uLiBZb3UgY2FuIGNvbmZpZ3VyZSB0aGUgcHJvamVjdGlvbiBmb3IgYSByZWdpb24gYnkgc2V0dGluZyBgY2VudGVyYCBhbmQgYHBhcmFsbGVsc2AgcHJvcGVydGllcy4gWW91IG1heSB3YW50IHRvIHNldCBtYXggYm91bmRzIHRvIGNvbnN0cmFpbiB0aGUgbWFwIHRvIHRoZSByZWxldmFudCByZWdpb24uXCJcblx0XHRcdH0sXG5cdFx0XHRtZXJjYXRvcjoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIE1lcmNhdG9yIHByb2plY3Rpb24gaXMgdGhlIGRlZmF1bHQgcHJvamVjdGlvbi5cIlxuXHRcdFx0fSxcblx0XHRcdG5hdHVyYWxFYXJ0aDoge1xuXHRcdFx0XHRkb2M6IFwiQSBOYXR1cmFsIEVhcnRoIHByb2plY3Rpb24uXCJcblx0XHRcdH0sXG5cdFx0XHR3aW5rZWxUcmlwZWw6IHtcblx0XHRcdFx0ZG9jOiBcIkEgV2lua2VsIFRyaXBlbCBwcm9qZWN0aW9uLlwiXG5cdFx0XHR9LFxuXHRcdFx0Z2xvYmU6IHtcblx0XHRcdFx0ZG9jOiBcIkEgZ2xvYmUgcHJvamVjdGlvbi5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwibWVyY2F0b3JcIixcblx0XHRkb2M6IFwiVGhlIG5hbWUgb2YgdGhlIHByb2plY3Rpb24gdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nIHRoZSBtYXAuXCIsXG5cdFx0cmVxdWlyZWQ6IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjYuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRjZW50ZXI6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0bGVuZ3RoOiAyLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRtaW5pbXVtOiBbXG5cdFx0XHQtMTgwLFxuXHRcdFx0LTkwXG5cdFx0XSxcblx0XHRtYXhpbXVtOiBbXG5cdFx0XHQxODAsXG5cdFx0XHQ5MFxuXHRcdF0sXG5cdFx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFx0ZG9jOiBcIlRoZSByZWZlcmVuY2UgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBvZiB0aGUgcHJvamVjdGlvbi4gYGNlbnRlcmAgdGFrZXMgdGhlIGZvcm0gb2YgW2xuZywgbGF0XS4gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IGNvbmZpZ3VyYWJsZSBmb3IgY29uaWMgcHJvamVjdGlvbnMgKEFsYmVycyBhbmQgTGFtYmVydCBDb25mb3JtYWwgQ29uaWMpLiBBbGwgb3RoZXIgcHJvamVjdGlvbnMgYXJlIGNlbnRlcmVkIG9uIFswLCAwXS5cIixcblx0XHRleGFtcGxlOiBbXG5cdFx0XHQtOTYsXG5cdFx0XHQzNy41XG5cdFx0XSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBbXG5cdFx0XHRcdFx0XCJhbGJlcnNcIixcblx0XHRcdFx0XHRcImxhbWJlcnRDb25mb3JtYWxDb25pY1wiXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi42LjBcIlxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0cGFyYWxsZWxzOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdGxlbmd0aDogMixcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCIsXG5cdFx0bWluaW11bTogW1xuXHRcdFx0LTkwLFxuXHRcdFx0LTkwXG5cdFx0XSxcblx0XHRtYXhpbXVtOiBbXG5cdFx0XHQ5MCxcblx0XHRcdDkwXG5cdFx0XSxcblx0XHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XHRkb2M6IFwiVGhlIHN0YW5kYXJkIHBhcmFsbGVscyBvZiB0aGUgcHJvamVjdGlvbiwgZGVub3RpbmcgdGhlIGRlc2lyZWQgbGF0aXR1ZGUgcmFuZ2Ugd2l0aCBtaW5pbWFsIGRpc3RvcnRpb24uIGBwYXJhbGxlbHNgIHRha2VzIHRoZSBmb3JtIG9mIFtsYXQwLCBsYXQxXS4gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IGNvbmZpZ3VyYWJsZSBmb3IgY29uaWMgcHJvamVjdGlvbnMgKEFsYmVycyBhbmQgTGFtYmVydCBDb25mb3JtYWwgQ29uaWMpLlwiLFxuXHRcdGV4YW1wbGU6IFtcblx0XHRcdDI5LjUsXG5cdFx0XHQ0NS41XG5cdFx0XSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBbXG5cdFx0XHRcdFx0XCJhbGJlcnNcIixcblx0XHRcdFx0XHRcImxhbWJlcnRDb25mb3JtYWxDb25pY1wiXG5cdFx0XHRcdF1cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi42LjBcIlxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcbnZhciB0ZXJyYWluID0ge1xuXHRzb3VyY2U6IHtcblx0XHR0eXBlOiBcInN0cmluZ1wiLFxuXHRcdGRvYzogXCJOYW1lIG9mIGEgc291cmNlIG9mIGByYXN0ZXJfZGVtYCB0eXBlIHRvIGJlIHVzZWQgZm9yIHRlcnJhaW4gZWxldmF0aW9uLlwiLFxuXHRcdHJlcXVpcmVkOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjEwLjAuMFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRleGFnZ2VyYXRpb246IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIixcblx0XHRcImRlZmF1bHRcIjogMSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEwMDAsXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiRXhhZ2dlcmF0ZXMgdGhlIGVsZXZhdGlvbiBvZiB0aGUgdGVycmFpbiBieSBtdWx0aXBseWluZyB0aGUgZGF0YSBmcm9tIHRoZSBERU0gd2l0aCB0aGlzIHZhbHVlLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInNvdXJjZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjIuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIxMC4wLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC4wLjBcIlxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcbnZhciBwYWludCA9IFtcblx0XCJwYWludF9maWxsXCIsXG5cdFwicGFpbnRfbGluZVwiLFxuXHRcInBhaW50X2NpcmNsZVwiLFxuXHRcInBhaW50X2hlYXRtYXBcIixcblx0XCJwYWludF9maWxsLWV4dHJ1c2lvblwiLFxuXHRcInBhaW50X3N5bWJvbFwiLFxuXHRcInBhaW50X3Jhc3RlclwiLFxuXHRcInBhaW50X2hpbGxzaGFkZVwiLFxuXHRcInBhaW50X2JhY2tncm91bmRcIixcblx0XCJwYWludF9za3lcIlxuXTtcbnZhciBwYWludF9maWxsID0ge1xuXHRcImZpbGwtYW50aWFsaWFzXCI6IHtcblx0XHR0eXBlOiBcImJvb2xlYW5cIixcblx0XHRcImRlZmF1bHRcIjogdHJ1ZSxcblx0XHRkb2M6IFwiV2hldGhlciBvciBub3QgdGhlIGZpbGwgc2hvdWxkIGJlIGFudGlhbGlhc2VkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJmaWxsLW9wYWNpdHlcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdGRvYzogXCJUaGUgb3BhY2l0eSBvZiB0aGUgZW50aXJlIGZpbGwgbGF5ZXIuIEluIGNvbnRyYXN0IHRvIHRoZSBgZmlsbC1jb2xvcmAsIHRoaXMgdmFsdWUgd2lsbCBhbHNvIGFmZmVjdCB0aGUgMXB4IHN0cm9rZSBhcm91bmQgdGhlIGZpbGwsIGlmIHRoZSBzdHJva2UgaXMgdXNlZC5cIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjIxLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiZmlsbC1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIiMwMDAwMDBcIixcblx0XHRkb2M6IFwiVGhlIGNvbG9yIG9mIHRoZSBmaWxsZWQgcGFydCBvZiB0aGlzIGxheWVyLiBUaGlzIGNvbG9yIGNhbiBiZSBzcGVjaWZpZWQgYXMgYHJnYmFgIHdpdGggYW4gYWxwaGEgY29tcG9uZW50IGFuZCB0aGUgY29sb3IncyBvcGFjaXR5IHdpbGwgbm90IGFmZmVjdCB0aGUgb3BhY2l0eSBvZiB0aGUgMXB4IHN0cm9rZSwgaWYgaXQgaXMgdXNlZC5cIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiIVwiOiBcImZpbGwtcGF0dGVyblwiXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4xOS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImZpbGwtb3V0bGluZS1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdGRvYzogXCJUaGUgb3V0bGluZSBjb2xvciBvZiB0aGUgZmlsbC4gTWF0Y2hlcyB0aGUgdmFsdWUgb2YgYGZpbGwtY29sb3JgIGlmIHVuc3BlY2lmaWVkLlwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0XCIhXCI6IFwiZmlsbC1wYXR0ZXJuXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiZmlsbC1hbnRpYWxpYXNcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJmaWxsLXRyYW5zbGF0ZVwiOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdGxlbmd0aDogMixcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0MCxcblx0XHRcdDBcblx0XHRdLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0ZG9jOiBcIlRoZSBnZW9tZXRyeSdzIG9mZnNldC4gVmFsdWVzIGFyZSBbeCwgeV0gd2hlcmUgbmVnYXRpdmVzIGluZGljYXRlIGxlZnQgYW5kIHVwLCByZXNwZWN0aXZlbHkuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiZmlsbC10cmFuc2xhdGUtYW5jaG9yXCI6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdG1hcDoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGZpbGwgaXMgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byB0aGUgbWFwLlwiXG5cdFx0XHR9LFxuXHRcdFx0dmlld3BvcnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBmaWxsIGlzIHRyYW5zbGF0ZWQgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0LlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkb2M6IFwiQ29udHJvbHMgdGhlIGZyYW1lIG9mIHJlZmVyZW5jZSBmb3IgYGZpbGwtdHJhbnNsYXRlYC5cIixcblx0XHRcImRlZmF1bHRcIjogXCJtYXBcIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJmaWxsLXRyYW5zbGF0ZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiZmlsbC1wYXR0ZXJuXCI6IHtcblx0XHR0eXBlOiBcInJlc29sdmVkSW1hZ2VcIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGRvYzogXCJOYW1lIG9mIGltYWdlIGluIHNwcml0ZSB0byB1c2UgZm9yIGRyYXdpbmcgaW1hZ2UgZmlsbHMuIEZvciBzZWFtbGVzcyBwYXR0ZXJucywgaW1hZ2Ugd2lkdGggYW5kIGhlaWdodCBtdXN0IGJlIGEgZmFjdG9yIG9mIHR3byAoMiwgNCwgOCwgLi4uLCA1MTIpLiBOb3RlIHRoYXQgem9vbS1kZXBlbmRlbnQgZXhwcmVzc2lvbnMgd2lsbCBiZSBldmFsdWF0ZWQgb25seSBhdCBpbnRlZ2VyIHpvb20gbGV2ZWxzLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjQ5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjExLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiY3Jvc3MtZmFkZWQtZGF0YS1kcml2ZW5cIlxuXHR9XG59O1xudmFyIHBhaW50X2xpbmUgPSB7XG5cdFwibGluZS1vcGFjaXR5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJUaGUgb3BhY2l0eSBhdCB3aGljaCB0aGUgbGluZSB3aWxsIGJlIGRyYXduLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjI5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwibGluZS1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdGRvYzogXCJUaGUgY29sb3Igd2l0aCB3aGljaCB0aGUgbGluZSB3aWxsIGJlIGRyYXduLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIiMwMDAwMDBcIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiIVwiOiBcImxpbmUtcGF0dGVyblwiXG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4yMy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImxpbmUtdHJhbnNsYXRlXCI6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0bGVuZ3RoOiAyLFxuXHRcdFwiZGVmYXVsdFwiOiBbXG5cdFx0XHQwLFxuXHRcdFx0MFxuXHRcdF0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiVGhlIGdlb21ldHJ5J3Mgb2Zmc2V0LiBWYWx1ZXMgYXJlIFt4LCB5XSB3aGVyZSBuZWdhdGl2ZXMgaW5kaWNhdGUgbGVmdCBhbmQgdXAsIHJlc3BlY3RpdmVseS5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJsaW5lLXRyYW5zbGF0ZS1hbmNob3JcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgbGluZSBpcyB0cmFuc2xhdGVkIHJlbGF0aXZlIHRvIHRoZSBtYXAuXCJcblx0XHRcdH0sXG5cdFx0XHR2aWV3cG9ydDoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxpbmUgaXMgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJDb250cm9scyB0aGUgZnJhbWUgb2YgcmVmZXJlbmNlIGZvciBgbGluZS10cmFuc2xhdGVgLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1hcFwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImxpbmUtdHJhbnNsYXRlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJsaW5lLXdpZHRoXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiU3Ryb2tlIHRoaWNrbmVzcy5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4zOS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4yLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNy4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNi4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImxpbmUtZ2FwLXdpZHRoXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0ZG9jOiBcIkRyYXdzIGEgbGluZSBjYXNpbmcgb3V0c2lkZSBvZiBhIGxpbmUncyBhY3R1YWwgcGF0aC4gVmFsdWUgaW5kaWNhdGVzIHRoZSB3aWR0aCBvZiB0aGUgaW5uZXIgZ2FwLlwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJsaW5lLW9mZnNldFwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRkb2M6IFwiVGhlIGxpbmUncyBvZmZzZXQuIEZvciBsaW5lYXIgZmVhdHVyZXMsIGEgcG9zaXRpdmUgdmFsdWUgb2Zmc2V0cyB0aGUgbGluZSB0byB0aGUgcmlnaHQsIHJlbGF0aXZlIHRvIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGxpbmUsIGFuZCBhIG5lZ2F0aXZlIHZhbHVlIHRvIHRoZSBsZWZ0LiBGb3IgcG9seWdvbiBmZWF0dXJlcywgYSBwb3NpdGl2ZSB2YWx1ZSByZXN1bHRzIGluIGFuIGluc2V0LCBhbmQgYSBuZWdhdGl2ZSB2YWx1ZSByZXN1bHRzIGluIGFuIG91dHNldC5cIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMi4xXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMy4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuMS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjI5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwibGluZS1ibHVyXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiQmx1ciBhcHBsaWVkIHRvIHRoZSBsaW5lLCBpbiBwaXhlbHMuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJsaW5lLWRhc2hhcnJheVwiOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJTcGVjaWZpZXMgdGhlIGxlbmd0aHMgb2YgdGhlIGFsdGVybmF0aW5nIGRhc2hlcyBhbmQgZ2FwcyB0aGF0IGZvcm0gdGhlIGRhc2ggcGF0dGVybi4gVGhlIGxlbmd0aHMgYXJlIGxhdGVyIHNjYWxlZCBieSB0aGUgbGluZSB3aWR0aC4gVG8gY29udmVydCBhIGRhc2ggbGVuZ3RoIHRvIHBpeGVscywgbXVsdGlwbHkgdGhlIGxlbmd0aCBieSB0aGUgY3VycmVudCBsaW5lIHdpZHRoLiBOb3RlIHRoYXQgR2VvSlNPTiBzb3VyY2VzIHdpdGggYGxpbmVNZXRyaWNzOiB0cnVlYCBzcGVjaWZpZWQgd29uJ3QgcmVuZGVyIGRhc2hlZCBsaW5lcyB0byB0aGUgZXhwZWN0ZWQgc2NhbGUuIEFsc28gbm90ZSB0aGF0IHpvb20tZGVwZW5kZW50IGV4cHJlc3Npb25zIHdpbGwgYmUgZXZhbHVhdGVkIG9ubHkgYXQgaW50ZWdlciB6b29tIGxldmVscy5cIixcblx0XHRtaW5pbXVtOiAwLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0dW5pdHM6IFwibGluZSB3aWR0aHNcIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRcIiFcIjogXCJsaW5lLXBhdHRlcm5cIlxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjIuMy4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiY3Jvc3MtZmFkZWQtZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImxpbmUtcGF0dGVyblwiOiB7XG5cdFx0dHlwZTogXCJyZXNvbHZlZEltYWdlXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiTmFtZSBvZiBpbWFnZSBpbiBzcHJpdGUgdG8gdXNlIGZvciBkcmF3aW5nIGltYWdlIGxpbmVzLiBGb3Igc2VhbWxlc3MgcGF0dGVybnMsIGltYWdlIHdpZHRoIG11c3QgYmUgYSBmYWN0b3Igb2YgdHdvICgyLCA0LCA4LCAuLi4sIDUxMikuIE5vdGUgdGhhdCB6b29tLWRlcGVuZGVudCBleHByZXNzaW9ucyB3aWxsIGJlIGV2YWx1YXRlZCBvbmx5IGF0IGludGVnZXIgem9vbSBsZXZlbHMuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJjcm9zcy1mYWRlZC1kYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwibGluZS1ncmFkaWVudFwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdGRvYzogXCJEZWZpbmVzIGEgZ3JhZGllbnQgd2l0aCB3aGljaCB0byBjb2xvciBhIGxpbmUgZmVhdHVyZS4gQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIEdlb0pTT04gc291cmNlcyB0aGF0IHNwZWNpZnkgYFxcXCJsaW5lTWV0cmljc1xcXCI6IHRydWVgLlwiLFxuXHRcdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiIVwiOiBcImxpbmUtcGF0dGVyblwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzb3VyY2U6IFwiZ2VvanNvblwiLFxuXHRcdFx0XHRoYXM6IHtcblx0XHRcdFx0XHRsaW5lTWV0cmljczogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDUuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuNS4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjQuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjExLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwibGluZS1wcm9ncmVzc1wiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJjb2xvci1yYW1wXCJcblx0fSxcblx0XCJsaW5lLXRyaW0tb2Zmc2V0XCI6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0ZG9jOiBcIlRoZSBsaW5lIHBhcnQgYmV0d2VlbiBbdHJpbS1zdGFydCwgdHJpbS1lbmRdIHdpbGwgYmUgbWFya2VkIGFzIHRyYW5zcGFyZW50IHRvIG1ha2UgYSByb3V0ZSB2YW5pc2hpbmcgZWZmZWN0LiBUaGUgbGluZSB0cmltLW9mZiBvZmZzZXQgaXMgYmFzZWQgb24gdGhlIHdob2xlIGxpbmUgcmFuZ2UgWzAuMCwgMS4wXS5cIixcblx0XHRsZW5ndGg6IDIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdDAsXG5cdFx0XHQwXG5cdFx0XSxcblx0XHRtaW5pbXVtOiBbXG5cdFx0XHQwLFxuXHRcdFx0MFxuXHRcdF0sXG5cdFx0bWF4aW11bTogW1xuXHRcdFx0MSxcblx0XHRcdDFcblx0XHRdLFxuXHRcdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHNvdXJjZTogXCJnZW9qc29uXCIsXG5cdFx0XHRcdGhhczoge1xuXHRcdFx0XHRcdGxpbmVNZXRyaWNzOiB0cnVlXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi45LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC41LjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIxMC41LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiY29uc3RhbnRcIlxuXHR9XG59O1xudmFyIHBhaW50X2NpcmNsZSA9IHtcblx0XCJjaXJjbGUtcmFkaXVzXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiA1LFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiQ2lyY2xlIHJhZGl1cy5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4xOC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImNpcmNsZS1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIiMwMDAwMDBcIixcblx0XHRkb2M6IFwiVGhlIGZpbGwgY29sb3Igb2YgdGhlIGNpcmNsZS5cIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjE4LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiY2lyY2xlLWJsdXJcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0ZG9jOiBcIkFtb3VudCB0byBibHVyIHRoZSBjaXJjbGUuIDEgYmx1cnMgdGhlIGNpcmNsZSBzdWNoIHRoYXQgb25seSB0aGUgY2VudGVycG9pbnQgaXMgZnVsbCBvcGFjaXR5LlwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJjaXJjbGUtb3BhY2l0eVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiVGhlIG9wYWNpdHkgYXQgd2hpY2ggdGhlIGNpcmNsZSB3aWxsIGJlIGRyYXduLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjIwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiY2lyY2xlLXRyYW5zbGF0ZVwiOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdGxlbmd0aDogMixcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0MCxcblx0XHRcdDBcblx0XHRdLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0ZG9jOiBcIlRoZSBnZW9tZXRyeSdzIG9mZnNldC4gVmFsdWVzIGFyZSBbeCwgeV0gd2hlcmUgbmVnYXRpdmVzIGluZGljYXRlIGxlZnQgYW5kIHVwLCByZXNwZWN0aXZlbHkuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiY2lyY2xlLXRyYW5zbGF0ZS1hbmNob3JcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgY2lyY2xlIGlzIHRyYW5zbGF0ZWQgcmVsYXRpdmUgdG8gdGhlIG1hcC5cIlxuXHRcdFx0fSxcblx0XHRcdHZpZXdwb3J0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgY2lyY2xlIGlzIHRyYW5zbGF0ZWQgcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0LlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkb2M6IFwiQ29udHJvbHMgdGhlIGZyYW1lIG9mIHJlZmVyZW5jZSBmb3IgYGNpcmNsZS10cmFuc2xhdGVgLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1hcFwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImNpcmNsZS10cmFuc2xhdGVcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcImNpcmNsZS1waXRjaC1zY2FsZVwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRtYXA6IHtcblx0XHRcdFx0ZG9jOiBcIkNpcmNsZXMgYXJlIHNjYWxlZCBhY2NvcmRpbmcgdG8gdGhlaXIgYXBwYXJlbnQgZGlzdGFuY2UgdG8gdGhlIGNhbWVyYS5cIlxuXHRcdFx0fSxcblx0XHRcdHZpZXdwb3J0OiB7XG5cdFx0XHRcdGRvYzogXCJDaXJjbGVzIGFyZSBub3Qgc2NhbGVkLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJtYXBcIixcblx0XHRkb2M6IFwiQ29udHJvbHMgdGhlIHNjYWxpbmcgYmVoYXZpb3Igb2YgdGhlIGNpcmNsZSB3aGVuIHRoZSBtYXAgaXMgcGl0Y2hlZC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjEuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjQuMi4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjQuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjIuMVwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiY2lyY2xlLXBpdGNoLWFsaWdubWVudFwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRtYXA6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBjaXJjbGUgaXMgYWxpZ25lZCB0byB0aGUgcGxhbmUgb2YgdGhlIG1hcC5cIlxuXHRcdFx0fSxcblx0XHRcdHZpZXdwb3J0OiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgY2lyY2xlIGlzIGFsaWduZWQgdG8gdGhlIHBsYW5lIG9mIHRoZSB2aWV3cG9ydC5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwidmlld3BvcnRcIixcblx0XHRkb2M6IFwiT3JpZW50YXRpb24gb2YgY2lyY2xlIHdoZW4gbWFwIGlzIHBpdGNoZWQuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjM5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjIuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy43LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC42LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcImNpcmNsZS1zdHJva2Utd2lkdGhcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0bWluaW11bTogMCxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdGRvYzogXCJUaGUgd2lkdGggb2YgdGhlIGNpcmNsZSdzIHN0cm9rZS4gU3Ryb2tlcyBhcmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGBjaXJjbGUtcmFkaXVzYC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4yOS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImNpcmNsZS1zdHJva2UtY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcImRlZmF1bHRcIjogXCIjMDAwMDAwXCIsXG5cdFx0ZG9jOiBcIlRoZSBzdHJva2UgY29sb3Igb2YgdGhlIGNpcmNsZS5cIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yOS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjI5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiY2lyY2xlLXN0cm9rZS1vcGFjaXR5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJUaGUgb3BhY2l0eSBvZiB0aGUgY2lyY2xlJ3Mgc3Ryb2tlLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiAxLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yOS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjI5LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH1cbn07XG52YXIgcGFpbnRfaGVhdG1hcCA9IHtcblx0XCJoZWF0bWFwLXJhZGl1c1wiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMzAsXG5cdFx0bWluaW11bTogMSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdGRvYzogXCJSYWRpdXMgb2YgaW5mbHVlbmNlIG9mIG9uZSBoZWF0bWFwIHBvaW50IGluIHBpeGVscy4gSW5jcmVhc2luZyB0aGUgdmFsdWUgbWFrZXMgdGhlIGhlYXRtYXAgc21vb3RoZXIsIGJ1dCBsZXNzIGRldGFpbGVkLiBgcXVlcnlSZW5kZXJlZEZlYXR1cmVzYCBvbiBoZWF0bWFwIGxheWVycyB3aWxsIHJldHVybiBwb2ludHMgd2l0aGluIHRoaXMgcmFkaXVzLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjQzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaGVhdG1hcC13ZWlnaHRcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XHRkb2M6IFwiQSBtZWFzdXJlIG9mIGhvdyBtdWNoIGFuIGluZGl2aWR1YWwgcG9pbnQgY29udHJpYnV0ZXMgdG8gdGhlIGhlYXRtYXAuIEEgdmFsdWUgb2YgMTAgd291bGQgYmUgZXF1aXZhbGVudCB0byBoYXZpbmcgMTAgcG9pbnRzIG9mIHdlaWdodCAxIGluIHRoZSBzYW1lIHNwb3QuIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gY29tYmluZWQgd2l0aCBjbHVzdGVyaW5nLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC40MS4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaGVhdG1hcC1pbnRlbnNpdHlcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGRvYzogXCJTaW1pbGFyIHRvIGBoZWF0bWFwLXdlaWdodGAgYnV0IGNvbnRyb2xzIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGhlYXRtYXAgZ2xvYmFsbHkuIFByaW1hcmlseSB1c2VkIGZvciBhZGp1c3RpbmcgdGhlIGhlYXRtYXAgYmFzZWQgb24gem9vbSBsZXZlbC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDEuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJoZWF0bWFwLWNvbG9yXCI6IHtcblx0XHR0eXBlOiBcImNvbG9yXCIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdFwiaW50ZXJwb2xhdGVcIixcblx0XHRcdFtcblx0XHRcdFx0XCJsaW5lYXJcIlxuXHRcdFx0XSxcblx0XHRcdFtcblx0XHRcdFx0XCJoZWF0bWFwLWRlbnNpdHlcIlxuXHRcdFx0XSxcblx0XHRcdDAsXG5cdFx0XHRcInJnYmEoMCwgMCwgMjU1LCAwKVwiLFxuXHRcdFx0MC4xLFxuXHRcdFx0XCJyb3lhbGJsdWVcIixcblx0XHRcdDAuMyxcblx0XHRcdFwiY3lhblwiLFxuXHRcdFx0MC41LFxuXHRcdFx0XCJsaW1lXCIsXG5cdFx0XHQwLjcsXG5cdFx0XHRcInllbGxvd1wiLFxuXHRcdFx0MSxcblx0XHRcdFwicmVkXCJcblx0XHRdLFxuXHRcdGRvYzogXCJEZWZpbmVzIHRoZSBjb2xvciBvZiBlYWNoIHBpeGVsIGJhc2VkIG9uIGl0cyBkZW5zaXR5IHZhbHVlIGluIGEgaGVhdG1hcC4gIFNob3VsZCBiZSBhbiBleHByZXNzaW9uIHRoYXQgdXNlcyBgW1xcXCJoZWF0bWFwLWRlbnNpdHlcXFwiXWAgYXMgaW5wdXQuXCIsXG5cdFx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiaGVhdG1hcC1kZW5zaXR5XCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbG9yLXJhbXBcIlxuXHR9LFxuXHRcImhlYXRtYXAtb3BhY2l0eVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiVGhlIGdsb2JhbCBvcGFjaXR5IGF0IHdoaWNoIHRoZSBoZWF0bWFwIGxheWVyIHdpbGwgYmUgZHJhd24uXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjQxLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH1cbn07XG52YXIgcGFpbnRfc3ltYm9sID0ge1xuXHRcImljb24tb3BhY2l0eVwiOiB7XG5cdFx0ZG9jOiBcIlRoZSBvcGFjaXR5IGF0IHdoaWNoIHRoZSBpY29uIHdpbGwgYmUgZHJhd24uXCIsXG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaWNvbi1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIiMwMDAwMDBcIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGRvYzogXCJUaGUgY29sb3Igb2YgdGhlIGljb24uIFRoaXMgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFtTREYgaWNvbnNdKC9oZWxwL3Ryb3VibGVzaG9vdGluZy91c2luZy1yZWNvbG9yYWJsZS1pbWFnZXMtaW4tbWFwYm94LW1hcHMvKS5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaWNvbi1oYWxvLWNvbG9yXCI6IHtcblx0XHR0eXBlOiBcImNvbG9yXCIsXG5cdFx0XCJkZWZhdWx0XCI6IFwicmdiYSgwLCAwLCAwLCAwKVwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0ZG9jOiBcIlRoZSBjb2xvciBvZiB0aGUgaWNvbidzIGhhbG8uIEljb24gaGFsb3MgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFtTREYgaWNvbnNdKC9oZWxwL3Ryb3VibGVzaG9vdGluZy91c2luZy1yZWNvbG9yYWJsZS1pbWFnZXMtaW4tbWFwYm94LW1hcHMvKS5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJpY29uLWltYWdlXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiaWNvbi1oYWxvLXdpZHRoXCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiRGlzdGFuY2Ugb2YgaGFsbyB0byB0aGUgaWNvbiBvdXRsaW5lLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImljb24taW1hZ2VcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJpY29uLWhhbG8tYmx1clwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0ZG9jOiBcIkZhZGUgb3V0IHRoZSBoYWxvIHRvd2FyZHMgdGhlIG91dHNpZGUuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwiaWNvbi1pbWFnZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4zMy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImljb24tdHJhbnNsYXRlXCI6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0bGVuZ3RoOiAyLFxuXHRcdFwiZGVmYXVsdFwiOiBbXG5cdFx0XHQwLFxuXHRcdFx0MFxuXHRcdF0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiRGlzdGFuY2UgdGhhdCB0aGUgaWNvbidzIGFuY2hvciBpcyBtb3ZlZCBmcm9tIGl0cyBvcmlnaW5hbCBwbGFjZW1lbnQuIFBvc2l0aXZlIHZhbHVlcyBpbmRpY2F0ZSByaWdodCBhbmQgZG93biwgd2hpbGUgbmVnYXRpdmUgdmFsdWVzIGluZGljYXRlIGxlZnQgYW5kIHVwLlwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImljb24taW1hZ2VcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaWNvbi10cmFuc2xhdGUtYW5jaG9yXCI6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdG1hcDoge1xuXHRcdFx0XHRkb2M6IFwiSWNvbnMgYXJlIHRyYW5zbGF0ZWQgcmVsYXRpdmUgdG8gdGhlIG1hcC5cIlxuXHRcdFx0fSxcblx0XHRcdHZpZXdwb3J0OiB7XG5cdFx0XHRcdGRvYzogXCJJY29ucyBhcmUgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJDb250cm9scyB0aGUgZnJhbWUgb2YgcmVmZXJlbmNlIGZvciBgaWNvbi10cmFuc2xhdGVgLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1hcFwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImljb24taW1hZ2VcIixcblx0XHRcdFwiaWNvbi10cmFuc2xhdGVcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInRleHQtb3BhY2l0eVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiVGhlIG9wYWNpdHkgYXQgd2hpY2ggdGhlIHRleHQgd2lsbCBiZSBkcmF3bi5cIixcblx0XHRcImRlZmF1bHRcIjogMSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdGRvYzogXCJUaGUgY29sb3Igd2l0aCB3aGljaCB0aGUgdGV4dCB3aWxsIGJlIGRyYXduLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIiMwMDAwMDBcIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdG92ZXJyaWRhYmxlOiB0cnVlLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMzMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjUuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjQuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJ0ZXh0LWhhbG8tY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcImRlZmF1bHRcIjogXCJyZ2JhKDAsIDAsIDAsIDApXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiVGhlIGNvbG9yIG9mIHRoZSB0ZXh0J3MgaGFsbywgd2hpY2ggaGVscHMgaXQgc3RhbmQgb3V0IGZyb20gYmFja2dyb3VuZHMuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4zMy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcInRleHQtaGFsby13aWR0aFwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0dW5pdHM6IFwicGl4ZWxzXCIsXG5cdFx0ZG9jOiBcIkRpc3RhbmNlIG9mIGhhbG8gdG8gdGhlIGZvbnQgb3V0bGluZS4gTWF4IHRleHQgaGFsbyB3aWR0aCBpcyAxLzQgb2YgdGhlIGZvbnQtc2l6ZS5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC1oYWxvLWJsdXJcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0bWluaW11bTogMCxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdGRvYzogXCJUaGUgaGFsbydzIGZhZGVvdXQgZGlzdGFuY2UgdG93YXJkcyB0aGUgb3V0c2lkZS5cIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJ0ZXh0LWZpZWxkXCJcblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjMzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy41LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwidGV4dC10cmFuc2xhdGVcIjoge1xuXHRcdHR5cGU6IFwiYXJyYXlcIixcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRsZW5ndGg6IDIsXG5cdFx0XCJkZWZhdWx0XCI6IFtcblx0XHRcdDAsXG5cdFx0XHQwXG5cdFx0XSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdHVuaXRzOiBcInBpeGVsc1wiLFxuXHRcdGRvYzogXCJEaXN0YW5jZSB0aGF0IHRoZSB0ZXh0J3MgYW5jaG9yIGlzIG1vdmVkIGZyb20gaXRzIG9yaWdpbmFsIHBsYWNlbWVudC4gUG9zaXRpdmUgdmFsdWVzIGluZGljYXRlIHJpZ2h0IGFuZCBkb3duLCB3aGlsZSBuZWdhdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgbGVmdCBhbmQgdXAuXCIsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdFwidGV4dC1maWVsZFwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJ0ZXh0LXRyYW5zbGF0ZS1hbmNob3JcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgdGV4dCBpcyB0cmFuc2xhdGVkIHJlbGF0aXZlIHRvIHRoZSBtYXAuXCJcblx0XHRcdH0sXG5cdFx0XHR2aWV3cG9ydDoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIHRleHQgaXMgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJDb250cm9scyB0aGUgZnJhbWUgb2YgcmVmZXJlbmNlIGZvciBgdGV4dC10cmFuc2xhdGVgLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1hcFwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcInRleHQtZmllbGRcIixcblx0XHRcdFwidGV4dC10cmFuc2xhdGVcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9XG59O1xudmFyIHBhaW50X3Jhc3RlciA9IHtcblx0XCJyYXN0ZXItb3BhY2l0eVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiVGhlIG9wYWNpdHkgYXQgd2hpY2ggdGhlIGltYWdlIHdpbGwgYmUgZHJhd24uXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwicmFzdGVyLWh1ZS1yb3RhdGVcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0cGVyaW9kOiAzNjAsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJkZWdyZWVzXCIsXG5cdFx0ZG9jOiBcIlJvdGF0ZXMgaHVlcyBhcm91bmQgdGhlIGNvbG9yIHdoZWVsLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInJhc3Rlci1icmlnaHRuZXNzLW1pblwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiSW5jcmVhc2Ugb3IgcmVkdWNlIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBpbWFnZS4gVGhlIHZhbHVlIGlzIHRoZSBtaW5pbXVtIGJyaWdodG5lc3MuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0bWluaW11bTogMCxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwicmFzdGVyLWJyaWdodG5lc3MtbWF4XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJJbmNyZWFzZSBvciByZWR1Y2UgdGhlIGJyaWdodG5lc3Mgb2YgdGhlIGltYWdlLiBUaGUgdmFsdWUgaXMgdGhlIG1heGltdW0gYnJpZ2h0bmVzcy5cIixcblx0XHRcImRlZmF1bHRcIjogMSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJyYXN0ZXItc2F0dXJhdGlvblwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiSW5jcmVhc2Ugb3IgcmVkdWNlIHRoZSBzYXR1cmF0aW9uIG9mIHRoZSBpbWFnZS5cIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRtaW5pbXVtOiAtMSxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwicmFzdGVyLWNvbnRyYXN0XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdGRvYzogXCJJbmNyZWFzZSBvciByZWR1Y2UgdGhlIGNvbnRyYXN0IG9mIHRoZSBpbWFnZS5cIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRtaW5pbXVtOiAtMSxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwicmFzdGVyLXJlc2FtcGxpbmdcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdGRvYzogXCJUaGUgcmVzYW1wbGluZy9pbnRlcnBvbGF0aW9uIG1ldGhvZCB0byB1c2UgZm9yIG92ZXJzY2FsaW5nLCBhbHNvIGtub3duIGFzIHRleHR1cmUgbWFnbmlmaWNhdGlvbiBmaWx0ZXJcIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdGxpbmVhcjoge1xuXHRcdFx0XHRkb2M6IFwiKEJpKWxpbmVhciBmaWx0ZXJpbmcgaW50ZXJwb2xhdGVzIHBpeGVsIHZhbHVlcyB1c2luZyB0aGUgd2VpZ2h0ZWQgYXZlcmFnZSBvZiB0aGUgZm91ciBjbG9zZXN0IG9yaWdpbmFsIHNvdXJjZSBwaXhlbHMgY3JlYXRpbmcgYSBzbW9vdGggYnV0IGJsdXJyeSBsb29rIHdoZW4gb3ZlcnNjYWxlZFwiXG5cdFx0XHR9LFxuXHRcdFx0bmVhcmVzdDoge1xuXHRcdFx0XHRkb2M6IFwiTmVhcmVzdCBuZWlnaGJvciBmaWx0ZXJpbmcgaW50ZXJwb2xhdGVzIHBpeGVsIHZhbHVlcyB1c2luZyB0aGUgbmVhcmVzdCBvcmlnaW5hbCBzb3VyY2UgcGl4ZWwgY3JlYXRpbmcgYSBzaGFycCBidXQgcGl4ZWxhdGVkIGxvb2sgd2hlbiBvdmVyc2NhbGVkXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcImxpbmVhclwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC40Ny4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi4zLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuOS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJyYXN0ZXItZmFkZS1kdXJhdGlvblwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMzAwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFx0dW5pdHM6IFwibWlsbGlzZWNvbmRzXCIsXG5cdFx0ZG9jOiBcIkZhZGUgZHVyYXRpb24gd2hlbiBhIG5ldyB0aWxlIGlzIGFkZGVkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4xMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMi4wLjFcIixcblx0XHRcdFx0aW9zOiBcIjIuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9XG59O1xudmFyIHBhaW50X2hpbGxzaGFkZSA9IHtcblx0XCJoaWxsc2hhZGUtaWxsdW1pbmF0aW9uLWRpcmVjdGlvblwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMzM1LFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMzU5LFxuXHRcdGRvYzogXCJUaGUgZGlyZWN0aW9uIG9mIHRoZSBsaWdodCBzb3VyY2UgdXNlZCB0byBnZW5lcmF0ZSB0aGUgaGlsbHNoYWRpbmcgd2l0aCAwIGFzIHRoZSB0b3Agb2YgdGhlIHZpZXdwb3J0IGlmIGBoaWxsc2hhZGUtaWxsdW1pbmF0aW9uLWFuY2hvcmAgaXMgc2V0IHRvIGB2aWV3cG9ydGAgYW5kIGR1ZSBub3J0aCBpZiBgaGlsbHNoYWRlLWlsbHVtaW5hdGlvbi1hbmNob3JgIGlzIHNldCB0byBgbWFwYC5cIixcblx0XHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJoaWxsc2hhZGUtaWxsdW1pbmF0aW9uLWFuY2hvclwiOiB7XG5cdFx0dHlwZTogXCJlbnVtXCIsXG5cdFx0dmFsdWVzOiB7XG5cdFx0XHRtYXA6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBoaWxsc2hhZGUgaWxsdW1pbmF0aW9uIGlzIHJlbGF0aXZlIHRvIHRoZSBub3J0aCBkaXJlY3Rpb24uXCJcblx0XHRcdH0sXG5cdFx0XHR2aWV3cG9ydDoge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGhpbGxzaGFkZSBpbGx1bWluYXRpb24gaXMgcmVsYXRpdmUgdG8gdGhlIHRvcCBvZiB0aGUgdmlld3BvcnQuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZGVmYXVsdFwiOiBcInZpZXdwb3J0XCIsXG5cdFx0ZG9jOiBcIkRpcmVjdGlvbiBvZiBsaWdodCBzb3VyY2Ugd2hlbiBtYXAgaXMgcm90YXRlZC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaGlsbHNoYWRlLWV4YWdnZXJhdGlvblwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRkb2M6IFwiSW50ZW5zaXR5IG9mIHRoZSBoaWxsc2hhZGVcIixcblx0XHRcImRlZmF1bHRcIjogMC41LFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMSxcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC40My4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcImhpbGxzaGFkZS1zaGFkb3ctY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcImRlZmF1bHRcIjogXCIjMDAwMDAwXCIsXG5cdFx0ZG9jOiBcIlRoZSBzaGFkaW5nIGNvbG9yIG9mIGFyZWFzIHRoYXQgZmFjZSBhd2F5IGZyb20gdGhlIGxpZ2h0IHNvdXJjZS5cIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC40My4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjQuMC4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNy4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcImhpbGxzaGFkZS1oaWdobGlnaHQtY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcImRlZmF1bHRcIjogXCIjRkZGRkZGXCIsXG5cdFx0ZG9jOiBcIlRoZSBzaGFkaW5nIGNvbG9yIG9mIGFyZWFzIHRoYXQgZmFjZXMgdG93YXJkcyB0aGUgbGlnaHQgc291cmNlLlwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjQzLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI2LjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC43LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiaGlsbHNoYWRlLWFjY2VudC1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIiMwMDAwMDBcIixcblx0XHRkb2M6IFwiVGhlIHNoYWRpbmcgY29sb3IgdXNlZCB0byBhY2NlbnR1YXRlIHJ1Z2dlZCB0ZXJyYWluIGxpa2Ugc2hhcnAgY2xpZmZzIGFuZCBnb3JnZXMuXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDMuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuMC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjcuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fVxufTtcbnZhciBwYWludF9iYWNrZ3JvdW5kID0ge1xuXHRcImJhY2tncm91bmQtY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcImRlZmF1bHRcIjogXCIjMDAwMDAwXCIsXG5cdFx0ZG9jOiBcIlRoZSBjb2xvciB3aXRoIHdoaWNoIHRoZSBiYWNrZ3JvdW5kIHdpbGwgYmUgZHJhd24uXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRcIiFcIjogXCJiYWNrZ3JvdW5kLXBhdHRlcm5cIlxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiYmFja2dyb3VuZC1wYXR0ZXJuXCI6IHtcblx0XHR0eXBlOiBcInJlc29sdmVkSW1hZ2VcIixcblx0XHR0cmFuc2l0aW9uOiB0cnVlLFxuXHRcdGRvYzogXCJOYW1lIG9mIGltYWdlIGluIHNwcml0ZSB0byB1c2UgZm9yIGRyYXdpbmcgYW4gaW1hZ2UgYmFja2dyb3VuZC4gRm9yIHNlYW1sZXNzIHBhdHRlcm5zLCBpbWFnZSB3aWR0aCBhbmQgaGVpZ2h0IG11c3QgYmUgYSBmYWN0b3Igb2YgdHdvICgyLCA0LCA4LCAuLi4sIDUxMikuIE5vdGUgdGhhdCB6b29tLWRlcGVuZGVudCBleHByZXNzaW9ucyB3aWxsIGJlIGV2YWx1YXRlZCBvbmx5IGF0IGludGVnZXIgem9vbSBsZXZlbHMuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjEwLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIyLjAuMVwiLFxuXHRcdFx0XHRpb3M6IFwiMi4wLjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC4xLjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiY3Jvc3MtZmFkZWRcIlxuXHR9LFxuXHRcImJhY2tncm91bmQtb3BhY2l0eVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEsXG5cdFx0ZG9jOiBcIlRoZSBvcGFjaXR5IGF0IHdoaWNoIHRoZSBiYWNrZ3JvdW5kIHdpbGwgYmUgZHJhd24uXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjIuMC4xXCIsXG5cdFx0XHRcdGlvczogXCIyLjAuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fVxufTtcbnZhciBwYWludF9za3kgPSB7XG5cdFwic2t5LXR5cGVcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0Z3JhZGllbnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlJlbmRlcnMgdGhlIHNreSB3aXRoIGEgZ3JhZGllbnQgdGhhdCBjYW4gYmUgY29uZmlndXJlZCB3aXRoIGBza3ktZ3JhZGllbnQtcmFkaXVzYCBhbmQgYHNreS1ncmFkaWVudGAuXCJcblx0XHRcdH0sXG5cdFx0XHRhdG1vc3BoZXJlOiB7XG5cdFx0XHRcdGRvYzogXCJSZW5kZXJzIHRoZSBza3kgd2l0aCBhIHNpbXVsYXRlZCBhdG1vc3BoZXJpYyBzY2F0dGVyaW5nIGFsZ29yaXRobSwgdGhlIHN1biBkaXJlY3Rpb24gY2FuIGJlIGF0dGFjaGVkIHRvIHRoZSBsaWdodCBwb3NpdGlvbiBvciBleHBsaWNpdGx5IHNldCB0aHJvdWdoIGBza3ktYXRtb3NwaGVyZS1zdW5gLlwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRlZmF1bHRcIjogXCJhdG1vc3BoZXJlXCIsXG5cdFx0ZG9jOiBcIlRoZSB0eXBlIG9mIHRoZSBza3lcIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjIuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIxMC4wLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC4wLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInNreS1hdG1vc3BoZXJlLXN1blwiOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHZhbHVlOiBcIm51bWJlclwiLFxuXHRcdGxlbmd0aDogMixcblx0XHR1bml0czogXCJkZWdyZWVzXCIsXG5cdFx0bWluaW11bTogW1xuXHRcdFx0MCxcblx0XHRcdDBcblx0XHRdLFxuXHRcdG1heGltdW06IFtcblx0XHRcdDM2MCxcblx0XHRcdDE4MFxuXHRcdF0sXG5cdFx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFx0ZG9jOiBcIlBvc2l0aW9uIG9mIHRoZSBzdW4gY2VudGVyIFthIGF6aW11dGhhbCBhbmdsZSwgcCBwb2xhciBhbmdsZV0uIFRoZSBhemltdXRoYWwgYW5nbGUgaW5kaWNhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgc3VuIHJlbGF0aXZlIHRvIDDCsCBub3J0aCwgd2hlcmUgZGVncmVlcyBwcm9jZWVkIGNsb2Nrd2lzZS4gVGhlIHBvbGFyIGFuZ2xlIGluZGljYXRlcyB0aGUgaGVpZ2h0IG9mIHRoZSBzdW4sIHdoZXJlIDDCsCBpcyBkaXJlY3RseSBhYm92ZSwgYXQgemVuaXRoLCBhbmQgOTDCsCBhdCB0aGUgaG9yaXpvbi4gV2hlbiB0aGlzIHByb3BlcnR5IGlzIG9tbWl0dGVkLCB0aGUgc3VuIGNlbnRlciBpcyBkaXJlY3RseSBpbmhlcml0ZWQgZnJvbSB0aGUgbGlnaHQgcG9zaXRpb24uXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMTAuMC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwic2t5LXR5cGVcIjogXCJhdG1vc3BoZXJlXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogZmFsc2UsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJza3ktYXRtb3NwaGVyZS1zdW4taW50ZW5zaXR5XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwic2t5LXR5cGVcIjogXCJhdG1vc3BoZXJlXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwiZGVmYXVsdFwiOiAxMCxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEwMCxcblx0XHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XHRkb2M6IFwiSW50ZW5zaXR5IG9mIHRoZSBzdW4gYXMgYSBsaWdodCBzb3VyY2UgaW4gdGhlIGF0bW9zcGhlcmUgKG9uIGEgc2NhbGUgZnJvbSAwIHRvIGEgMTAwKS4gU2V0dGluZyBoaWdoZXIgdmFsdWVzIHdpbGwgYnJpZ2h0ZW4gdXAgdGhlIHNreS5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjIuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIxMC4wLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC4wLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwic2t5LWdyYWRpZW50LWNlbnRlclwiOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwic2t5LXR5cGVcIjogXCJncmFkaWVudFwiXG5cdFx0XHR9XG5cdFx0XSxcblx0XHR2YWx1ZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogW1xuXHRcdFx0MCxcblx0XHRcdDBcblx0XHRdLFxuXHRcdGxlbmd0aDogMixcblx0XHR1bml0czogXCJkZWdyZWVzXCIsXG5cdFx0bWluaW11bTogW1xuXHRcdFx0MCxcblx0XHRcdDBcblx0XHRdLFxuXHRcdG1heGltdW06IFtcblx0XHRcdDM2MCxcblx0XHRcdDE4MFxuXHRcdF0sXG5cdFx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFx0ZG9jOiBcIlBvc2l0aW9uIG9mIHRoZSBncmFkaWVudCBjZW50ZXIgW2EgYXppbXV0aGFsIGFuZ2xlLCBwIHBvbGFyIGFuZ2xlXS4gVGhlIGF6aW11dGhhbCBhbmdsZSBpbmRpY2F0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBncmFkaWVudCBjZW50ZXIgcmVsYXRpdmUgdG8gMMKwIG5vcnRoLCB3aGVyZSBkZWdyZWVzIHByb2NlZWQgY2xvY2t3aXNlLiBUaGUgcG9sYXIgYW5nbGUgaW5kaWNhdGVzIHRoZSBoZWlnaHQgb2YgdGhlIGdyYWRpZW50IGNlbnRlciwgd2hlcmUgMMKwIGlzIGRpcmVjdGx5IGFib3ZlLCBhdCB6ZW5pdGgsIGFuZCA5MMKwIGF0IHRoZSBob3Jpem9uLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjEwLjAuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwic2t5LWdyYWRpZW50LXJhZGl1c1wiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInNreS10eXBlXCI6IFwiZ3JhZGllbnRcIlxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJkZWZhdWx0XCI6IDkwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0bWF4aW11bTogMTgwLFxuXHRcdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcdGRvYzogXCJUaGUgYW5ndWxhciBkaXN0YW5jZSAobWVhc3VyZWQgaW4gZGVncmVlcykgZnJvbSBgc2t5LWdyYWRpZW50LWNlbnRlcmAgdXAgdG8gd2hpY2ggdGhlIGdyYWRpZW50IGV4dGVuZHMuIEEgdmFsdWUgb2YgMTgwIGNhdXNlcyB0aGUgZ3JhZGllbnQgdG8gd3JhcCBhcm91bmQgdG8gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBmcm9tIGBza3ktZ3JhZGllbnQtY2VudGVyYC5cIixcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjIuMC4wXCIsXG5cdFx0XHRcdGlvczogXCIxMC4wLjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCIxMC4wLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInNreS1ncmFkaWVudFwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwiZGVmYXVsdFwiOiBbXG5cdFx0XHRcImludGVycG9sYXRlXCIsXG5cdFx0XHRbXG5cdFx0XHRcdFwibGluZWFyXCJcblx0XHRcdF0sXG5cdFx0XHRbXG5cdFx0XHRcdFwic2t5LXJhZGlhbC1wcm9ncmVzc1wiXG5cdFx0XHRdLFxuXHRcdFx0MC44LFxuXHRcdFx0XCIjODdjZWViXCIsXG5cdFx0XHQxLFxuXHRcdFx0XCJ3aGl0ZVwiXG5cdFx0XSxcblx0XHRkb2M6IFwiRGVmaW5lcyBhIHJhZGlhbCBjb2xvciBncmFkaWVudCB3aXRoIHdoaWNoIHRvIGNvbG9yIHRoZSBza3kuIFRoZSBjb2xvciB2YWx1ZXMgY2FuIGJlIGludGVycG9sYXRlZCB3aXRoIGFuIGV4cHJlc3Npb24gdXNpbmcgYHNreS1yYWRpYWwtcHJvZ3Jlc3NgLiBUaGUgcmFuZ2UgWzAsIDFdIGZvciB0aGUgaW50ZXJwb2xhbnQgY292ZXJzIGEgcmFkaWFsIGRpc3RhbmNlIChpbiBkZWdyZWVzKSBvZiBbMCwgYHNreS1ncmFkaWVudC1yYWRpdXNgXSBjZW50ZXJlZCBhdCB0aGUgcG9zaXRpb24gc3BlY2lmaWVkIGJ5IGBza3ktZ3JhZGllbnQtY2VudGVyYC5cIixcblx0XHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInNreS10eXBlXCI6IFwiZ3JhZGllbnRcIlxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMTAuMC4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInNreS1yYWRpYWwtcHJvZ3Jlc3NcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiY29sb3ItcmFtcFwiXG5cdH0sXG5cdFwic2t5LWF0bW9zcGhlcmUtaGFsby1jb2xvclwiOiB7XG5cdFx0dHlwZTogXCJjb2xvclwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIndoaXRlXCIsXG5cdFx0ZG9jOiBcIkEgY29sb3IgYXBwbGllZCB0byB0aGUgYXRtb3NwaGVyZSBzdW4gaGFsby4gVGhlIGFscGhhIGNoYW5uZWwgZGVzY3JpYmVzIGhvdyBzdHJvbmdseSB0aGUgc3VuIGhhbG8gaXMgcmVwcmVzZW50ZWQgaW4gYW4gYXRtb3NwaGVyZSBza3kgbGF5ZXIuXCIsXG5cdFx0dHJhbnNpdGlvbjogZmFsc2UsXG5cdFx0cmVxdWlyZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJza3ktdHlwZVwiOiBcImF0bW9zcGhlcmVcIlxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMTAuMC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcInNreS1hdG1vc3BoZXJlLWNvbG9yXCI6IHtcblx0XHR0eXBlOiBcImNvbG9yXCIsXG5cdFx0XCJkZWZhdWx0XCI6IFwid2hpdGVcIixcblx0XHRkb2M6IFwiQSBjb2xvciB1c2VkIHRvIHR3ZWFrIHRoZSBtYWluIGF0bW9zcGhlcmljIHNjYXR0ZXJpbmcgY29lZmZpY2llbnRzLiBVc2luZyB3aGl0ZSBhcHBsaWVzIHRoZSBkZWZhdWx0IGNvZWZmaWNpZW50cyBnaXZpbmcgdGhlIG5hdHVyYWwgYmx1ZSBjb2xvciB0byB0aGUgYXRtb3NwaGVyZS4gVGhpcyBjb2xvciBhZmZlY3RzIGhvdyBoZWF2aWx5IHRoZSBjb3JyZXNwb25kaW5nIHdhdmVsZW5ndGggaXMgcmVwcmVzZW50ZWQgZHVyaW5nIHNjYXR0ZXJpbmcuIFRoZSBhbHBoYSBjaGFubmVsIGRlc2NyaWJlcyB0aGUgZGVuc2l0eSBvZiB0aGUgYXRtb3NwaGVyZSwgd2l0aCAxIG1heGltdW0gZGVuc2l0eSBhbmQgMCBubyBkZW5zaXR5LlwiLFxuXHRcdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwic2t5LXR5cGVcIjogXCJhdG1vc3BoZXJlXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMi4wLjBcIixcblx0XHRcdFx0aW9zOiBcIjEwLjAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjEwLjAuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWNvbnN0YW50XCJcblx0fSxcblx0XCJza3ktb3BhY2l0eVwiOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMSxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdG1heGltdW06IDEsXG5cdFx0ZG9jOiBcIlRoZSBvcGFjaXR5IG9mIHRoZSBlbnRpcmUgc2t5IGxheWVyLlwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIyLjAuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMTAuMC4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiMTAuMC4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9XG59O1xudmFyIHRyYW5zaXRpb24gPSB7XG5cdGR1cmF0aW9uOiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMzAwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dW5pdHM6IFwibWlsbGlzZWNvbmRzXCIsXG5cdFx0ZG9jOiBcIlRpbWUgYWxsb3R0ZWQgZm9yIHRyYW5zaXRpb25zIHRvIGNvbXBsZXRlLlwiXG5cdH0sXG5cdGRlbGF5OiB7XG5cdFx0dHlwZTogXCJudW1iZXJcIixcblx0XHRcImRlZmF1bHRcIjogMCxcblx0XHRtaW5pbXVtOiAwLFxuXHRcdHVuaXRzOiBcIm1pbGxpc2Vjb25kc1wiLFxuXHRcdGRvYzogXCJMZW5ndGggb2YgdGltZSBiZWZvcmUgYSB0cmFuc2l0aW9uIGJlZ2lucy5cIlxuXHR9XG59O1xudmFyIHByb21vdGVJZCA9IHtcblx0XCIqXCI6IHtcblx0XHR0eXBlOiBcInN0cmluZ1wiLFxuXHRcdGRvYzogXCJBIG5hbWUgb2YgYSBmZWF0dXJlIHByb3BlcnR5IHRvIHVzZSBhcyBJRCBmb3IgZmVhdHVyZSBzdGF0ZS5cIlxuXHR9XG59O1xudmFyIHY4ID0ge1xuXHQkdmVyc2lvbjogJHZlcnNpb24sXG5cdCRyb290OiAkcm9vdCxcblx0c291cmNlczogc291cmNlcyxcblx0c291cmNlOiBzb3VyY2UsXG5cdHNvdXJjZV92ZWN0b3I6IHNvdXJjZV92ZWN0b3IsXG5cdHNvdXJjZV9yYXN0ZXI6IHNvdXJjZV9yYXN0ZXIsXG5cdHNvdXJjZV9yYXN0ZXJfZGVtOiBzb3VyY2VfcmFzdGVyX2RlbSxcblx0c291cmNlX2dlb2pzb246IHNvdXJjZV9nZW9qc29uLFxuXHRzb3VyY2VfdmlkZW86IHNvdXJjZV92aWRlbyxcblx0c291cmNlX2ltYWdlOiBzb3VyY2VfaW1hZ2UsXG5cdGxheWVyOiBsYXllcixcblx0bGF5b3V0OiBsYXlvdXQsXG5cdGxheW91dF9iYWNrZ3JvdW5kOiBsYXlvdXRfYmFja2dyb3VuZCxcblx0bGF5b3V0X3NreTogbGF5b3V0X3NreSxcblx0bGF5b3V0X2ZpbGw6IGxheW91dF9maWxsLFxuXHRsYXlvdXRfY2lyY2xlOiBsYXlvdXRfY2lyY2xlLFxuXHRsYXlvdXRfaGVhdG1hcDogbGF5b3V0X2hlYXRtYXAsXG5cdFwibGF5b3V0X2ZpbGwtZXh0cnVzaW9uXCI6IHtcblx0dmlzaWJpbGl0eToge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0dmlzaWJsZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIHNob3duLlwiXG5cdFx0XHR9LFxuXHRcdFx0bm9uZToge1xuXHRcdFx0XHRkb2M6IFwiVGhlIGxheWVyIGlzIG5vdCBzaG93bi5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkZWZhdWx0XCI6IFwidmlzaWJsZVwiLFxuXHRcdGRvYzogXCJXaGV0aGVyIHRoaXMgbGF5ZXIgaXMgZGlzcGxheWVkLlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImNvbnN0YW50XCJcblx0fVxufSxcblx0bGF5b3V0X2xpbmU6IGxheW91dF9saW5lLFxuXHRsYXlvdXRfc3ltYm9sOiBsYXlvdXRfc3ltYm9sLFxuXHRsYXlvdXRfcmFzdGVyOiBsYXlvdXRfcmFzdGVyLFxuXHRsYXlvdXRfaGlsbHNoYWRlOiBsYXlvdXRfaGlsbHNoYWRlLFxuXHRmaWx0ZXI6IGZpbHRlcixcblx0ZmlsdGVyX3N5bWJvbDogZmlsdGVyX3N5bWJvbCxcblx0ZmlsdGVyX2ZpbGw6IGZpbHRlcl9maWxsLFxuXHRmaWx0ZXJfbGluZTogZmlsdGVyX2xpbmUsXG5cdGZpbHRlcl9jaXJjbGU6IGZpbHRlcl9jaXJjbGUsXG5cdFwiZmlsdGVyX2ZpbGwtZXh0cnVzaW9uXCI6IHtcblx0dHlwZTogXCJib29sZWFuXCIsXG5cdGRvYzogXCJFeHByZXNzaW9uIHdoaWNoIGRldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gZGlzcGxheSBhIFBvbHlnb24uIEZpbGwtZXh0cnVzaW9uIGxheWVyIGRvZXMgTk9UIHN1cHBvcnQgZHluYW1pYyBmaWx0ZXJpbmcsIG1lYW5pbmcgdGhpcyBleHByZXNzaW9uIGNhbiBOT1QgdXNlIHRoZSBgW1xcXCJwaXRjaFxcXCJdYCBhbmQgYFtcXFwiZGlzdGFuY2UtZnJvbS1jZW50ZXJcXFwiXWAgZXhwcmVzc2lvbnMgdG8gcmVmZXJlbmNlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSB2aWV3LlwiLFxuXHRcImRlZmF1bHRcIjogZmFsc2UsXG5cdHRyYW5zaXRpb246IGZhbHNlLFxuXHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiLFxuXHRleHByZXNzaW9uOiB7XG5cdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcInpvb21cIixcblx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XVxuXHR9XG59LFxuXHRmaWx0ZXJfaGVhdG1hcDogZmlsdGVyX2hlYXRtYXAsXG5cdGZpbHRlcl9vcGVyYXRvcjogZmlsdGVyX29wZXJhdG9yLFxuXHRnZW9tZXRyeV90eXBlOiBnZW9tZXRyeV90eXBlLFxuXHRcImZ1bmN0aW9uXCI6IHtcblx0ZXhwcmVzc2lvbjoge1xuXHRcdHR5cGU6IFwiZXhwcmVzc2lvblwiLFxuXHRcdGRvYzogXCJBbiBleHByZXNzaW9uLlwiXG5cdH0sXG5cdHN0b3BzOiB7XG5cdFx0dHlwZTogXCJhcnJheVwiLFxuXHRcdGRvYzogXCJBbiBhcnJheSBvZiBzdG9wcy5cIixcblx0XHR2YWx1ZTogXCJmdW5jdGlvbl9zdG9wXCJcblx0fSxcblx0YmFzZToge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHRkb2M6IFwiVGhlIGV4cG9uZW50aWFsIGJhc2Ugb2YgdGhlIGludGVycG9sYXRpb24gY3VydmUuIEl0IGNvbnRyb2xzIHRoZSByYXRlIGF0IHdoaWNoIHRoZSByZXN1bHQgaW5jcmVhc2VzLiBIaWdoZXIgdmFsdWVzIG1ha2UgdGhlIHJlc3VsdCBpbmNyZWFzZSBtb3JlIHRvd2FyZHMgdGhlIGhpZ2ggZW5kIG9mIHRoZSByYW5nZS4gV2l0aCBgMWAgdGhlIHN0b3BzIGFyZSBpbnRlcnBvbGF0ZWQgbGluZWFybHkuXCJcblx0fSxcblx0cHJvcGVydHk6IHtcblx0XHR0eXBlOiBcInN0cmluZ1wiLFxuXHRcdGRvYzogXCJUaGUgbmFtZSBvZiBhIGZlYXR1cmUgcHJvcGVydHkgdG8gdXNlIGFzIHRoZSBmdW5jdGlvbiBpbnB1dC5cIixcblx0XHRcImRlZmF1bHRcIjogXCIkem9vbVwiXG5cdH0sXG5cdHR5cGU6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdGlkZW50aXR5OiB7XG5cdFx0XHRcdGRvYzogXCJSZXR1cm4gdGhlIGlucHV0IHZhbHVlIGFzIHRoZSBvdXRwdXQgdmFsdWUuXCJcblx0XHRcdH0sXG5cdFx0XHRleHBvbmVudGlhbDoge1xuXHRcdFx0XHRkb2M6IFwiR2VuZXJhdGUgYW4gb3V0cHV0IGJ5IGludGVycG9sYXRpbmcgYmV0d2VlbiBzdG9wcyBqdXN0IGxlc3MgdGhhbiBhbmQganVzdCBncmVhdGVyIHRoYW4gdGhlIGZ1bmN0aW9uIGlucHV0LlwiXG5cdFx0XHR9LFxuXHRcdFx0aW50ZXJ2YWw6IHtcblx0XHRcdFx0ZG9jOiBcIlJldHVybiB0aGUgb3V0cHV0IHZhbHVlIG9mIHRoZSBzdG9wIGp1c3QgbGVzcyB0aGFuIHRoZSBmdW5jdGlvbiBpbnB1dC5cIlxuXHRcdFx0fSxcblx0XHRcdGNhdGVnb3JpY2FsOiB7XG5cdFx0XHRcdGRvYzogXCJSZXR1cm4gdGhlIG91dHB1dCB2YWx1ZSBvZiB0aGUgc3RvcCBlcXVhbCB0byB0aGUgZnVuY3Rpb24gaW5wdXQuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgaW50ZXJwb2xhdGlvbiBzdHJhdGVneSB0byB1c2UgaW4gZnVuY3Rpb24gZXZhbHVhdGlvbi5cIixcblx0XHRcImRlZmF1bHRcIjogXCJleHBvbmVudGlhbFwiXG5cdH0sXG5cdGNvbG9yU3BhY2U6IHtcblx0XHR0eXBlOiBcImVudW1cIixcblx0XHR2YWx1ZXM6IHtcblx0XHRcdHJnYjoge1xuXHRcdFx0XHRkb2M6IFwiVXNlIHRoZSBSR0IgY29sb3Igc3BhY2UgdG8gaW50ZXJwb2xhdGUgY29sb3IgdmFsdWVzXCJcblx0XHRcdH0sXG5cdFx0XHRsYWI6IHtcblx0XHRcdFx0ZG9jOiBcIlVzZSB0aGUgTEFCIGNvbG9yIHNwYWNlIHRvIGludGVycG9sYXRlIGNvbG9yIHZhbHVlcy5cIlxuXHRcdFx0fSxcblx0XHRcdGhjbDoge1xuXHRcdFx0XHRkb2M6IFwiVXNlIHRoZSBIQ0wgY29sb3Igc3BhY2UgdG8gaW50ZXJwb2xhdGUgY29sb3IgdmFsdWVzLCBpbnRlcnBvbGF0aW5nIHRoZSBIdWUsIENocm9tYSwgYW5kIEx1bWluYW5jZSBjaGFubmVscyBpbmRpdmlkdWFsbHkuXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRvYzogXCJUaGUgY29sb3Igc3BhY2UgaW4gd2hpY2ggY29sb3JzIGludGVycG9sYXRlZC4gSW50ZXJwb2xhdGluZyBjb2xvcnMgaW4gcGVyY2VwdHVhbCBjb2xvciBzcGFjZXMgbGlrZSBMQUIgYW5kIEhDTCB0ZW5kIHRvIHByb2R1Y2UgY29sb3IgcmFtcHMgdGhhdCBsb29rIG1vcmUgY29uc2lzdGVudCBhbmQgcHJvZHVjZSBjb2xvcnMgdGhhdCBjYW4gYmUgZGlmZmVyZW50aWF0ZWQgbW9yZSBlYXNpbHkgdGhhbiB0aG9zZSBpbnRlcnBvbGF0ZWQgaW4gUkdCIHNwYWNlLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcInJnYlwiXG5cdH0sXG5cdFwiZGVmYXVsdFwiOiB7XG5cdFx0dHlwZTogXCIqXCIsXG5cdFx0cmVxdWlyZWQ6IGZhbHNlLFxuXHRcdGRvYzogXCJBIHZhbHVlIHRvIHNlcnZlIGFzIGEgZmFsbGJhY2sgZnVuY3Rpb24gcmVzdWx0IHdoZW4gYSB2YWx1ZSBpc24ndCBvdGhlcndpc2UgYXZhaWxhYmxlLiBJdCBpcyB1c2VkIGluIHRoZSBmb2xsb3dpbmcgY2lyY3Vtc3RhbmNlczpcXG4qIEluIGNhdGVnb3JpY2FsIGZ1bmN0aW9ucywgd2hlbiB0aGUgZmVhdHVyZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIHN0b3AgZG9tYWluIHZhbHVlcy5cXG4qIEluIHByb3BlcnR5IGFuZCB6b29tLWFuZC1wcm9wZXJ0eSBmdW5jdGlvbnMsIHdoZW4gYSBmZWF0dXJlIGRvZXMgbm90IGNvbnRhaW4gYSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eS5cXG4qIEluIGlkZW50aXR5IGZ1bmN0aW9ucywgd2hlbiB0aGUgZmVhdHVyZSB2YWx1ZSBpcyBub3QgdmFsaWQgZm9yIHRoZSBzdHlsZSBwcm9wZXJ0eSAoZm9yIGV4YW1wbGUsIGlmIHRoZSBmdW5jdGlvbiBpcyBiZWluZyB1c2VkIGZvciBhIGBjaXJjbGUtY29sb3JgIHByb3BlcnR5IGJ1dCB0aGUgZmVhdHVyZSBwcm9wZXJ0eSB2YWx1ZSBpcyBub3QgYSBzdHJpbmcgb3Igbm90IGEgdmFsaWQgY29sb3IpLlxcbiogSW4gaW50ZXJ2YWwgb3IgZXhwb25lbnRpYWwgcHJvcGVydHkgYW5kIHpvb20tYW5kLXByb3BlcnR5IGZ1bmN0aW9ucywgd2hlbiB0aGUgZmVhdHVyZSB2YWx1ZSBpcyBub3QgbnVtZXJpYy5cXG5JZiBubyBkZWZhdWx0IGlzIHByb3ZpZGVkLCB0aGUgc3R5bGUgcHJvcGVydHkncyBkZWZhdWx0IGlzIHVzZWQgaW4gdGhlc2UgY2lyY3Vtc3RhbmNlcy5cIlxuXHR9XG59LFxuXHRmdW5jdGlvbl9zdG9wOiBmdW5jdGlvbl9zdG9wLFxuXHRleHByZXNzaW9uOiBleHByZXNzaW9uJDEsXG5cdGV4cHJlc3Npb25fbmFtZTogZXhwcmVzc2lvbl9uYW1lLFxuXHRmb2c6IGZvZyxcblx0bGlnaHQ6IGxpZ2h0LFxuXHRwcm9qZWN0aW9uOiBwcm9qZWN0aW9uLFxuXHR0ZXJyYWluOiB0ZXJyYWluLFxuXHRwYWludDogcGFpbnQsXG5cdHBhaW50X2ZpbGw6IHBhaW50X2ZpbGwsXG5cdFwicGFpbnRfZmlsbC1leHRydXNpb25cIjoge1xuXHRcImZpbGwtZXh0cnVzaW9uLW9wYWNpdHlcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDEsXG5cdFx0bWluaW11bTogMCxcblx0XHRtYXhpbXVtOiAxLFxuXHRcdGRvYzogXCJUaGUgb3BhY2l0eSBvZiB0aGUgZW50aXJlIGZpbGwgZXh0cnVzaW9uIGxheWVyLiBUaGlzIGlzIHJlbmRlcmVkIG9uIGEgcGVyLWxheWVyLCBub3QgcGVyLWZlYXR1cmUsIGJhc2lzLCBhbmQgZGF0YS1kcml2ZW4gc3R5bGluZyBpcyBub3QgYXZhaWxhYmxlLlwiLFxuXHRcdHRyYW5zaXRpb246IHRydWUsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjI3LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy42LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC41LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiZmlsbC1leHRydXNpb24tY29sb3JcIjoge1xuXHRcdHR5cGU6IFwiY29sb3JcIixcblx0XHRcImRlZmF1bHRcIjogXCIjMDAwMDAwXCIsXG5cdFx0ZG9jOiBcIlRoZSBiYXNlIGNvbG9yIG9mIHRoZSBleHRydWRlZCBmaWxsLiBUaGUgZXh0cnVzaW9uJ3Mgc3VyZmFjZXMgd2lsbCBiZSBzaGFkZWQgZGlmZmVyZW50bHkgYmFzZWQgb24gdGhpcyBjb2xvciBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSByb290IGBsaWdodGAgc2V0dGluZ3MuIElmIHRoaXMgY29sb3IgaXMgc3BlY2lmaWVkIGFzIGByZ2JhYCB3aXRoIGFuIGFscGhhIGNvbXBvbmVudCwgdGhlIGFscGhhIGNvbXBvbmVudCB3aWxsIGJlIGlnbm9yZWQ7IHVzZSBgZmlsbC1leHRydXNpb24tb3BhY2l0eWAgdG8gc2V0IGxheWVyIG9wYWNpdHkuXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRcIiFcIjogXCJmaWxsLWV4dHJ1c2lvbi1wYXR0ZXJuXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH0sXG5cdFx0XHRcImRhdGEtZHJpdmVuIHN0eWxpbmdcIjoge1xuXHRcdFx0XHRqczogXCIwLjI3LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy42LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC41LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiB0cnVlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIixcblx0XHRcdFx0XCJmZWF0dXJlXCIsXG5cdFx0XHRcdFwiZmVhdHVyZS1zdGF0ZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJkYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiZmlsbC1leHRydXNpb24tdHJhbnNsYXRlXCI6IHtcblx0XHR0eXBlOiBcImFycmF5XCIsXG5cdFx0dmFsdWU6IFwibnVtYmVyXCIsXG5cdFx0bGVuZ3RoOiAyLFxuXHRcdFwiZGVmYXVsdFwiOiBbXG5cdFx0XHQwLFxuXHRcdFx0MFxuXHRcdF0sXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHR1bml0czogXCJwaXhlbHNcIixcblx0XHRkb2M6IFwiVGhlIGdlb21ldHJ5J3Mgb2Zmc2V0LiBWYWx1ZXMgYXJlIFt4LCB5XSB3aGVyZSBuZWdhdGl2ZXMgaW5kaWNhdGUgbGVmdCBhbmQgdXAgKG9uIHRoZSBmbGF0IHBsYW5lKSwgcmVzcGVjdGl2ZWx5LlwiLFxuXHRcdFwic2RrLXN1cHBvcnRcIjoge1xuXHRcdFx0XCJiYXNpYyBmdW5jdGlvbmFsaXR5XCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9LFxuXHRcImZpbGwtZXh0cnVzaW9uLXRyYW5zbGF0ZS1hbmNob3JcIjoge1xuXHRcdHR5cGU6IFwiZW51bVwiLFxuXHRcdHZhbHVlczoge1xuXHRcdFx0bWFwOiB7XG5cdFx0XHRcdGRvYzogXCJUaGUgZmlsbCBleHRydXNpb24gaXMgdHJhbnNsYXRlZCByZWxhdGl2ZSB0byB0aGUgbWFwLlwiXG5cdFx0XHR9LFxuXHRcdFx0dmlld3BvcnQ6IHtcblx0XHRcdFx0ZG9jOiBcIlRoZSBmaWxsIGV4dHJ1c2lvbiBpcyB0cmFuc2xhdGVkIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydC5cIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZG9jOiBcIkNvbnRyb2xzIHRoZSBmcmFtZSBvZiByZWZlcmVuY2UgZm9yIGBmaWxsLWV4dHJ1c2lvbi10cmFuc2xhdGVgLlwiLFxuXHRcdFwiZGVmYXVsdFwiOiBcIm1hcFwiLFxuXHRcdHJlcXVpcmVzOiBbXG5cdFx0XHRcImZpbGwtZXh0cnVzaW9uLXRyYW5zbGF0ZVwiXG5cdFx0XSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjcuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjYuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjUuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IGZhbHNlLFxuXHRcdFx0cGFyYW1ldGVyczogW1xuXHRcdFx0XHRcInpvb21cIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1jb25zdGFudFwiXG5cdH0sXG5cdFwiZmlsbC1leHRydXNpb24tcGF0dGVyblwiOiB7XG5cdFx0dHlwZTogXCJyZXNvbHZlZEltYWdlXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRkb2M6IFwiTmFtZSBvZiBpbWFnZSBpbiBzcHJpdGUgdG8gdXNlIGZvciBkcmF3aW5nIGltYWdlcyBvbiBleHRydWRlZCBmaWxscy4gRm9yIHNlYW1sZXNzIHBhdHRlcm5zLCBpbWFnZSB3aWR0aCBhbmQgaGVpZ2h0IG11c3QgYmUgYSBmYWN0b3Igb2YgdHdvICgyLCA0LCA4LCAuLi4sIDUxMikuIE5vdGUgdGhhdCB6b29tLWRlcGVuZGVudCBleHByZXNzaW9ucyB3aWxsIGJlIGV2YWx1YXRlZCBvbmx5IGF0IGludGVnZXIgem9vbSBsZXZlbHMuXCIsXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjI3LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy42LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC41LjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNDkuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjYuNS4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuMTEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiNC40LjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcInByb3BlcnR5LXR5cGVcIjogXCJjcm9zcy1mYWRlZC1kYXRhLWRyaXZlblwiXG5cdH0sXG5cdFwiZmlsbC1leHRydXNpb24taGVpZ2h0XCI6IHtcblx0XHR0eXBlOiBcIm51bWJlclwiLFxuXHRcdFwiZGVmYXVsdFwiOiAwLFxuXHRcdG1pbmltdW06IDAsXG5cdFx0dW5pdHM6IFwibWV0ZXJzXCIsXG5cdFx0ZG9jOiBcIlRoZSBoZWlnaHQgd2l0aCB3aGljaCB0byBleHRydWRlIHRoaXMgbGF5ZXIuXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjcuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjYuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjUuMFwiXG5cdFx0XHR9LFxuXHRcdFx0XCJkYXRhLWRyaXZlbiBzdHlsaW5nXCI6IHtcblx0XHRcdFx0anM6IFwiMC4yNy4wXCIsXG5cdFx0XHRcdGFuZHJvaWQ6IFwiNS4xLjBcIixcblx0XHRcdFx0aW9zOiBcIjMuNi4wXCIsXG5cdFx0XHRcdG1hY29zOiBcIjAuNS4wXCJcblx0XHRcdH1cblx0XHR9LFxuXHRcdGV4cHJlc3Npb246IHtcblx0XHRcdGludGVycG9sYXRlZDogdHJ1ZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCIsXG5cdFx0XHRcdFwiZmVhdHVyZVwiLFxuXHRcdFx0XHRcImZlYXR1cmUtc3RhdGVcIlxuXHRcdFx0XVxuXHRcdH0sXG5cdFx0XCJwcm9wZXJ0eS10eXBlXCI6IFwiZGF0YS1kcml2ZW5cIlxuXHR9LFxuXHRcImZpbGwtZXh0cnVzaW9uLWJhc2VcIjoge1xuXHRcdHR5cGU6IFwibnVtYmVyXCIsXG5cdFx0XCJkZWZhdWx0XCI6IDAsXG5cdFx0bWluaW11bTogMCxcblx0XHR1bml0czogXCJtZXRlcnNcIixcblx0XHRkb2M6IFwiVGhlIGhlaWdodCB3aXRoIHdoaWNoIHRvIGV4dHJ1ZGUgdGhlIGJhc2Ugb2YgdGhpcyBsYXllci4gTXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYGZpbGwtZXh0cnVzaW9uLWhlaWdodGAuXCIsXG5cdFx0dHJhbnNpdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlczogW1xuXHRcdFx0XCJmaWxsLWV4dHJ1c2lvbi1oZWlnaHRcIlxuXHRcdF0sXG5cdFx0XCJzZGstc3VwcG9ydFwiOiB7XG5cdFx0XHRcImJhc2ljIGZ1bmN0aW9uYWxpdHlcIjoge1xuXHRcdFx0XHRqczogXCIwLjI3LjBcIixcblx0XHRcdFx0YW5kcm9pZDogXCI1LjEuMFwiLFxuXHRcdFx0XHRpb3M6IFwiMy42LjBcIixcblx0XHRcdFx0bWFjb3M6IFwiMC41LjBcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGF0YS1kcml2ZW4gc3R5bGluZ1wiOiB7XG5cdFx0XHRcdGpzOiBcIjAuMjcuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjUuMS4wXCIsXG5cdFx0XHRcdGlvczogXCIzLjYuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjUuMFwiXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRleHByZXNzaW9uOiB7XG5cdFx0XHRpbnRlcnBvbGF0ZWQ6IHRydWUsXG5cdFx0XHRwYXJhbWV0ZXJzOiBbXG5cdFx0XHRcdFwiem9vbVwiLFxuXHRcdFx0XHRcImZlYXR1cmVcIixcblx0XHRcdFx0XCJmZWF0dXJlLXN0YXRlXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtZHJpdmVuXCJcblx0fSxcblx0XCJmaWxsLWV4dHJ1c2lvbi12ZXJ0aWNhbC1ncmFkaWVudFwiOiB7XG5cdFx0dHlwZTogXCJib29sZWFuXCIsXG5cdFx0XCJkZWZhdWx0XCI6IHRydWUsXG5cdFx0ZG9jOiBcIldoZXRoZXIgdG8gYXBwbHkgYSB2ZXJ0aWNhbCBncmFkaWVudCB0byB0aGUgc2lkZXMgb2YgYSBmaWxsLWV4dHJ1c2lvbiBsYXllci4gSWYgdHJ1ZSwgc2lkZXMgd2lsbCBiZSBzaGFkZWQgc2xpZ2h0bHkgZGFya2VyIGZhcnRoZXIgZG93bi5cIixcblx0XHR0cmFuc2l0aW9uOiBmYWxzZSxcblx0XHRcInNkay1zdXBwb3J0XCI6IHtcblx0XHRcdFwiYmFzaWMgZnVuY3Rpb25hbGl0eVwiOiB7XG5cdFx0XHRcdGpzOiBcIjAuNTAuMFwiLFxuXHRcdFx0XHRhbmRyb2lkOiBcIjcuMC4wXCIsXG5cdFx0XHRcdGlvczogXCI0LjcuMFwiLFxuXHRcdFx0XHRtYWNvczogXCIwLjEzLjBcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZXhwcmVzc2lvbjoge1xuXHRcdFx0aW50ZXJwb2xhdGVkOiBmYWxzZSxcblx0XHRcdHBhcmFtZXRlcnM6IFtcblx0XHRcdFx0XCJ6b29tXCJcblx0XHRcdF1cblx0XHR9LFxuXHRcdFwicHJvcGVydHktdHlwZVwiOiBcImRhdGEtY29uc3RhbnRcIlxuXHR9XG59LFxuXHRwYWludF9saW5lOiBwYWludF9saW5lLFxuXHRwYWludF9jaXJjbGU6IHBhaW50X2NpcmNsZSxcblx0cGFpbnRfaGVhdG1hcDogcGFpbnRfaGVhdG1hcCxcblx0cGFpbnRfc3ltYm9sOiBwYWludF9zeW1ib2wsXG5cdHBhaW50X3Jhc3RlcjogcGFpbnRfcmFzdGVyLFxuXHRwYWludF9oaWxsc2hhZGU6IHBhaW50X2hpbGxzaGFkZSxcblx0cGFpbnRfYmFja2dyb3VuZDogcGFpbnRfYmFja2dyb3VuZCxcblx0cGFpbnRfc2t5OiBwYWludF9za3ksXG5cdHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG5cdFwicHJvcGVydHktdHlwZVwiOiB7XG5cdFwiZGF0YS1kcml2ZW5cIjoge1xuXHRcdHR5cGU6IFwicHJvcGVydHktdHlwZVwiLFxuXHRcdGRvYzogXCJQcm9wZXJ0eSBpcyBpbnRlcnBvbGFibGUgYW5kIGNhbiBiZSByZXByZXNlbnRlZCB1c2luZyBhIHByb3BlcnR5IGV4cHJlc3Npb24uXCJcblx0fSxcblx0XCJjcm9zcy1mYWRlZFwiOiB7XG5cdFx0dHlwZTogXCJwcm9wZXJ0eS10eXBlXCIsXG5cdFx0ZG9jOiBcIlByb3BlcnR5IGlzIG5vbi1pbnRlcnBvbGFibGU7IHJhdGhlciwgaXRzIHZhbHVlcyB3aWxsIGJlIGNyb3NzLWZhZGVkIHRvIHNtb290aGx5IHRyYW5zaXRpb24gYmV0d2VlbiBpbnRlZ2VyIHpvb21zLlwiXG5cdH0sXG5cdFwiY3Jvc3MtZmFkZWQtZGF0YS1kcml2ZW5cIjoge1xuXHRcdHR5cGU6IFwicHJvcGVydHktdHlwZVwiLFxuXHRcdGRvYzogXCJQcm9wZXJ0eSBpcyBub24taW50ZXJwb2xhYmxlOyByYXRoZXIsIGl0cyB2YWx1ZXMgd2lsbCBiZSBjcm9zcy1mYWRlZCB0byBzbW9vdGhseSB0cmFuc2l0aW9uIGJldHdlZW4gaW50ZWdlciB6b29tcy4gSXQgY2FuIGJlIHJlcHJlc2VudGVkIHVzaW5nIGEgcHJvcGVydHkgZXhwcmVzc2lvbi5cIlxuXHR9LFxuXHRcImNvbG9yLXJhbXBcIjoge1xuXHRcdHR5cGU6IFwicHJvcGVydHktdHlwZVwiLFxuXHRcdGRvYzogXCJQcm9wZXJ0eSBzaG91bGQgYmUgc3BlY2lmaWVkIHVzaW5nIGEgY29sb3IgcmFtcCBmcm9tIHdoaWNoIHRoZSBvdXRwdXQgY29sb3IgY2FuIGJlIHNhbXBsZWQgYmFzZWQgb24gYSBwcm9wZXJ0eSBjYWxjdWxhdGlvbi5cIlxuXHR9LFxuXHRcImRhdGEtY29uc3RhbnRcIjoge1xuXHRcdHR5cGU6IFwicHJvcGVydHktdHlwZVwiLFxuXHRcdGRvYzogXCJQcm9wZXJ0eSBpcyBpbnRlcnBvbGFibGUgYnV0IGNhbm5vdCBiZSByZXByZXNlbnRlZCB1c2luZyBhIHByb3BlcnR5IGV4cHJlc3Npb24uXCJcblx0fSxcblx0Y29uc3RhbnQ6IHtcblx0XHR0eXBlOiBcInByb3BlcnR5LXR5cGVcIixcblx0XHRkb2M6IFwiUHJvcGVydHkgaXMgY29uc3RhbnQgYWNyb3NzIGFsbCB6b29tIGxldmVscyBhbmQgcHJvcGVydHkgdmFsdWVzLlwiXG5cdH1cbn0sXG5cdHByb21vdGVJZDogcHJvbW90ZUlkXG59O1xuXG4vLyBOb3RlOiBUaGlzIHJlZ2V4IG1hdGNoZXMgZXZlbiBpbnZhbGlkIEpTT04gc3RyaW5ncywgYnV0IHNpbmNlIHdl4oCZcmVcbi8vIHdvcmtpbmcgb24gdGhlIG91dHB1dCBvZiBgSlNPTi5zdHJpbmdpZnlgIHdlIGtub3cgdGhhdCBvbmx5IHZhbGlkIHN0cmluZ3Ncbi8vIGFyZSBwcmVzZW50ICh1bmxlc3MgdGhlIHVzZXIgc3VwcGxpZWQgYSB3ZWlyZCBgb3B0aW9ucy5pbmRlbnRgIGJ1dCBpblxuLy8gdGhhdCBjYXNlIHdlIGRvbuKAmXQgY2FyZSBzaW5jZSB0aGUgb3V0cHV0IHdvdWxkIGJlIGludmFsaWQgYW55d2F5KS5cbnZhciBzdHJpbmdPckNoYXIgPSAvKFwiKD86W15cXFxcXCJdfFxcXFwuKSpcIil8WzosXS9nO1xuXG52YXIganNvblN0cmluZ2lmeVByZXR0eUNvbXBhY3QgPSBmdW5jdGlvbiBzdHJpbmdpZnkocGFzc2VkT2JqLCBvcHRpb25zKSB7XG4gIHZhciBpbmRlbnQsIG1heExlbmd0aCwgcmVwbGFjZXI7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGluZGVudCA9IEpTT04uc3RyaW5naWZ5KFxuICAgIFsxXSxcbiAgICB1bmRlZmluZWQsXG4gICAgb3B0aW9ucy5pbmRlbnQgPT09IHVuZGVmaW5lZCA/IDIgOiBvcHRpb25zLmluZGVudFxuICApLnNsaWNlKDIsIC0zKTtcbiAgbWF4TGVuZ3RoID1cbiAgICBpbmRlbnQgPT09IFwiXCJcbiAgICAgID8gSW5maW5pdHlcbiAgICAgIDogb3B0aW9ucy5tYXhMZW5ndGggPT09IHVuZGVmaW5lZFxuICAgICAgPyA4MFxuICAgICAgOiBvcHRpb25zLm1heExlbmd0aDtcbiAgcmVwbGFjZXIgPSBvcHRpb25zLnJlcGxhY2VyO1xuXG4gIHJldHVybiAoZnVuY3Rpb24gX3N0cmluZ2lmeShvYmosIGN1cnJlbnRJbmRlbnQsIHJlc2VydmVkKSB7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgdmFyIGVuZCwgaW5kZXgsIGl0ZW1zLCBrZXksIGtleVBhcnQsIGtleXMsIGxlbmd0aCwgbmV4dEluZGVudCwgcHJldHRpZmllZCwgc3RhcnQsIHN0cmluZywgdmFsdWU7XG5cbiAgICBpZiAob2JqICYmIHR5cGVvZiBvYmoudG9KU09OID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIG9iaiA9IG9iai50b0pTT04oKTtcbiAgICB9XG5cbiAgICBzdHJpbmcgPSBKU09OLnN0cmluZ2lmeShvYmosIHJlcGxhY2VyKTtcblxuICAgIGlmIChzdHJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICBsZW5ndGggPSBtYXhMZW5ndGggLSBjdXJyZW50SW5kZW50Lmxlbmd0aCAtIHJlc2VydmVkO1xuXG4gICAgaWYgKHN0cmluZy5sZW5ndGggPD0gbGVuZ3RoKSB7XG4gICAgICBwcmV0dGlmaWVkID0gc3RyaW5nLnJlcGxhY2Uoc3RyaW5nT3JDaGFyLCBmdW5jdGlvbihtYXRjaCwgc3RyaW5nTGl0ZXJhbCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nTGl0ZXJhbCB8fCBtYXRjaCArIFwiIFwiO1xuICAgICAgfSk7XG4gICAgICBpZiAocHJldHRpZmllZC5sZW5ndGggPD0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBwcmV0dGlmaWVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXBsYWNlciAhPSBudWxsKSB7XG4gICAgICBvYmogPSBKU09OLnBhcnNlKHN0cmluZyk7XG4gICAgICByZXBsYWNlciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGwpIHtcbiAgICAgIG5leHRJbmRlbnQgPSBjdXJyZW50SW5kZW50ICsgaW5kZW50O1xuICAgICAgaXRlbXMgPSBbXTtcbiAgICAgIGluZGV4ID0gMDtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBzdGFydCA9IFwiW1wiO1xuICAgICAgICBlbmQgPSBcIl1cIjtcbiAgICAgICAgbGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgICAgIF9zdHJpbmdpZnkob2JqW2luZGV4XSwgbmV4dEluZGVudCwgaW5kZXggPT09IGxlbmd0aCAtIDEgPyAwIDogMSkgfHxcbiAgICAgICAgICAgICAgXCJudWxsXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9IFwie1wiO1xuICAgICAgICBlbmQgPSBcIn1cIjtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgICBrZXlQYXJ0ID0gSlNPTi5zdHJpbmdpZnkoa2V5KSArIFwiOiBcIjtcbiAgICAgICAgICB2YWx1ZSA9IF9zdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIG5leHRJbmRlbnQsXG4gICAgICAgICAgICBrZXlQYXJ0Lmxlbmd0aCArIChpbmRleCA9PT0gbGVuZ3RoIC0gMSA/IDAgOiAxKVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goa2V5UGFydCArIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIFtzdGFydCwgaW5kZW50ICsgaXRlbXMuam9pbihcIixcXG5cIiArIG5leHRJbmRlbnQpLCBlbmRdLmpvaW4oXG4gICAgICAgICAgXCJcXG5cIiArIGN1cnJlbnRJbmRlbnRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9KShwYXNzZWRPYmosIFwiXCIsIDApO1xufTtcblxudmFyIHN0cmluZ2lmeVByZXR0eSA9IGpzb25TdHJpbmdpZnlQcmV0dHlDb21wYWN0O1xuXG5mdW5jdGlvbiBzb3J0S2V5c0J5KG9iaiwgcmVmZXJlbmNlKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVmZXJlbmNlKSB7XG4gICAgICAgIGlmIChvYmpba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAocmVzdWx0W2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZm9ybWF0JDEoc3R5bGUsIHNwYWNlID0gMikge1xuICAgIHN0eWxlID0gc29ydEtleXNCeShzdHlsZSwgdjguJHJvb3QpO1xuICAgIGlmIChzdHlsZS5sYXllcnMpIHtcbiAgICAgICAgc3R5bGUubGF5ZXJzID0gc3R5bGUubGF5ZXJzLm1hcChsYXllciA9PiBzb3J0S2V5c0J5KGxheWVyLCB2OC5sYXllcikpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5UHJldHR5KHN0eWxlLCB7IGluZGVudDogc3BhY2UgfSk7XG59XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbikge1xuICB2YXIgbW9kdWxlID0geyBleHBvcnRzOiB7fSB9O1xuXHRyZXR1cm4gZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBjb21tb25qc1JlcXVpcmUgKHRhcmdldCkge1xuXHR0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkeW5hbWljYWxseSByZXF1aXJlIFwiJyArIHRhcmdldCArICdcIi4gUGxlYXNlIGNvbmZpZ3VyZSB0aGUgZHluYW1pY1JlcXVpcmVUYXJnZXRzIG9wdGlvbiBvZiBAcm9sbHVwL3BsdWdpbi1jb21tb25qcyBhcHByb3ByaWF0ZWx5IGZvciB0aGlzIHJlcXVpcmUgY2FsbCB0byBiZWhhdmUgcHJvcGVybHkuJyk7XG59XG5cbi8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuMy4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBwdW55Y29kZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbihmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgY29tbW9uanNHbG9iYWwgPT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWw7XG5cdGlmIChcblx0XHRmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsXG5cdCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC5cblx0ICogQG5hbWUgcHVueWNvZGVcblx0ICogQHR5cGUgT2JqZWN0XG5cdCAqL1xuXHR2YXIgcHVueWNvZGUsXG5cblx0LyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqL1xuXHRtYXhJbnQgPSAyMTQ3NDgzNjQ3LCAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cblx0LyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuXHRiYXNlID0gMzYsXG5cdHRNaW4gPSAxLFxuXHR0TWF4ID0gMjYsXG5cdHNrZXcgPSAzOCxcblx0ZGFtcCA9IDcwMCxcblx0aW5pdGlhbEJpYXMgPSA3Mixcblx0aW5pdGlhbE4gPSAxMjgsIC8vIDB4ODBcblx0ZGVsaW1pdGVyID0gJy0nLCAvLyAnXFx4MkQnXG5cblx0LyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cblx0cmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sXG5cdHJlZ2V4Tm9uQVNDSUkgPSAvW15cXHgyMC1cXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFyc1xuXHRyZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cblx0LyoqIEVycm9yIG1lc3NhZ2VzICovXG5cdGVycm9ycyA9IHtcblx0XHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHRcdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdFx0J2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcblx0fSxcblxuXHQvKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5cdGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbixcblx0Zmxvb3IgPSBNYXRoLmZsb29yLFxuXHRzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuXG5cdC8qKiBUZW1wb3JhcnkgdmFyaWFibGUgKi9cblx0a2V5O1xuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG5cdCAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cblx0ICovXG5cdGZ1bmN0aW9uIGVycm9yKHR5cGUpIHtcblx0XHR0aHJvdyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG5cdH1cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuXHQgKiBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbFxuXHQgKiBhZGRyZXNzZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuXHQgKiBjaGFyYWN0ZXIuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrXG5cdCAqIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHtcblx0XHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0aWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0XHRyZXN1bHQgPSBwYXJ0c1swXSArICdAJztcblx0XHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHRcdH1cblx0XHQvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0XHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpO1xuXHRcdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcblx0ICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuXHQgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuXHQgKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcblx0ICogbWF0Y2hpbmcgVVRGLTE2LlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWBcblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjMuMicsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2UgeyAvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KGNvbW1vbmpzR2xvYmFsKSk7XG59KTtcblxudmFyIHV0aWwgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcblxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgdmFyIG9iaiA9IHt9O1xuXG4gIGlmICh0eXBlb2YgcXMgIT09ICdzdHJpbmcnIHx8IHFzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gL1xcKy9nO1xuICBxcyA9IHFzLnNwbGl0KHNlcCk7XG5cbiAgdmFyIG1heEtleXMgPSAxMDAwO1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhLZXlzID09PSAnbnVtYmVyJykge1xuICAgIG1heEtleXMgPSBvcHRpb25zLm1heEtleXM7XG4gIH1cblxuICB2YXIgbGVuID0gcXMubGVuZ3RoO1xuICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnRcbiAgaWYgKG1heEtleXMgPiAwICYmIGxlbiA+IG1heEtleXMpIHtcbiAgICBsZW4gPSBtYXhLZXlzO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSxcbiAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSxcbiAgICAgICAga3N0ciwgdnN0ciwgaywgdjtcblxuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAga3N0ciA9IHguc3Vic3RyKDAsIGlkeCk7XG4gICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtzdHIgPSB4O1xuICAgICAgdnN0ciA9ICcnO1xuICAgIH1cblxuICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7XG4gICAgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2c3RyKTtcblxuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgb2JqW2tdID0gdjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgb2JqW2tdLnB1c2godik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbnZhciBlbmNvZGUgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG9ialtrXS5tYXAoZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgcXVlcnlzdHJpbmcgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IGRlY29kZTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSBlbmNvZGU7XG59KTtcblxudmFyIHBhcnNlID0gdXJsUGFyc2U7XG52YXIgcmVzb2x2ZSA9IHVybFJlc29sdmU7XG52YXIgcmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7XG52YXIgZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG52YXIgVXJsXzEgPSBVcmw7XG5cbmZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICAgIHBvcnRQYXR0ZXJuID0gLzpbMC05XSokLyxcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkxcbiAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyByZXNlcnZlZCBmb3IgZGVsaW1pdGluZyBVUkxzLlxuICAgIC8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG4gICAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuICAgIHVud2lzZSA9IFsneycsICd9JywgJ3wnLCAnXFxcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSxcblxuICAgIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgICBhdXRvRXNjYXBlID0gWydcXCcnXS5jb25jYXQodW53aXNlKSxcbiAgICAvLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgICAvLyBhcmUgdGhlIG9uZXMgdGhhdCBhcmUgKmV4cGVjdGVkKiB0byBiZSBzZWVuLCBzbyB3ZSBmYXN0LXBhdGhcbiAgICAvLyB0aGVtLlxuICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICAgIGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXSxcbiAgICBob3N0bmFtZU1heExlbiA9IDI1NSxcbiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICAgIGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLFxuICAgIC8vIHByb3RvY29scyB0aGF0IGNhbiBhbGxvdyBcInVuc2FmZVwiIGFuZCBcInVud2lzZVwiIGNoYXJzLlxuICAgIHVuc2FmZVByb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLlxuICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgICBzbGFzaGVkUHJvdG9jb2wgPSB7XG4gICAgICAnaHR0cCc6IHRydWUsXG4gICAgICAnaHR0cHMnOiB0cnVlLFxuICAgICAgJ2Z0cCc6IHRydWUsXG4gICAgICAnZ29waGVyJzogdHJ1ZSxcbiAgICAgICdmaWxlJzogdHJ1ZSxcbiAgICAgICdodHRwOic6IHRydWUsXG4gICAgICAnaHR0cHM6JzogdHJ1ZSxcbiAgICAgICdmdHA6JzogdHJ1ZSxcbiAgICAgICdnb3BoZXI6JzogdHJ1ZSxcbiAgICAgICdmaWxlOic6IHRydWVcbiAgICB9O1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuXG52YXIgdXJsID0ge1xuXHRwYXJzZTogcGFyc2UsXG5cdHJlc29sdmU6IHJlc29sdmUsXG5cdHJlc29sdmVPYmplY3Q6IHJlc29sdmVPYmplY3QsXG5cdGZvcm1hdDogZm9ybWF0LFxuXHRVcmw6IFVybF8xXG59O1xuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eVJlZmVyZW5jZShwcm9wZXJ0eU5hbWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHY4LmxheW91dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2OFt2OC5sYXlvdXRbaV1dKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBwcm9wZXJ0eU5hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY4W3Y4LmxheW91dFtpXV1ba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHY4LnBhaW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHY4W3Y4LnBhaW50W2ldXSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gcHJvcGVydHlOYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiB2OFt2OC5wYWludFtpXV1ba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGVhY2hTb3VyY2Uoc3R5bGUsIGNhbGxiYWNrKSB7XG4gICAgZm9yIChjb25zdCBrIGluIHN0eWxlLnNvdXJjZXMpIHtcbiAgICAgICAgY2FsbGJhY2soc3R5bGUuc291cmNlc1trXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWFjaExheWVyKHN0eWxlLCBjYWxsYmFjaykge1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2Ygc3R5bGUubGF5ZXJzKSB7XG4gICAgICAgIGNhbGxiYWNrKGxheWVyKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlYWNoUHJvcGVydHkoc3R5bGUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgZnVuY3Rpb24gaW5uZXIobGF5ZXIsIHByb3BlcnR5VHlwZSkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbGF5ZXJbcHJvcGVydHlUeXBlXTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgcGF0aDogW1xuICAgICAgICAgICAgICAgICAgICBsYXllci5pZCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlUeXBlLFxuICAgICAgICAgICAgICAgICAgICBrZXlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvcGVydGllc1trZXldLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogZ2V0UHJvcGVydHlSZWZlcmVuY2Uoa2V5KSxcbiAgICAgICAgICAgICAgICBzZXQoeCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW2tleV0gPSB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWFjaExheWVyKHN0eWxlLCBsYXllciA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zLnBhaW50KSB7XG4gICAgICAgICAgICBpbm5lcihsYXllciwgJ3BhaW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGF5b3V0KSB7XG4gICAgICAgICAgICBpbm5lcihsYXllciwgJ2xheW91dCcpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGVhY2hMYXlvdXQobGF5ZXIsIGNhbGxiYWNrKSB7XG4gICAgZm9yIChjb25zdCBrIGluIGxheWVyKSB7XG4gICAgICAgIGlmIChrLmluZGV4T2YoJ2xheW91dCcpID09PSAwKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhsYXllcltrXSwgayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlYWNoUGFpbnQobGF5ZXIsIGNhbGxiYWNrKSB7XG4gICAgZm9yIChjb25zdCBrIGluIGxheWVyKSB7XG4gICAgICAgIGlmIChrLmluZGV4T2YoJ3BhaW50JykgPT09IDApIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGxheWVyW2tdLCBrKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmVDb25zdGFudChzdHlsZSwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZVswXSA9PT0gJ0AnKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlQ29uc3RhbnQoc3R5bGUsIHN0eWxlLmNvbnN0YW50c1t2YWx1ZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0Z1bmN0aW9uJDEodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZS5zdG9wcyk7XG59XG5mdW5jdGlvbiByZW5hbWVQcm9wZXJ0eShvYmosIGZyb20sIHRvKSB7XG4gICAgb2JqW3RvXSA9IG9ialtmcm9tXTtcbiAgICBkZWxldGUgb2JqW2Zyb21dO1xufVxuZnVuY3Rpb24gbWlncmF0ZVRvVjggKHN0eWxlKSB7XG4gICAgc3R5bGUudmVyc2lvbiA9IDg7XG4gICAgZWFjaFNvdXJjZShzdHlsZSwgc291cmNlID0+IHtcbiAgICAgICAgaWYgKHNvdXJjZS50eXBlID09PSAndmlkZW8nICYmIHNvdXJjZS51cmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVuYW1lUHJvcGVydHkoc291cmNlLCAndXJsJywgJ3VybHMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIHNvdXJjZS5jb29yZGluYXRlcy5mb3JFYWNoKGNvb3JkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29vcmQucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBlYWNoTGF5ZXIoc3R5bGUsIGxheWVyID0+IHtcbiAgICAgICAgZWFjaExheW91dChsYXllciwgbGF5b3V0ID0+IHtcbiAgICAgICAgICAgIGlmIChsYXlvdXRbJ3N5bWJvbC1taW4tZGlzdGFuY2UnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVuYW1lUHJvcGVydHkobGF5b3V0LCAnc3ltYm9sLW1pbi1kaXN0YW5jZScsICdzeW1ib2wtc3BhY2luZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZWFjaFBhaW50KGxheWVyLCBwYWludCA9PiB7XG4gICAgICAgICAgICBpZiAocGFpbnRbJ2JhY2tncm91bmQtaW1hZ2UnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVuYW1lUHJvcGVydHkocGFpbnQsICdiYWNrZ3JvdW5kLWltYWdlJywgJ2JhY2tncm91bmQtcGF0dGVybicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhaW50WydsaW5lLWltYWdlJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlbmFtZVByb3BlcnR5KHBhaW50LCAnbGluZS1pbWFnZScsICdsaW5lLXBhdHRlcm4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYWludFsnZmlsbC1pbWFnZSddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZW5hbWVQcm9wZXJ0eShwYWludCwgJ2ZpbGwtaW1hZ2UnLCAnZmlsbC1wYXR0ZXJuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGVhY2hQcm9wZXJ0eShzdHlsZSwge1xuICAgICAgICBwYWludDogdHJ1ZSxcbiAgICAgICAgbGF5b3V0OiB0cnVlXG4gICAgfSwgcHJvcGVydHkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc29sdmVDb25zdGFudChzdHlsZSwgcHJvcGVydHkudmFsdWUpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbiQxKHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUuc3RvcHMuZm9yRWFjaChzdG9wID0+IHtcbiAgICAgICAgICAgICAgICBzdG9wWzFdID0gcmVzb2x2ZUNvbnN0YW50KHN0eWxlLCBzdG9wWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5LnNldCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgZGVsZXRlIHN0eWxlLmNvbnN0YW50cztcbiAgICBlYWNoTGF5ZXIoc3R5bGUsIGxheWVyID0+IHtcbiAgICAgICAgZWFjaExheW91dChsYXllciwgbGF5b3V0ID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBsYXlvdXRbJ3RleHQtbWF4LXNpemUnXTtcbiAgICAgICAgICAgIGRlbGV0ZSBsYXlvdXRbJ2ljb24tbWF4LXNpemUnXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2hQYWludChsYXllciwgcGFpbnQgPT4ge1xuICAgICAgICAgICAgaWYgKHBhaW50Wyd0ZXh0LXNpemUnXSkge1xuICAgICAgICAgICAgICAgIGlmICghbGF5ZXIubGF5b3V0KVxuICAgICAgICAgICAgICAgICAgICBsYXllci5sYXlvdXQgPSB7fTtcbiAgICAgICAgICAgICAgICBsYXllci5sYXlvdXRbJ3RleHQtc2l6ZSddID0gcGFpbnRbJ3RleHQtc2l6ZSddO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYWludFsndGV4dC1zaXplJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFpbnRbJ2ljb24tc2l6ZSddKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsYXllci5sYXlvdXQpXG4gICAgICAgICAgICAgICAgICAgIGxheWVyLmxheW91dCA9IHt9O1xuICAgICAgICAgICAgICAgIGxheWVyLmxheW91dFsnaWNvbi1zaXplJ10gPSBwYWludFsnaWNvbi1zaXplJ107XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhaW50WydpY29uLXNpemUnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gbWlncmF0ZUZvbnRzdGFja1VSTChpbnB1dCkge1xuICAgICAgICBjb25zdCBpbnB1dFBhcnNlZCA9IHVybC5wYXJzZShpbnB1dCk7XG4gICAgICAgIGNvbnN0IGlucHV0UGF0aG5hbWVQYXJ0cyA9IGlucHV0UGFyc2VkLnBhdGhuYW1lLnNwbGl0KCcvJyk7XG4gICAgICAgIGlmIChpbnB1dFBhcnNlZC5wcm90b2NvbCAhPT0gJ21hcGJveDonKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRQYXJzZWQuaG9zdG5hbWUgPT09ICdmb250c3RhY2snKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21hcGJveDovL2ZvbnRzL21hcGJveC97Zm9udHN0YWNrfS97cmFuZ2V9LnBiZic7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRQYXJzZWQuaG9zdG5hbWUgPT09ICdmb250cycpIHtcbiAgICAgICAgICAgIHJldHVybiBgbWFwYm94Oi8vZm9udHMvJHsgaW5wdXRQYXRobmFtZVBhcnRzWzJdIH0ve2ZvbnRzdGFja30ve3JhbmdlfS5wYmZgO1xuICAgICAgICB9IGVsc2UgO1xuICAgIH1cbiAgICBpZiAoc3R5bGUuZ2x5cGhzKSB7XG4gICAgICAgIHN0eWxlLmdseXBocyA9IG1pZ3JhdGVGb250c3RhY2tVUkwoc3R5bGUuZ2x5cGhzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWlncmF0ZUZvbnRTdGFjayhmb250KSB7XG4gICAgICAgIGZ1bmN0aW9uIHNwbGl0QW5kVHJpbShzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJywnKS5tYXAocyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHMudHJpbSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm9udCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb250O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb250ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHNwbGl0QW5kVHJpbShmb250KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZm9udCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGZvbnQuc3RvcHMuZm9yRWFjaChzdG9wID0+IHtcbiAgICAgICAgICAgICAgICBzdG9wWzFdID0gc3BsaXRBbmRUcmltKHN0b3BbMV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZm9udDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCBmb250IHZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWFjaExheWVyKHN0eWxlLCBsYXllciA9PiB7XG4gICAgICAgIGVhY2hMYXlvdXQobGF5ZXIsIGxheW91dCA9PiB7XG4gICAgICAgICAgICBpZiAobGF5b3V0Wyd0ZXh0LWZvbnQnXSkge1xuICAgICAgICAgICAgICAgIGxheW91dFsndGV4dC1mb250J10gPSBtaWdyYXRlRm9udFN0YWNrKGxheW91dFsndGV4dC1mb250J10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBsZXQgZmlyc3RTeW1ib2xMYXllciA9IDA7XG4gICAgZm9yIChsZXQgaSA9IHN0eWxlLmxheWVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBsYXllciA9IHN0eWxlLmxheWVyc1tpXTtcbiAgICAgICAgaWYgKGxheWVyLnR5cGUgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgICBmaXJzdFN5bWJvbExheWVyID0gaSArIDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzeW1ib2xMYXllcnMgPSBzdHlsZS5sYXllcnMuc3BsaWNlKGZpcnN0U3ltYm9sTGF5ZXIpO1xuICAgIHN5bWJvbExheWVycy5yZXZlcnNlKCk7XG4gICAgc3R5bGUubGF5ZXJzID0gc3R5bGUubGF5ZXJzLmNvbmNhdChzeW1ib2xMYXllcnMpO1xuICAgIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kIChvdXRwdXQsIC4uLmlucHV0cykge1xuICAgIGZvciAoY29uc3QgaW5wdXQgb2YgaW5wdXRzKSB7XG4gICAgICAgIGZvciAoY29uc3QgayBpbiBpbnB1dCkge1xuICAgICAgICAgICAgb3V0cHV0W2tdID0gaW5wdXRba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuY2xhc3MgUGFyc2luZ0Vycm9yJDEgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Ioa2V5LCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICB9XG59XG52YXIgUGFyc2luZ0Vycm9yJDIgPSBQYXJzaW5nRXJyb3IkMTtcblxuY2xhc3MgU2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgYmluZGluZ3MgPSBbXSkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5iaW5kaW5ncyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCBleHByZXNzaW9uXSBvZiBiaW5kaW5ncykge1xuICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1tuYW1lXSA9IGV4cHJlc3Npb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uY2F0KGJpbmRpbmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2NvcGUodGhpcywgYmluZGluZ3MpO1xuICAgIH1cbiAgICBnZXQobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5iaW5kaW5nc1tuYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ3NbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHsgbmFtZSB9IG5vdCBmb3VuZCBpbiBzY29wZS5gKTtcbiAgICB9XG4gICAgaGFzKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYmluZGluZ3NbbmFtZV0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuaGFzKG5hbWUpIDogZmFsc2U7XG4gICAgfVxufVxudmFyIFNjb3BlJDEgPSBTY29wZTtcblxuY29uc3QgTnVsbFR5cGUgPSB7IGtpbmQ6ICdudWxsJyB9O1xuY29uc3QgTnVtYmVyVHlwZSA9IHsga2luZDogJ251bWJlcicgfTtcbmNvbnN0IFN0cmluZ1R5cGUgPSB7IGtpbmQ6ICdzdHJpbmcnIH07XG5jb25zdCBCb29sZWFuVHlwZSA9IHsga2luZDogJ2Jvb2xlYW4nIH07XG5jb25zdCBDb2xvclR5cGUgPSB7IGtpbmQ6ICdjb2xvcicgfTtcbmNvbnN0IE9iamVjdFR5cGUgPSB7IGtpbmQ6ICdvYmplY3QnIH07XG5jb25zdCBWYWx1ZVR5cGUgPSB7IGtpbmQ6ICd2YWx1ZScgfTtcbmNvbnN0IEVycm9yVHlwZSA9IHsga2luZDogJ2Vycm9yJyB9O1xuY29uc3QgQ29sbGF0b3JUeXBlID0geyBraW5kOiAnY29sbGF0b3InIH07XG5jb25zdCBGb3JtYXR0ZWRUeXBlID0geyBraW5kOiAnZm9ybWF0dGVkJyB9O1xuY29uc3QgUmVzb2x2ZWRJbWFnZVR5cGUgPSB7IGtpbmQ6ICdyZXNvbHZlZEltYWdlJyB9O1xuZnVuY3Rpb24gYXJyYXkkMShpdGVtVHlwZSwgTikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6ICdhcnJheScsXG4gICAgICAgIGl0ZW1UeXBlLFxuICAgICAgICBOXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvU3RyaW5nJDEodHlwZSkge1xuICAgIGlmICh0eXBlLmtpbmQgPT09ICdhcnJheScpIHtcbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSB0b1N0cmluZyQxKHR5cGUuaXRlbVR5cGUpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHR5cGUuTiA9PT0gJ251bWJlcicgPyBgYXJyYXk8JHsgaXRlbVR5cGUgfSwgJHsgdHlwZS5OIH0+YCA6IHR5cGUuaXRlbVR5cGUua2luZCA9PT0gJ3ZhbHVlJyA/ICdhcnJheScgOiBgYXJyYXk8JHsgaXRlbVR5cGUgfT5gO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlLmtpbmQ7XG4gICAgfVxufVxuY29uc3QgdmFsdWVNZW1iZXJUeXBlcyA9IFtcbiAgICBOdWxsVHlwZSxcbiAgICBOdW1iZXJUeXBlLFxuICAgIFN0cmluZ1R5cGUsXG4gICAgQm9vbGVhblR5cGUsXG4gICAgQ29sb3JUeXBlLFxuICAgIEZvcm1hdHRlZFR5cGUsXG4gICAgT2JqZWN0VHlwZSxcbiAgICBhcnJheSQxKFZhbHVlVHlwZSksXG4gICAgUmVzb2x2ZWRJbWFnZVR5cGVcbl07XG5mdW5jdGlvbiBjaGVja1N1YnR5cGUoZXhwZWN0ZWQsIHQpIHtcbiAgICBpZiAodC5raW5kID09PSAnZXJyb3InKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWQua2luZCA9PT0gJ2FycmF5Jykge1xuICAgICAgICBpZiAodC5raW5kID09PSAnYXJyYXknICYmICh0Lk4gPT09IDAgJiYgdC5pdGVtVHlwZS5raW5kID09PSAndmFsdWUnIHx8ICFjaGVja1N1YnR5cGUoZXhwZWN0ZWQuaXRlbVR5cGUsIHQuaXRlbVR5cGUpKSAmJiAodHlwZW9mIGV4cGVjdGVkLk4gIT09ICdudW1iZXInIHx8IGV4cGVjdGVkLk4gPT09IHQuTikpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChleHBlY3RlZC5raW5kID09PSB0LmtpbmQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChleHBlY3RlZC5raW5kID09PSAndmFsdWUnKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVtYmVyVHlwZSBvZiB2YWx1ZU1lbWJlclR5cGVzKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrU3VidHlwZShtZW1iZXJUeXBlLCB0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgRXhwZWN0ZWQgJHsgdG9TdHJpbmckMShleHBlY3RlZCkgfSBidXQgZm91bmQgJHsgdG9TdHJpbmckMSh0KSB9IGluc3RlYWQuYDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRUeXBlKHByb3ZpZGVkLCBhbGxvd2VkVHlwZXMpIHtcbiAgICByZXR1cm4gYWxsb3dlZFR5cGVzLnNvbWUodCA9PiB0LmtpbmQgPT09IHByb3ZpZGVkLmtpbmQpO1xufVxuZnVuY3Rpb24gaXNWYWxpZE5hdGl2ZVR5cGUocHJvdmlkZWQsIGFsbG93ZWRUeXBlcykge1xuICAgIHJldHVybiBhbGxvd2VkVHlwZXMuc29tZSh0ID0+IHtcbiAgICAgICAgaWYgKHQgPT09ICdudWxsJykge1xuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVkID09PSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHQgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByb3ZpZGVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVkICYmICFBcnJheS5pc0FycmF5KHByb3ZpZGVkKSAmJiB0eXBlb2YgcHJvdmlkZWQgPT09ICdvYmplY3QnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHQgPT09IHR5cGVvZiBwcm92aWRlZDtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG52YXIgY3NzY29sb3JwYXJzZXIgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4vLyAoYykgRGVhbiBNY05hbWVlIDxkZWFuQGdtYWlsLmNvbT4sIDIwMTIuXG4vL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2RlYW5tL2Nzcy1jb2xvci1wYXJzZXItanNcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuLy8gRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HU1xuLy8gSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yL1xudmFyIGtDU1NDb2xvclRhYmxlID0ge1xuICBcInRyYW5zcGFyZW50XCI6IFswLDAsMCwwXSwgXCJhbGljZWJsdWVcIjogWzI0MCwyNDgsMjU1LDFdLFxuICBcImFudGlxdWV3aGl0ZVwiOiBbMjUwLDIzNSwyMTUsMV0sIFwiYXF1YVwiOiBbMCwyNTUsMjU1LDFdLFxuICBcImFxdWFtYXJpbmVcIjogWzEyNywyNTUsMjEyLDFdLCBcImF6dXJlXCI6IFsyNDAsMjU1LDI1NSwxXSxcbiAgXCJiZWlnZVwiOiBbMjQ1LDI0NSwyMjAsMV0sIFwiYmlzcXVlXCI6IFsyNTUsMjI4LDE5NiwxXSxcbiAgXCJibGFja1wiOiBbMCwwLDAsMV0sIFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwyMzUsMjA1LDFdLFxuICBcImJsdWVcIjogWzAsMCwyNTUsMV0sIFwiYmx1ZXZpb2xldFwiOiBbMTM4LDQzLDIyNiwxXSxcbiAgXCJicm93blwiOiBbMTY1LDQyLDQyLDFdLCBcImJ1cmx5d29vZFwiOiBbMjIyLDE4NCwxMzUsMV0sXG4gIFwiY2FkZXRibHVlXCI6IFs5NSwxNTgsMTYwLDFdLCBcImNoYXJ0cmV1c2VcIjogWzEyNywyNTUsMCwxXSxcbiAgXCJjaG9jb2xhdGVcIjogWzIxMCwxMDUsMzAsMV0sIFwiY29yYWxcIjogWzI1NSwxMjcsODAsMV0sXG4gIFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwxNDksMjM3LDFdLCBcImNvcm5zaWxrXCI6IFsyNTUsMjQ4LDIyMCwxXSxcbiAgXCJjcmltc29uXCI6IFsyMjAsMjAsNjAsMV0sIFwiY3lhblwiOiBbMCwyNTUsMjU1LDFdLFxuICBcImRhcmtibHVlXCI6IFswLDAsMTM5LDFdLCBcImRhcmtjeWFuXCI6IFswLDEzOSwxMzksMV0sXG4gIFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LDEzNCwxMSwxXSwgXCJkYXJrZ3JheVwiOiBbMTY5LDE2OSwxNjksMV0sXG4gIFwiZGFya2dyZWVuXCI6IFswLDEwMCwwLDFdLCBcImRhcmtncmV5XCI6IFsxNjksMTY5LDE2OSwxXSxcbiAgXCJkYXJra2hha2lcIjogWzE4OSwxODMsMTA3LDFdLCBcImRhcmttYWdlbnRhXCI6IFsxMzksMCwxMzksMV0sXG4gIFwiZGFya29saXZlZ3JlZW5cIjogWzg1LDEwNyw0NywxXSwgXCJkYXJrb3JhbmdlXCI6IFsyNTUsMTQwLDAsMV0sXG4gIFwiZGFya29yY2hpZFwiOiBbMTUzLDUwLDIwNCwxXSwgXCJkYXJrcmVkXCI6IFsxMzksMCwwLDFdLFxuICBcImRhcmtzYWxtb25cIjogWzIzMywxNTAsMTIyLDFdLCBcImRhcmtzZWFncmVlblwiOiBbMTQzLDE4OCwxNDMsMV0sXG4gIFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsNjEsMTM5LDFdLCBcImRhcmtzbGF0ZWdyYXlcIjogWzQ3LDc5LDc5LDFdLFxuICBcImRhcmtzbGF0ZWdyZXlcIjogWzQ3LDc5LDc5LDFdLCBcImRhcmt0dXJxdW9pc2VcIjogWzAsMjA2LDIwOSwxXSxcbiAgXCJkYXJrdmlvbGV0XCI6IFsxNDgsMCwyMTEsMV0sIFwiZGVlcHBpbmtcIjogWzI1NSwyMCwxNDcsMV0sXG4gIFwiZGVlcHNreWJsdWVcIjogWzAsMTkxLDI1NSwxXSwgXCJkaW1ncmF5XCI6IFsxMDUsMTA1LDEwNSwxXSxcbiAgXCJkaW1ncmV5XCI6IFsxMDUsMTA1LDEwNSwxXSwgXCJkb2RnZXJibHVlXCI6IFszMCwxNDQsMjU1LDFdLFxuICBcImZpcmVicmlja1wiOiBbMTc4LDM0LDM0LDFdLCBcImZsb3JhbHdoaXRlXCI6IFsyNTUsMjUwLDI0MCwxXSxcbiAgXCJmb3Jlc3RncmVlblwiOiBbMzQsMTM5LDM0LDFdLCBcImZ1Y2hzaWFcIjogWzI1NSwwLDI1NSwxXSxcbiAgXCJnYWluc2Jvcm9cIjogWzIyMCwyMjAsMjIwLDFdLCBcImdob3N0d2hpdGVcIjogWzI0OCwyNDgsMjU1LDFdLFxuICBcImdvbGRcIjogWzI1NSwyMTUsMCwxXSwgXCJnb2xkZW5yb2RcIjogWzIxOCwxNjUsMzIsMV0sXG4gIFwiZ3JheVwiOiBbMTI4LDEyOCwxMjgsMV0sIFwiZ3JlZW5cIjogWzAsMTI4LDAsMV0sXG4gIFwiZ3JlZW55ZWxsb3dcIjogWzE3MywyNTUsNDcsMV0sIFwiZ3JleVwiOiBbMTI4LDEyOCwxMjgsMV0sXG4gIFwiaG9uZXlkZXdcIjogWzI0MCwyNTUsMjQwLDFdLCBcImhvdHBpbmtcIjogWzI1NSwxMDUsMTgwLDFdLFxuICBcImluZGlhbnJlZFwiOiBbMjA1LDkyLDkyLDFdLCBcImluZGlnb1wiOiBbNzUsMCwxMzAsMV0sXG4gIFwiaXZvcnlcIjogWzI1NSwyNTUsMjQwLDFdLCBcImtoYWtpXCI6IFsyNDAsMjMwLDE0MCwxXSxcbiAgXCJsYXZlbmRlclwiOiBbMjMwLDIzMCwyNTAsMV0sIFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LDI0MCwyNDUsMV0sXG4gIFwibGF3bmdyZWVuXCI6IFsxMjQsMjUyLDAsMV0sIFwibGVtb25jaGlmZm9uXCI6IFsyNTUsMjUwLDIwNSwxXSxcbiAgXCJsaWdodGJsdWVcIjogWzE3MywyMTYsMjMwLDFdLCBcImxpZ2h0Y29yYWxcIjogWzI0MCwxMjgsMTI4LDFdLFxuICBcImxpZ2h0Y3lhblwiOiBbMjI0LDI1NSwyNTUsMV0sIFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwyNTAsMjEwLDFdLFxuICBcImxpZ2h0Z3JheVwiOiBbMjExLDIxMSwyMTEsMV0sIFwibGlnaHRncmVlblwiOiBbMTQ0LDIzOCwxNDQsMV0sXG4gIFwibGlnaHRncmV5XCI6IFsyMTEsMjExLDIxMSwxXSwgXCJsaWdodHBpbmtcIjogWzI1NSwxODIsMTkzLDFdLFxuICBcImxpZ2h0c2FsbW9uXCI6IFsyNTUsMTYwLDEyMiwxXSwgXCJsaWdodHNlYWdyZWVuXCI6IFszMiwxNzgsMTcwLDFdLFxuICBcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LDIwNiwyNTAsMV0sIFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwxMzYsMTUzLDFdLFxuICBcImxpZ2h0c2xhdGVncmV5XCI6IFsxMTksMTM2LDE1MywxXSwgXCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LDE5NiwyMjIsMV0sXG4gIFwibGlnaHR5ZWxsb3dcIjogWzI1NSwyNTUsMjI0LDFdLCBcImxpbWVcIjogWzAsMjU1LDAsMV0sXG4gIFwibGltZWdyZWVuXCI6IFs1MCwyMDUsNTAsMV0sIFwibGluZW5cIjogWzI1MCwyNDAsMjMwLDFdLFxuICBcIm1hZ2VudGFcIjogWzI1NSwwLDI1NSwxXSwgXCJtYXJvb25cIjogWzEyOCwwLDAsMV0sXG4gIFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyLDIwNSwxNzAsMV0sIFwibWVkaXVtYmx1ZVwiOiBbMCwwLDIwNSwxXSxcbiAgXCJtZWRpdW1vcmNoaWRcIjogWzE4Niw4NSwyMTEsMV0sIFwibWVkaXVtcHVycGxlXCI6IFsxNDcsMTEyLDIxOSwxXSxcbiAgXCJtZWRpdW1zZWFncmVlblwiOiBbNjAsMTc5LDExMywxXSwgXCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywxMDQsMjM4LDFdLFxuICBcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLDI1MCwxNTQsMV0sIFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiwyMDksMjA0LDFdLFxuICBcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LDIxLDEzMywxXSwgXCJtaWRuaWdodGJsdWVcIjogWzI1LDI1LDExMiwxXSxcbiAgXCJtaW50Y3JlYW1cIjogWzI0NSwyNTUsMjUwLDFdLCBcIm1pc3R5cm9zZVwiOiBbMjU1LDIyOCwyMjUsMV0sXG4gIFwibW9jY2FzaW5cIjogWzI1NSwyMjgsMTgxLDFdLCBcIm5hdmFqb3doaXRlXCI6IFsyNTUsMjIyLDE3MywxXSxcbiAgXCJuYXZ5XCI6IFswLDAsMTI4LDFdLCBcIm9sZGxhY2VcIjogWzI1MywyNDUsMjMwLDFdLFxuICBcIm9saXZlXCI6IFsxMjgsMTI4LDAsMV0sIFwib2xpdmVkcmFiXCI6IFsxMDcsMTQyLDM1LDFdLFxuICBcIm9yYW5nZVwiOiBbMjU1LDE2NSwwLDFdLCBcIm9yYW5nZXJlZFwiOiBbMjU1LDY5LDAsMV0sXG4gIFwib3JjaGlkXCI6IFsyMTgsMTEyLDIxNCwxXSwgXCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsMjMyLDE3MCwxXSxcbiAgXCJwYWxlZ3JlZW5cIjogWzE1MiwyNTEsMTUyLDFdLCBcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwyMzgsMjM4LDFdLFxuICBcInBhbGV2aW9sZXRyZWRcIjogWzIxOSwxMTIsMTQ3LDFdLCBcInBhcGF5YXdoaXBcIjogWzI1NSwyMzksMjEzLDFdLFxuICBcInBlYWNocHVmZlwiOiBbMjU1LDIxOCwxODUsMV0sIFwicGVydVwiOiBbMjA1LDEzMyw2MywxXSxcbiAgXCJwaW5rXCI6IFsyNTUsMTkyLDIwMywxXSwgXCJwbHVtXCI6IFsyMjEsMTYwLDIyMSwxXSxcbiAgXCJwb3dkZXJibHVlXCI6IFsxNzYsMjI0LDIzMCwxXSwgXCJwdXJwbGVcIjogWzEyOCwwLDEyOCwxXSxcbiAgXCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsNTEsMTUzLDFdLFxuICBcInJlZFwiOiBbMjU1LDAsMCwxXSwgXCJyb3N5YnJvd25cIjogWzE4OCwxNDMsMTQzLDFdLFxuICBcInJveWFsYmx1ZVwiOiBbNjUsMTA1LDIyNSwxXSwgXCJzYWRkbGVicm93blwiOiBbMTM5LDY5LDE5LDFdLFxuICBcInNhbG1vblwiOiBbMjUwLDEyOCwxMTQsMV0sIFwic2FuZHlicm93blwiOiBbMjQ0LDE2NCw5NiwxXSxcbiAgXCJzZWFncmVlblwiOiBbNDYsMTM5LDg3LDFdLCBcInNlYXNoZWxsXCI6IFsyNTUsMjQ1LDIzOCwxXSxcbiAgXCJzaWVubmFcIjogWzE2MCw4Miw0NSwxXSwgXCJzaWx2ZXJcIjogWzE5MiwxOTIsMTkyLDFdLFxuICBcInNreWJsdWVcIjogWzEzNSwyMDYsMjM1LDFdLCBcInNsYXRlYmx1ZVwiOiBbMTA2LDkwLDIwNSwxXSxcbiAgXCJzbGF0ZWdyYXlcIjogWzExMiwxMjgsMTQ0LDFdLCBcInNsYXRlZ3JleVwiOiBbMTEyLDEyOCwxNDQsMV0sXG4gIFwic25vd1wiOiBbMjU1LDI1MCwyNTAsMV0sIFwic3ByaW5nZ3JlZW5cIjogWzAsMjU1LDEyNywxXSxcbiAgXCJzdGVlbGJsdWVcIjogWzcwLDEzMCwxODAsMV0sIFwidGFuXCI6IFsyMTAsMTgwLDE0MCwxXSxcbiAgXCJ0ZWFsXCI6IFswLDEyOCwxMjgsMV0sIFwidGhpc3RsZVwiOiBbMjE2LDE5MSwyMTYsMV0sXG4gIFwidG9tYXRvXCI6IFsyNTUsOTksNzEsMV0sIFwidHVycXVvaXNlXCI6IFs2NCwyMjQsMjA4LDFdLFxuICBcInZpb2xldFwiOiBbMjM4LDEzMCwyMzgsMV0sIFwid2hlYXRcIjogWzI0NSwyMjIsMTc5LDFdLFxuICBcIndoaXRlXCI6IFsyNTUsMjU1LDI1NSwxXSwgXCJ3aGl0ZXNtb2tlXCI6IFsyNDUsMjQ1LDI0NSwxXSxcbiAgXCJ5ZWxsb3dcIjogWzI1NSwyNTUsMCwxXSwgXCJ5ZWxsb3dncmVlblwiOiBbMTU0LDIwNSw1MCwxXX07XG5cbmZ1bmN0aW9uIGNsYW1wX2Nzc19ieXRlKGkpIHsgIC8vIENsYW1wIHRvIGludGVnZXIgMCAuLiAyNTUuXG4gIGkgPSBNYXRoLnJvdW5kKGkpOyAgLy8gU2VlbXMgdG8gYmUgd2hhdCBDaHJvbWUgZG9lcyAodnMgdHJ1bmNhdGlvbikuXG4gIHJldHVybiBpIDwgMCA/IDAgOiBpID4gMjU1ID8gMjU1IDogaTtcbn1cblxuZnVuY3Rpb24gY2xhbXBfY3NzX2Zsb2F0KGYpIHsgIC8vIENsYW1wIHRvIGZsb2F0IDAuMCAuLiAxLjAuXG4gIHJldHVybiBmIDwgMCA/IDAgOiBmID4gMSA/IDEgOiBmO1xufVxuXG5mdW5jdGlvbiBwYXJzZV9jc3NfaW50KHN0cikgeyAgLy8gaW50IG9yIHBlcmNlbnRhZ2UuXG4gIGlmIChzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnJScpXG4gICAgcmV0dXJuIGNsYW1wX2Nzc19ieXRlKHBhcnNlRmxvYXQoc3RyKSAvIDEwMCAqIDI1NSk7XG4gIHJldHVybiBjbGFtcF9jc3NfYnl0ZShwYXJzZUludChzdHIpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VfY3NzX2Zsb2F0KHN0cikgeyAgLy8gZmxvYXQgb3IgcGVyY2VudGFnZS5cbiAgaWYgKHN0cltzdHIubGVuZ3RoIC0gMV0gPT09ICclJylcbiAgICByZXR1cm4gY2xhbXBfY3NzX2Zsb2F0KHBhcnNlRmxvYXQoc3RyKSAvIDEwMCk7XG4gIHJldHVybiBjbGFtcF9jc3NfZmxvYXQocGFyc2VGbG9hdChzdHIpKTtcbn1cblxuZnVuY3Rpb24gY3NzX2h1ZV90b19yZ2IobTEsIG0yLCBoKSB7XG4gIGlmIChoIDwgMCkgaCArPSAxO1xuICBlbHNlIGlmIChoID4gMSkgaCAtPSAxO1xuXG4gIGlmIChoICogNiA8IDEpIHJldHVybiBtMSArIChtMiAtIG0xKSAqIGggKiA2O1xuICBpZiAoaCAqIDIgPCAxKSByZXR1cm4gbTI7XG4gIGlmIChoICogMyA8IDIpIHJldHVybiBtMSArIChtMiAtIG0xKSAqICgyLzMgLSBoKSAqIDY7XG4gIHJldHVybiBtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDU1NDb2xvcihjc3Nfc3RyKSB7XG4gIC8vIFJlbW92ZSBhbGwgd2hpdGVzcGFjZSwgbm90IGNvbXBsaWFudCwgYnV0IHNob3VsZCBqdXN0IGJlIG1vcmUgYWNjZXB0aW5nLlxuICB2YXIgc3RyID0gY3NzX3N0ci5yZXBsYWNlKC8gL2csICcnKS50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIENvbG9yIGtleXdvcmRzIChhbmQgdHJhbnNwYXJlbnQpIGxvb2t1cC5cbiAgaWYgKHN0ciBpbiBrQ1NTQ29sb3JUYWJsZSkgcmV0dXJuIGtDU1NDb2xvclRhYmxlW3N0cl0uc2xpY2UoKTsgIC8vIGR1cC5cblxuICAvLyAjYWJjIGFuZCAjYWJjMTIzIHN5bnRheC5cbiAgaWYgKHN0clswXSA9PT0gJyMnKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDQpIHtcbiAgICAgIHZhciBpdiA9IHBhcnNlSW50KHN0ci5zdWJzdHIoMSksIDE2KTsgIC8vIFRPRE8oZGVhbm0pOiBTdHJpY3RlciBwYXJzaW5nLlxuICAgICAgaWYgKCEoaXYgPj0gMCAmJiBpdiA8PSAweGZmZikpIHJldHVybiBudWxsOyAgLy8gQ292ZXJzIE5hTi5cbiAgICAgIHJldHVybiBbKChpdiAmIDB4ZjAwKSA+PiA0KSB8ICgoaXYgJiAweGYwMCkgPj4gOCksXG4gICAgICAgICAgICAgIChpdiAmIDB4ZjApIHwgKChpdiAmIDB4ZjApID4+IDQpLFxuICAgICAgICAgICAgICAoaXYgJiAweGYpIHwgKChpdiAmIDB4ZikgPDwgNCksXG4gICAgICAgICAgICAgIDFdO1xuICAgIH0gZWxzZSBpZiAoc3RyLmxlbmd0aCA9PT0gNykge1xuICAgICAgdmFyIGl2ID0gcGFyc2VJbnQoc3RyLnN1YnN0cigxKSwgMTYpOyAgLy8gVE9ETyhkZWFubSk6IFN0cmljdGVyIHBhcnNpbmcuXG4gICAgICBpZiAoIShpdiA+PSAwICYmIGl2IDw9IDB4ZmZmZmZmKSkgcmV0dXJuIG51bGw7ICAvLyBDb3ZlcnMgTmFOLlxuICAgICAgcmV0dXJuIFsoaXYgJiAweGZmMDAwMCkgPj4gMTYsXG4gICAgICAgICAgICAgIChpdiAmIDB4ZmYwMCkgPj4gOCxcbiAgICAgICAgICAgICAgaXYgJiAweGZmLFxuICAgICAgICAgICAgICAxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBvcCA9IHN0ci5pbmRleE9mKCcoJyksIGVwID0gc3RyLmluZGV4T2YoJyknKTtcbiAgaWYgKG9wICE9PSAtMSAmJiBlcCArIDEgPT09IHN0ci5sZW5ndGgpIHtcbiAgICB2YXIgZm5hbWUgPSBzdHIuc3Vic3RyKDAsIG9wKTtcbiAgICB2YXIgcGFyYW1zID0gc3RyLnN1YnN0cihvcCsxLCBlcC0ob3ArMSkpLnNwbGl0KCcsJyk7XG4gICAgdmFyIGFscGhhID0gMTsgIC8vIFRvIGFsbG93IGNhc2UgZmFsbHRocm91Z2guXG4gICAgc3dpdGNoIChmbmFtZSkge1xuICAgICAgY2FzZSAncmdiYSc6XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSA0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgYWxwaGEgPSBwYXJzZV9jc3NfZmxvYXQocGFyYW1zLnBvcCgpKTtcbiAgICAgICAgLy8gRmFsbCB0aHJvdWdoLlxuICAgICAgY2FzZSAncmdiJzpcbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggIT09IDMpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gW3BhcnNlX2Nzc19pbnQocGFyYW1zWzBdKSxcbiAgICAgICAgICAgICAgICBwYXJzZV9jc3NfaW50KHBhcmFtc1sxXSksXG4gICAgICAgICAgICAgICAgcGFyc2VfY3NzX2ludChwYXJhbXNbMl0pLFxuICAgICAgICAgICAgICAgIGFscGhhXTtcbiAgICAgIGNhc2UgJ2hzbGEnOlxuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCAhPT0gNCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGFscGhhID0gcGFyc2VfY3NzX2Zsb2F0KHBhcmFtcy5wb3AoKSk7XG4gICAgICAgIC8vIEZhbGwgdGhyb3VnaC5cbiAgICAgIGNhc2UgJ2hzbCc6XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoICE9PSAzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIGggPSAoKChwYXJzZUZsb2F0KHBhcmFtc1swXSkgJSAzNjApICsgMzYwKSAlIDM2MCkgLyAzNjA7ICAvLyAwIC4uIDFcbiAgICAgICAgLy8gTk9URShkZWFubSk6IEFjY29yZGluZyB0byB0aGUgQ1NTIHNwZWMgcy9sIHNob3VsZCBvbmx5IGJlXG4gICAgICAgIC8vIHBlcmNlbnRhZ2VzLCBidXQgd2UgZG9uJ3QgYm90aGVyIGFuZCBsZXQgZmxvYXQgb3IgcGVyY2VudGFnZS5cbiAgICAgICAgdmFyIHMgPSBwYXJzZV9jc3NfZmxvYXQocGFyYW1zWzFdKTtcbiAgICAgICAgdmFyIGwgPSBwYXJzZV9jc3NfZmxvYXQocGFyYW1zWzJdKTtcbiAgICAgICAgdmFyIG0yID0gbCA8PSAwLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHZhciBtMSA9IGwgKiAyIC0gbTI7XG4gICAgICAgIHJldHVybiBbY2xhbXBfY3NzX2J5dGUoY3NzX2h1ZV90b19yZ2IobTEsIG0yLCBoKzEvMykgKiAyNTUpLFxuICAgICAgICAgICAgICAgIGNsYW1wX2Nzc19ieXRlKGNzc19odWVfdG9fcmdiKG0xLCBtMiwgaCkgKiAyNTUpLFxuICAgICAgICAgICAgICAgIGNsYW1wX2Nzc19ieXRlKGNzc19odWVfdG9fcmdiKG0xLCBtMiwgaC0xLzMpICogMjU1KSxcbiAgICAgICAgICAgICAgICBhbHBoYV07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudHJ5IHsgZXhwb3J0cy5wYXJzZUNTU0NvbG9yID0gcGFyc2VDU1NDb2xvcjsgfSBjYXRjaChlKSB7IH1cbn0pO1xuXG5jbGFzcyBDb2xvciB7XG4gICAgY29uc3RydWN0b3IociwgZywgYiwgYSA9IDEpIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5nID0gZztcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICAgICAgdGhpcy5hID0gYTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgQ29sb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZ2JhID0gY3NzY29sb3JwYXJzZXIucGFyc2VDU1NDb2xvcihpbnB1dCk7XG4gICAgICAgIGlmICghcmdiYSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKHJnYmFbMF0gLyAyNTUgKiByZ2JhWzNdLCByZ2JhWzFdIC8gMjU1ICogcmdiYVszXSwgcmdiYVsyXSAvIDI1NSAqIHJnYmFbM10sIHJnYmFbM10pO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgW3IsIGcsIGIsIGFdID0gdGhpcy50b0FycmF5KCk7XG4gICAgICAgIHJldHVybiBgcmdiYSgkeyBNYXRoLnJvdW5kKHIpIH0sJHsgTWF0aC5yb3VuZChnKSB9LCR7IE1hdGgucm91bmQoYikgfSwkeyBhIH0pYDtcbiAgICB9XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgY29uc3Qge3IsIGcsIGIsIGF9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGEgPT09IDAgPyBbXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0gOiBbXG4gICAgICAgICAgICByICogMjU1IC8gYSxcbiAgICAgICAgICAgIGcgKiAyNTUgLyBhLFxuICAgICAgICAgICAgYiAqIDI1NSAvIGEsXG4gICAgICAgICAgICBhXG4gICAgICAgIF07XG4gICAgfVxuICAgIHRvQXJyYXkwMSgpIHtcbiAgICAgICAgY29uc3Qge3IsIGcsIGIsIGF9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGEgPT09IDAgPyBbXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwXG4gICAgICAgIF0gOiBbXG4gICAgICAgICAgICByIC8gYSxcbiAgICAgICAgICAgIGcgLyBhLFxuICAgICAgICAgICAgYiAvIGEsXG4gICAgICAgICAgICBhXG4gICAgICAgIF07XG4gICAgfVxuICAgIHRvQXJyYXkwMVByZW11bHRpcGxpZWRBbHBoYSgpIHtcbiAgICAgICAgY29uc3Qge3IsIGcsIGIsIGF9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgYixcbiAgICAgICAgICAgIGFcbiAgICAgICAgXTtcbiAgICB9XG59XG5Db2xvci5ibGFjayA9IG5ldyBDb2xvcigwLCAwLCAwLCAxKTtcbkNvbG9yLndoaXRlID0gbmV3IENvbG9yKDEsIDEsIDEsIDEpO1xuQ29sb3IudHJhbnNwYXJlbnQgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMCk7XG5Db2xvci5yZWQgPSBuZXcgQ29sb3IoMSwgMCwgMCwgMSk7XG5Db2xvci5ibHVlID0gbmV3IENvbG9yKDAsIDAsIDEsIDEpO1xudmFyIENvbG9yJDEgPSBDb2xvcjtcblxuY2xhc3MgQ29sbGF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGNhc2VTZW5zaXRpdmUsIGRpYWNyaXRpY1NlbnNpdGl2ZSwgbG9jYWxlKSB7XG4gICAgICAgIGlmIChjYXNlU2Vuc2l0aXZlKVxuICAgICAgICAgICAgdGhpcy5zZW5zaXRpdml0eSA9IGRpYWNyaXRpY1NlbnNpdGl2ZSA/ICd2YXJpYW50JyA6ICdjYXNlJztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5zZW5zaXRpdml0eSA9IGRpYWNyaXRpY1NlbnNpdGl2ZSA/ICdhY2NlbnQnIDogJ2Jhc2UnO1xuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgdGhpcy5jb2xsYXRvciA9IG5ldyBJbnRsLkNvbGxhdG9yKHRoaXMubG9jYWxlID8gdGhpcy5sb2NhbGUgOiBbXSwge1xuICAgICAgICAgICAgc2Vuc2l0aXZpdHk6IHRoaXMuc2Vuc2l0aXZpdHksXG4gICAgICAgICAgICB1c2FnZTogJ3NlYXJjaCdcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBhcmUobGhzLCByaHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sbGF0b3IuY29tcGFyZShsaHMsIHJocyk7XG4gICAgfVxuICAgIHJlc29sdmVkTG9jYWxlKCkge1xuICAgICAgICByZXR1cm4gbmV3IEludGwuQ29sbGF0b3IodGhpcy5sb2NhbGUgPyB0aGlzLmxvY2FsZSA6IFtdKS5yZXNvbHZlZE9wdGlvbnMoKS5sb2NhbGU7XG4gICAgfVxufVxuXG5jbGFzcyBGb3JtYXR0ZWRTZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBpbWFnZSwgc2NhbGUsIGZvbnRTdGFjaywgdGV4dENvbG9yKSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQubm9ybWFsaXplID8gdGV4dC5ub3JtYWxpemUoKSA6IHRleHQ7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgICB0aGlzLmZvbnRTdGFjayA9IGZvbnRTdGFjaztcbiAgICAgICAgdGhpcy50ZXh0Q29sb3IgPSB0ZXh0Q29sb3I7XG4gICAgfVxufVxuY2xhc3MgRm9ybWF0dGVkIHtcbiAgICBjb25zdHJ1Y3RvcihzZWN0aW9ucykge1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gc2VjdGlvbnM7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHVuZm9ybWF0dGVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRm9ybWF0dGVkKFtuZXcgRm9ybWF0dGVkU2VjdGlvbih1bmZvcm1hdHRlZCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCldKTtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvbnMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiAhdGhpcy5zZWN0aW9ucy5zb21lKHNlY3Rpb24gPT4gc2VjdGlvbi50ZXh0Lmxlbmd0aCAhPT0gMCB8fCBzZWN0aW9uLmltYWdlICYmIHNlY3Rpb24uaW1hZ2UubmFtZS5sZW5ndGggIT09IDApO1xuICAgIH1cbiAgICBzdGF0aWMgZmFjdG9yeSh0ZXh0KSB7XG4gICAgICAgIGlmICh0ZXh0IGluc3RhbmNlb2YgRm9ybWF0dGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBGb3JtYXR0ZWQuZnJvbVN0cmluZyh0ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvbnMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICByZXR1cm4gdGhpcy5zZWN0aW9ucy5tYXAoc2VjdGlvbiA9PiBzZWN0aW9uLnRleHQpLmpvaW4oJycpO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBbJ2Zvcm1hdCddO1xuICAgICAgICBmb3IgKGNvbnN0IHNlY3Rpb24gb2YgdGhpcy5zZWN0aW9ucykge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24uaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAnaW1hZ2UnLFxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmltYWdlLm5hbWVcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcmlhbGl6ZWQucHVzaChzZWN0aW9uLnRleHQpO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24uZm9udFN0YWNrKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1sndGV4dC1mb250J10gPSBbXG4gICAgICAgICAgICAgICAgICAgICdsaXRlcmFsJyxcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5mb250U3RhY2suc3BsaXQoJywnKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5zY2FsZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNbJ2ZvbnQtc2NhbGUnXSA9IHNlY3Rpb24uc2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VjdGlvbi50ZXh0Q29sb3IpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zWyd0ZXh0LWNvbG9yJ10gPSBbJ3JnYmEnXS5jb25jYXQoc2VjdGlvbi50ZXh0Q29sb3IudG9BcnJheSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlcmlhbGl6ZWQucHVzaChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplZDtcbiAgICB9XG59XG5cbmNsYXNzIFJlc29sdmVkSW1hZ2Uge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZSA9IG9wdGlvbnMuYXZhaWxhYmxlO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TdHJpbmcobmFtZSkge1xuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNvbHZlZEltYWdlKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhdmFpbGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnaW1hZ2UnLFxuICAgICAgICAgICAgdGhpcy5uYW1lXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVJHQkEociwgZywgYiwgYSkge1xuICAgIGlmICghKHR5cGVvZiByID09PSAnbnVtYmVyJyAmJiByID49IDAgJiYgciA8PSAyNTUgJiYgdHlwZW9mIGcgPT09ICdudW1iZXInICYmIGcgPj0gMCAmJiBnIDw9IDI1NSAmJiB0eXBlb2YgYiA9PT0gJ251bWJlcicgJiYgYiA+PSAwICYmIGIgPD0gMjU1KSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBhID09PSAnbnVtYmVyJyA/IFtcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgYixcbiAgICAgICAgICAgIGFcbiAgICAgICAgXSA6IFtcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgYlxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gYEludmFsaWQgcmdiYSB2YWx1ZSBbJHsgdmFsdWUuam9pbignLCAnKSB9XTogJ3InLCAnZycsIGFuZCAnYicgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDI1NS5gO1xuICAgIH1cbiAgICBpZiAoISh0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGEgPT09ICdudW1iZXInICYmIGEgPj0gMCAmJiBhIDw9IDEpKSB7XG4gICAgICAgIHJldHVybiBgSW52YWxpZCByZ2JhIHZhbHVlIFskeyBbXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIGIsXG4gICAgICAgICAgICBhXG4gICAgICAgIF0uam9pbignLCAnKSB9XTogJ2EnIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxLmA7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWx1ZShtaXhlZCkge1xuICAgIGlmIChtaXhlZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtaXhlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbWl4ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtaXhlZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChtaXhlZCBpbnN0YW5jZW9mIENvbG9yJDEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChtaXhlZCBpbnN0YW5jZW9mIENvbGxhdG9yKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAobWl4ZWQgaW5zdGFuY2VvZiBGb3JtYXR0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChtaXhlZCBpbnN0YW5jZW9mIFJlc29sdmVkSW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1peGVkKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgbWl4ZWQpIHtcbiAgICAgICAgICAgIGlmICghaXNWYWx1ZShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtaXhlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWl4ZWQpIHtcbiAgICAgICAgICAgIGlmICghaXNWYWx1ZShtaXhlZFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gdHlwZU9mKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBOdWxsVHlwZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZ1R5cGU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gQm9vbGVhblR5cGU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXJUeXBlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBDb2xvciQxKSB7XG4gICAgICAgIHJldHVybiBDb2xvclR5cGU7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENvbGxhdG9yKSB7XG4gICAgICAgIHJldHVybiBDb2xsYXRvclR5cGU7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZvcm1hdHRlZCkge1xuICAgICAgICByZXR1cm4gRm9ybWF0dGVkVHlwZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVzb2x2ZWRJbWFnZSkge1xuICAgICAgICByZXR1cm4gUmVzb2x2ZWRJbWFnZVR5cGU7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIGxldCBpdGVtVHlwZTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdHlwZU9mKGl0ZW0pO1xuICAgICAgICAgICAgaWYgKCFpdGVtVHlwZSkge1xuICAgICAgICAgICAgICAgIGl0ZW1UeXBlID0gdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbVR5cGUgPT09IHQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbVR5cGUgPSBWYWx1ZVR5cGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5JDEoaXRlbVR5cGUgfHwgVmFsdWVUeXBlLCBsZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBPYmplY3RUeXBlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBDb2xvciQxIHx8IHZhbHVlIGluc3RhbmNlb2YgRm9ybWF0dGVkIHx8IHZhbHVlIGluc3RhbmNlb2YgUmVzb2x2ZWRJbWFnZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cbn1cblxuY2xhc3MgTGl0ZXJhbCB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggIT09IDIpXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgJ2xpdGVyYWwnIGV4cHJlc3Npb24gcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIGJ1dCBmb3VuZCAkeyBhcmdzLmxlbmd0aCAtIDEgfSBpbnN0ZWFkLmApO1xuICAgICAgICBpZiAoIWlzVmFsdWUoYXJnc1sxXSkpXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgaW52YWxpZCB2YWx1ZWApO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGFyZ3NbMV07XG4gICAgICAgIGxldCB0eXBlID0gdHlwZU9mKHZhbHVlKTtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWQgPSBjb250ZXh0LmV4cGVjdGVkVHlwZTtcbiAgICAgICAgaWYgKHR5cGUua2luZCA9PT0gJ2FycmF5JyAmJiB0eXBlLk4gPT09IDAgJiYgZXhwZWN0ZWQgJiYgZXhwZWN0ZWQua2luZCA9PT0gJ2FycmF5JyAmJiAodHlwZW9mIGV4cGVjdGVkLk4gIT09ICdudW1iZXInIHx8IGV4cGVjdGVkLk4gPT09IDApKSB7XG4gICAgICAgICAgICB0eXBlID0gZXhwZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBMaXRlcmFsKHR5cGUsIHZhbHVlKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoKSB7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUua2luZCA9PT0gJ2FycmF5JyB8fCB0aGlzLnR5cGUua2luZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ2xpdGVyYWwnLFxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIENvbG9yJDEpIHtcbiAgICAgICAgICAgIHJldHVybiBbJ3JnYmEnXS5jb25jYXQodGhpcy52YWx1ZS50b0FycmF5KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudmFsdWUgaW5zdGFuY2VvZiBGb3JtYXR0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlLnNlcmlhbGl6ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG52YXIgTGl0ZXJhbCQxID0gTGl0ZXJhbDtcblxuY2xhc3MgUnVudGltZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMubmFtZSA9ICdFeHByZXNzaW9uRXZhbHVhdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgIH1cbn1cbnZhciBSdW50aW1lRXJyb3IkMSA9IFJ1bnRpbWVFcnJvcjtcblxuY29uc3QgdHlwZXMkMSA9IHtcbiAgICBzdHJpbmc6IFN0cmluZ1R5cGUsXG4gICAgbnVtYmVyOiBOdW1iZXJUeXBlLFxuICAgIGJvb2xlYW46IEJvb2xlYW5UeXBlLFxuICAgIG9iamVjdDogT2JqZWN0VHlwZVxufTtcbmNsYXNzIEFzc2VydGlvbiB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgYXJncykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIGF0IGxlYXN0IG9uZSBhcmd1bWVudC5gKTtcbiAgICAgICAgbGV0IGkgPSAxO1xuICAgICAgICBsZXQgdHlwZTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChuYW1lID09PSAnYXJyYXknKSB7XG4gICAgICAgICAgICBsZXQgaXRlbVR5cGU7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IGFyZ3NbMV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJyB8fCAhKHR5cGUgaW4gdHlwZXMkMSkgfHwgdHlwZSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKCdUaGUgaXRlbSB0eXBlIGFyZ3VtZW50IG9mIFwiYXJyYXlcIiBtdXN0IGJlIG9uZSBvZiBzdHJpbmcsIG51bWJlciwgYm9vbGVhbicsIDEpO1xuICAgICAgICAgICAgICAgIGl0ZW1UeXBlID0gdHlwZXMkMVt0eXBlXTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZW1UeXBlID0gVmFsdWVUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IE47XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3NbMl0gIT09IG51bGwgJiYgKHR5cGVvZiBhcmdzWzJdICE9PSAnbnVtYmVyJyB8fCBhcmdzWzJdIDwgMCB8fCBhcmdzWzJdICE9PSBNYXRoLmZsb29yKGFyZ3NbMl0pKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcignVGhlIGxlbmd0aCBhcmd1bWVudCB0byBcImFycmF5XCIgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgbGl0ZXJhbCcsIDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBOID0gYXJnc1syXTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlID0gYXJyYXkkMShpdGVtVHlwZSwgTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0eXBlID0gdHlwZXMkMVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICAgICAgZm9yICg7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dCA9IGNvbnRleHQucGFyc2UoYXJnc1tpXSwgaSwgVmFsdWVUeXBlKTtcbiAgICAgICAgICAgIGlmICghaW5wdXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBwYXJzZWQucHVzaChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBc3NlcnRpb24odHlwZSwgcGFyc2VkKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYXJnc1tpXS5ldmFsdWF0ZShjdHgpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBjaGVja1N1YnR5cGUodGhpcy50eXBlLCB0eXBlT2YodmFsdWUpKTtcbiAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IHRoaXMuYXJncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBFeHBlY3RlZCB2YWx1ZSB0byBiZSBvZiB0eXBlICR7IHRvU3RyaW5nJDEodGhpcy50eXBlKSB9LCBidXQgZm91bmQgJHsgdG9TdHJpbmckMSh0eXBlT2YodmFsdWUpKSB9IGluc3RlYWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVhY2hDaGlsZChmbikge1xuICAgICAgICB0aGlzLmFyZ3MuZm9yRWFjaChmbik7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyZ3MuZXZlcnkoYXJnID0+IGFyZy5vdXRwdXREZWZpbmVkKCkpO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnR5cGU7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBbdHlwZS5raW5kXTtcbiAgICAgICAgaWYgKHR5cGUua2luZCA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgY29uc3QgaXRlbVR5cGUgPSB0eXBlLml0ZW1UeXBlO1xuICAgICAgICAgICAgaWYgKGl0ZW1UeXBlLmtpbmQgPT09ICdzdHJpbmcnIHx8IGl0ZW1UeXBlLmtpbmQgPT09ICdudW1iZXInIHx8IGl0ZW1UeXBlLmtpbmQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWQucHVzaChpdGVtVHlwZS5raW5kKTtcbiAgICAgICAgICAgICAgICBjb25zdCBOID0gdHlwZS5OO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgTiA9PT0gJ251bWJlcicgfHwgdGhpcy5hcmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKE4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplZC5jb25jYXQodGhpcy5hcmdzLm1hcChhcmcgPT4gYXJnLnNlcmlhbGl6ZSgpKSk7XG4gICAgfVxufVxudmFyIEFzc2VydGlvbiQxID0gQXNzZXJ0aW9uO1xuXG5jbGFzcyBGb3JtYXRFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihzZWN0aW9ucykge1xuICAgICAgICB0aGlzLnR5cGUgPSBGb3JtYXR0ZWRUeXBlO1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gc2VjdGlvbnM7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZShhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCBvbmUgYXJndW1lbnQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RBcmcgPSBhcmdzWzFdO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmlyc3RBcmcpICYmIHR5cGVvZiBmaXJzdEFyZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGFuIGltYWdlIG9yIHRleHQgc2VjdGlvbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWN0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgbmV4dFRva2VuTWF5QmVPYmplY3QgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gYXJncy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV07XG4gICAgICAgICAgICBpZiAobmV4dFRva2VuTWF5QmVPYmplY3QgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgICAgIG5leHRUb2tlbk1heUJlT2JqZWN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoYXJnWydmb250LXNjYWxlJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBjb250ZXh0LnBhcnNlKGFyZ1snZm9udC1zY2FsZSddLCAxLCBOdW1iZXJUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2FsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZm9udCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ1sndGV4dC1mb250J10pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udCA9IGNvbnRleHQucGFyc2UoYXJnWyd0ZXh0LWZvbnQnXSwgMSwgYXJyYXkkMShTdHJpbmdUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm9udClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgdGV4dENvbG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoYXJnWyd0ZXh0LWNvbG9yJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dENvbG9yID0gY29udGV4dC5wYXJzZShhcmdbJ3RleHQtY29sb3InXSwgMSwgQ29sb3JUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXh0Q29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdEV4cHJlc3Npb24gPSBzZWN0aW9uc1tzZWN0aW9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBsYXN0RXhwcmVzc2lvbi5zY2FsZSA9IHNjYWxlO1xuICAgICAgICAgICAgICAgIGxhc3RFeHByZXNzaW9uLmZvbnQgPSBmb250O1xuICAgICAgICAgICAgICAgIGxhc3RFeHByZXNzaW9uLnRleHRDb2xvciA9IHRleHRDb2xvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGNvbnRleHQucGFyc2UoYXJnc1tpXSwgMSwgVmFsdWVUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtpbmQgPSBjb250ZW50LnR5cGUua2luZDtcbiAgICAgICAgICAgICAgICBpZiAoa2luZCAhPT0gJ3N0cmluZycgJiYga2luZCAhPT0gJ3ZhbHVlJyAmJiBraW5kICE9PSAnbnVsbCcgJiYga2luZCAhPT0gJ3Jlc29sdmVkSW1hZ2UnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRm9ybWF0dGVkIHRleHQgdHlwZSBtdXN0IGJlICdzdHJpbmcnLCAndmFsdWUnLCAnaW1hZ2UnIG9yICdudWxsJy5gKTtcbiAgICAgICAgICAgICAgICBuZXh0VG9rZW5NYXlCZU9iamVjdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBmb250OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6IG51bGxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZvcm1hdEV4cHJlc3Npb24oc2VjdGlvbnMpO1xuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgY29uc3QgZXZhbHVhdGVTZWN0aW9uID0gc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBldmFsdWF0ZWRDb250ZW50ID0gc2VjdGlvbi5jb250ZW50LmV2YWx1YXRlKGN0eCk7XG4gICAgICAgICAgICBpZiAodHlwZU9mKGV2YWx1YXRlZENvbnRlbnQpID09PSBSZXNvbHZlZEltYWdlVHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRm9ybWF0dGVkU2VjdGlvbignJywgZXZhbHVhdGVkQ29udGVudCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZvcm1hdHRlZFNlY3Rpb24odG9TdHJpbmcoZXZhbHVhdGVkQ29udGVudCksIG51bGwsIHNlY3Rpb24uc2NhbGUgPyBzZWN0aW9uLnNjYWxlLmV2YWx1YXRlKGN0eCkgOiBudWxsLCBzZWN0aW9uLmZvbnQgPyBzZWN0aW9uLmZvbnQuZXZhbHVhdGUoY3R4KS5qb2luKCcsJykgOiBudWxsLCBzZWN0aW9uLnRleHRDb2xvciA/IHNlY3Rpb24udGV4dENvbG9yLmV2YWx1YXRlKGN0eCkgOiBudWxsKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBGb3JtYXR0ZWQodGhpcy5zZWN0aW9ucy5tYXAoZXZhbHVhdGVTZWN0aW9uKSk7XG4gICAgfVxuICAgIGVhY2hDaGlsZChmbikge1xuICAgICAgICBmb3IgKGNvbnN0IHNlY3Rpb24gb2YgdGhpcy5zZWN0aW9ucykge1xuICAgICAgICAgICAgZm4oc2VjdGlvbi5jb250ZW50KTtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uLnNjYWxlKSB7XG4gICAgICAgICAgICAgICAgZm4oc2VjdGlvbi5zY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VjdGlvbi5mb250KSB7XG4gICAgICAgICAgICAgICAgZm4oc2VjdGlvbi5mb250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWN0aW9uLnRleHRDb2xvcikge1xuICAgICAgICAgICAgICAgIGZuKHNlY3Rpb24udGV4dENvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXREZWZpbmVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IFsnZm9ybWF0J107XG4gICAgICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiB0aGlzLnNlY3Rpb25zKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLnB1c2goc2VjdGlvbi5jb250ZW50LnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIGlmIChzZWN0aW9uLnNjYWxlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1snZm9udC1zY2FsZSddID0gc2VjdGlvbi5zY2FsZS5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWN0aW9uLmZvbnQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zWyd0ZXh0LWZvbnQnXSA9IHNlY3Rpb24uZm9udC5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWN0aW9uLnRleHRDb2xvcikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNbJ3RleHQtY29sb3InXSA9IHNlY3Rpb24udGV4dENvbG9yLnNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbn1cblxuY2xhc3MgSW1hZ2VFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBSZXNvbHZlZEltYWdlVHlwZTtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCB0d28gYXJndW1lbnRzLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWUgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIFN0cmluZ1R5cGUpO1xuICAgICAgICBpZiAoIW5hbWUpXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgTm8gaW1hZ2UgbmFtZSBwcm92aWRlZC5gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbWFnZUV4cHJlc3Npb24obmFtZSk7XG4gICAgfVxuICAgIGV2YWx1YXRlKGN0eCkge1xuICAgICAgICBjb25zdCBldmFsdWF0ZWRJbWFnZU5hbWUgPSB0aGlzLmlucHV0LmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gUmVzb2x2ZWRJbWFnZS5mcm9tU3RyaW5nKGV2YWx1YXRlZEltYWdlTmFtZSk7XG4gICAgICAgIGlmICh2YWx1ZSAmJiBjdHguYXZhaWxhYmxlSW1hZ2VzKVxuICAgICAgICAgICAgdmFsdWUuYXZhaWxhYmxlID0gY3R4LmF2YWlsYWJsZUltYWdlcy5pbmRleE9mKGV2YWx1YXRlZEltYWdlTmFtZSkgPiAtMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5pbnB1dCk7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ2ltYWdlJyxcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuc2VyaWFsaXplKClcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmNvbnN0IHR5cGVzID0ge1xuICAgICd0by1ib29sZWFuJzogQm9vbGVhblR5cGUsXG4gICAgJ3RvLWNvbG9yJzogQ29sb3JUeXBlLFxuICAgICd0by1udW1iZXInOiBOdW1iZXJUeXBlLFxuICAgICd0by1zdHJpbmcnOiBTdHJpbmdUeXBlXG59O1xuY2xhc3MgQ29lcmNpb24ge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGFyZ3MpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMilcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCBvbmUgYXJndW1lbnQuYCk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBhcmdzWzBdO1xuICAgICAgICBpZiAoKG5hbWUgPT09ICd0by1ib29sZWFuJyB8fCBuYW1lID09PSAndG8tc3RyaW5nJykgJiYgYXJncy5sZW5ndGggIT09IDIpXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgb25lIGFyZ3VtZW50LmApO1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZXNbbmFtZV07XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gY29udGV4dC5wYXJzZShhcmdzW2ldLCBpLCBWYWx1ZVR5cGUpO1xuICAgICAgICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHBhcnNlZC5wdXNoKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvZXJjaW9uKHR5cGUsIHBhcnNlZCk7XG4gICAgfVxuICAgIGV2YWx1YXRlKGN0eCkge1xuICAgICAgICBpZiAodGhpcy50eXBlLmtpbmQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5hcmdzWzBdLmV2YWx1YXRlKGN0eCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZS5raW5kID09PSAnY29sb3InKSB7XG4gICAgICAgICAgICBsZXQgaW5wdXQ7XG4gICAgICAgICAgICBsZXQgZXJyb3I7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiB0aGlzLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGFyZy5ldmFsdWF0ZShjdHgpO1xuICAgICAgICAgICAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvciQxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IGN0eC5wYXJzZUNvbG9yKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPCAzIHx8IGlucHV0Lmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gYEludmFsaWQgcmJnYSB2YWx1ZSAkeyBKU09OLnN0cmluZ2lmeShpbnB1dCkgfTogZXhwZWN0ZWQgYW4gYXJyYXkgY29udGFpbmluZyBlaXRoZXIgdGhyZWUgb3IgZm91ciBudW1lcmljIHZhbHVlcy5gO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB2YWxpZGF0ZVJHQkEoaW5wdXRbMF0sIGlucHV0WzFdLCBpbnB1dFsyXSwgaW5wdXRbM10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IkMShpbnB1dFswXSAvIDI1NSwgaW5wdXRbMV0gLyAyNTUsIGlucHV0WzJdIC8gMjU1LCBpbnB1dFszXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yJDEoZXJyb3IgfHwgYENvdWxkIG5vdCBwYXJzZSBjb2xvciBmcm9tIHZhbHVlICckeyB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnID8gaW5wdXQgOiBTdHJpbmcoSlNPTi5zdHJpbmdpZnkoaW5wdXQpKSB9J2ApO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZS5raW5kID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXJnIG9mIHRoaXMuYXJncykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gYXJnLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihudW0pKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBDb3VsZCBub3QgY29udmVydCAkeyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgfSB0byBudW1iZXIuYCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50eXBlLmtpbmQgPT09ICdmb3JtYXR0ZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gRm9ybWF0dGVkLmZyb21TdHJpbmcodG9TdHJpbmcodGhpcy5hcmdzWzBdLmV2YWx1YXRlKGN0eCkpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnR5cGUua2luZCA9PT0gJ3Jlc29sdmVkSW1hZ2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzb2x2ZWRJbWFnZS5mcm9tU3RyaW5nKHRvU3RyaW5nKHRoaXMuYXJnc1swXS5ldmFsdWF0ZShjdHgpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdG9TdHJpbmcodGhpcy5hcmdzWzBdLmV2YWx1YXRlKGN0eCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVhY2hDaGlsZChmbikge1xuICAgICAgICB0aGlzLmFyZ3MuZm9yRWFjaChmbik7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFyZ3MuZXZlcnkoYXJnID0+IGFyZy5vdXRwdXREZWZpbmVkKCkpO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUua2luZCA9PT0gJ2Zvcm1hdHRlZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRm9ybWF0RXhwcmVzc2lvbihbe1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLmFyZ3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBmb250OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6IG51bGxcbiAgICAgICAgICAgICAgICB9XSkuc2VyaWFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHlwZS5raW5kID09PSAncmVzb2x2ZWRJbWFnZScpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW1hZ2VFeHByZXNzaW9uKHRoaXMuYXJnc1swXSkuc2VyaWFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IFtgdG8tJHsgdGhpcy50eXBlLmtpbmQgfWBdO1xuICAgICAgICB0aGlzLmVhY2hDaGlsZChjaGlsZCA9PiB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLnB1c2goY2hpbGQuc2VyaWFsaXplKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgfVxufVxudmFyIENvZXJjaW9uJDEgPSBDb2VyY2lvbjtcblxuY29uc3QgZ2VvbWV0cnlUeXBlcyA9IFtcbiAgICAnVW5rbm93bicsXG4gICAgJ1BvaW50JyxcbiAgICAnTGluZVN0cmluZycsXG4gICAgJ1BvbHlnb24nXG5dO1xuY2xhc3MgRXZhbHVhdGlvbkNvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmdsb2JhbHMgPSBudWxsO1xuICAgICAgICB0aGlzLmZlYXR1cmUgPSBudWxsO1xuICAgICAgICB0aGlzLmZlYXR1cmVTdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVkU2VjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcnNlQ29sb3JDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLmF2YWlsYWJsZUltYWdlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY2Fub25pY2FsID0gbnVsbDtcbiAgICAgICAgdGhpcy5mZWF0dXJlVGlsZUNvb3JkID0gbnVsbDtcbiAgICAgICAgdGhpcy5mZWF0dXJlRGlzdGFuY2VEYXRhID0gbnVsbDtcbiAgICB9XG4gICAgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZlYXR1cmUgJiYgJ2lkJyBpbiB0aGlzLmZlYXR1cmUgJiYgdGhpcy5mZWF0dXJlLmlkID8gdGhpcy5mZWF0dXJlLmlkIDogbnVsbDtcbiAgICB9XG4gICAgZ2VvbWV0cnlUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mZWF0dXJlID8gdHlwZW9mIHRoaXMuZmVhdHVyZS50eXBlID09PSAnbnVtYmVyJyA/IGdlb21ldHJ5VHlwZXNbdGhpcy5mZWF0dXJlLnR5cGVdIDogdGhpcy5mZWF0dXJlLnR5cGUgOiBudWxsO1xuICAgIH1cbiAgICBnZW9tZXRyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmVhdHVyZSAmJiAnZ2VvbWV0cnknIGluIHRoaXMuZmVhdHVyZSA/IHRoaXMuZmVhdHVyZS5nZW9tZXRyeSA6IG51bGw7XG4gICAgfVxuICAgIGNhbm9uaWNhbElEKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5vbmljYWw7XG4gICAgfVxuICAgIHByb3BlcnRpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZlYXR1cmUgJiYgdGhpcy5mZWF0dXJlLnByb3BlcnRpZXMgfHwge307XG4gICAgfVxuICAgIGRpc3RhbmNlRnJvbUNlbnRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZmVhdHVyZVRpbGVDb29yZCAmJiB0aGlzLmZlYXR1cmVEaXN0YW5jZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSB0aGlzLmZlYXR1cmVEaXN0YW5jZURhdGEuY2VudGVyO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLmZlYXR1cmVEaXN0YW5jZURhdGEuc2NhbGU7XG4gICAgICAgICAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmZlYXR1cmVUaWxlQ29vcmQ7XG4gICAgICAgICAgICBjb25zdCBkWCA9IHggKiBzY2FsZSAtIGNbMF07XG4gICAgICAgICAgICBjb25zdCBkWSA9IHkgKiBzY2FsZSAtIGNbMV07XG4gICAgICAgICAgICBjb25zdCBiWCA9IHRoaXMuZmVhdHVyZURpc3RhbmNlRGF0YS5iZWFyaW5nWzBdO1xuICAgICAgICAgICAgY29uc3QgYlkgPSB0aGlzLmZlYXR1cmVEaXN0YW5jZURhdGEuYmVhcmluZ1sxXTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBiWCAqIGRYICsgYlkgKiBkWTtcbiAgICAgICAgICAgIHJldHVybiBkaXN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBwYXJzZUNvbG9yKGlucHV0KSB7XG4gICAgICAgIGxldCBjYWNoZWQgPSB0aGlzLl9wYXJzZUNvbG9yQ2FjaGVbaW5wdXRdO1xuICAgICAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICAgICAgY2FjaGVkID0gdGhpcy5fcGFyc2VDb2xvckNhY2hlW2lucHV0XSA9IENvbG9yJDEucGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxufVxudmFyIEV2YWx1YXRpb25Db250ZXh0JDEgPSBFdmFsdWF0aW9uQ29udGV4dDtcblxuY2xhc3MgQ29tcG91bmRFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB0eXBlLCBldmFsdWF0ZSwgYXJncykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9ldmFsdWF0ZSA9IGV2YWx1YXRlO1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2YWx1YXRlKGN0eCwgdGhpcy5hcmdzKTtcbiAgICB9XG4gICAgZWFjaENoaWxkKGZuKSB7XG4gICAgICAgIHRoaXMuYXJncy5mb3JFYWNoKGZuKTtcbiAgICB9XG4gICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5uYW1lXS5jb25jYXQodGhpcy5hcmdzLm1hcChhcmcgPT4gYXJnLnNlcmlhbGl6ZSgpKSk7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZShhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IG9wID0gYXJnc1swXTtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IENvbXBvdW5kRXhwcmVzc2lvbi5kZWZpbml0aW9uc1tvcF07XG4gICAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYFVua25vd24gZXhwcmVzc2lvbiBcIiR7IG9wIH1cIi4gSWYgeW91IHdhbnRlZCBhIGxpdGVyYWwgYXJyYXksIHVzZSBbXCJsaXRlcmFsXCIsIFsuLi5dXS5gLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gQXJyYXkuaXNBcnJheShkZWZpbml0aW9uKSA/IGRlZmluaXRpb25bMF0gOiBkZWZpbml0aW9uLnR5cGU7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZU92ZXJsb2FkcyA9IEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikgPyBbW1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25bMV0sXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvblsyXVxuICAgICAgICAgICAgXV0gOiBkZWZpbml0aW9uLm92ZXJsb2FkcztcbiAgICAgICAgY29uc3Qgb3ZlcmxvYWRzID0gYXZhaWxhYmxlT3ZlcmxvYWRzLmZpbHRlcigoW3NpZ25hdHVyZV0pID0+ICFBcnJheS5pc0FycmF5KHNpZ25hdHVyZSkgfHwgc2lnbmF0dXJlLmxlbmd0aCA9PT0gYXJncy5sZW5ndGggLSAxKTtcbiAgICAgICAgbGV0IHNpZ25hdHVyZUNvbnRleHQgPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IFtwYXJhbXMsIGV2YWx1YXRlXSBvZiBvdmVybG9hZHMpIHtcbiAgICAgICAgICAgIHNpZ25hdHVyZUNvbnRleHQgPSBuZXcgUGFyc2luZ0NvbnRleHQkMShjb250ZXh0LnJlZ2lzdHJ5LCBjb250ZXh0LnBhdGgsIG51bGwsIGNvbnRleHQuc2NvcGUpO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IFtdO1xuICAgICAgICAgICAgbGV0IGFyZ1BhcnNlRmFpbGVkID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IEFycmF5LmlzQXJyYXkocGFyYW1zKSA/IHBhcmFtc1tpIC0gMV0gOiBwYXJhbXMudHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBzaWduYXR1cmVDb250ZXh0LnBhcnNlKGFyZywgMSArIHBhcnNlZEFyZ3MubGVuZ3RoLCBleHBlY3RlZFR5cGUpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ1BhcnNlRmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MucHVzaChwYXJzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyZ1BhcnNlRmFpbGVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggIT09IHBhcnNlZEFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZUNvbnRleHQuZXJyb3IoYEV4cGVjdGVkICR7IHBhcmFtcy5sZW5ndGggfSBhcmd1bWVudHMsIGJ1dCBmb3VuZCAkeyBwYXJzZWRBcmdzLmxlbmd0aCB9IGluc3RlYWQuYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkQXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkID0gQXJyYXkuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zW2ldIDogcGFyYW1zLnR5cGU7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJnID0gcGFyc2VkQXJnc1tpXTtcbiAgICAgICAgICAgICAgICBzaWduYXR1cmVDb250ZXh0LmNvbmNhdChpICsgMSkuY2hlY2tTdWJ0eXBlKGV4cGVjdGVkLCBhcmcudHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2lnbmF0dXJlQ29udGV4dC5lcnJvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZEV4cHJlc3Npb24ob3AsIHR5cGUsIGV2YWx1YXRlLCBwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3ZlcmxvYWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29udGV4dC5lcnJvcnMucHVzaCguLi5zaWduYXR1cmVDb250ZXh0LmVycm9ycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IG92ZXJsb2Fkcy5sZW5ndGggPyBvdmVybG9hZHMgOiBhdmFpbGFibGVPdmVybG9hZHM7XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmVzID0gZXhwZWN0ZWQubWFwKChbcGFyYW1zXSkgPT4gc3RyaW5naWZ5U2lnbmF0dXJlKHBhcmFtcykpLmpvaW4oJyB8ICcpO1xuICAgICAgICAgICAgY29uc3QgYWN0dWFsVHlwZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IGNvbnRleHQucGFyc2UoYXJnc1tpXSwgMSArIGFjdHVhbFR5cGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGFjdHVhbFR5cGVzLnB1c2godG9TdHJpbmckMShwYXJzZWQudHlwZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgYXJndW1lbnRzIG9mIHR5cGUgJHsgc2lnbmF0dXJlcyB9LCBidXQgZm91bmQgKCR7IGFjdHVhbFR5cGVzLmpvaW4oJywgJykgfSkgaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3RhdGljIHJlZ2lzdGVyKHJlZ2lzdHJ5LCBkZWZpbml0aW9ucykge1xuICAgICAgICBDb21wb3VuZEV4cHJlc3Npb24uZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9ucztcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGRlZmluaXRpb25zKSB7XG4gICAgICAgICAgICByZWdpc3RyeVtuYW1lXSA9IENvbXBvdW5kRXhwcmVzc2lvbjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzaWduYXR1cmUpKSB7XG4gICAgICAgIHJldHVybiBgKCR7IHNpZ25hdHVyZS5tYXAodG9TdHJpbmckMSkuam9pbignLCAnKSB9KWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAoJHsgdG9TdHJpbmckMShzaWduYXR1cmUudHlwZSkgfS4uLilgO1xuICAgIH1cbn1cbnZhciBDb21wb3VuZEV4cHJlc3Npb24kMSA9IENvbXBvdW5kRXhwcmVzc2lvbjtcblxuY2xhc3MgQ29sbGF0b3JFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihjYXNlU2Vuc2l0aXZlLCBkaWFjcml0aWNTZW5zaXRpdmUsIGxvY2FsZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBDb2xsYXRvclR5cGU7XG4gICAgICAgIHRoaXMubG9jYWxlID0gbG9jYWxlO1xuICAgICAgICB0aGlzLmNhc2VTZW5zaXRpdmUgPSBjYXNlU2Vuc2l0aXZlO1xuICAgICAgICB0aGlzLmRpYWNyaXRpY1NlbnNpdGl2ZSA9IGRpYWNyaXRpY1NlbnNpdGl2ZTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIG9uZSBhcmd1bWVudC5gKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGFyZ3NbMV07XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSlcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBDb2xsYXRvciBvcHRpb25zIGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LmApO1xuICAgICAgICBjb25zdCBjYXNlU2Vuc2l0aXZlID0gY29udGV4dC5wYXJzZShvcHRpb25zWydjYXNlLXNlbnNpdGl2ZSddID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdGlvbnNbJ2Nhc2Utc2Vuc2l0aXZlJ10sIDEsIEJvb2xlYW5UeXBlKTtcbiAgICAgICAgaWYgKCFjYXNlU2Vuc2l0aXZlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGRpYWNyaXRpY1NlbnNpdGl2ZSA9IGNvbnRleHQucGFyc2Uob3B0aW9uc1snZGlhY3JpdGljLXNlbnNpdGl2ZSddID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdGlvbnNbJ2RpYWNyaXRpYy1zZW5zaXRpdmUnXSwgMSwgQm9vbGVhblR5cGUpO1xuICAgICAgICBpZiAoIWRpYWNyaXRpY1NlbnNpdGl2ZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgbG9jYWxlID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnNbJ2xvY2FsZSddKSB7XG4gICAgICAgICAgICBsb2NhbGUgPSBjb250ZXh0LnBhcnNlKG9wdGlvbnNbJ2xvY2FsZSddLCAxLCBTdHJpbmdUeXBlKTtcbiAgICAgICAgICAgIGlmICghbG9jYWxlKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ29sbGF0b3JFeHByZXNzaW9uKGNhc2VTZW5zaXRpdmUsIGRpYWNyaXRpY1NlbnNpdGl2ZSwgbG9jYWxlKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sbGF0b3IodGhpcy5jYXNlU2Vuc2l0aXZlLmV2YWx1YXRlKGN0eCksIHRoaXMuZGlhY3JpdGljU2Vuc2l0aXZlLmV2YWx1YXRlKGN0eCksIHRoaXMubG9jYWxlID8gdGhpcy5sb2NhbGUuZXZhbHVhdGUoY3R4KSA6IG51bGwpO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5jYXNlU2Vuc2l0aXZlKTtcbiAgICAgICAgZm4odGhpcy5kaWFjcml0aWNTZW5zaXRpdmUpO1xuICAgICAgICBpZiAodGhpcy5sb2NhbGUpIHtcbiAgICAgICAgICAgIGZuKHRoaXMubG9jYWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXREZWZpbmVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICAgICAgICBvcHRpb25zWydjYXNlLXNlbnNpdGl2ZSddID0gdGhpcy5jYXNlU2Vuc2l0aXZlLnNlcmlhbGl6ZSgpO1xuICAgICAgICBvcHRpb25zWydkaWFjcml0aWMtc2Vuc2l0aXZlJ10gPSB0aGlzLmRpYWNyaXRpY1NlbnNpdGl2ZS5zZXJpYWxpemUoKTtcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlKSB7XG4gICAgICAgICAgICBvcHRpb25zWydsb2NhbGUnXSA9IHRoaXMubG9jYWxlLnNlcmlhbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnY29sbGF0b3InLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICBdO1xuICAgIH1cbn1cblxuY29uc3QgRVhURU5UID0gODE5MjtcbmZ1bmN0aW9uIHVwZGF0ZUJCb3goYmJveCwgY29vcmQpIHtcbiAgICBiYm94WzBdID0gTWF0aC5taW4oYmJveFswXSwgY29vcmRbMF0pO1xuICAgIGJib3hbMV0gPSBNYXRoLm1pbihiYm94WzFdLCBjb29yZFsxXSk7XG4gICAgYmJveFsyXSA9IE1hdGgubWF4KGJib3hbMl0sIGNvb3JkWzBdKTtcbiAgICBiYm94WzNdID0gTWF0aC5tYXgoYmJveFszXSwgY29vcmRbMV0pO1xufVxuZnVuY3Rpb24gbWVyY2F0b3JYZnJvbUxuZyhsbmcpIHtcbiAgICByZXR1cm4gKDE4MCArIGxuZykgLyAzNjA7XG59XG5mdW5jdGlvbiBtZXJjYXRvcllmcm9tTGF0KGxhdCkge1xuICAgIHJldHVybiAoMTgwIC0gMTgwIC8gTWF0aC5QSSAqIE1hdGgubG9nKE1hdGgudGFuKE1hdGguUEkgLyA0ICsgbGF0ICogTWF0aC5QSSAvIDM2MCkpKSAvIDM2MDtcbn1cbmZ1bmN0aW9uIGJveFdpdGhpbkJveChiYm94MSwgYmJveDIpIHtcbiAgICBpZiAoYmJveDFbMF0gPD0gYmJveDJbMF0pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYmJveDFbMl0gPj0gYmJveDJbMl0pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYmJveDFbMV0gPD0gYmJveDJbMV0pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYmJveDFbM10gPj0gYmJveDJbM10pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGdldFRpbGVDb29yZGluYXRlcyhwLCBjYW5vbmljYWwpIHtcbiAgICBjb25zdCB4ID0gbWVyY2F0b3JYZnJvbUxuZyhwWzBdKTtcbiAgICBjb25zdCB5ID0gbWVyY2F0b3JZZnJvbUxhdChwWzFdKTtcbiAgICBjb25zdCB0aWxlc0F0Wm9vbSA9IE1hdGgucG93KDIsIGNhbm9uaWNhbC56KTtcbiAgICByZXR1cm4gW1xuICAgICAgICBNYXRoLnJvdW5kKHggKiB0aWxlc0F0Wm9vbSAqIEVYVEVOVCksXG4gICAgICAgIE1hdGgucm91bmQoeSAqIHRpbGVzQXRab29tICogRVhURU5UKVxuICAgIF07XG59XG5mdW5jdGlvbiBvbkJvdW5kYXJ5KHAsIHAxLCBwMikge1xuICAgIGNvbnN0IHgxID0gcFswXSAtIHAxWzBdO1xuICAgIGNvbnN0IHkxID0gcFsxXSAtIHAxWzFdO1xuICAgIGNvbnN0IHgyID0gcFswXSAtIHAyWzBdO1xuICAgIGNvbnN0IHkyID0gcFsxXSAtIHAyWzFdO1xuICAgIHJldHVybiB4MSAqIHkyIC0geDIgKiB5MSA9PT0gMCAmJiB4MSAqIHgyIDw9IDAgJiYgeTEgKiB5MiA8PSAwO1xufVxuZnVuY3Rpb24gcmF5SW50ZXJzZWN0KHAsIHAxLCBwMikge1xuICAgIHJldHVybiBwMVsxXSA+IHBbMV0gIT09IHAyWzFdID4gcFsxXSAmJiBwWzBdIDwgKHAyWzBdIC0gcDFbMF0pICogKHBbMV0gLSBwMVsxXSkgLyAocDJbMV0gLSBwMVsxXSkgKyBwMVswXTtcbn1cbmZ1bmN0aW9uIHBvaW50V2l0aGluUG9seWdvbihwb2ludCwgcmluZ3MpIHtcbiAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJpbmcgPSByaW5nc1tpXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbjIgPSByaW5nLmxlbmd0aDsgaiA8IGxlbjIgLSAxOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChvbkJvdW5kYXJ5KHBvaW50LCByaW5nW2pdLCByaW5nW2ogKyAxXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKHJheUludGVyc2VjdChwb2ludCwgcmluZ1tqXSwgcmluZ1tqICsgMV0pKVxuICAgICAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluc2lkZTtcbn1cbmZ1bmN0aW9uIHBvaW50V2l0aGluUG9seWdvbnMocG9pbnQsIHBvbHlnb25zKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2x5Z29ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocG9pbnRXaXRoaW5Qb2x5Z29uKHBvaW50LCBwb2x5Z29uc1tpXSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gcGVycCh2MSwgdjIpIHtcbiAgICByZXR1cm4gdjFbMF0gKiB2MlsxXSAtIHYxWzFdICogdjJbMF07XG59XG5mdW5jdGlvbiB0d29TaWRlZChwMSwgcDIsIHExLCBxMikge1xuICAgIGNvbnN0IHgxID0gcDFbMF0gLSBxMVswXTtcbiAgICBjb25zdCB5MSA9IHAxWzFdIC0gcTFbMV07XG4gICAgY29uc3QgeDIgPSBwMlswXSAtIHExWzBdO1xuICAgIGNvbnN0IHkyID0gcDJbMV0gLSBxMVsxXTtcbiAgICBjb25zdCB4MyA9IHEyWzBdIC0gcTFbMF07XG4gICAgY29uc3QgeTMgPSBxMlsxXSAtIHExWzFdO1xuICAgIGNvbnN0IGRldDEgPSB4MSAqIHkzIC0geDMgKiB5MTtcbiAgICBjb25zdCBkZXQyID0geDIgKiB5MyAtIHgzICogeTI7XG4gICAgaWYgKGRldDEgPiAwICYmIGRldDIgPCAwIHx8IGRldDEgPCAwICYmIGRldDIgPiAwKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBsaW5lSW50ZXJzZWN0TGluZShhLCBiLCBjLCBkKSB7XG4gICAgY29uc3QgdmVjdG9yUCA9IFtcbiAgICAgICAgYlswXSAtIGFbMF0sXG4gICAgICAgIGJbMV0gLSBhWzFdXG4gICAgXTtcbiAgICBjb25zdCB2ZWN0b3JRID0gW1xuICAgICAgICBkWzBdIC0gY1swXSxcbiAgICAgICAgZFsxXSAtIGNbMV1cbiAgICBdO1xuICAgIGlmIChwZXJwKHZlY3RvclEsIHZlY3RvclApID09PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR3b1NpZGVkKGEsIGIsIGMsIGQpICYmIHR3b1NpZGVkKGMsIGQsIGEsIGIpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBsaW5lSW50ZXJzZWN0UG9seWdvbihwMSwgcDIsIHBvbHlnb24pIHtcbiAgICBmb3IgKGNvbnN0IHJpbmcgb2YgcG9seWdvbikge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJpbmcubGVuZ3RoIC0gMTsgKytqKSB7XG4gICAgICAgICAgICBpZiAobGluZUludGVyc2VjdExpbmUocDEsIHAyLCByaW5nW2pdLCByaW5nW2ogKyAxXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBsaW5lU3RyaW5nV2l0aGluUG9seWdvbihsaW5lLCBwb2x5Z29uKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghcG9pbnRXaXRoaW5Qb2x5Z29uKGxpbmVbaV0sIHBvbHlnb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBpZiAobGluZUludGVyc2VjdFBvbHlnb24obGluZVtpXSwgbGluZVtpICsgMV0sIHBvbHlnb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBsaW5lU3RyaW5nV2l0aGluUG9seWdvbnMobGluZSwgcG9seWdvbnMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsaW5lU3RyaW5nV2l0aGluUG9seWdvbihsaW5lLCBwb2x5Z29uc1tpXSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZ2V0VGlsZVBvbHlnb24oY29vcmRpbmF0ZXMsIGJib3gsIGNhbm9uaWNhbCkge1xuICAgIGNvbnN0IHBvbHlnb24gPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJpbmcgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb29yZGluYXRlc1tpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgY29vcmQgPSBnZXRUaWxlQ29vcmRpbmF0ZXMoY29vcmRpbmF0ZXNbaV1bal0sIGNhbm9uaWNhbCk7XG4gICAgICAgICAgICB1cGRhdGVCQm94KGJib3gsIGNvb3JkKTtcbiAgICAgICAgICAgIHJpbmcucHVzaChjb29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgcG9seWdvbi5wdXNoKHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gcG9seWdvbjtcbn1cbmZ1bmN0aW9uIGdldFRpbGVQb2x5Z29ucyhjb29yZGluYXRlcywgYmJveCwgY2Fub25pY2FsKSB7XG4gICAgY29uc3QgcG9seWdvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBvbHlnb24gPSBnZXRUaWxlUG9seWdvbihjb29yZGluYXRlc1tpXSwgYmJveCwgY2Fub25pY2FsKTtcbiAgICAgICAgcG9seWdvbnMucHVzaChwb2x5Z29uKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvbHlnb25zO1xufVxuZnVuY3Rpb24gdXBkYXRlUG9pbnQocCwgYmJveCwgcG9seUJCb3gsIHdvcmxkU2l6ZSkge1xuICAgIGlmIChwWzBdIDwgcG9seUJCb3hbMF0gfHwgcFswXSA+IHBvbHlCQm94WzJdKSB7XG4gICAgICAgIGNvbnN0IGhhbGZXb3JsZFNpemUgPSB3b3JsZFNpemUgKiAwLjU7XG4gICAgICAgIGxldCBzaGlmdCA9IHBbMF0gLSBwb2x5QkJveFswXSA+IGhhbGZXb3JsZFNpemUgPyAtd29ybGRTaXplIDogcG9seUJCb3hbMF0gLSBwWzBdID4gaGFsZldvcmxkU2l6ZSA/IHdvcmxkU2l6ZSA6IDA7XG4gICAgICAgIGlmIChzaGlmdCA9PT0gMCkge1xuICAgICAgICAgICAgc2hpZnQgPSBwWzBdIC0gcG9seUJCb3hbMl0gPiBoYWxmV29ybGRTaXplID8gLXdvcmxkU2l6ZSA6IHBvbHlCQm94WzJdIC0gcFswXSA+IGhhbGZXb3JsZFNpemUgPyB3b3JsZFNpemUgOiAwO1xuICAgICAgICB9XG4gICAgICAgIHBbMF0gKz0gc2hpZnQ7XG4gICAgfVxuICAgIHVwZGF0ZUJCb3goYmJveCwgcCk7XG59XG5mdW5jdGlvbiByZXNldEJCb3goYmJveCkge1xuICAgIGJib3hbMF0gPSBiYm94WzFdID0gSW5maW5pdHk7XG4gICAgYmJveFsyXSA9IGJib3hbM10gPSAtSW5maW5pdHk7XG59XG5mdW5jdGlvbiBnZXRUaWxlUG9pbnRzKGdlb21ldHJ5LCBwb2ludEJCb3gsIHBvbHlCQm94LCBjYW5vbmljYWwpIHtcbiAgICBjb25zdCB3b3JsZFNpemUgPSBNYXRoLnBvdygyLCBjYW5vbmljYWwueikgKiBFWFRFTlQ7XG4gICAgY29uc3Qgc2hpZnRzID0gW1xuICAgICAgICBjYW5vbmljYWwueCAqIEVYVEVOVCxcbiAgICAgICAgY2Fub25pY2FsLnkgKiBFWFRFTlRcbiAgICBdO1xuICAgIGNvbnN0IHRpbGVQb2ludHMgPSBbXTtcbiAgICBpZiAoIWdlb21ldHJ5KVxuICAgICAgICByZXR1cm4gdGlsZVBvaW50cztcbiAgICBmb3IgKGNvbnN0IHBvaW50cyBvZiBnZW9tZXRyeSkge1xuICAgICAgICBmb3IgKGNvbnN0IHBvaW50IG9mIHBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgcCA9IFtcbiAgICAgICAgICAgICAgICBwb2ludC54ICsgc2hpZnRzWzBdLFxuICAgICAgICAgICAgICAgIHBvaW50LnkgKyBzaGlmdHNbMV1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB1cGRhdGVQb2ludChwLCBwb2ludEJCb3gsIHBvbHlCQm94LCB3b3JsZFNpemUpO1xuICAgICAgICAgICAgdGlsZVBvaW50cy5wdXNoKHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aWxlUG9pbnRzO1xufVxuZnVuY3Rpb24gZ2V0VGlsZUxpbmVzKGdlb21ldHJ5LCBsaW5lQkJveCwgcG9seUJCb3gsIGNhbm9uaWNhbCkge1xuICAgIGNvbnN0IHdvcmxkU2l6ZSA9IE1hdGgucG93KDIsIGNhbm9uaWNhbC56KSAqIEVYVEVOVDtcbiAgICBjb25zdCBzaGlmdHMgPSBbXG4gICAgICAgIGNhbm9uaWNhbC54ICogRVhURU5ULFxuICAgICAgICBjYW5vbmljYWwueSAqIEVYVEVOVFxuICAgIF07XG4gICAgY29uc3QgdGlsZUxpbmVzID0gW107XG4gICAgaWYgKCFnZW9tZXRyeSlcbiAgICAgICAgcmV0dXJuIHRpbGVMaW5lcztcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgZ2VvbWV0cnkpIHtcbiAgICAgICAgY29uc3QgdGlsZUxpbmUgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBsaW5lKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gW1xuICAgICAgICAgICAgICAgIHBvaW50LnggKyBzaGlmdHNbMF0sXG4gICAgICAgICAgICAgICAgcG9pbnQueSArIHNoaWZ0c1sxXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHVwZGF0ZUJCb3gobGluZUJCb3gsIHApO1xuICAgICAgICAgICAgdGlsZUxpbmUucHVzaChwKTtcbiAgICAgICAgfVxuICAgICAgICB0aWxlTGluZXMucHVzaCh0aWxlTGluZSk7XG4gICAgfVxuICAgIGlmIChsaW5lQkJveFsyXSAtIGxpbmVCQm94WzBdIDw9IHdvcmxkU2l6ZSAvIDIpIHtcbiAgICAgICAgcmVzZXRCQm94KGxpbmVCQm94KTtcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIHRpbGVMaW5lcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIGxpbmUpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVQb2ludChwLCBsaW5lQkJveCwgcG9seUJCb3gsIHdvcmxkU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRpbGVMaW5lcztcbn1cbmZ1bmN0aW9uIHBvaW50c1dpdGhpblBvbHlnb25zKGN0eCwgcG9seWdvbkdlb21ldHJ5KSB7XG4gICAgY29uc3QgcG9pbnRCQm94ID0gW1xuICAgICAgICBJbmZpbml0eSxcbiAgICAgICAgSW5maW5pdHksXG4gICAgICAgIC1JbmZpbml0eSxcbiAgICAgICAgLUluZmluaXR5XG4gICAgXTtcbiAgICBjb25zdCBwb2x5QkJveCA9IFtcbiAgICAgICAgSW5maW5pdHksXG4gICAgICAgIEluZmluaXR5LFxuICAgICAgICAtSW5maW5pdHksXG4gICAgICAgIC1JbmZpbml0eVxuICAgIF07XG4gICAgY29uc3QgY2Fub25pY2FsID0gY3R4LmNhbm9uaWNhbElEKCk7XG4gICAgaWYgKCFjYW5vbmljYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocG9seWdvbkdlb21ldHJ5LnR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICBjb25zdCB0aWxlUG9seWdvbiA9IGdldFRpbGVQb2x5Z29uKHBvbHlnb25HZW9tZXRyeS5jb29yZGluYXRlcywgcG9seUJCb3gsIGNhbm9uaWNhbCk7XG4gICAgICAgIGNvbnN0IHRpbGVQb2ludHMgPSBnZXRUaWxlUG9pbnRzKGN0eC5nZW9tZXRyeSgpLCBwb2ludEJCb3gsIHBvbHlCQm94LCBjYW5vbmljYWwpO1xuICAgICAgICBpZiAoIWJveFdpdGhpbkJveChwb2ludEJCb3gsIHBvbHlCQm94KSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiB0aWxlUG9pbnRzKSB7XG4gICAgICAgICAgICBpZiAoIXBvaW50V2l0aGluUG9seWdvbihwb2ludCwgdGlsZVBvbHlnb24pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocG9seWdvbkdlb21ldHJ5LnR5cGUgPT09ICdNdWx0aVBvbHlnb24nKSB7XG4gICAgICAgIGNvbnN0IHRpbGVQb2x5Z29ucyA9IGdldFRpbGVQb2x5Z29ucyhwb2x5Z29uR2VvbWV0cnkuY29vcmRpbmF0ZXMsIHBvbHlCQm94LCBjYW5vbmljYWwpO1xuICAgICAgICBjb25zdCB0aWxlUG9pbnRzID0gZ2V0VGlsZVBvaW50cyhjdHguZ2VvbWV0cnkoKSwgcG9pbnRCQm94LCBwb2x5QkJveCwgY2Fub25pY2FsKTtcbiAgICAgICAgaWYgKCFib3hXaXRoaW5Cb3gocG9pbnRCQm94LCBwb2x5QkJveCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgdGlsZVBvaW50cykge1xuICAgICAgICAgICAgaWYgKCFwb2ludFdpdGhpblBvbHlnb25zKHBvaW50LCB0aWxlUG9seWdvbnMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGxpbmVzV2l0aGluUG9seWdvbnMoY3R4LCBwb2x5Z29uR2VvbWV0cnkpIHtcbiAgICBjb25zdCBsaW5lQkJveCA9IFtcbiAgICAgICAgSW5maW5pdHksXG4gICAgICAgIEluZmluaXR5LFxuICAgICAgICAtSW5maW5pdHksXG4gICAgICAgIC1JbmZpbml0eVxuICAgIF07XG4gICAgY29uc3QgcG9seUJCb3ggPSBbXG4gICAgICAgIEluZmluaXR5LFxuICAgICAgICBJbmZpbml0eSxcbiAgICAgICAgLUluZmluaXR5LFxuICAgICAgICAtSW5maW5pdHlcbiAgICBdO1xuICAgIGNvbnN0IGNhbm9uaWNhbCA9IGN0eC5jYW5vbmljYWxJRCgpO1xuICAgIGlmICghY2Fub25pY2FsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBvbHlnb25HZW9tZXRyeS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgY29uc3QgdGlsZVBvbHlnb24gPSBnZXRUaWxlUG9seWdvbihwb2x5Z29uR2VvbWV0cnkuY29vcmRpbmF0ZXMsIHBvbHlCQm94LCBjYW5vbmljYWwpO1xuICAgICAgICBjb25zdCB0aWxlTGluZXMgPSBnZXRUaWxlTGluZXMoY3R4Lmdlb21ldHJ5KCksIGxpbmVCQm94LCBwb2x5QkJveCwgY2Fub25pY2FsKTtcbiAgICAgICAgaWYgKCFib3hXaXRoaW5Cb3gobGluZUJCb3gsIHBvbHlCQm94KSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIHRpbGVMaW5lcykge1xuICAgICAgICAgICAgaWYgKCFsaW5lU3RyaW5nV2l0aGluUG9seWdvbihsaW5lLCB0aWxlUG9seWdvbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwb2x5Z29uR2VvbWV0cnkudHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgY29uc3QgdGlsZVBvbHlnb25zID0gZ2V0VGlsZVBvbHlnb25zKHBvbHlnb25HZW9tZXRyeS5jb29yZGluYXRlcywgcG9seUJCb3gsIGNhbm9uaWNhbCk7XG4gICAgICAgIGNvbnN0IHRpbGVMaW5lcyA9IGdldFRpbGVMaW5lcyhjdHguZ2VvbWV0cnkoKSwgbGluZUJCb3gsIHBvbHlCQm94LCBjYW5vbmljYWwpO1xuICAgICAgICBpZiAoIWJveFdpdGhpbkJveChsaW5lQkJveCwgcG9seUJCb3gpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgdGlsZUxpbmVzKSB7XG4gICAgICAgICAgICBpZiAoIWxpbmVTdHJpbmdXaXRoaW5Qb2x5Z29ucyhsaW5lLCB0aWxlUG9seWdvbnMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmNsYXNzIFdpdGhpbiB7XG4gICAgY29uc3RydWN0b3IoZ2VvanNvbiwgZ2VvbWV0cmllcykge1xuICAgICAgICB0aGlzLnR5cGUgPSBCb29sZWFuVHlwZTtcbiAgICAgICAgdGhpcy5nZW9qc29uID0gZ2VvanNvbjtcbiAgICAgICAgdGhpcy5nZW9tZXRyaWVzID0gZ2VvbWV0cmllcztcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAyKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYCd3aXRoaW4nIGV4cHJlc3Npb24gcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIGJ1dCBmb3VuZCAkeyBhcmdzLmxlbmd0aCAtIDEgfSBpbnN0ZWFkLmApO1xuICAgICAgICBpZiAoaXNWYWx1ZShhcmdzWzFdKSkge1xuICAgICAgICAgICAgY29uc3QgZ2VvanNvbiA9IGFyZ3NbMV07XG4gICAgICAgICAgICBpZiAoZ2VvanNvbi50eXBlID09PSAnRmVhdHVyZUNvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnZW9qc29uLmZlYXR1cmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBnZW9qc29uLmZlYXR1cmVzW2ldLmdlb21ldHJ5LnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnUG9seWdvbicgfHwgdHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2l0aGluKGdlb2pzb24sIGdlb2pzb24uZmVhdHVyZXNbaV0uZ2VvbWV0cnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9qc29uLnR5cGUgPT09ICdGZWF0dXJlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBnZW9qc29uLmdlb21ldHJ5LnR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdQb2x5Z29uJyB8fCB0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdpdGhpbihnZW9qc29uLCBnZW9qc29uLmdlb21ldHJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb2pzb24udHlwZSA9PT0gJ1BvbHlnb24nIHx8IGdlb2pzb24udHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdpdGhpbihnZW9qc29uLCBnZW9qc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgJ3dpdGhpbicgZXhwcmVzc2lvbiByZXF1aXJlcyB2YWxpZCBnZW9qc29uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHBvbHlnb24gZ2VvbWV0cnkgdHlwZS5gKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGlmIChjdHguZ2VvbWV0cnkoKSAhPSBudWxsICYmIGN0eC5jYW5vbmljYWxJRCgpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZ2VvbWV0cnlUeXBlKCkgPT09ICdQb2ludCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnRzV2l0aGluUG9seWdvbnMoY3R4LCB0aGlzLmdlb21ldHJpZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjdHguZ2VvbWV0cnlUeXBlKCkgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBsaW5lc1dpdGhpblBvbHlnb25zKGN0eCwgdGhpcy5nZW9tZXRyaWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVhY2hDaGlsZCgpIHtcbiAgICB9XG4gICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICd3aXRoaW4nLFxuICAgICAgICAgICAgdGhpcy5nZW9qc29uXG4gICAgICAgIF07XG4gICAgfVxufVxudmFyIFdpdGhpbiQxID0gV2l0aGluO1xuXG5mdW5jdGlvbiBpc0ZlYXR1cmVDb25zdGFudChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBDb21wb3VuZEV4cHJlc3Npb24kMSkge1xuICAgICAgICBpZiAoZS5uYW1lID09PSAnZ2V0JyAmJiBlLmFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5uYW1lID09PSAnZmVhdHVyZS1zdGF0ZScpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChlLm5hbWUgPT09ICdoYXMnICYmIGUuYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChlLm5hbWUgPT09ICdwcm9wZXJ0aWVzJyB8fCBlLm5hbWUgPT09ICdnZW9tZXRyeS10eXBlJyB8fCBlLm5hbWUgPT09ICdpZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICgvXmZpbHRlci0vLnRlc3QoZS5uYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChlIGluc3RhbmNlb2YgV2l0aGluJDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gdHJ1ZTtcbiAgICBlLmVhY2hDaGlsZChhcmcgPT4ge1xuICAgICAgICBpZiAocmVzdWx0ICYmICFpc0ZlYXR1cmVDb25zdGFudChhcmcpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc1N0YXRlQ29uc3RhbnQoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgQ29tcG91bmRFeHByZXNzaW9uJDEpIHtcbiAgICAgICAgaWYgKGUubmFtZSA9PT0gJ2ZlYXR1cmUtc3RhdGUnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XG4gICAgZS5lYWNoQ2hpbGQoYXJnID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhaXNTdGF0ZUNvbnN0YW50KGFyZykpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzR2xvYmFsUHJvcGVydHlDb25zdGFudChlLCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBDb21wb3VuZEV4cHJlc3Npb24kMSAmJiBwcm9wZXJ0aWVzLmluZGV4T2YoZS5uYW1lKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XG4gICAgZS5lYWNoQ2hpbGQoYXJnID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhaXNHbG9iYWxQcm9wZXJ0eUNvbnN0YW50KGFyZywgcHJvcGVydGllcykpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY2xhc3MgVmFyIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBib3VuZEV4cHJlc3Npb24pIHtcbiAgICAgICAgdGhpcy50eXBlID0gYm91bmRFeHByZXNzaW9uLnR5cGU7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuYm91bmRFeHByZXNzaW9uID0gYm91bmRFeHByZXNzaW9uO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggIT09IDIgfHwgdHlwZW9mIGFyZ3NbMV0gIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYCd2YXInIGV4cHJlc3Npb24gcmVxdWlyZXMgZXhhY3RseSBvbmUgc3RyaW5nIGxpdGVyYWwgYXJndW1lbnQuYCk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBhcmdzWzFdO1xuICAgICAgICBpZiAoIWNvbnRleHQuc2NvcGUuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgVW5rbm93biB2YXJpYWJsZSBcIiR7IG5hbWUgfVwiLiBNYWtlIHN1cmUgXCIkeyBuYW1lIH1cIiBoYXMgYmVlbiBib3VuZCBpbiBhbiBlbmNsb3NpbmcgXCJsZXRcIiBleHByZXNzaW9uIGJlZm9yZSB1c2luZyBpdC5gLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFZhcihuYW1lLCBjb250ZXh0LnNjb3BlLmdldChuYW1lKSk7XG4gICAgfVxuICAgIGV2YWx1YXRlKGN0eCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3VuZEV4cHJlc3Npb24uZXZhbHVhdGUoY3R4KTtcbiAgICB9XG4gICAgZWFjaENoaWxkKCkge1xuICAgIH1cbiAgICBvdXRwdXREZWZpbmVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICd2YXInLFxuICAgICAgICAgICAgdGhpcy5uYW1lXG4gICAgICAgIF07XG4gICAgfVxufVxudmFyIFZhciQxID0gVmFyO1xuXG5jbGFzcyBQYXJzaW5nQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IocmVnaXN0cnksIHBhdGggPSBbXSwgZXhwZWN0ZWRUeXBlLCBzY29wZSA9IG5ldyBTY29wZSQxKCksIGVycm9ycyA9IFtdKSB7XG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5rZXkgPSBwYXRoLm1hcChwYXJ0ID0+IGBbJHsgcGFydCB9XWApLmpvaW4oJycpO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB0aGlzLmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTtcbiAgICB9XG4gICAgcGFyc2UoZXhwciwgaW5kZXgsIGV4cGVjdGVkVHlwZSwgYmluZGluZ3MsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmNhdChpbmRleCwgZXhwZWN0ZWRUeXBlLCBiaW5kaW5ncykuX3BhcnNlKGV4cHIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZShleHByLCBvcHRpb25zKTtcbiAgICB9XG4gICAgX3BhcnNlKGV4cHIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGV4cHIgPT09IG51bGwgfHwgdHlwZW9mIGV4cHIgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBleHByID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGV4cHIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBleHByID0gW1xuICAgICAgICAgICAgICAgICdsaXRlcmFsJyxcbiAgICAgICAgICAgICAgICBleHByXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFubm90YXRlKHBhcnNlZCwgdHlwZSwgdHlwZUFubm90YXRpb24pIHtcbiAgICAgICAgICAgIGlmICh0eXBlQW5ub3RhdGlvbiA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFzc2VydGlvbiQxKHR5cGUsIFtwYXJzZWRdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZUFubm90YXRpb24gPT09ICdjb2VyY2UnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2VyY2lvbiQxKHR5cGUsIFtwYXJzZWRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleHByKSkge1xuICAgICAgICAgICAgaWYgKGV4cHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoYEV4cGVjdGVkIGFuIGFycmF5IHdpdGggYXQgbGVhc3Qgb25lIGVsZW1lbnQuIElmIHlvdSB3YW50ZWQgYSBsaXRlcmFsIGFycmF5LCB1c2UgW1wibGl0ZXJhbFwiLCBbXV0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcCA9IGV4cHJbMF07XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoYEV4cHJlc3Npb24gbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCBidXQgZm91bmQgJHsgdHlwZW9mIG9wIH0gaW5zdGVhZC4gSWYgeW91IHdhbnRlZCBhIGxpdGVyYWwgYXJyYXksIHVzZSBbXCJsaXRlcmFsXCIsIFsuLi5dXS5gLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IEV4cHIgPSB0aGlzLnJlZ2lzdHJ5W29wXTtcbiAgICAgICAgICAgIGlmIChFeHByKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZCA9IEV4cHIucGFyc2UoZXhwciwgdGhpcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV4cGVjdGVkVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBlY3RlZCA9IHRoaXMuZXhwZWN0ZWRUeXBlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBwYXJzZWQudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChleHBlY3RlZC5raW5kID09PSAnc3RyaW5nJyB8fCBleHBlY3RlZC5raW5kID09PSAnbnVtYmVyJyB8fCBleHBlY3RlZC5raW5kID09PSAnYm9vbGVhbicgfHwgZXhwZWN0ZWQua2luZCA9PT0gJ29iamVjdCcgfHwgZXhwZWN0ZWQua2luZCA9PT0gJ2FycmF5JykgJiYgYWN0dWFsLmtpbmQgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IGFubm90YXRlKHBhcnNlZCwgZXhwZWN0ZWQsIG9wdGlvbnMudHlwZUFubm90YXRpb24gfHwgJ2Fzc2VydCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChleHBlY3RlZC5raW5kID09PSAnY29sb3InIHx8IGV4cGVjdGVkLmtpbmQgPT09ICdmb3JtYXR0ZWQnIHx8IGV4cGVjdGVkLmtpbmQgPT09ICdyZXNvbHZlZEltYWdlJykgJiYgKGFjdHVhbC5raW5kID09PSAndmFsdWUnIHx8IGFjdHVhbC5raW5kID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IGFubm90YXRlKHBhcnNlZCwgZXhwZWN0ZWQsIG9wdGlvbnMudHlwZUFubm90YXRpb24gfHwgJ2NvZXJjZScpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY2hlY2tTdWJ0eXBlKGV4cGVjdGVkLCBhY3R1YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIShwYXJzZWQgaW5zdGFuY2VvZiBMaXRlcmFsJDEpICYmIHBhcnNlZC50eXBlLmtpbmQgIT09ICdyZXNvbHZlZEltYWdlJyAmJiBpc0NvbnN0YW50KHBhcnNlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWMgPSBuZXcgRXZhbHVhdGlvbkNvbnRleHQkMSgpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkID0gbmV3IExpdGVyYWwkMShwYXJzZWQudHlwZSwgcGFyc2VkLmV2YWx1YXRlKGVjKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgVW5rbm93biBleHByZXNzaW9uIFwiJHsgb3AgfVwiLiBJZiB5b3Ugd2FudGVkIGEgbGl0ZXJhbCBhcnJheSwgdXNlIFtcImxpdGVyYWxcIiwgWy4uLl1dLmAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHByID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoYCd1bmRlZmluZWQnIHZhbHVlIGludmFsaWQuIFVzZSBudWxsIGluc3RlYWQuYCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cHIgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcihgQmFyZSBvYmplY3RzIGludmFsaWQuIFVzZSBbXCJsaXRlcmFsXCIsIHsuLi59XSBpbnN0ZWFkLmApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3IoYEV4cGVjdGVkIGFuIGFycmF5LCBidXQgZm91bmQgJHsgdHlwZW9mIGV4cHIgfSBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbmNhdChpbmRleCwgZXhwZWN0ZWRUeXBlLCBiaW5kaW5ncykge1xuICAgICAgICBjb25zdCBwYXRoID0gdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJyA/IHRoaXMucGF0aC5jb25jYXQoaW5kZXgpIDogdGhpcy5wYXRoO1xuICAgICAgICBjb25zdCBzY29wZSA9IGJpbmRpbmdzID8gdGhpcy5zY29wZS5jb25jYXQoYmluZGluZ3MpIDogdGhpcy5zY29wZTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXJzaW5nQ29udGV4dCh0aGlzLnJlZ2lzdHJ5LCBwYXRoLCBleHBlY3RlZFR5cGUgfHwgbnVsbCwgc2NvcGUsIHRoaXMuZXJyb3JzKTtcbiAgICB9XG4gICAgZXJyb3IoZXJyb3IsIC4uLmtleXMpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7IHRoaXMua2V5IH0keyBrZXlzLm1hcChrID0+IGBbJHsgayB9XWApLmpvaW4oJycpIH1gO1xuICAgICAgICB0aGlzLmVycm9ycy5wdXNoKG5ldyBQYXJzaW5nRXJyb3IkMihrZXksIGVycm9yKSk7XG4gICAgfVxuICAgIGNoZWNrU3VidHlwZShleHBlY3RlZCwgdCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGNoZWNrU3VidHlwZShleHBlY3RlZCwgdCk7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxufVxudmFyIFBhcnNpbmdDb250ZXh0JDEgPSBQYXJzaW5nQ29udGV4dDtcbmZ1bmN0aW9uIGlzQ29uc3RhbnQoZXhwcmVzc2lvbikge1xuICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgVmFyJDEpIHtcbiAgICAgICAgcmV0dXJuIGlzQ29uc3RhbnQoZXhwcmVzc2lvbi5ib3VuZEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIENvbXBvdW5kRXhwcmVzc2lvbiQxICYmIGV4cHJlc3Npb24ubmFtZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgQ29sbGF0b3JFeHByZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBXaXRoaW4kMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGlzVHlwZUFubm90YXRpb24gPSBleHByZXNzaW9uIGluc3RhbmNlb2YgQ29lcmNpb24kMSB8fCBleHByZXNzaW9uIGluc3RhbmNlb2YgQXNzZXJ0aW9uJDE7XG4gICAgbGV0IGNoaWxkcmVuQ29uc3RhbnQgPSB0cnVlO1xuICAgIGV4cHJlc3Npb24uZWFjaENoaWxkKGNoaWxkID0+IHtcbiAgICAgICAgaWYgKGlzVHlwZUFubm90YXRpb24pIHtcbiAgICAgICAgICAgIGNoaWxkcmVuQ29uc3RhbnQgPSBjaGlsZHJlbkNvbnN0YW50ICYmIGlzQ29uc3RhbnQoY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hpbGRyZW5Db25zdGFudCA9IGNoaWxkcmVuQ29uc3RhbnQgJiYgY2hpbGQgaW5zdGFuY2VvZiBMaXRlcmFsJDE7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWNoaWxkcmVuQ29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gaXNGZWF0dXJlQ29uc3RhbnQoZXhwcmVzc2lvbikgJiYgaXNHbG9iYWxQcm9wZXJ0eUNvbnN0YW50KGV4cHJlc3Npb24sIFtcbiAgICAgICAgJ3pvb20nLFxuICAgICAgICAnaGVhdG1hcC1kZW5zaXR5JyxcbiAgICAgICAgJ2xpbmUtcHJvZ3Jlc3MnLFxuICAgICAgICAnc2t5LXJhZGlhbC1wcm9ncmVzcycsXG4gICAgICAgICdhY2N1bXVsYXRlZCcsXG4gICAgICAgICdpcy1zdXBwb3J0ZWQtc2NyaXB0JyxcbiAgICAgICAgJ3BpdGNoJyxcbiAgICAgICAgJ2Rpc3RhbmNlLWZyb20tY2VudGVyJ1xuICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaW5kU3RvcExlc3NUaGFuT3JFcXVhbFRvKHN0b3BzLCBpbnB1dCkge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0b3BzLmxlbmd0aCAtIDE7XG4gICAgbGV0IGxvd2VySW5kZXggPSAwO1xuICAgIGxldCB1cHBlckluZGV4ID0gbGFzdEluZGV4O1xuICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xuICAgIGxldCBjdXJyZW50VmFsdWUsIG5leHRWYWx1ZTtcbiAgICB3aGlsZSAobG93ZXJJbmRleCA8PSB1cHBlckluZGV4KSB7XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IE1hdGguZmxvb3IoKGxvd2VySW5kZXggKyB1cHBlckluZGV4KSAvIDIpO1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBzdG9wc1tjdXJyZW50SW5kZXhdO1xuICAgICAgICBuZXh0VmFsdWUgPSBzdG9wc1tjdXJyZW50SW5kZXggKyAxXTtcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8PSBpbnB1dCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gbGFzdEluZGV4IHx8IGlucHV0IDwgbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvd2VySW5kZXggPSBjdXJyZW50SW5kZXggKyAxO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRWYWx1ZSA+IGlucHV0KSB7XG4gICAgICAgICAgICB1cHBlckluZGV4ID0gY3VycmVudEluZGV4IC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IkMSgnSW5wdXQgaXMgbm90IGEgbnVtYmVyLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuXG5jbGFzcyBTdGVwIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBpbnB1dCwgc3RvcHMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLmxhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLm91dHB1dHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBbbGFiZWwsIGV4cHJlc3Npb25dIG9mIHN0b3BzKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVscy5wdXNoKGxhYmVsKTtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0cy5wdXNoKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZShhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCAtIDEgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgNCBhcmd1bWVudHMsIGJ1dCBmb3VuZCBvbmx5ICR7IGFyZ3MubGVuZ3RoIC0gMSB9LmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoYXJncy5sZW5ndGggLSAxKSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBhbiBldmVuIG51bWJlciBvZiBhcmd1bWVudHMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5wdXQgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIE51bWJlclR5cGUpO1xuICAgICAgICBpZiAoIWlucHV0KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IHN0b3BzID0gW107XG4gICAgICAgIGxldCBvdXRwdXRUeXBlID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbnRleHQuZXhwZWN0ZWRUeXBlICYmIGNvbnRleHQuZXhwZWN0ZWRUeXBlLmtpbmQgIT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIG91dHB1dFR5cGUgPSBjb250ZXh0LmV4cGVjdGVkVHlwZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gaSA9PT0gMSA/IC1JbmZpbml0eSA6IGFyZ3NbaV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGFyZ3NbaSArIDFdO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxLZXkgPSBpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVLZXkgPSBpICsgMTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGFiZWwgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoJ0lucHV0L291dHB1dCBwYWlycyBmb3IgXCJzdGVwXCIgZXhwcmVzc2lvbnMgbXVzdCBiZSBkZWZpbmVkIHVzaW5nIGxpdGVyYWwgbnVtZXJpYyB2YWx1ZXMgKG5vdCBjb21wdXRlZCBleHByZXNzaW9ucykgZm9yIHRoZSBpbnB1dCB2YWx1ZXMuJywgbGFiZWxLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0b3BzLmxlbmd0aCAmJiBzdG9wc1tzdG9wcy5sZW5ndGggLSAxXVswXSA+PSBsYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKCdJbnB1dC9vdXRwdXQgcGFpcnMgZm9yIFwic3RlcFwiIGV4cHJlc3Npb25zIG11c3QgYmUgYXJyYW5nZWQgd2l0aCBpbnB1dCB2YWx1ZXMgaW4gc3RyaWN0bHkgYXNjZW5kaW5nIG9yZGVyLicsIGxhYmVsS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IGNvbnRleHQucGFyc2UodmFsdWUsIHZhbHVlS2V5LCBvdXRwdXRUeXBlKTtcbiAgICAgICAgICAgIGlmICghcGFyc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IG91dHB1dFR5cGUgfHwgcGFyc2VkLnR5cGU7XG4gICAgICAgICAgICBzdG9wcy5wdXNoKFtcbiAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICBwYXJzZWRcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU3RlcChvdXRwdXRUeXBlLCBpbnB1dCwgc3RvcHMpO1xuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IG91dHB1dHMgPSB0aGlzLm91dHB1dHM7XG4gICAgICAgIGlmIChsYWJlbHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0c1swXS5ldmFsdWF0ZShjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnB1dC5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBpZiAodmFsdWUgPD0gbGFiZWxzWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0c1swXS5ldmFsdWF0ZShjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0b3BDb3VudCA9IGxhYmVscy5sZW5ndGg7XG4gICAgICAgIGlmICh2YWx1ZSA+PSBsYWJlbHNbc3RvcENvdW50IC0gMV0pIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRzW3N0b3BDb3VudCAtIDFdLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSBmaW5kU3RvcExlc3NUaGFuT3JFcXVhbFRvKGxhYmVscywgdmFsdWUpO1xuICAgICAgICByZXR1cm4gb3V0cHV0c1tpbmRleF0uZXZhbHVhdGUoY3R4KTtcbiAgICB9XG4gICAgZWFjaENoaWxkKGZuKSB7XG4gICAgICAgIGZuKHRoaXMuaW5wdXQpO1xuICAgICAgICBmb3IgKGNvbnN0IGV4cHJlc3Npb24gb2YgdGhpcy5vdXRwdXRzKSB7XG4gICAgICAgICAgICBmbihleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXREZWZpbmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRzLmV2ZXJ5KG91dCA9PiBvdXQub3V0cHV0RGVmaW5lZCgpKTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gW1xuICAgICAgICAgICAgJ3N0ZXAnLFxuICAgICAgICAgICAgdGhpcy5pbnB1dC5zZXJpYWxpemUoKVxuICAgICAgICBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkLnB1c2godGhpcy5sYWJlbHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKHRoaXMub3V0cHV0c1tpXS5zZXJpYWxpemUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgfVxufVxudmFyIFN0ZXAkMSA9IFN0ZXA7XG5cbi8qXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDggQXBwbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zXG4gKiBhcmUgbWV0OlxuICogMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgQVBQTEUgSU5DLiBgYEFTIElTJycgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUlxuICogUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gIElOIE5PIEVWRU5UIFNIQUxMIEFQUExFIElOQy4gT1JcbiAqIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLFxuICogRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxuICogUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SXG4gKiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZXG4gKiBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiBQb3J0ZWQgZnJvbSBXZWJraXRcbiAqIGh0dHA6Ly9zdm4ud2Via2l0Lm9yZy9yZXBvc2l0b3J5L3dlYmtpdC90cnVuay9Tb3VyY2UvV2ViQ29yZS9wbGF0Zm9ybS9ncmFwaGljcy9Vbml0QmV6aWVyLmhcbiAqL1xudmFyIHVuaXRiZXppZXIgPSBVbml0QmV6aWVyO1xuXG5mdW5jdGlvbiBVbml0QmV6aWVyKHAxeCwgcDF5LCBwMngsIHAyeSkge1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgcG9seW5vbWlhbCBjb2VmZmljaWVudHMsIGltcGxpY2l0IGZpcnN0IGFuZCBsYXN0IGNvbnRyb2wgcG9pbnRzIGFyZSAoMCwwKSBhbmQgKDEsMSkuXG4gICAgdGhpcy5jeCA9IDMuMCAqIHAxeDtcbiAgICB0aGlzLmJ4ID0gMy4wICogKHAyeCAtIHAxeCkgLSB0aGlzLmN4O1xuICAgIHRoaXMuYXggPSAxLjAgLSB0aGlzLmN4IC0gdGhpcy5ieDtcblxuICAgIHRoaXMuY3kgPSAzLjAgKiBwMXk7XG4gICAgdGhpcy5ieSA9IDMuMCAqIChwMnkgLSBwMXkpIC0gdGhpcy5jeTtcbiAgICB0aGlzLmF5ID0gMS4wIC0gdGhpcy5jeSAtIHRoaXMuYnk7XG5cbiAgICB0aGlzLnAxeCA9IHAxeDtcbiAgICB0aGlzLnAxeSA9IHAyeTtcbiAgICB0aGlzLnAyeCA9IHAyeDtcbiAgICB0aGlzLnAyeSA9IHAyeTtcbn1cblxuVW5pdEJlemllci5wcm90b3R5cGUuc2FtcGxlQ3VydmVYID0gZnVuY3Rpb24odCkge1xuICAgIC8vIGBheCB0XjMgKyBieCB0XjIgKyBjeCB0JyBleHBhbmRlZCB1c2luZyBIb3JuZXIncyBydWxlLlxuICAgIHJldHVybiAoKHRoaXMuYXggKiB0ICsgdGhpcy5ieCkgKiB0ICsgdGhpcy5jeCkgKiB0O1xufTtcblxuVW5pdEJlemllci5wcm90b3R5cGUuc2FtcGxlQ3VydmVZID0gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiAoKHRoaXMuYXkgKiB0ICsgdGhpcy5ieSkgKiB0ICsgdGhpcy5jeSkgKiB0O1xufTtcblxuVW5pdEJlemllci5wcm90b3R5cGUuc2FtcGxlQ3VydmVEZXJpdmF0aXZlWCA9IGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gKDMuMCAqIHRoaXMuYXggKiB0ICsgMi4wICogdGhpcy5ieCkgKiB0ICsgdGhpcy5jeDtcbn07XG5cblVuaXRCZXppZXIucHJvdG90eXBlLnNvbHZlQ3VydmVYID0gZnVuY3Rpb24oeCwgZXBzaWxvbikge1xuICAgIGlmICh0eXBlb2YgZXBzaWxvbiA9PT0gJ3VuZGVmaW5lZCcpIGVwc2lsb24gPSAxZS02O1xuXG4gICAgdmFyIHQwLCB0MSwgdDIsIHgyLCBpO1xuXG4gICAgLy8gRmlyc3QgdHJ5IGEgZmV3IGl0ZXJhdGlvbnMgb2YgTmV3dG9uJ3MgbWV0aG9kIC0tIG5vcm1hbGx5IHZlcnkgZmFzdC5cbiAgICBmb3IgKHQyID0geCwgaSA9IDA7IGkgPCA4OyBpKyspIHtcblxuICAgICAgICB4MiA9IHRoaXMuc2FtcGxlQ3VydmVYKHQyKSAtIHg7XG4gICAgICAgIGlmIChNYXRoLmFicyh4MikgPCBlcHNpbG9uKSByZXR1cm4gdDI7XG5cbiAgICAgICAgdmFyIGQyID0gdGhpcy5zYW1wbGVDdXJ2ZURlcml2YXRpdmVYKHQyKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGQyKSA8IDFlLTYpIGJyZWFrO1xuXG4gICAgICAgIHQyID0gdDIgLSB4MiAvIGQyO1xuICAgIH1cblxuICAgIC8vIEZhbGwgYmFjayB0byB0aGUgYmlzZWN0aW9uIG1ldGhvZCBmb3IgcmVsaWFiaWxpdHkuXG4gICAgdDAgPSAwLjA7XG4gICAgdDEgPSAxLjA7XG4gICAgdDIgPSB4O1xuXG4gICAgaWYgKHQyIDwgdDApIHJldHVybiB0MDtcbiAgICBpZiAodDIgPiB0MSkgcmV0dXJuIHQxO1xuXG4gICAgd2hpbGUgKHQwIDwgdDEpIHtcblxuICAgICAgICB4MiA9IHRoaXMuc2FtcGxlQ3VydmVYKHQyKTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHgyIC0geCkgPCBlcHNpbG9uKSByZXR1cm4gdDI7XG5cbiAgICAgICAgaWYgKHggPiB4Mikge1xuICAgICAgICAgICAgdDAgPSB0MjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHQxID0gdDI7XG4gICAgICAgIH1cblxuICAgICAgICB0MiA9ICh0MSAtIHQwKSAqIDAuNSArIHQwO1xuICAgIH1cblxuICAgIC8vIEZhaWx1cmUuXG4gICAgcmV0dXJuIHQyO1xufTtcblxuVW5pdEJlemllci5wcm90b3R5cGUuc29sdmUgPSBmdW5jdGlvbih4LCBlcHNpbG9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc2FtcGxlQ3VydmVZKHRoaXMuc29sdmVDdXJ2ZVgoeCwgZXBzaWxvbikpO1xufTtcblxuZnVuY3Rpb24gbnVtYmVyKGEsIGIsIHQpIHtcbiAgICByZXR1cm4gYSAqICgxIC0gdCkgKyBiICogdDtcbn1cbmZ1bmN0aW9uIGNvbG9yKGZyb20sIHRvLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBDb2xvciQxKG51bWJlcihmcm9tLnIsIHRvLnIsIHQpLCBudW1iZXIoZnJvbS5nLCB0by5nLCB0KSwgbnVtYmVyKGZyb20uYiwgdG8uYiwgdCksIG51bWJlcihmcm9tLmEsIHRvLmEsIHQpKTtcbn1cbmZ1bmN0aW9uIGFycmF5KGZyb20sIHRvLCB0KSB7XG4gICAgcmV0dXJuIGZyb20ubWFwKChkLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiBudW1iZXIoZCwgdG9baV0sIHQpO1xuICAgIH0pO1xufVxuXG52YXIgaW50ZXJwb2xhdGUgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgbnVtYmVyOiBudW1iZXIsXG4gIGNvbG9yOiBjb2xvcixcbiAgYXJyYXk6IGFycmF5XG59KTtcblxuY29uc3QgWG4gPSAwLjk1MDQ3LCBZbiA9IDEsIFpuID0gMS4wODg4MywgdDAgPSA0IC8gMjksIHQxID0gNiAvIDI5LCB0MiA9IDMgKiB0MSAqIHQxLCB0MyA9IHQxICogdDEgKiB0MSwgZGVnMnJhZCA9IE1hdGguUEkgLyAxODAsIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gICAgcmV0dXJuIHQgPiB0MyA/IE1hdGgucG93KHQsIDEgLyAzKSA6IHQgLyB0MiArIHQwO1xufVxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gICAgcmV0dXJuIHQgPiB0MSA/IHQgKiB0ICogdCA6IHQyICogKHQgLSB0MCk7XG59XG5mdW5jdGlvbiB4eXoycmdiKHgpIHtcbiAgICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbn1cbmZ1bmN0aW9uIHJnYjJ4eXooeCkge1xuICAgIHggLz0gMjU1O1xuICAgIHJldHVybiB4IDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuZnVuY3Rpb24gcmdiVG9MYWIocmdiQ29sb3IpIHtcbiAgICBjb25zdCBiID0gcmdiMnh5eihyZ2JDb2xvci5yKSwgYSA9IHJnYjJ4eXoocmdiQ29sb3IuZyksIGwgPSByZ2IyeHl6KHJnYkNvbG9yLmIpLCB4ID0geHl6MmxhYigoMC40MTI0NTY0ICogYiArIDAuMzU3NTc2MSAqIGEgKyAwLjE4MDQzNzUgKiBsKSAvIFhuKSwgeSA9IHh5ejJsYWIoKDAuMjEyNjcyOSAqIGIgKyAwLjcxNTE1MjIgKiBhICsgMC4wNzIxNzUgKiBsKSAvIFluKSwgeiA9IHh5ejJsYWIoKDAuMDE5MzMzOSAqIGIgKyAwLjExOTE5MiAqIGEgKyAwLjk1MDMwNDEgKiBsKSAvIFpuKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBsOiAxMTYgKiB5IC0gMTYsXG4gICAgICAgIGE6IDUwMCAqICh4IC0geSksXG4gICAgICAgIGI6IDIwMCAqICh5IC0geiksXG4gICAgICAgIGFscGhhOiByZ2JDb2xvci5hXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGxhYlRvUmdiKGxhYkNvbG9yKSB7XG4gICAgbGV0IHkgPSAobGFiQ29sb3IubCArIDE2KSAvIDExNiwgeCA9IGlzTmFOKGxhYkNvbG9yLmEpID8geSA6IHkgKyBsYWJDb2xvci5hIC8gNTAwLCB6ID0gaXNOYU4obGFiQ29sb3IuYikgPyB5IDogeSAtIGxhYkNvbG9yLmIgLyAyMDA7XG4gICAgeSA9IFluICogbGFiMnh5eih5KTtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBDb2xvciQxKHh5ejJyZ2IoMy4yNDA0NTQyICogeCAtIDEuNTM3MTM4NSAqIHkgLSAwLjQ5ODUzMTQgKiB6KSwgeHl6MnJnYigtMC45NjkyNjYgKiB4ICsgMS44NzYwMTA4ICogeSArIDAuMDQxNTU2ICogeiksIHh5ejJyZ2IoMC4wNTU2NDM0ICogeCAtIDAuMjA0MDI1OSAqIHkgKyAxLjA1NzIyNTIgKiB6KSwgbGFiQ29sb3IuYWxwaGEpO1xufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVMYWIoZnJvbSwgdG8sIHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsOiBudW1iZXIoZnJvbS5sLCB0by5sLCB0KSxcbiAgICAgICAgYTogbnVtYmVyKGZyb20uYSwgdG8uYSwgdCksXG4gICAgICAgIGI6IG51bWJlcihmcm9tLmIsIHRvLmIsIHQpLFxuICAgICAgICBhbHBoYTogbnVtYmVyKGZyb20uYWxwaGEsIHRvLmFscGhhLCB0KVxuICAgIH07XG59XG5mdW5jdGlvbiByZ2JUb0hjbChyZ2JDb2xvcikge1xuICAgIGNvbnN0IHtsLCBhLCBifSA9IHJnYlRvTGFiKHJnYkNvbG9yKTtcbiAgICBjb25zdCBoID0gTWF0aC5hdGFuMihiLCBhKSAqIHJhZDJkZWc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaDogaCA8IDAgPyBoICsgMzYwIDogaCxcbiAgICAgICAgYzogTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpLFxuICAgICAgICBsLFxuICAgICAgICBhbHBoYTogcmdiQ29sb3IuYVxuICAgIH07XG59XG5mdW5jdGlvbiBoY2xUb1JnYihoY2xDb2xvcikge1xuICAgIGNvbnN0IGggPSBoY2xDb2xvci5oICogZGVnMnJhZCwgYyA9IGhjbENvbG9yLmMsIGwgPSBoY2xDb2xvci5sO1xuICAgIHJldHVybiBsYWJUb1JnYih7XG4gICAgICAgIGwsXG4gICAgICAgIGE6IE1hdGguY29zKGgpICogYyxcbiAgICAgICAgYjogTWF0aC5zaW4oaCkgKiBjLFxuICAgICAgICBhbHBoYTogaGNsQ29sb3IuYWxwaGFcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGludGVycG9sYXRlSHVlKGEsIGIsIHQpIHtcbiAgICBjb25zdCBkID0gYiAtIGE7XG4gICAgcmV0dXJuIGEgKyB0ICogKGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpO1xufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVIY2woZnJvbSwgdG8sIHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBoOiBpbnRlcnBvbGF0ZUh1ZShmcm9tLmgsIHRvLmgsIHQpLFxuICAgICAgICBjOiBudW1iZXIoZnJvbS5jLCB0by5jLCB0KSxcbiAgICAgICAgbDogbnVtYmVyKGZyb20ubCwgdG8ubCwgdCksXG4gICAgICAgIGFscGhhOiBudW1iZXIoZnJvbS5hbHBoYSwgdG8uYWxwaGEsIHQpXG4gICAgfTtcbn1cbmNvbnN0IGxhYiA9IHtcbiAgICBmb3J3YXJkOiByZ2JUb0xhYixcbiAgICByZXZlcnNlOiBsYWJUb1JnYixcbiAgICBpbnRlcnBvbGF0ZTogaW50ZXJwb2xhdGVMYWJcbn07XG5jb25zdCBoY2wgPSB7XG4gICAgZm9yd2FyZDogcmdiVG9IY2wsXG4gICAgcmV2ZXJzZTogaGNsVG9SZ2IsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlSGNsXG59O1xuXG52YXIgY29sb3JTcGFjZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgbGFiOiBsYWIsXG4gIGhjbDogaGNsXG59KTtcblxuY2xhc3MgSW50ZXJwb2xhdGUge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIG9wZXJhdG9yLCBpbnRlcnBvbGF0aW9uLCBpbnB1dCwgc3RvcHMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICB0aGlzLmludGVycG9sYXRpb24gPSBpbnRlcnBvbGF0aW9uO1xuICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMubGFiZWxzID0gW107XG4gICAgICAgIHRoaXMub3V0cHV0cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtsYWJlbCwgZXhwcmVzc2lvbl0gb2Ygc3RvcHMpIHtcbiAgICAgICAgICAgIHRoaXMubGFiZWxzLnB1c2gobGFiZWwpO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRzLnB1c2goZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGludGVycG9sYXRpb25GYWN0b3IoaW50ZXJwb2xhdGlvbiwgaW5wdXQsIGxvd2VyLCB1cHBlcikge1xuICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLm5hbWUgPT09ICdleHBvbmVudGlhbCcpIHtcbiAgICAgICAgICAgIHQgPSBleHBvbmVudGlhbEludGVycG9sYXRpb24oaW5wdXQsIGludGVycG9sYXRpb24uYmFzZSwgbG93ZXIsIHVwcGVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0aW9uLm5hbWUgPT09ICdsaW5lYXInKSB7XG4gICAgICAgICAgICB0ID0gZXhwb25lbnRpYWxJbnRlcnBvbGF0aW9uKGlucHV0LCAxLCBsb3dlciwgdXBwZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRpb24ubmFtZSA9PT0gJ2N1YmljLWJlemllcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBpbnRlcnBvbGF0aW9uLmNvbnRyb2xQb2ludHM7XG4gICAgICAgICAgICBjb25zdCB1YiA9IG5ldyB1bml0YmV6aWVyKGNbMF0sIGNbMV0sIGNbMl0sIGNbM10pO1xuICAgICAgICAgICAgdCA9IHViLnNvbHZlKGV4cG9uZW50aWFsSW50ZXJwb2xhdGlvbihpbnB1dCwgMSwgbG93ZXIsIHVwcGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZShhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGxldCBbb3BlcmF0b3IsIGludGVycG9sYXRpb24sIGlucHV0LCAuLi5yZXN0XSA9IGFyZ3M7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpbnRlcnBvbGF0aW9uKSB8fCBpbnRlcnBvbGF0aW9uLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIGFuIGludGVycG9sYXRpb24gdHlwZSBleHByZXNzaW9uLmAsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uWzBdID09PSAnbGluZWFyJykge1xuICAgICAgICAgICAgaW50ZXJwb2xhdGlvbiA9IHsgbmFtZTogJ2xpbmVhcicgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0aW9uWzBdID09PSAnZXhwb25lbnRpYWwnKSB7XG4gICAgICAgICAgICBjb25zdCBiYXNlID0gaW50ZXJwb2xhdGlvblsxXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmFzZSAhPT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cG9uZW50aWFsIGludGVycG9sYXRpb24gcmVxdWlyZXMgYSBudW1lcmljIGJhc2UuYCwgMSwgMSk7XG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdleHBvbmVudGlhbCcsXG4gICAgICAgICAgICAgICAgYmFzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0aW9uWzBdID09PSAnY3ViaWMtYmV6aWVyJykge1xuICAgICAgICAgICAgY29uc3QgY29udHJvbFBvaW50cyA9IGludGVycG9sYXRpb24uc2xpY2UoMSk7XG4gICAgICAgICAgICBpZiAoY29udHJvbFBvaW50cy5sZW5ndGggIT09IDQgfHwgY29udHJvbFBvaW50cy5zb21lKHQgPT4gdHlwZW9mIHQgIT09ICdudW1iZXInIHx8IHQgPCAwIHx8IHQgPiAxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKCdDdWJpYyBiZXppZXIgaW50ZXJwb2xhdGlvbiByZXF1aXJlcyBmb3VyIG51bWVyaWMgYXJndW1lbnRzIHdpdGggdmFsdWVzIGJldHdlZW4gMCBhbmQgMS4nLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGludGVycG9sYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2N1YmljLWJlemllcicsXG4gICAgICAgICAgICAgICAgY29udHJvbFBvaW50czogY29udHJvbFBvaW50c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBVbmtub3duIGludGVycG9sYXRpb24gdHlwZSAkeyBTdHJpbmcoaW50ZXJwb2xhdGlvblswXSkgfWAsIDEsIDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCAtIDEgPCA0KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgNCBhcmd1bWVudHMsIGJ1dCBmb3VuZCBvbmx5ICR7IGFyZ3MubGVuZ3RoIC0gMSB9LmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoYXJncy5sZW5ndGggLSAxKSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBhbiBldmVuIG51bWJlciBvZiBhcmd1bWVudHMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBjb250ZXh0LnBhcnNlKGlucHV0LCAyLCBOdW1iZXJUeXBlKTtcbiAgICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBzdG9wcyA9IFtdO1xuICAgICAgICBsZXQgb3V0cHV0VHlwZSA9IG51bGw7XG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2ludGVycG9sYXRlLWhjbCcgfHwgb3BlcmF0b3IgPT09ICdpbnRlcnBvbGF0ZS1sYWInKSB7XG4gICAgICAgICAgICBvdXRwdXRUeXBlID0gQ29sb3JUeXBlO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQuZXhwZWN0ZWRUeXBlICYmIGNvbnRleHQuZXhwZWN0ZWRUeXBlLmtpbmQgIT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIG91dHB1dFR5cGUgPSBjb250ZXh0LmV4cGVjdGVkVHlwZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3QubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gcmVzdFtpXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdFtpICsgMV07XG4gICAgICAgICAgICBjb25zdCBsYWJlbEtleSA9IGkgKyAzO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVLZXkgPSBpICsgNDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGFiZWwgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoJ0lucHV0L291dHB1dCBwYWlycyBmb3IgXCJpbnRlcnBvbGF0ZVwiIGV4cHJlc3Npb25zIG11c3QgYmUgZGVmaW5lZCB1c2luZyBsaXRlcmFsIG51bWVyaWMgdmFsdWVzIChub3QgY29tcHV0ZWQgZXhwcmVzc2lvbnMpIGZvciB0aGUgaW5wdXQgdmFsdWVzLicsIGxhYmVsS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdG9wcy5sZW5ndGggJiYgc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV1bMF0gPj0gbGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcignSW5wdXQvb3V0cHV0IHBhaXJzIGZvciBcImludGVycG9sYXRlXCIgZXhwcmVzc2lvbnMgbXVzdCBiZSBhcnJhbmdlZCB3aXRoIGlucHV0IHZhbHVlcyBpbiBzdHJpY3RseSBhc2NlbmRpbmcgb3JkZXIuJywgbGFiZWxLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gY29udGV4dC5wYXJzZSh2YWx1ZSwgdmFsdWVLZXksIG91dHB1dFR5cGUpO1xuICAgICAgICAgICAgaWYgKCFwYXJzZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBvdXRwdXRUeXBlID0gb3V0cHV0VHlwZSB8fCBwYXJzZWQudHlwZTtcbiAgICAgICAgICAgIHN0b3BzLnB1c2goW1xuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIHBhcnNlZFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG91dHB1dFR5cGUua2luZCAhPT0gJ251bWJlcicgJiYgb3V0cHV0VHlwZS5raW5kICE9PSAnY29sb3InICYmICEob3V0cHV0VHlwZS5raW5kID09PSAnYXJyYXknICYmIG91dHB1dFR5cGUuaXRlbVR5cGUua2luZCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG91dHB1dFR5cGUuTiA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgVHlwZSAkeyB0b1N0cmluZyQxKG91dHB1dFR5cGUpIH0gaXMgbm90IGludGVycG9sYXRhYmxlLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSW50ZXJwb2xhdGUob3V0cHV0VHlwZSwgb3BlcmF0b3IsIGludGVycG9sYXRpb24sIGlucHV0LCBzdG9wcyk7XG4gICAgfVxuICAgIGV2YWx1YXRlKGN0eCkge1xuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmxhYmVscztcbiAgICAgICAgY29uc3Qgb3V0cHV0cyA9IHRoaXMub3V0cHV0cztcbiAgICAgICAgaWYgKGxhYmVscy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRzWzBdLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmlucHV0LmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIGlmICh2YWx1ZSA8PSBsYWJlbHNbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRzWzBdLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RvcENvdW50ID0gbGFiZWxzLmxlbmd0aDtcbiAgICAgICAgaWYgKHZhbHVlID49IGxhYmVsc1tzdG9wQ291bnQgLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dHNbc3RvcENvdW50IC0gMV0uZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IGZpbmRTdG9wTGVzc1RoYW5PckVxdWFsVG8obGFiZWxzLCB2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGxvd2VyID0gbGFiZWxzW2luZGV4XTtcbiAgICAgICAgY29uc3QgdXBwZXIgPSBsYWJlbHNbaW5kZXggKyAxXTtcbiAgICAgICAgY29uc3QgdCA9IEludGVycG9sYXRlLmludGVycG9sYXRpb25GYWN0b3IodGhpcy5pbnRlcnBvbGF0aW9uLCB2YWx1ZSwgbG93ZXIsIHVwcGVyKTtcbiAgICAgICAgY29uc3Qgb3V0cHV0TG93ZXIgPSBvdXRwdXRzW2luZGV4XS5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBjb25zdCBvdXRwdXRVcHBlciA9IG91dHB1dHNbaW5kZXggKyAxXS5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJ2ludGVycG9sYXRlJykge1xuICAgICAgICAgICAgcmV0dXJuIGludGVycG9sYXRlW3RoaXMudHlwZS5raW5kLnRvTG93ZXJDYXNlKCldKG91dHB1dExvd2VyLCBvdXRwdXRVcHBlciwgdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcGVyYXRvciA9PT0gJ2ludGVycG9sYXRlLWhjbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBoY2wucmV2ZXJzZShoY2wuaW50ZXJwb2xhdGUoaGNsLmZvcndhcmQob3V0cHV0TG93ZXIpLCBoY2wuZm9yd2FyZChvdXRwdXRVcHBlciksIHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBsYWIucmV2ZXJzZShsYWIuaW50ZXJwb2xhdGUobGFiLmZvcndhcmQob3V0cHV0TG93ZXIpLCBsYWIuZm9yd2FyZChvdXRwdXRVcHBlciksIHQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5pbnB1dCk7XG4gICAgICAgIGZvciAoY29uc3QgZXhwcmVzc2lvbiBvZiB0aGlzLm91dHB1dHMpIHtcbiAgICAgICAgICAgIGZuKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm91dHB1dHMuZXZlcnkob3V0ID0+IG91dC5vdXRwdXREZWZpbmVkKCkpO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGxldCBpbnRlcnBvbGF0aW9uO1xuICAgICAgICBpZiAodGhpcy5pbnRlcnBvbGF0aW9uLm5hbWUgPT09ICdsaW5lYXInKSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9uID0gWydsaW5lYXInXTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmludGVycG9sYXRpb24ubmFtZSA9PT0gJ2V4cG9uZW50aWFsJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJwb2xhdGlvbi5iYXNlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvbiA9IFsnbGluZWFyJ107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRpb24gPSBbXG4gICAgICAgICAgICAgICAgICAgICdleHBvbmVudGlhbCcsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwb2xhdGlvbi5iYXNlXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVycG9sYXRpb24gPSBbJ2N1YmljLWJlemllciddLmNvbmNhdCh0aGlzLmludGVycG9sYXRpb24uY29udHJvbFBvaW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IFtcbiAgICAgICAgICAgIHRoaXMub3BlcmF0b3IsXG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9uLFxuICAgICAgICAgICAgdGhpcy5pbnB1dC5zZXJpYWxpemUoKVxuICAgICAgICBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZXJpYWxpemVkLnB1c2godGhpcy5sYWJlbHNbaV0sIHRoaXMub3V0cHV0c1tpXS5zZXJpYWxpemUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZXhwb25lbnRpYWxJbnRlcnBvbGF0aW9uKGlucHV0LCBiYXNlLCBsb3dlclZhbHVlLCB1cHBlclZhbHVlKSB7XG4gICAgY29uc3QgZGlmZmVyZW5jZSA9IHVwcGVyVmFsdWUgLSBsb3dlclZhbHVlO1xuICAgIGNvbnN0IHByb2dyZXNzID0gaW5wdXQgLSBsb3dlclZhbHVlO1xuICAgIGlmIChkaWZmZXJlbmNlID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAoYmFzZSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcHJvZ3Jlc3MgLyBkaWZmZXJlbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5wb3coYmFzZSwgcHJvZ3Jlc3MpIC0gMSkgLyAoTWF0aC5wb3coYmFzZSwgZGlmZmVyZW5jZSkgLSAxKTtcbiAgICB9XG59XG52YXIgSW50ZXJwb2xhdGUkMSA9IEludGVycG9sYXRlO1xuXG5jbGFzcyBDb2FsZXNjZSB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgYXJncykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcignRXhwZWN0ZWN0ZWQgYXQgbGVhc3Qgb25lIGFyZ3VtZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvdXRwdXRUeXBlID0gbnVsbDtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gY29udGV4dC5leHBlY3RlZFR5cGU7XG4gICAgICAgIGlmIChleHBlY3RlZFR5cGUgJiYgZXhwZWN0ZWRUeXBlLmtpbmQgIT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIG91dHB1dFR5cGUgPSBleHBlY3RlZFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzLnNsaWNlKDEpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBjb250ZXh0LnBhcnNlKGFyZywgMSArIHBhcnNlZEFyZ3MubGVuZ3RoLCBvdXRwdXRUeXBlLCB1bmRlZmluZWQsIHsgdHlwZUFubm90YXRpb246ICdvbWl0JyB9KTtcbiAgICAgICAgICAgIGlmICghcGFyc2VkKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IG91dHB1dFR5cGUgfHwgcGFyc2VkLnR5cGU7XG4gICAgICAgICAgICBwYXJzZWRBcmdzLnB1c2gocGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZWVkc0Fubm90YXRpb24gPSBleHBlY3RlZFR5cGUgJiYgcGFyc2VkQXJncy5zb21lKGFyZyA9PiBjaGVja1N1YnR5cGUoZXhwZWN0ZWRUeXBlLCBhcmcudHlwZSkpO1xuICAgICAgICByZXR1cm4gbmVlZHNBbm5vdGF0aW9uID8gbmV3IENvYWxlc2NlKFZhbHVlVHlwZSwgcGFyc2VkQXJncykgOiBuZXcgQ29hbGVzY2Uob3V0cHV0VHlwZSwgcGFyc2VkQXJncyk7XG4gICAgfVxuICAgIGV2YWx1YXRlKGN0eCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgbGV0IGFyZ0NvdW50ID0gMDtcbiAgICAgICAgbGV0IGZpcnN0SW1hZ2U7XG4gICAgICAgIGZvciAoY29uc3QgYXJnIG9mIHRoaXMuYXJncykge1xuICAgICAgICAgICAgYXJnQ291bnQrKztcbiAgICAgICAgICAgIHJlc3VsdCA9IGFyZy5ldmFsdWF0ZShjdHgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXNvbHZlZEltYWdlICYmICFyZXN1bHQuYXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdEltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0SW1hZ2UgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ0NvdW50ID09PSB0aGlzLmFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdEltYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZWFjaENoaWxkKGZuKSB7XG4gICAgICAgIHRoaXMuYXJncy5mb3JFYWNoKGZuKTtcbiAgICB9XG4gICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJncy5ldmVyeShhcmcgPT4gYXJnLm91dHB1dERlZmluZWQoKSk7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IFsnY29hbGVzY2UnXTtcbiAgICAgICAgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4ge1xuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKGNoaWxkLnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbn1cbnZhciBDb2FsZXNjZSQxID0gQ29hbGVzY2U7XG5cbmNsYXNzIExldCB7XG4gICAgY29uc3RydWN0b3IoYmluZGluZ3MsIHJlc3VsdCkge1xuICAgICAgICB0aGlzLnR5cGUgPSByZXN1bHQudHlwZTtcbiAgICAgICAgdGhpcy5iaW5kaW5ncyA9IFtdLmNvbmNhdChiaW5kaW5ncyk7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0LmV2YWx1YXRlKGN0eCk7XG4gICAgfVxuICAgIGVhY2hDaGlsZChmbikge1xuICAgICAgICBmb3IgKGNvbnN0IGJpbmRpbmcgb2YgdGhpcy5iaW5kaW5ncykge1xuICAgICAgICAgICAgZm4oYmluZGluZ1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm4odGhpcy5yZXN1bHQpO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCA0KVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIGF0IGxlYXN0IDMgYXJndW1lbnRzLCBidXQgZm91bmQgJHsgYXJncy5sZW5ndGggLSAxIH0gaW5zdGVhZC5gKTtcbiAgICAgICAgY29uc3QgYmluZGluZ3MgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGFyZ3NbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIHN0cmluZywgYnV0IGZvdW5kICR7IHR5cGVvZiBuYW1lIH0gaW5zdGVhZC5gLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvW15hLXpBLVowLTlfXS8udGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBWYXJpYWJsZSBuYW1lcyBtdXN0IGNvbnRhaW4gb25seSBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBvciAnXycuYCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbnRleHQucGFyc2UoYXJnc1tpICsgMV0sIGkgKyAxKTtcbiAgICAgICAgICAgIGlmICghdmFsdWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBiaW5kaW5ncy5wdXNoKFtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBjb250ZXh0LnBhcnNlKGFyZ3NbYXJncy5sZW5ndGggLSAxXSwgYXJncy5sZW5ndGggLSAxLCBjb250ZXh0LmV4cGVjdGVkVHlwZSwgYmluZGluZ3MpO1xuICAgICAgICBpZiAoIXJlc3VsdClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IExldChiaW5kaW5ncywgcmVzdWx0KTtcbiAgICB9XG4gICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0Lm91dHB1dERlZmluZWQoKTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gWydsZXQnXTtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgZXhwcl0gb2YgdGhpcy5iaW5kaW5ncykge1xuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKG5hbWUsIGV4cHIuc2VyaWFsaXplKCkpO1xuICAgICAgICB9XG4gICAgICAgIHNlcmlhbGl6ZWQucHVzaCh0aGlzLnJlc3VsdC5zZXJpYWxpemUoKSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbn1cbnZhciBMZXQkMSA9IExldDtcblxuY2xhc3MgQXQge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGluZGV4LCBpbnB1dCkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAzKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIDIgYXJndW1lbnRzLCBidXQgZm91bmQgJHsgYXJncy5sZW5ndGggLSAxIH0gaW5zdGVhZC5gKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIE51bWJlclR5cGUpO1xuICAgICAgICBjb25zdCBpbnB1dCA9IGNvbnRleHQucGFyc2UoYXJnc1syXSwgMiwgYXJyYXkkMShjb250ZXh0LmV4cGVjdGVkVHlwZSB8fCBWYWx1ZVR5cGUpKTtcbiAgICAgICAgaWYgKCFpbmRleCB8fCAhaW5wdXQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgdCA9IGlucHV0LnR5cGU7XG4gICAgICAgIHJldHVybiBuZXcgQXQodC5pdGVtVHlwZSwgaW5kZXgsIGlucHV0KTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleC5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBjb25zdCBhcnJheSA9IHRoaXMuaW5wdXQuZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBBcnJheSBpbmRleCBvdXQgb2YgYm91bmRzOiAkeyBpbmRleCB9IDwgMC5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yJDEoYEFycmF5IGluZGV4IG91dCBvZiBib3VuZHM6ICR7IGluZGV4IH0gPiAkeyBhcnJheS5sZW5ndGggLSAxIH0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ICE9PSBNYXRoLmZsb29yKGluZGV4KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBBcnJheSBpbmRleCBtdXN0IGJlIGFuIGludGVnZXIsIGJ1dCBmb3VuZCAkeyBpbmRleCB9IGluc3RlYWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5W2luZGV4XTtcbiAgICB9XG4gICAgZWFjaENoaWxkKGZuKSB7XG4gICAgICAgIGZuKHRoaXMuaW5kZXgpO1xuICAgICAgICBmbih0aGlzLmlucHV0KTtcbiAgICB9XG4gICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnYXQnLFxuICAgICAgICAgICAgdGhpcy5pbmRleC5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuc2VyaWFsaXplKClcbiAgICAgICAgXTtcbiAgICB9XG59XG52YXIgQXQkMSA9IEF0O1xuXG5jbGFzcyBJbiB7XG4gICAgY29uc3RydWN0b3IobmVlZGxlLCBoYXlzdGFjaykge1xuICAgICAgICB0aGlzLnR5cGUgPSBCb29sZWFuVHlwZTtcbiAgICAgICAgdGhpcy5uZWVkbGUgPSBuZWVkbGU7XG4gICAgICAgIHRoaXMuaGF5c3RhY2sgPSBoYXlzdGFjaztcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgMiBhcmd1bWVudHMsIGJ1dCBmb3VuZCAkeyBhcmdzLmxlbmd0aCAtIDEgfSBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRsZSA9IGNvbnRleHQucGFyc2UoYXJnc1sxXSwgMSwgVmFsdWVUeXBlKTtcbiAgICAgICAgY29uc3QgaGF5c3RhY2sgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMl0sIDIsIFZhbHVlVHlwZSk7XG4gICAgICAgIGlmICghbmVlZGxlIHx8ICFoYXlzdGFjaylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoIWlzVmFsaWRUeXBlKG5lZWRsZS50eXBlLCBbXG4gICAgICAgICAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgICAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICAgICAgICAgIE51bGxUeXBlLFxuICAgICAgICAgICAgICAgIFZhbHVlVHlwZVxuICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBvZiB0eXBlIGJvb2xlYW4sIHN0cmluZywgbnVtYmVyIG9yIG51bGwsIGJ1dCBmb3VuZCAkeyB0b1N0cmluZyQxKG5lZWRsZS50eXBlKSB9IGluc3RlYWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEluKG5lZWRsZSwgaGF5c3RhY2spO1xuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgY29uc3QgbmVlZGxlID0gdGhpcy5uZWVkbGUuZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgY29uc3QgaGF5c3RhY2sgPSB0aGlzLmhheXN0YWNrLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIGlmIChoYXlzdGFjayA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWlzVmFsaWROYXRpdmVUeXBlKG5lZWRsZSwgW1xuICAgICAgICAgICAgICAgICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAnbnVsbCdcbiAgICAgICAgICAgIF0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yJDEoYEV4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIG9mIHR5cGUgYm9vbGVhbiwgc3RyaW5nLCBudW1iZXIgb3IgbnVsbCwgYnV0IGZvdW5kICR7IHRvU3RyaW5nJDEodHlwZU9mKG5lZWRsZSkpIH0gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVmFsaWROYXRpdmVUeXBlKGhheXN0YWNrLCBbXG4gICAgICAgICAgICAgICAgJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgJ2FycmF5J1xuICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IkMShgRXhwZWN0ZWQgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIG9mIHR5cGUgYXJyYXkgb3Igc3RyaW5nLCBidXQgZm91bmQgJHsgdG9TdHJpbmckMSh0eXBlT2YoaGF5c3RhY2spKSB9IGluc3RlYWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobmVlZGxlKSA+PSAwO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5uZWVkbGUpO1xuICAgICAgICBmbih0aGlzLmhheXN0YWNrKTtcbiAgICB9XG4gICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdpbicsXG4gICAgICAgICAgICB0aGlzLm5lZWRsZS5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgIHRoaXMuaGF5c3RhY2suc2VyaWFsaXplKClcbiAgICAgICAgXTtcbiAgICB9XG59XG52YXIgSW4kMSA9IEluO1xuXG5jbGFzcyBJbmRleE9mIHtcbiAgICBjb25zdHJ1Y3RvcihuZWVkbGUsIGhheXN0YWNrLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gTnVtYmVyVHlwZTtcbiAgICAgICAgdGhpcy5uZWVkbGUgPSBuZWVkbGU7XG4gICAgICAgIHRoaXMuaGF5c3RhY2sgPSBoYXlzdGFjaztcbiAgICAgICAgdGhpcy5mcm9tSW5kZXggPSBmcm9tSW5kZXg7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZShhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAyIHx8IGFyZ3MubGVuZ3RoID49IDUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCAzIG9yIDQgYXJndW1lbnRzLCBidXQgZm91bmQgJHsgYXJncy5sZW5ndGggLSAxIH0gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZWVkbGUgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIFZhbHVlVHlwZSk7XG4gICAgICAgIGNvbnN0IGhheXN0YWNrID0gY29udGV4dC5wYXJzZShhcmdzWzJdLCAyLCBWYWx1ZVR5cGUpO1xuICAgICAgICBpZiAoIW5lZWRsZSB8fCAhaGF5c3RhY2spXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCFpc1ZhbGlkVHlwZShuZWVkbGUudHlwZSwgW1xuICAgICAgICAgICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICAgICAgICAgIFN0cmluZ1R5cGUsXG4gICAgICAgICAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgICAgICAgICBOdWxsVHlwZSxcbiAgICAgICAgICAgICAgICBWYWx1ZVR5cGVcbiAgICAgICAgICAgIF0pKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgb2YgdHlwZSBib29sZWFuLCBzdHJpbmcsIG51bWJlciBvciBudWxsLCBidXQgZm91bmQgJHsgdG9TdHJpbmckMShuZWVkbGUudHlwZSkgfSBpbnN0ZWFkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICBjb25zdCBmcm9tSW5kZXggPSBjb250ZXh0LnBhcnNlKGFyZ3NbM10sIDMsIE51bWJlclR5cGUpO1xuICAgICAgICAgICAgaWYgKCFmcm9tSW5kZXgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEluZGV4T2YobmVlZGxlLCBoYXlzdGFjaywgZnJvbUluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW5kZXhPZihuZWVkbGUsIGhheXN0YWNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgY29uc3QgbmVlZGxlID0gdGhpcy5uZWVkbGUuZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgY29uc3QgaGF5c3RhY2sgPSB0aGlzLmhheXN0YWNrLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIGlmICghaXNWYWxpZE5hdGl2ZVR5cGUobmVlZGxlLCBbXG4gICAgICAgICAgICAgICAgJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICAgICAgICAgICdudWxsJ1xuICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IkMShgRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgb2YgdHlwZSBib29sZWFuLCBzdHJpbmcsIG51bWJlciBvciBudWxsLCBidXQgZm91bmQgJHsgdG9TdHJpbmckMSh0eXBlT2YobmVlZGxlKSkgfSBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNWYWxpZE5hdGl2ZVR5cGUoaGF5c3RhY2ssIFtcbiAgICAgICAgICAgICAgICAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAnYXJyYXknXG4gICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgb2YgdHlwZSBhcnJheSBvciBzdHJpbmcsIGJ1dCBmb3VuZCAkeyB0b1N0cmluZyQxKHR5cGVPZihoYXlzdGFjaykpIH0gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mcm9tSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb21JbmRleCA9IHRoaXMuZnJvbUluZGV4LmV2YWx1YXRlKGN0eCk7XG4gICAgICAgICAgICByZXR1cm4gaGF5c3RhY2suaW5kZXhPZihuZWVkbGUsIGZyb21JbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobmVlZGxlKTtcbiAgICB9XG4gICAgZWFjaENoaWxkKGZuKSB7XG4gICAgICAgIGZuKHRoaXMubmVlZGxlKTtcbiAgICAgICAgZm4odGhpcy5oYXlzdGFjayk7XG4gICAgICAgIGlmICh0aGlzLmZyb21JbmRleCkge1xuICAgICAgICAgICAgZm4odGhpcy5mcm9tSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBpZiAodGhpcy5mcm9tSW5kZXggIT0gbnVsbCAmJiB0aGlzLmZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBmcm9tSW5kZXggPSB0aGlzLmZyb21JbmRleC5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ2luZGV4LW9mJyxcbiAgICAgICAgICAgICAgICB0aGlzLm5lZWRsZS5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmhheXN0YWNrLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgICAgIGZyb21JbmRleFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ2luZGV4LW9mJyxcbiAgICAgICAgICAgIHRoaXMubmVlZGxlLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgdGhpcy5oYXlzdGFjay5zZXJpYWxpemUoKVxuICAgICAgICBdO1xuICAgIH1cbn1cbnZhciBJbmRleE9mJDEgPSBJbmRleE9mO1xuXG5jbGFzcyBNYXRjaCB7XG4gICAgY29uc3RydWN0b3IoaW5wdXRUeXBlLCBvdXRwdXRUeXBlLCBpbnB1dCwgY2FzZXMsIG91dHB1dHMsIG90aGVyd2lzZSkge1xuICAgICAgICB0aGlzLmlucHV0VHlwZSA9IGlucHV0VHlwZTtcbiAgICAgICAgdGhpcy50eXBlID0gb3V0cHV0VHlwZTtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLmNhc2VzID0gY2FzZXM7XG4gICAgICAgIHRoaXMub3V0cHV0cyA9IG91dHB1dHM7XG4gICAgICAgIHRoaXMub3RoZXJ3aXNlID0gb3RoZXJ3aXNlO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCA1KVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIGF0IGxlYXN0IDQgYXJndW1lbnRzLCBidXQgZm91bmQgb25seSAkeyBhcmdzLmxlbmd0aCAtIDEgfS5gKTtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICUgMiAhPT0gMSlcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBhbiBldmVuIG51bWJlciBvZiBhcmd1bWVudHMuYCk7XG4gICAgICAgIGxldCBpbnB1dFR5cGU7XG4gICAgICAgIGxldCBvdXRwdXRUeXBlO1xuICAgICAgICBpZiAoY29udGV4dC5leHBlY3RlZFR5cGUgJiYgY29udGV4dC5leHBlY3RlZFR5cGUua2luZCAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IGNvbnRleHQuZXhwZWN0ZWRUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhc2VzID0ge307XG4gICAgICAgIGNvbnN0IG91dHB1dHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDI7IGkgPCBhcmdzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgICAgICAgICAgbGV0IGxhYmVscyA9IGFyZ3NbaV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGFyZ3NbaSArIDFdO1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGxhYmVscykpIHtcbiAgICAgICAgICAgICAgICBsYWJlbHMgPSBbbGFiZWxzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxhYmVsQ29udGV4dCA9IGNvbnRleHQuY29uY2F0KGkpO1xuICAgICAgICAgICAgaWYgKGxhYmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxDb250ZXh0LmVycm9yKCdFeHBlY3RlZCBhdCBsZWFzdCBvbmUgYnJhbmNoIGxhYmVsLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBsYWJlbCBvZiBsYWJlbHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhYmVsICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgbGFiZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbENvbnRleHQuZXJyb3IoYEJyYW5jaCBsYWJlbHMgbXVzdCBiZSBudW1iZXJzIG9yIHN0cmluZ3MuYCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGFiZWwgPT09ICdudW1iZXInICYmIE1hdGguYWJzKGxhYmVsKSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbENvbnRleHQuZXJyb3IoYEJyYW5jaCBsYWJlbHMgbXVzdCBiZSBpbnRlZ2VycyBubyBsYXJnZXIgdGhhbiAkeyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB9LmApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxhYmVsID09PSAnbnVtYmVyJyAmJiBNYXRoLmZsb29yKGxhYmVsKSAhPT0gbGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsQ29udGV4dC5lcnJvcihgTnVtZXJpYyBicmFuY2ggbGFiZWxzIG11c3QgYmUgaW50ZWdlciB2YWx1ZXMuYCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaW5wdXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0VHlwZSA9IHR5cGVPZihsYWJlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvbnRleHQuY2hlY2tTdWJ0eXBlKGlucHV0VHlwZSwgdHlwZU9mKGxhYmVsKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FzZXNbU3RyaW5nKGxhYmVsKV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbENvbnRleHQuZXJyb3IoJ0JyYW5jaCBsYWJlbHMgbXVzdCBiZSB1bmlxdWUuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2VzW1N0cmluZyhsYWJlbCldID0gb3V0cHV0cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjb250ZXh0LnBhcnNlKHZhbHVlLCBpLCBvdXRwdXRUeXBlKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IG91dHB1dFR5cGUgfHwgcmVzdWx0LnR5cGU7XG4gICAgICAgICAgICBvdXRwdXRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dCA9IGNvbnRleHQucGFyc2UoYXJnc1sxXSwgMSwgVmFsdWVUeXBlKTtcbiAgICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBvdGhlcndpc2UgPSBjb250ZXh0LnBhcnNlKGFyZ3NbYXJncy5sZW5ndGggLSAxXSwgYXJncy5sZW5ndGggLSAxLCBvdXRwdXRUeXBlKTtcbiAgICAgICAgaWYgKCFvdGhlcndpc2UpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKGlucHV0LnR5cGUua2luZCAhPT0gJ3ZhbHVlJyAmJiBjb250ZXh0LmNvbmNhdCgxKS5jaGVja1N1YnR5cGUoaW5wdXRUeXBlLCBpbnB1dC50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBNYXRjaChpbnB1dFR5cGUsIG91dHB1dFR5cGUsIGlucHV0LCBjYXNlcywgb3V0cHV0cywgb3RoZXJ3aXNlKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dC5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB0eXBlT2YoaW5wdXQpID09PSB0aGlzLmlucHV0VHlwZSAmJiB0aGlzLm91dHB1dHNbdGhpcy5jYXNlc1tpbnB1dF1dIHx8IHRoaXMub3RoZXJ3aXNlO1xuICAgICAgICByZXR1cm4gb3V0cHV0LmV2YWx1YXRlKGN0eCk7XG4gICAgfVxuICAgIGVhY2hDaGlsZChmbikge1xuICAgICAgICBmbih0aGlzLmlucHV0KTtcbiAgICAgICAgdGhpcy5vdXRwdXRzLmZvckVhY2goZm4pO1xuICAgICAgICBmbih0aGlzLm90aGVyd2lzZSk7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm91dHB1dHMuZXZlcnkob3V0ID0+IG91dC5vdXRwdXREZWZpbmVkKCkpICYmIHRoaXMub3RoZXJ3aXNlLm91dHB1dERlZmluZWQoKTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gW1xuICAgICAgICAgICAgJ21hdGNoJyxcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuc2VyaWFsaXplKClcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgc29ydGVkTGFiZWxzID0gT2JqZWN0LmtleXModGhpcy5jYXNlcykuc29ydCgpO1xuICAgICAgICBjb25zdCBncm91cGVkQnlPdXRwdXQgPSBbXTtcbiAgICAgICAgY29uc3Qgb3V0cHV0TG9va3VwID0ge307XG4gICAgICAgIGZvciAoY29uc3QgbGFiZWwgb2Ygc29ydGVkTGFiZWxzKSB7XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRJbmRleCA9IG91dHB1dExvb2t1cFt0aGlzLmNhc2VzW2xhYmVsXV07XG4gICAgICAgICAgICBpZiAob3V0cHV0SW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG91dHB1dExvb2t1cFt0aGlzLmNhc2VzW2xhYmVsXV0gPSBncm91cGVkQnlPdXRwdXQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGdyb3VwZWRCeU91dHB1dC5wdXNoKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXNlc1tsYWJlbF0sXG4gICAgICAgICAgICAgICAgICAgIFtsYWJlbF1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBlZEJ5T3V0cHV0W291dHB1dEluZGV4XVsxXS5wdXNoKGxhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2VyY2VMYWJlbCA9IGxhYmVsID0+IHRoaXMuaW5wdXRUeXBlLmtpbmQgPT09ICdudW1iZXInID8gTnVtYmVyKGxhYmVsKSA6IGxhYmVsO1xuICAgICAgICBmb3IgKGNvbnN0IFtvdXRwdXRJbmRleCwgbGFiZWxzXSBvZiBncm91cGVkQnlPdXRwdXQpIHtcbiAgICAgICAgICAgIGlmIChsYWJlbHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKGNvZXJjZUxhYmVsKGxhYmVsc1swXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkLnB1c2gobGFiZWxzLm1hcChjb2VyY2VMYWJlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKHRoaXMub3V0cHV0c1tvdXRwdXRJbmRleF0uc2VyaWFsaXplKCkpO1xuICAgICAgICB9XG4gICAgICAgIHNlcmlhbGl6ZWQucHVzaCh0aGlzLm90aGVyd2lzZS5zZXJpYWxpemUoKSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbn1cbnZhciBNYXRjaCQxID0gTWF0Y2g7XG5cbmNsYXNzIENhc2Uge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGJyYW5jaGVzLCBvdGhlcndpc2UpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5icmFuY2hlcyA9IGJyYW5jaGVzO1xuICAgICAgICB0aGlzLm90aGVyd2lzZSA9IG90aGVyd2lzZTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgNClcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAzIGFyZ3VtZW50cywgYnV0IGZvdW5kIG9ubHkgJHsgYXJncy5sZW5ndGggLSAxIH0uYCk7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgYW4gb2RkIG51bWJlciBvZiBhcmd1bWVudHMuYCk7XG4gICAgICAgIGxldCBvdXRwdXRUeXBlO1xuICAgICAgICBpZiAoY29udGV4dC5leHBlY3RlZFR5cGUgJiYgY29udGV4dC5leHBlY3RlZFR5cGUua2luZCAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IGNvbnRleHQuZXhwZWN0ZWRUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJyYW5jaGVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlc3QgPSBjb250ZXh0LnBhcnNlKGFyZ3NbaV0sIGksIEJvb2xlYW5UeXBlKTtcbiAgICAgICAgICAgIGlmICghdGVzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbnRleHQucGFyc2UoYXJnc1tpICsgMV0sIGkgKyAxLCBvdXRwdXRUeXBlKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgYnJhbmNoZXMucHVzaChbXG4gICAgICAgICAgICAgICAgdGVzdCxcbiAgICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgb3V0cHV0VHlwZSA9IG91dHB1dFR5cGUgfHwgcmVzdWx0LnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3RoZXJ3aXNlID0gY29udGV4dC5wYXJzZShhcmdzW2FyZ3MubGVuZ3RoIC0gMV0sIGFyZ3MubGVuZ3RoIC0gMSwgb3V0cHV0VHlwZSk7XG4gICAgICAgIGlmICghb3RoZXJ3aXNlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgQ2FzZShvdXRwdXRUeXBlLCBicmFuY2hlcywgb3RoZXJ3aXNlKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGZvciAoY29uc3QgW3Rlc3QsIGV4cHJlc3Npb25dIG9mIHRoaXMuYnJhbmNoZXMpIHtcbiAgICAgICAgICAgIGlmICh0ZXN0LmV2YWx1YXRlKGN0eCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwcmVzc2lvbi5ldmFsdWF0ZShjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm90aGVyd2lzZS5ldmFsdWF0ZShjdHgpO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm9yIChjb25zdCBbdGVzdCwgZXhwcmVzc2lvbl0gb2YgdGhpcy5icmFuY2hlcykge1xuICAgICAgICAgICAgZm4odGVzdCk7XG4gICAgICAgICAgICBmbihleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBmbih0aGlzLm90aGVyd2lzZSk7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyYW5jaGVzLmV2ZXJ5KChbXywgb3V0XSkgPT4gb3V0Lm91dHB1dERlZmluZWQoKSkgJiYgdGhpcy5vdGhlcndpc2Uub3V0cHV0RGVmaW5lZCgpO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBbJ2Nhc2UnXTtcbiAgICAgICAgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4ge1xuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKGNoaWxkLnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbn1cbnZhciBDYXNlJDEgPSBDYXNlO1xuXG5jbGFzcyBTbGljZSB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgaW5wdXQsIGJlZ2luSW5kZXgsIGVuZEluZGV4KSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgdGhpcy5iZWdpbkluZGV4ID0gYmVnaW5JbmRleDtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPD0gMiB8fCBhcmdzLmxlbmd0aCA+PSA1KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgMyBvciA0IGFyZ3VtZW50cywgYnV0IGZvdW5kICR7IGFyZ3MubGVuZ3RoIC0gMSB9IGluc3RlYWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5wdXQgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIFZhbHVlVHlwZSk7XG4gICAgICAgIGNvbnN0IGJlZ2luSW5kZXggPSBjb250ZXh0LnBhcnNlKGFyZ3NbMl0sIDIsIE51bWJlclR5cGUpO1xuICAgICAgICBpZiAoIWlucHV0IHx8ICFiZWdpbkluZGV4KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghaXNWYWxpZFR5cGUoaW5wdXQudHlwZSwgW1xuICAgICAgICAgICAgICAgIGFycmF5JDEoVmFsdWVUeXBlKSxcbiAgICAgICAgICAgICAgICBTdHJpbmdUeXBlLFxuICAgICAgICAgICAgICAgIFZhbHVlVHlwZVxuICAgICAgICAgICAgXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBvZiB0eXBlIGFycmF5IG9yIHN0cmluZywgYnV0IGZvdW5kICR7IHRvU3RyaW5nJDEoaW5wdXQudHlwZSkgfSBpbnN0ZWFkYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICBjb25zdCBlbmRJbmRleCA9IGNvbnRleHQucGFyc2UoYXJnc1szXSwgMywgTnVtYmVyVHlwZSk7XG4gICAgICAgICAgICBpZiAoIWVuZEluZGV4KVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTbGljZShpbnB1dC50eXBlLCBpbnB1dCwgYmVnaW5JbmRleCwgZW5kSW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTbGljZShpbnB1dC50eXBlLCBpbnB1dCwgYmVnaW5JbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dC5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBjb25zdCBiZWdpbkluZGV4ID0gdGhpcy5iZWdpbkluZGV4LmV2YWx1YXRlKGN0eCk7XG4gICAgICAgIGlmICghaXNWYWxpZE5hdGl2ZVR5cGUoaW5wdXQsIFtcbiAgICAgICAgICAgICAgICAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAnYXJyYXknXG4gICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBvZiB0eXBlIGFycmF5IG9yIHN0cmluZywgYnV0IGZvdW5kICR7IHRvU3RyaW5nJDEodHlwZU9mKGlucHV0KSkgfSBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVuZEluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBlbmRJbmRleCA9IHRoaXMuZW5kSW5kZXguZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5zbGljZShiZWdpbkluZGV4LCBlbmRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKGJlZ2luSW5kZXgpO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5pbnB1dCk7XG4gICAgICAgIGZuKHRoaXMuYmVnaW5JbmRleCk7XG4gICAgICAgIGlmICh0aGlzLmVuZEluZGV4KSB7XG4gICAgICAgICAgICBmbih0aGlzLmVuZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXREZWZpbmVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kSW5kZXggIT0gbnVsbCAmJiB0aGlzLmVuZEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5lbmRJbmRleC5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ3NsaWNlJyxcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0LnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuYmVnaW5JbmRleC5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgICAgICBlbmRJbmRleFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ3NsaWNlJyxcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuc2VyaWFsaXplKCksXG4gICAgICAgICAgICB0aGlzLmJlZ2luSW5kZXguc2VyaWFsaXplKClcbiAgICAgICAgXTtcbiAgICB9XG59XG52YXIgU2xpY2UkMSA9IFNsaWNlO1xuXG5mdW5jdGlvbiBpc0NvbXBhcmFibGVUeXBlKG9wLCB0eXBlKSB7XG4gICAgaWYgKG9wID09PSAnPT0nIHx8IG9wID09PSAnIT0nKSB7XG4gICAgICAgIHJldHVybiB0eXBlLmtpbmQgPT09ICdib29sZWFuJyB8fCB0eXBlLmtpbmQgPT09ICdzdHJpbmcnIHx8IHR5cGUua2luZCA9PT0gJ251bWJlcicgfHwgdHlwZS5raW5kID09PSAnbnVsbCcgfHwgdHlwZS5raW5kID09PSAndmFsdWUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0eXBlLmtpbmQgPT09ICdzdHJpbmcnIHx8IHR5cGUua2luZCA9PT0gJ251bWJlcicgfHwgdHlwZS5raW5kID09PSAndmFsdWUnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVxKGN0eCwgYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xufVxuZnVuY3Rpb24gbmVxKGN0eCwgYSwgYikge1xuICAgIHJldHVybiBhICE9PSBiO1xufVxuZnVuY3Rpb24gbHQoY3R4LCBhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiO1xufVxuZnVuY3Rpb24gZ3QoY3R4LCBhLCBiKSB7XG4gICAgcmV0dXJuIGEgPiBiO1xufVxuZnVuY3Rpb24gbHRlcShjdHgsIGEsIGIpIHtcbiAgICByZXR1cm4gYSA8PSBiO1xufVxuZnVuY3Rpb24gZ3RlcShjdHgsIGEsIGIpIHtcbiAgICByZXR1cm4gYSA+PSBiO1xufVxuZnVuY3Rpb24gZXFDb2xsYXRlKGN0eCwgYSwgYiwgYykge1xuICAgIHJldHVybiBjLmNvbXBhcmUoYSwgYikgPT09IDA7XG59XG5mdW5jdGlvbiBuZXFDb2xsYXRlKGN0eCwgYSwgYiwgYykge1xuICAgIHJldHVybiAhZXFDb2xsYXRlKGN0eCwgYSwgYiwgYyk7XG59XG5mdW5jdGlvbiBsdENvbGxhdGUoY3R4LCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIGMuY29tcGFyZShhLCBiKSA8IDA7XG59XG5mdW5jdGlvbiBndENvbGxhdGUoY3R4LCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIGMuY29tcGFyZShhLCBiKSA+IDA7XG59XG5mdW5jdGlvbiBsdGVxQ29sbGF0ZShjdHgsIGEsIGIsIGMpIHtcbiAgICByZXR1cm4gYy5jb21wYXJlKGEsIGIpIDw9IDA7XG59XG5mdW5jdGlvbiBndGVxQ29sbGF0ZShjdHgsIGEsIGIsIGMpIHtcbiAgICByZXR1cm4gYy5jb21wYXJlKGEsIGIpID49IDA7XG59XG5mdW5jdGlvbiBtYWtlQ29tcGFyaXNvbihvcCwgY29tcGFyZUJhc2ljLCBjb21wYXJlV2l0aENvbGxhdG9yKSB7XG4gICAgY29uc3QgaXNPcmRlckNvbXBhcmlzb24gPSBvcCAhPT0gJz09JyAmJiBvcCAhPT0gJyE9JztcbiAgICByZXR1cm4gY2xhc3MgQ29tcGFyaXNvbiB7XG4gICAgICAgIGNvbnN0cnVjdG9yKGxocywgcmhzLCBjb2xsYXRvcikge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gQm9vbGVhblR5cGU7XG4gICAgICAgICAgICB0aGlzLmxocyA9IGxocztcbiAgICAgICAgICAgIHRoaXMucmhzID0gcmhzO1xuICAgICAgICAgICAgdGhpcy5jb2xsYXRvciA9IGNvbGxhdG9yO1xuICAgICAgICAgICAgdGhpcy5oYXNVbnR5cGVkQXJndW1lbnQgPSBsaHMudHlwZS5raW5kID09PSAndmFsdWUnIHx8IHJocy50eXBlLmtpbmQgPT09ICd2YWx1ZSc7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGljIHBhcnNlKGFyZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMyAmJiBhcmdzLmxlbmd0aCAhPT0gNClcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5gKTtcbiAgICAgICAgICAgIGNvbnN0IG9wID0gYXJnc1swXTtcbiAgICAgICAgICAgIGxldCBsaHMgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIFZhbHVlVHlwZSk7XG4gICAgICAgICAgICBpZiAoIWxocylcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGlmICghaXNDb21wYXJhYmxlVHlwZShvcCwgbGhzLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uY2F0KDEpLmVycm9yKGBcIiR7IG9wIH1cIiBjb21wYXJpc29ucyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgdHlwZSAnJHsgdG9TdHJpbmckMShsaHMudHlwZSkgfScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmhzID0gY29udGV4dC5wYXJzZShhcmdzWzJdLCAyLCBWYWx1ZVR5cGUpO1xuICAgICAgICAgICAgaWYgKCFyaHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAoIWlzQ29tcGFyYWJsZVR5cGUob3AsIHJocy50eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbmNhdCgyKS5lcnJvcihgXCIkeyBvcCB9XCIgY29tcGFyaXNvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIHR5cGUgJyR7IHRvU3RyaW5nJDEocmhzLnR5cGUpIH0nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxocy50eXBlLmtpbmQgIT09IHJocy50eXBlLmtpbmQgJiYgbGhzLnR5cGUua2luZCAhPT0gJ3ZhbHVlJyAmJiByaHMudHlwZS5raW5kICE9PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYENhbm5vdCBjb21wYXJlIHR5cGVzICckeyB0b1N0cmluZyQxKGxocy50eXBlKSB9JyBhbmQgJyR7IHRvU3RyaW5nJDEocmhzLnR5cGUpIH0nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzT3JkZXJDb21wYXJpc29uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxocy50eXBlLmtpbmQgPT09ICd2YWx1ZScgJiYgcmhzLnR5cGUua2luZCAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICBsaHMgPSBuZXcgQXNzZXJ0aW9uJDEocmhzLnR5cGUsIFtsaHNdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxocy50eXBlLmtpbmQgIT09ICd2YWx1ZScgJiYgcmhzLnR5cGUua2luZCA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICByaHMgPSBuZXcgQXNzZXJ0aW9uJDEobGhzLnR5cGUsIFtyaHNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY29sbGF0b3IgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGxocy50eXBlLmtpbmQgIT09ICdzdHJpbmcnICYmIHJocy50eXBlLmtpbmQgIT09ICdzdHJpbmcnICYmIGxocy50eXBlLmtpbmQgIT09ICd2YWx1ZScgJiYgcmhzLnR5cGUua2luZCAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgQ2Fubm90IHVzZSBjb2xsYXRvciB0byBjb21wYXJlIG5vbi1zdHJpbmcgdHlwZXMuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbGxhdG9yID0gY29udGV4dC5wYXJzZShhcmdzWzNdLCAzLCBDb2xsYXRvclR5cGUpO1xuICAgICAgICAgICAgICAgIGlmICghY29sbGF0b3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wYXJpc29uKGxocywgcmhzLCBjb2xsYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgICAgICBjb25zdCBsaHMgPSB0aGlzLmxocy5ldmFsdWF0ZShjdHgpO1xuICAgICAgICAgICAgY29uc3QgcmhzID0gdGhpcy5yaHMuZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgICAgIGlmIChpc09yZGVyQ29tcGFyaXNvbiAmJiB0aGlzLmhhc1VudHlwZWRBcmd1bWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGx0ID0gdHlwZU9mKGxocyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcnQgPSB0eXBlT2YocmhzKTtcbiAgICAgICAgICAgICAgICBpZiAobHQua2luZCAhPT0gcnQua2luZCB8fCAhKGx0LmtpbmQgPT09ICdzdHJpbmcnIHx8IGx0LmtpbmQgPT09ICdudW1iZXInKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yJDEoYEV4cGVjdGVkIGFyZ3VtZW50cyBmb3IgXCIkeyBvcCB9XCIgdG8gYmUgKHN0cmluZywgc3RyaW5nKSBvciAobnVtYmVyLCBudW1iZXIpLCBidXQgZm91bmQgKCR7IGx0LmtpbmQgfSwgJHsgcnQua2luZCB9KSBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbGxhdG9yICYmICFpc09yZGVyQ29tcGFyaXNvbiAmJiB0aGlzLmhhc1VudHlwZWRBcmd1bWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGx0ID0gdHlwZU9mKGxocyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcnQgPSB0eXBlT2YocmhzKTtcbiAgICAgICAgICAgICAgICBpZiAobHQua2luZCAhPT0gJ3N0cmluZycgfHwgcnQua2luZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVCYXNpYyhjdHgsIGxocywgcmhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsYXRvciA/IGNvbXBhcmVXaXRoQ29sbGF0b3IoY3R4LCBsaHMsIHJocywgdGhpcy5jb2xsYXRvci5ldmFsdWF0ZShjdHgpKSA6IGNvbXBhcmVCYXNpYyhjdHgsIGxocywgcmhzKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgICAgIGZuKHRoaXMubGhzKTtcbiAgICAgICAgICAgIGZuKHRoaXMucmhzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbGxhdG9yKSB7XG4gICAgICAgICAgICAgICAgZm4odGhpcy5jb2xsYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0RGVmaW5lZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBbb3BdO1xuICAgICAgICAgICAgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWQucHVzaChjaGlsZC5zZXJpYWxpemUoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNvbnN0IEVxdWFscyA9IG1ha2VDb21wYXJpc29uKCc9PScsIGVxLCBlcUNvbGxhdGUpO1xuY29uc3QgTm90RXF1YWxzID0gbWFrZUNvbXBhcmlzb24oJyE9JywgbmVxLCBuZXFDb2xsYXRlKTtcbmNvbnN0IExlc3NUaGFuID0gbWFrZUNvbXBhcmlzb24oJzwnLCBsdCwgbHRDb2xsYXRlKTtcbmNvbnN0IEdyZWF0ZXJUaGFuID0gbWFrZUNvbXBhcmlzb24oJz4nLCBndCwgZ3RDb2xsYXRlKTtcbmNvbnN0IExlc3NUaGFuT3JFcXVhbCA9IG1ha2VDb21wYXJpc29uKCc8PScsIGx0ZXEsIGx0ZXFDb2xsYXRlKTtcbmNvbnN0IEdyZWF0ZXJUaGFuT3JFcXVhbCA9IG1ha2VDb21wYXJpc29uKCc+PScsIGd0ZXEsIGd0ZXFDb2xsYXRlKTtcblxuY2xhc3MgTnVtYmVyRm9ybWF0IHtcbiAgICBjb25zdHJ1Y3RvcihudW1iZXIsIGxvY2FsZSwgY3VycmVuY3ksIG1pbkZyYWN0aW9uRGlnaXRzLCBtYXhGcmFjdGlvbkRpZ2l0cykge1xuICAgICAgICB0aGlzLnR5cGUgPSBTdHJpbmdUeXBlO1xuICAgICAgICB0aGlzLm51bWJlciA9IG51bWJlcjtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgIHRoaXMuY3VycmVuY3kgPSBjdXJyZW5jeTtcbiAgICAgICAgdGhpcy5taW5GcmFjdGlvbkRpZ2l0cyA9IG1pbkZyYWN0aW9uRGlnaXRzO1xuICAgICAgICB0aGlzLm1heEZyYWN0aW9uRGlnaXRzID0gbWF4RnJhY3Rpb25EaWdpdHM7XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZShhcmdzLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMylcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmVycm9yKGBFeHBlY3RlZCB0d28gYXJndW1lbnRzLmApO1xuICAgICAgICBjb25zdCBudW1iZXIgPSBjb250ZXh0LnBhcnNlKGFyZ3NbMV0sIDEsIE51bWJlclR5cGUpO1xuICAgICAgICBpZiAoIW51bWJlcilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gYXJnc1syXTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYE51bWJlckZvcm1hdCBvcHRpb25zIGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0LmApO1xuICAgICAgICBsZXQgbG9jYWxlID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnNbJ2xvY2FsZSddKSB7XG4gICAgICAgICAgICBsb2NhbGUgPSBjb250ZXh0LnBhcnNlKG9wdGlvbnNbJ2xvY2FsZSddLCAxLCBTdHJpbmdUeXBlKTtcbiAgICAgICAgICAgIGlmICghbG9jYWxlKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW5jeSA9IG51bGw7XG4gICAgICAgIGlmIChvcHRpb25zWydjdXJyZW5jeSddKSB7XG4gICAgICAgICAgICBjdXJyZW5jeSA9IGNvbnRleHQucGFyc2Uob3B0aW9uc1snY3VycmVuY3knXSwgMSwgU3RyaW5nVHlwZSk7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbmN5KVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtaW5GcmFjdGlvbkRpZ2l0cyA9IG51bGw7XG4gICAgICAgIGlmIChvcHRpb25zWydtaW4tZnJhY3Rpb24tZGlnaXRzJ10pIHtcbiAgICAgICAgICAgIG1pbkZyYWN0aW9uRGlnaXRzID0gY29udGV4dC5wYXJzZShvcHRpb25zWydtaW4tZnJhY3Rpb24tZGlnaXRzJ10sIDEsIE51bWJlclR5cGUpO1xuICAgICAgICAgICAgaWYgKCFtaW5GcmFjdGlvbkRpZ2l0cylcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWF4RnJhY3Rpb25EaWdpdHMgPSBudWxsO1xuICAgICAgICBpZiAob3B0aW9uc1snbWF4LWZyYWN0aW9uLWRpZ2l0cyddKSB7XG4gICAgICAgICAgICBtYXhGcmFjdGlvbkRpZ2l0cyA9IGNvbnRleHQucGFyc2Uob3B0aW9uc1snbWF4LWZyYWN0aW9uLWRpZ2l0cyddLCAxLCBOdW1iZXJUeXBlKTtcbiAgICAgICAgICAgIGlmICghbWF4RnJhY3Rpb25EaWdpdHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBOdW1iZXJGb3JtYXQobnVtYmVyLCBsb2NhbGUsIGN1cnJlbmN5LCBtaW5GcmFjdGlvbkRpZ2l0cywgbWF4RnJhY3Rpb25EaWdpdHMpO1xuICAgIH1cbiAgICBldmFsdWF0ZShjdHgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmxvY2FsZSA/IHRoaXMubG9jYWxlLmV2YWx1YXRlKGN0eCkgOiBbXSwge1xuICAgICAgICAgICAgc3R5bGU6IHRoaXMuY3VycmVuY3kgPyAnY3VycmVuY3knIDogJ2RlY2ltYWwnLFxuICAgICAgICAgICAgY3VycmVuY3k6IHRoaXMuY3VycmVuY3kgPyB0aGlzLmN1cnJlbmN5LmV2YWx1YXRlKGN0eCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IHRoaXMubWluRnJhY3Rpb25EaWdpdHMgPyB0aGlzLm1pbkZyYWN0aW9uRGlnaXRzLmV2YWx1YXRlKGN0eCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IHRoaXMubWF4RnJhY3Rpb25EaWdpdHMgPyB0aGlzLm1heEZyYWN0aW9uRGlnaXRzLmV2YWx1YXRlKGN0eCkgOiB1bmRlZmluZWRcbiAgICAgICAgfSkuZm9ybWF0KHRoaXMubnVtYmVyLmV2YWx1YXRlKGN0eCkpO1xuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5udW1iZXIpO1xuICAgICAgICBpZiAodGhpcy5sb2NhbGUpIHtcbiAgICAgICAgICAgIGZuKHRoaXMubG9jYWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jdXJyZW5jeSkge1xuICAgICAgICAgICAgZm4odGhpcy5jdXJyZW5jeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWluRnJhY3Rpb25EaWdpdHMpIHtcbiAgICAgICAgICAgIGZuKHRoaXMubWluRnJhY3Rpb25EaWdpdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1heEZyYWN0aW9uRGlnaXRzKSB7XG4gICAgICAgICAgICBmbih0aGlzLm1heEZyYWN0aW9uRGlnaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXREZWZpbmVkKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5sb2NhbGUpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbJ2xvY2FsZSddID0gdGhpcy5sb2NhbGUuc2VyaWFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY3VycmVuY3kpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbJ2N1cnJlbmN5J10gPSB0aGlzLmN1cnJlbmN5LnNlcmlhbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1pbkZyYWN0aW9uRGlnaXRzKSB7XG4gICAgICAgICAgICBvcHRpb25zWydtaW4tZnJhY3Rpb24tZGlnaXRzJ10gPSB0aGlzLm1pbkZyYWN0aW9uRGlnaXRzLnNlcmlhbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1heEZyYWN0aW9uRGlnaXRzKSB7XG4gICAgICAgICAgICBvcHRpb25zWydtYXgtZnJhY3Rpb24tZGlnaXRzJ10gPSB0aGlzLm1heEZyYWN0aW9uRGlnaXRzLnNlcmlhbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnbnVtYmVyLWZvcm1hdCcsXG4gICAgICAgICAgICB0aGlzLm51bWJlci5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgXTtcbiAgICB9XG59XG5cbmNsYXNzIExlbmd0aCB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgdGhpcy50eXBlID0gTnVtYmVyVHlwZTtcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoYXJncywgY29udGV4dCkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggIT09IDIpXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5lcnJvcihgRXhwZWN0ZWQgMSBhcmd1bWVudCwgYnV0IGZvdW5kICR7IGFyZ3MubGVuZ3RoIC0gMSB9IGluc3RlYWQuYCk7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gY29udGV4dC5wYXJzZShhcmdzWzFdLCAxKTtcbiAgICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoaW5wdXQudHlwZS5raW5kICE9PSAnYXJyYXknICYmIGlucHV0LnR5cGUua2luZCAhPT0gJ3N0cmluZycgJiYgaW5wdXQudHlwZS5raW5kICE9PSAndmFsdWUnKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZXJyb3IoYEV4cGVjdGVkIGFyZ3VtZW50IG9mIHR5cGUgc3RyaW5nIG9yIGFycmF5LCBidXQgZm91bmQgJHsgdG9TdHJpbmckMShpbnB1dC50eXBlKSB9IGluc3RlYWQuYCk7XG4gICAgICAgIHJldHVybiBuZXcgTGVuZ3RoKGlucHV0KTtcbiAgICB9XG4gICAgZXZhbHVhdGUoY3R4KSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dC5ldmFsdWF0ZShjdHgpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0Lmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0Lmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IkMShgRXhwZWN0ZWQgdmFsdWUgdG8gYmUgb2YgdHlwZSBzdHJpbmcgb3IgYXJyYXksIGJ1dCBmb3VuZCAkeyB0b1N0cmluZyQxKHR5cGVPZihpbnB1dCkpIH0gaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlYWNoQ2hpbGQoZm4pIHtcbiAgICAgICAgZm4odGhpcy5pbnB1dCk7XG4gICAgfVxuICAgIG91dHB1dERlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gWydsZW5ndGgnXTtcbiAgICAgICAgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4ge1xuICAgICAgICAgICAgc2VyaWFsaXplZC5wdXNoKGNoaWxkLnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVkO1xuICAgIH1cbn1cbnZhciBMZW5ndGgkMSA9IExlbmd0aDtcblxuY29uc3QgZXhwcmVzc2lvbnMgPSB7XG4gICAgJz09JzogRXF1YWxzLFxuICAgICchPSc6IE5vdEVxdWFscyxcbiAgICAnPic6IEdyZWF0ZXJUaGFuLFxuICAgICc8JzogTGVzc1RoYW4sXG4gICAgJz49JzogR3JlYXRlclRoYW5PckVxdWFsLFxuICAgICc8PSc6IExlc3NUaGFuT3JFcXVhbCxcbiAgICAnYXJyYXknOiBBc3NlcnRpb24kMSxcbiAgICAnYXQnOiBBdCQxLFxuICAgICdib29sZWFuJzogQXNzZXJ0aW9uJDEsXG4gICAgJ2Nhc2UnOiBDYXNlJDEsXG4gICAgJ2NvYWxlc2NlJzogQ29hbGVzY2UkMSxcbiAgICAnY29sbGF0b3InOiBDb2xsYXRvckV4cHJlc3Npb24sXG4gICAgJ2Zvcm1hdCc6IEZvcm1hdEV4cHJlc3Npb24sXG4gICAgJ2ltYWdlJzogSW1hZ2VFeHByZXNzaW9uLFxuICAgICdpbic6IEluJDEsXG4gICAgJ2luZGV4LW9mJzogSW5kZXhPZiQxLFxuICAgICdpbnRlcnBvbGF0ZSc6IEludGVycG9sYXRlJDEsXG4gICAgJ2ludGVycG9sYXRlLWhjbCc6IEludGVycG9sYXRlJDEsXG4gICAgJ2ludGVycG9sYXRlLWxhYic6IEludGVycG9sYXRlJDEsXG4gICAgJ2xlbmd0aCc6IExlbmd0aCQxLFxuICAgICdsZXQnOiBMZXQkMSxcbiAgICAnbGl0ZXJhbCc6IExpdGVyYWwkMSxcbiAgICAnbWF0Y2gnOiBNYXRjaCQxLFxuICAgICdudW1iZXInOiBBc3NlcnRpb24kMSxcbiAgICAnbnVtYmVyLWZvcm1hdCc6IE51bWJlckZvcm1hdCxcbiAgICAnb2JqZWN0JzogQXNzZXJ0aW9uJDEsXG4gICAgJ3NsaWNlJzogU2xpY2UkMSxcbiAgICAnc3RlcCc6IFN0ZXAkMSxcbiAgICAnc3RyaW5nJzogQXNzZXJ0aW9uJDEsXG4gICAgJ3RvLWJvb2xlYW4nOiBDb2VyY2lvbiQxLFxuICAgICd0by1jb2xvcic6IENvZXJjaW9uJDEsXG4gICAgJ3RvLW51bWJlcic6IENvZXJjaW9uJDEsXG4gICAgJ3RvLXN0cmluZyc6IENvZXJjaW9uJDEsXG4gICAgJ3Zhcic6IFZhciQxLFxuICAgICd3aXRoaW4nOiBXaXRoaW4kMVxufTtcbmZ1bmN0aW9uIHJnYmEoY3R4LCBbciwgZywgYiwgYV0pIHtcbiAgICByID0gci5ldmFsdWF0ZShjdHgpO1xuICAgIGcgPSBnLmV2YWx1YXRlKGN0eCk7XG4gICAgYiA9IGIuZXZhbHVhdGUoY3R4KTtcbiAgICBjb25zdCBhbHBoYSA9IGEgPyBhLmV2YWx1YXRlKGN0eCkgOiAxO1xuICAgIGNvbnN0IGVycm9yID0gdmFsaWRhdGVSR0JBKHIsIGcsIGIsIGFscGhhKTtcbiAgICBpZiAoZXJyb3IpXG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IkMShlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBDb2xvciQxKHIgLyAyNTUgKiBhbHBoYSwgZyAvIDI1NSAqIGFscGhhLCBiIC8gMjU1ICogYWxwaGEsIGFscGhhKTtcbn1cbmZ1bmN0aW9uIGhhcyhrZXksIG9iaikge1xuICAgIHJldHVybiBrZXkgaW4gb2JqO1xufVxuZnVuY3Rpb24gZ2V0KGtleSwgb2JqKSB7XG4gICAgY29uc3QgdiA9IG9ialtrZXldO1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdjtcbn1cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaCh2LCBhLCBpLCBqKSB7XG4gICAgd2hpbGUgKGkgPD0gaikge1xuICAgICAgICBjb25zdCBtID0gaSArIGogPj4gMTtcbiAgICAgICAgaWYgKGFbbV0gPT09IHYpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGFbbV0gPiB2KVxuICAgICAgICAgICAgaiA9IG0gLSAxO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpID0gbSArIDE7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHZhcmFyZ3ModHlwZSkge1xuICAgIHJldHVybiB7IHR5cGUgfTtcbn1cbkNvbXBvdW5kRXhwcmVzc2lvbiQxLnJlZ2lzdGVyKGV4cHJlc3Npb25zLCB7XG4gICAgJ2Vycm9yJzogW1xuICAgICAgICBFcnJvclR5cGUsXG4gICAgICAgIFtTdHJpbmdUeXBlXSxcbiAgICAgICAgKGN0eCwgW3ZdKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yJDEodi5ldmFsdWF0ZShjdHgpKTtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3R5cGVvZic6IFtcbiAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgW1ZhbHVlVHlwZV0sXG4gICAgICAgIChjdHgsIFt2XSkgPT4gdG9TdHJpbmckMSh0eXBlT2Yodi5ldmFsdWF0ZShjdHgpKSlcbiAgICBdLFxuICAgICd0by1yZ2JhJzogW1xuICAgICAgICBhcnJheSQxKE51bWJlclR5cGUsIDQpLFxuICAgICAgICBbQ29sb3JUeXBlXSxcbiAgICAgICAgKGN0eCwgW3ZdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdi5ldmFsdWF0ZShjdHgpLnRvQXJyYXkoKTtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3JnYic6IFtcbiAgICAgICAgQ29sb3JUeXBlLFxuICAgICAgICBbXG4gICAgICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgICAgIE51bWJlclR5cGVcbiAgICAgICAgXSxcbiAgICAgICAgcmdiYVxuICAgIF0sXG4gICAgJ3JnYmEnOiBbXG4gICAgICAgIENvbG9yVHlwZSxcbiAgICAgICAgW1xuICAgICAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICAgICAgTnVtYmVyVHlwZVxuICAgICAgICBdLFxuICAgICAgICByZ2JhXG4gICAgXSxcbiAgICAnaGFzJzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuVHlwZSxcbiAgICAgICAgb3ZlcmxvYWRzOiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgW1N0cmluZ1R5cGVdLFxuICAgICAgICAgICAgICAgIChjdHgsIFtrZXldKSA9PiBoYXMoa2V5LmV2YWx1YXRlKGN0eCksIGN0eC5wcm9wZXJ0aWVzKCkpXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0VHlwZVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgKGN0eCwgW2tleSwgb2JqXSkgPT4gaGFzKGtleS5ldmFsdWF0ZShjdHgpLCBvYmouZXZhbHVhdGUoY3R4KSlcbiAgICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgIH0sXG4gICAgJ2dldCc6IHtcbiAgICAgICAgdHlwZTogVmFsdWVUeXBlLFxuICAgICAgICBvdmVybG9hZHM6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBbU3RyaW5nVHlwZV0sXG4gICAgICAgICAgICAgICAgKGN0eCwgW2tleV0pID0+IGdldChrZXkuZXZhbHVhdGUoY3R4KSwgY3R4LnByb3BlcnRpZXMoKSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBTdHJpbmdUeXBlLFxuICAgICAgICAgICAgICAgICAgICBPYmplY3RUeXBlXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAoY3R4LCBba2V5LCBvYmpdKSA9PiBnZXQoa2V5LmV2YWx1YXRlKGN0eCksIG9iai5ldmFsdWF0ZShjdHgpKVxuICAgICAgICAgICAgXVxuICAgICAgICBdXG4gICAgfSxcbiAgICAnZmVhdHVyZS1zdGF0ZSc6IFtcbiAgICAgICAgVmFsdWVUeXBlLFxuICAgICAgICBbU3RyaW5nVHlwZV0sXG4gICAgICAgIChjdHgsIFtrZXldKSA9PiBnZXQoa2V5LmV2YWx1YXRlKGN0eCksIGN0eC5mZWF0dXJlU3RhdGUgfHwge30pXG4gICAgXSxcbiAgICAncHJvcGVydGllcyc6IFtcbiAgICAgICAgT2JqZWN0VHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgIGN0eCA9PiBjdHgucHJvcGVydGllcygpXG4gICAgXSxcbiAgICAnZ2VvbWV0cnktdHlwZSc6IFtcbiAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgIGN0eCA9PiBjdHguZ2VvbWV0cnlUeXBlKClcbiAgICBdLFxuICAgICdpZCc6IFtcbiAgICAgICAgVmFsdWVUeXBlLFxuICAgICAgICBbXSxcbiAgICAgICAgY3R4ID0+IGN0eC5pZCgpXG4gICAgXSxcbiAgICAnem9vbSc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgIGN0eCA9PiBjdHguZ2xvYmFscy56b29tXG4gICAgXSxcbiAgICAncGl0Y2gnOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIFtdLFxuICAgICAgICBjdHggPT4gY3R4Lmdsb2JhbHMucGl0Y2ggfHwgMFxuICAgIF0sXG4gICAgJ2Rpc3RhbmNlLWZyb20tY2VudGVyJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbXSxcbiAgICAgICAgY3R4ID0+IGN0eC5kaXN0YW5jZUZyb21DZW50ZXIoKVxuICAgIF0sXG4gICAgJ2hlYXRtYXAtZGVuc2l0eSc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgIGN0eCA9PiBjdHguZ2xvYmFscy5oZWF0bWFwRGVuc2l0eSB8fCAwXG4gICAgXSxcbiAgICAnbGluZS1wcm9ncmVzcyc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgIGN0eCA9PiBjdHguZ2xvYmFscy5saW5lUHJvZ3Jlc3MgfHwgMFxuICAgIF0sXG4gICAgJ3NreS1yYWRpYWwtcHJvZ3Jlc3MnOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIFtdLFxuICAgICAgICBjdHggPT4gY3R4Lmdsb2JhbHMuc2t5UmFkaWFsUHJvZ3Jlc3MgfHwgMFxuICAgIF0sXG4gICAgJ2FjY3VtdWxhdGVkJzogW1xuICAgICAgICBWYWx1ZVR5cGUsXG4gICAgICAgIFtdLFxuICAgICAgICBjdHggPT4gY3R4Lmdsb2JhbHMuYWNjdW11bGF0ZWQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjdHguZ2xvYmFscy5hY2N1bXVsYXRlZFxuICAgIF0sXG4gICAgJysnOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIHZhcmFyZ3MoTnVtYmVyVHlwZSksXG4gICAgICAgIChjdHgsIGFyZ3MpID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBhcmcuZXZhbHVhdGUoY3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICBdLFxuICAgICcqJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICB2YXJhcmdzKE51bWJlclR5cGUpLFxuICAgICAgICAoY3R4LCBhcmdzKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gMTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKj0gYXJnLmV2YWx1YXRlKGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnLSc6IHtcbiAgICAgICAgdHlwZTogTnVtYmVyVHlwZSxcbiAgICAgICAgb3ZlcmxvYWRzOiBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICAgICAgICAgICAgICBOdW1iZXJUeXBlXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAoY3R4LCBbYSwgYl0pID0+IGEuZXZhbHVhdGUoY3R4KSAtIGIuZXZhbHVhdGUoY3R4KVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBbTnVtYmVyVHlwZV0sXG4gICAgICAgICAgICAgICAgKGN0eCwgW2FdKSA9PiAtYS5ldmFsdWF0ZShjdHgpXG4gICAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICB9LFxuICAgICcvJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbXG4gICAgICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICAgICAgTnVtYmVyVHlwZVxuICAgICAgICBdLFxuICAgICAgICAoY3R4LCBbYSwgYl0pID0+IGEuZXZhbHVhdGUoY3R4KSAvIGIuZXZhbHVhdGUoY3R4KVxuICAgIF0sXG4gICAgJyUnOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIFtcbiAgICAgICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgICAgICBOdW1iZXJUeXBlXG4gICAgICAgIF0sXG4gICAgICAgIChjdHgsIFthLCBiXSkgPT4gYS5ldmFsdWF0ZShjdHgpICUgYi5ldmFsdWF0ZShjdHgpXG4gICAgXSxcbiAgICAnbG4yJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbXSxcbiAgICAgICAgKCkgPT4gTWF0aC5MTjJcbiAgICBdLFxuICAgICdwaSc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgICgpID0+IE1hdGguUElcbiAgICBdLFxuICAgICdlJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbXSxcbiAgICAgICAgKCkgPT4gTWF0aC5FXG4gICAgXSxcbiAgICAnXic6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW1xuICAgICAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgICAgIE51bWJlclR5cGVcbiAgICAgICAgXSxcbiAgICAgICAgKGN0eCwgW2IsIGVdKSA9PiBNYXRoLnBvdyhiLmV2YWx1YXRlKGN0eCksIGUuZXZhbHVhdGUoY3R4KSlcbiAgICBdLFxuICAgICdzcXJ0JzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbTnVtYmVyVHlwZV0sXG4gICAgICAgIChjdHgsIFt4XSkgPT4gTWF0aC5zcXJ0KHguZXZhbHVhdGUoY3R4KSlcbiAgICBdLFxuICAgICdsb2cxMCc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGgubG9nKG4uZXZhbHVhdGUoY3R4KSkgLyBNYXRoLkxOMTBcbiAgICBdLFxuICAgICdsbic6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGgubG9nKG4uZXZhbHVhdGUoY3R4KSlcbiAgICBdLFxuICAgICdsb2cyJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbTnVtYmVyVHlwZV0sXG4gICAgICAgIChjdHgsIFtuXSkgPT4gTWF0aC5sb2cobi5ldmFsdWF0ZShjdHgpKSAvIE1hdGguTE4yXG4gICAgXSxcbiAgICAnc2luJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbTnVtYmVyVHlwZV0sXG4gICAgICAgIChjdHgsIFtuXSkgPT4gTWF0aC5zaW4obi5ldmFsdWF0ZShjdHgpKVxuICAgIF0sXG4gICAgJ2Nvcyc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGguY29zKG4uZXZhbHVhdGUoY3R4KSlcbiAgICBdLFxuICAgICd0YW4nOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIFtOdW1iZXJUeXBlXSxcbiAgICAgICAgKGN0eCwgW25dKSA9PiBNYXRoLnRhbihuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAnYXNpbic6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGguYXNpbihuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAnYWNvcyc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGguYWNvcyhuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAnYXRhbic6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGguYXRhbihuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAnbWluJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICB2YXJhcmdzKE51bWJlclR5cGUpLFxuICAgICAgICAoY3R4LCBhcmdzKSA9PiBNYXRoLm1pbiguLi5hcmdzLm1hcChhcmcgPT4gYXJnLmV2YWx1YXRlKGN0eCkpKVxuICAgIF0sXG4gICAgJ21heCc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgdmFyYXJncyhOdW1iZXJUeXBlKSxcbiAgICAgICAgKGN0eCwgYXJncykgPT4gTWF0aC5tYXgoLi4uYXJncy5tYXAoYXJnID0+IGFyZy5ldmFsdWF0ZShjdHgpKSlcbiAgICBdLFxuICAgICdhYnMnOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIFtOdW1iZXJUeXBlXSxcbiAgICAgICAgKGN0eCwgW25dKSA9PiBNYXRoLmFicyhuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAncm91bmQnOiBbXG4gICAgICAgIE51bWJlclR5cGUsXG4gICAgICAgIFtOdW1iZXJUeXBlXSxcbiAgICAgICAgKGN0eCwgW25dKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2ID0gbi5ldmFsdWF0ZShjdHgpO1xuICAgICAgICAgICAgcmV0dXJuIHYgPCAwID8gLU1hdGgucm91bmQoLXYpIDogTWF0aC5yb3VuZCh2KTtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2Zsb29yJzogW1xuICAgICAgICBOdW1iZXJUeXBlLFxuICAgICAgICBbTnVtYmVyVHlwZV0sXG4gICAgICAgIChjdHgsIFtuXSkgPT4gTWF0aC5mbG9vcihuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAnY2VpbCc6IFtcbiAgICAgICAgTnVtYmVyVHlwZSxcbiAgICAgICAgW051bWJlclR5cGVdLFxuICAgICAgICAoY3R4LCBbbl0pID0+IE1hdGguY2VpbChuLmV2YWx1YXRlKGN0eCkpXG4gICAgXSxcbiAgICAnZmlsdGVyLT09JzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW1xuICAgICAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgICAgIFZhbHVlVHlwZVxuICAgICAgICBdLFxuICAgICAgICAoY3R4LCBbaywgdl0pID0+IGN0eC5wcm9wZXJ0aWVzKClbay52YWx1ZV0gPT09IHYudmFsdWVcbiAgICBdLFxuICAgICdmaWx0ZXItaWQtPT0nOiBbXG4gICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICBbVmFsdWVUeXBlXSxcbiAgICAgICAgKGN0eCwgW3ZdKSA9PiBjdHguaWQoKSA9PT0gdi52YWx1ZVxuICAgIF0sXG4gICAgJ2ZpbHRlci10eXBlLT09JzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW1N0cmluZ1R5cGVdLFxuICAgICAgICAoY3R4LCBbdl0pID0+IGN0eC5nZW9tZXRyeVR5cGUoKSA9PT0gdi52YWx1ZVxuICAgIF0sXG4gICAgJ2ZpbHRlci08JzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW1xuICAgICAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgICAgIFZhbHVlVHlwZVxuICAgICAgICBdLFxuICAgICAgICAoY3R4LCBbaywgdl0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBjdHgucHJvcGVydGllcygpW2sudmFsdWVdO1xuICAgICAgICAgICAgY29uc3QgYiA9IHYudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiICYmIGEgPCBiO1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZmlsdGVyLWlkLTwnOiBbXG4gICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICBbVmFsdWVUeXBlXSxcbiAgICAgICAgKGN0eCwgW3ZdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gY3R4LmlkKCk7XG4gICAgICAgICAgICBjb25zdCBiID0gdi52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGIgJiYgYSA8IGI7XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdmaWx0ZXItPic6IFtcbiAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgIFtcbiAgICAgICAgICAgIFN0cmluZ1R5cGUsXG4gICAgICAgICAgICBWYWx1ZVR5cGVcbiAgICAgICAgXSxcbiAgICAgICAgKGN0eCwgW2ssIHZdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gY3R4LnByb3BlcnRpZXMoKVtrLnZhbHVlXTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSB2LnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYiAmJiBhID4gYjtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ZpbHRlci1pZC0+JzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW1ZhbHVlVHlwZV0sXG4gICAgICAgIChjdHgsIFt2XSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IGN0eC5pZCgpO1xuICAgICAgICAgICAgY29uc3QgYiA9IHYudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiICYmIGEgPiBiO1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZmlsdGVyLTw9JzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW1xuICAgICAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgICAgIFZhbHVlVHlwZVxuICAgICAgICBdLFxuICAgICAgICAoY3R4LCBbaywgdl0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBjdHgucHJvcGVydGllcygpW2sudmFsdWVdO1xuICAgICAgICAgICAgY29uc3QgYiA9IHYudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiICYmIGEgPD0gYjtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ZpbHRlci1pZC08PSc6IFtcbiAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgIFtWYWx1ZVR5cGVdLFxuICAgICAgICAoY3R4LCBbdl0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBjdHguaWQoKTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSB2LnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYiAmJiBhIDw9IGI7XG4gICAgICAgIH1cbiAgICBdLFxuICAgICdmaWx0ZXItPj0nOiBbXG4gICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICBbXG4gICAgICAgICAgICBTdHJpbmdUeXBlLFxuICAgICAgICAgICAgVmFsdWVUeXBlXG4gICAgICAgIF0sXG4gICAgICAgIChjdHgsIFtrLCB2XSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IGN0eC5wcm9wZXJ0aWVzKClbay52YWx1ZV07XG4gICAgICAgICAgICBjb25zdCBiID0gdi52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYSA9PT0gdHlwZW9mIGIgJiYgYSA+PSBiO1xuICAgICAgICB9XG4gICAgXSxcbiAgICAnZmlsdGVyLWlkLT49JzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW1ZhbHVlVHlwZV0sXG4gICAgICAgIChjdHgsIFt2XSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYSA9IGN0eC5pZCgpO1xuICAgICAgICAgICAgY29uc3QgYiA9IHYudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IHR5cGVvZiBiICYmIGEgPj0gYjtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ2ZpbHRlci1oYXMnOiBbXG4gICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICBbVmFsdWVUeXBlXSxcbiAgICAgICAgKGN0eCwgW2tdKSA9PiBrLnZhbHVlIGluIGN0eC5wcm9wZXJ0aWVzKClcbiAgICBdLFxuICAgICdmaWx0ZXItaGFzLWlkJzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW10sXG4gICAgICAgIGN0eCA9PiBjdHguaWQoKSAhPT0gbnVsbCAmJiBjdHguaWQoKSAhPT0gdW5kZWZpbmVkXG4gICAgXSxcbiAgICAnZmlsdGVyLXR5cGUtaW4nOiBbXG4gICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICBbYXJyYXkkMShTdHJpbmdUeXBlKV0sXG4gICAgICAgIChjdHgsIFt2XSkgPT4gdi52YWx1ZS5pbmRleE9mKGN0eC5nZW9tZXRyeVR5cGUoKSkgPj0gMFxuICAgIF0sXG4gICAgJ2ZpbHRlci1pZC1pbic6IFtcbiAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgIFthcnJheSQxKFZhbHVlVHlwZSldLFxuICAgICAgICAoY3R4LCBbdl0pID0+IHYudmFsdWUuaW5kZXhPZihjdHguaWQoKSkgPj0gMFxuICAgIF0sXG4gICAgJ2ZpbHRlci1pbi1zbWFsbCc6IFtcbiAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgIFtcbiAgICAgICAgICAgIFN0cmluZ1R5cGUsXG4gICAgICAgICAgICBhcnJheSQxKFZhbHVlVHlwZSlcbiAgICAgICAgXSxcbiAgICAgICAgKGN0eCwgW2ssIHZdKSA9PiB2LnZhbHVlLmluZGV4T2YoY3R4LnByb3BlcnRpZXMoKVtrLnZhbHVlXSkgPj0gMFxuICAgIF0sXG4gICAgJ2ZpbHRlci1pbi1sYXJnZSc6IFtcbiAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgIFtcbiAgICAgICAgICAgIFN0cmluZ1R5cGUsXG4gICAgICAgICAgICBhcnJheSQxKFZhbHVlVHlwZSlcbiAgICAgICAgXSxcbiAgICAgICAgKGN0eCwgW2ssIHZdKSA9PiBiaW5hcnlTZWFyY2goY3R4LnByb3BlcnRpZXMoKVtrLnZhbHVlXSwgdi52YWx1ZSwgMCwgdi52YWx1ZS5sZW5ndGggLSAxKVxuICAgIF0sXG4gICAgJ2FsbCc6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhblR5cGUsXG4gICAgICAgIG92ZXJsb2FkczogW1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgICAgICAgICAgICAgIEJvb2xlYW5UeXBlXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAoY3R4LCBbYSwgYl0pID0+IGEuZXZhbHVhdGUoY3R4KSAmJiBiLmV2YWx1YXRlKGN0eClcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgdmFyYXJncyhCb29sZWFuVHlwZSksXG4gICAgICAgICAgICAgICAgKGN0eCwgYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZy5ldmFsdWF0ZShjdHgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICB9LFxuICAgICdhbnknOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW5UeXBlLFxuICAgICAgICBvdmVybG9hZHM6IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIEJvb2xlYW5UeXBlLFxuICAgICAgICAgICAgICAgICAgICBCb29sZWFuVHlwZVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgKGN0eCwgW2EsIGJdKSA9PiBhLmV2YWx1YXRlKGN0eCkgfHwgYi5ldmFsdWF0ZShjdHgpXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHZhcmFyZ3MoQm9vbGVhblR5cGUpLFxuICAgICAgICAgICAgICAgIChjdHgsIGFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5ldmFsdWF0ZShjdHgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICB9LFxuICAgICchJzogW1xuICAgICAgICBCb29sZWFuVHlwZSxcbiAgICAgICAgW0Jvb2xlYW5UeXBlXSxcbiAgICAgICAgKGN0eCwgW2JdKSA9PiAhYi5ldmFsdWF0ZShjdHgpXG4gICAgXSxcbiAgICAnaXMtc3VwcG9ydGVkLXNjcmlwdCc6IFtcbiAgICAgICAgQm9vbGVhblR5cGUsXG4gICAgICAgIFtTdHJpbmdUeXBlXSxcbiAgICAgICAgKGN0eCwgW3NdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1N1cHBvcnRlZFNjcmlwdCA9IGN0eC5nbG9iYWxzICYmIGN0eC5nbG9iYWxzLmlzU3VwcG9ydGVkU2NyaXB0O1xuICAgICAgICAgICAgaWYgKGlzU3VwcG9ydGVkU2NyaXB0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkU2NyaXB0KHMuZXZhbHVhdGUoY3R4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIF0sXG4gICAgJ3VwY2FzZSc6IFtcbiAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgW1N0cmluZ1R5cGVdLFxuICAgICAgICAoY3R4LCBbc10pID0+IHMuZXZhbHVhdGUoY3R4KS50b1VwcGVyQ2FzZSgpXG4gICAgXSxcbiAgICAnZG93bmNhc2UnOiBbXG4gICAgICAgIFN0cmluZ1R5cGUsXG4gICAgICAgIFtTdHJpbmdUeXBlXSxcbiAgICAgICAgKGN0eCwgW3NdKSA9PiBzLmV2YWx1YXRlKGN0eCkudG9Mb3dlckNhc2UoKVxuICAgIF0sXG4gICAgJ2NvbmNhdCc6IFtcbiAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgdmFyYXJncyhWYWx1ZVR5cGUpLFxuICAgICAgICAoY3R4LCBhcmdzKSA9PiBhcmdzLm1hcChhcmcgPT4gdG9TdHJpbmcoYXJnLmV2YWx1YXRlKGN0eCkpKS5qb2luKCcnKVxuICAgIF0sXG4gICAgJ3Jlc29sdmVkLWxvY2FsZSc6IFtcbiAgICAgICAgU3RyaW5nVHlwZSxcbiAgICAgICAgW0NvbGxhdG9yVHlwZV0sXG4gICAgICAgIChjdHgsIFtjb2xsYXRvcl0pID0+IGNvbGxhdG9yLmV2YWx1YXRlKGN0eCkucmVzb2x2ZWRMb2NhbGUoKVxuICAgIF1cbn0pO1xudmFyIGRlZmluaXRpb25zID0gZXhwcmVzc2lvbnM7XG5cbmZ1bmN0aW9uIHN1Y2Nlc3ModmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6ICdzdWNjZXNzJyxcbiAgICAgICAgdmFsdWVcbiAgICB9O1xufVxuZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQ6ICdlcnJvcicsXG4gICAgICAgIHZhbHVlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc3VwcG9ydHNQcm9wZXJ0eUV4cHJlc3Npb24oc3BlYykge1xuICAgIHJldHVybiBzcGVjWydwcm9wZXJ0eS10eXBlJ10gPT09ICdkYXRhLWRyaXZlbicgfHwgc3BlY1sncHJvcGVydHktdHlwZSddID09PSAnY3Jvc3MtZmFkZWQtZGF0YS1kcml2ZW4nO1xufVxuZnVuY3Rpb24gc3VwcG9ydHNab29tRXhwcmVzc2lvbihzcGVjKSB7XG4gICAgcmV0dXJuICEhc3BlYy5leHByZXNzaW9uICYmIHNwZWMuZXhwcmVzc2lvbi5wYXJhbWV0ZXJzLmluZGV4T2YoJ3pvb20nKSA+IC0xO1xufVxuZnVuY3Rpb24gc3VwcG9ydHNJbnRlcnBvbGF0aW9uKHNwZWMpIHtcbiAgICByZXR1cm4gISFzcGVjLmV4cHJlc3Npb24gJiYgc3BlYy5leHByZXNzaW9uLmludGVycG9sYXRlZDtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZSh2YWwpIHtcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICB9IGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfSBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBCb29sZWFuKSB7XG4gICAgICAgIHJldHVybiAnYm9vbGVhbic7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfSBlbHNlIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpZGVudGl0eUZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYykge1xuICAgIGNvbnN0IGlzQ29sb3IgPSBwcm9wZXJ0eVNwZWMudHlwZSA9PT0gJ2NvbG9yJztcbiAgICBjb25zdCB6b29tQW5kRmVhdHVyZURlcGVuZGVudCA9IHBhcmFtZXRlcnMuc3RvcHMgJiYgdHlwZW9mIHBhcmFtZXRlcnMuc3RvcHNbMF1bMF0gPT09ICdvYmplY3QnO1xuICAgIGNvbnN0IGZlYXR1cmVEZXBlbmRlbnQgPSB6b29tQW5kRmVhdHVyZURlcGVuZGVudCB8fCBwYXJhbWV0ZXJzLnByb3BlcnR5ICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgem9vbURlcGVuZGVudCA9IHpvb21BbmRGZWF0dXJlRGVwZW5kZW50IHx8ICFmZWF0dXJlRGVwZW5kZW50O1xuICAgIGNvbnN0IHR5cGUgPSBwYXJhbWV0ZXJzLnR5cGUgfHwgKHN1cHBvcnRzSW50ZXJwb2xhdGlvbihwcm9wZXJ0eVNwZWMpID8gJ2V4cG9uZW50aWFsJyA6ICdpbnRlcnZhbCcpO1xuICAgIGlmIChpc0NvbG9yKSB7XG4gICAgICAgIHBhcmFtZXRlcnMgPSBleHRlbmQoe30sIHBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAocGFyYW1ldGVycy5zdG9wcykge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5zdG9wcyA9IHBhcmFtZXRlcnMuc3RvcHMubWFwKHN0b3AgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIHN0b3BbMF0sXG4gICAgICAgICAgICAgICAgICAgIENvbG9yJDEucGFyc2Uoc3RvcFsxXSlcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuZGVmYXVsdCkge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5kZWZhdWx0ID0gQ29sb3IkMS5wYXJzZShwYXJhbWV0ZXJzLmRlZmF1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1ldGVycy5kZWZhdWx0ID0gQ29sb3IkMS5wYXJzZShwcm9wZXJ0eVNwZWMuZGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtZXRlcnMuY29sb3JTcGFjZSAmJiBwYXJhbWV0ZXJzLmNvbG9yU3BhY2UgIT09ICdyZ2InICYmICFjb2xvclNwYWNlc1twYXJhbWV0ZXJzLmNvbG9yU3BhY2VdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjb2xvciBzcGFjZTogJHsgcGFyYW1ldGVycy5jb2xvclNwYWNlIH1gKTtcbiAgICB9XG4gICAgbGV0IGlubmVyRnVuO1xuICAgIGxldCBoYXNoZWRTdG9wcztcbiAgICBsZXQgY2F0ZWdvcmljYWxLZXlUeXBlO1xuICAgIGlmICh0eXBlID09PSAnZXhwb25lbnRpYWwnKSB7XG4gICAgICAgIGlubmVyRnVuID0gZXZhbHVhdGVFeHBvbmVudGlhbEZ1bmN0aW9uO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ludGVydmFsJykge1xuICAgICAgICBpbm5lckZ1biA9IGV2YWx1YXRlSW50ZXJ2YWxGdW5jdGlvbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjYXRlZ29yaWNhbCcpIHtcbiAgICAgICAgaW5uZXJGdW4gPSBldmFsdWF0ZUNhdGVnb3JpY2FsRnVuY3Rpb247XG4gICAgICAgIGhhc2hlZFN0b3BzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZm9yIChjb25zdCBzdG9wIG9mIHBhcmFtZXRlcnMuc3RvcHMpIHtcbiAgICAgICAgICAgIGhhc2hlZFN0b3BzW3N0b3BbMF1dID0gc3RvcFsxXTtcbiAgICAgICAgfVxuICAgICAgICBjYXRlZ29yaWNhbEtleVR5cGUgPSB0eXBlb2YgcGFyYW1ldGVycy5zdG9wc1swXVswXTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpZGVudGl0eScpIHtcbiAgICAgICAgaW5uZXJGdW4gPSBldmFsdWF0ZUlkZW50aXR5RnVuY3Rpb247XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGZ1bmN0aW9uIHR5cGUgXCIkeyB0eXBlIH1cImApO1xuICAgIH1cbiAgICBpZiAoem9vbUFuZEZlYXR1cmVEZXBlbmRlbnQpIHtcbiAgICAgICAgY29uc3QgZmVhdHVyZUZ1bmN0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCB6b29tU3RvcHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBwYXJhbWV0ZXJzLnN0b3BzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICBjb25zdCBzdG9wID0gcGFyYW1ldGVycy5zdG9wc1tzXTtcbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSBzdG9wWzBdLnpvb207XG4gICAgICAgICAgICBpZiAoZmVhdHVyZUZ1bmN0aW9uc1t6b29tXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZUZ1bmN0aW9uc1t6b29tXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgem9vbSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcGFyYW1ldGVycy50eXBlLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eTogcGFyYW1ldGVycy5wcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogcGFyYW1ldGVycy5kZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICBzdG9wczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHpvb21TdG9wcy5wdXNoKHpvb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmVhdHVyZUZ1bmN0aW9uc1t6b29tXS5zdG9wcy5wdXNoKFtcbiAgICAgICAgICAgICAgICBzdG9wWzBdLnZhbHVlLFxuICAgICAgICAgICAgICAgIHN0b3BbMV1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZlYXR1cmVGdW5jdGlvblN0b3BzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgeiBvZiB6b29tU3RvcHMpIHtcbiAgICAgICAgICAgIGZlYXR1cmVGdW5jdGlvblN0b3BzLnB1c2goW1xuICAgICAgICAgICAgICAgIGZlYXR1cmVGdW5jdGlvbnNbel0uem9vbSxcbiAgICAgICAgICAgICAgICBjcmVhdGVGdW5jdGlvbihmZWF0dXJlRnVuY3Rpb25zW3pdLCBwcm9wZXJ0eVNwZWMpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRlcnBvbGF0aW9uVHlwZSA9IHsgbmFtZTogJ2xpbmVhcicgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtpbmQ6ICdjb21wb3NpdGUnLFxuICAgICAgICAgICAgaW50ZXJwb2xhdGlvblR5cGUsXG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9uRmFjdG9yOiBJbnRlcnBvbGF0ZSQxLmludGVycG9sYXRpb25GYWN0b3IuYmluZCh1bmRlZmluZWQsIGludGVycG9sYXRpb25UeXBlKSxcbiAgICAgICAgICAgIHpvb21TdG9wczogZmVhdHVyZUZ1bmN0aW9uU3RvcHMubWFwKHMgPT4gc1swXSksXG4gICAgICAgICAgICBldmFsdWF0ZSh7em9vbX0sIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZhbHVhdGVFeHBvbmVudGlhbEZ1bmN0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcHM6IGZlYXR1cmVGdW5jdGlvblN0b3BzLFxuICAgICAgICAgICAgICAgICAgICBiYXNlOiBwYXJhbWV0ZXJzLmJhc2VcbiAgICAgICAgICAgICAgICB9LCBwcm9wZXJ0eVNwZWMsIHpvb20pLmV2YWx1YXRlKHpvb20sIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoem9vbURlcGVuZGVudCkge1xuICAgICAgICBjb25zdCBpbnRlcnBvbGF0aW9uVHlwZSA9IHR5cGUgPT09ICdleHBvbmVudGlhbCcgPyB7XG4gICAgICAgICAgICBuYW1lOiAnZXhwb25lbnRpYWwnLFxuICAgICAgICAgICAgYmFzZTogcGFyYW1ldGVycy5iYXNlICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmJhc2UgOiAxXG4gICAgICAgIH0gOiBudWxsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogJ2NhbWVyYScsXG4gICAgICAgICAgICBpbnRlcnBvbGF0aW9uVHlwZSxcbiAgICAgICAgICAgIGludGVycG9sYXRpb25GYWN0b3I6IEludGVycG9sYXRlJDEuaW50ZXJwb2xhdGlvbkZhY3Rvci5iaW5kKHVuZGVmaW5lZCwgaW50ZXJwb2xhdGlvblR5cGUpLFxuICAgICAgICAgICAgem9vbVN0b3BzOiBwYXJhbWV0ZXJzLnN0b3BzLm1hcChzID0+IHNbMF0pLFxuICAgICAgICAgICAgZXZhbHVhdGU6ICh7em9vbX0pID0+IGlubmVyRnVuKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgem9vbSwgaGFzaGVkU3RvcHMsIGNhdGVnb3JpY2FsS2V5VHlwZSlcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogJ3NvdXJjZScsXG4gICAgICAgICAgICBldmFsdWF0ZShfLCBmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmZWF0dXJlICYmIGZlYXR1cmUucHJvcGVydGllcyA/IGZlYXR1cmUucHJvcGVydGllc1twYXJhbWV0ZXJzLnByb3BlcnR5XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29hbGVzY2UkMShwYXJhbWV0ZXJzLmRlZmF1bHQsIHByb3BlcnR5U3BlYy5kZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyRnVuKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgdmFsdWUsIGhhc2hlZFN0b3BzLCBjYXRlZ29yaWNhbEtleVR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvYWxlc2NlJDEoYSwgYiwgYykge1xuICAgIGlmIChhICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBhO1xuICAgIGlmIChiICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGlmIChjICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBjO1xufVxuZnVuY3Rpb24gZXZhbHVhdGVDYXRlZ29yaWNhbEZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgaW5wdXQsIGhhc2hlZFN0b3BzLCBrZXlUeXBlKSB7XG4gICAgY29uc3QgZXZhbHVhdGVkID0gdHlwZW9mIGlucHV0ID09PSBrZXlUeXBlID8gaGFzaGVkU3RvcHNbaW5wdXRdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBjb2FsZXNjZSQxKGV2YWx1YXRlZCwgcGFyYW1ldGVycy5kZWZhdWx0LCBwcm9wZXJ0eVNwZWMuZGVmYXVsdCk7XG59XG5mdW5jdGlvbiBldmFsdWF0ZUludGVydmFsRnVuY3Rpb24ocGFyYW1ldGVycywgcHJvcGVydHlTcGVjLCBpbnB1dCkge1xuICAgIGlmIChnZXRUeXBlKGlucHV0KSAhPT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBjb2FsZXNjZSQxKHBhcmFtZXRlcnMuZGVmYXVsdCwgcHJvcGVydHlTcGVjLmRlZmF1bHQpO1xuICAgIGNvbnN0IG4gPSBwYXJhbWV0ZXJzLnN0b3BzLmxlbmd0aDtcbiAgICBpZiAobiA9PT0gMSlcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMuc3RvcHNbMF1bMV07XG4gICAgaWYgKGlucHV0IDw9IHBhcmFtZXRlcnMuc3RvcHNbMF1bMF0pXG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLnN0b3BzWzBdWzFdO1xuICAgIGlmIChpbnB1dCA+PSBwYXJhbWV0ZXJzLnN0b3BzW24gLSAxXVswXSlcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMuc3RvcHNbbiAtIDFdWzFdO1xuICAgIGNvbnN0IGluZGV4ID0gZmluZFN0b3BMZXNzVGhhbk9yRXF1YWxUbyhwYXJhbWV0ZXJzLnN0b3BzLm1hcChzdG9wID0+IHN0b3BbMF0pLCBpbnB1dCk7XG4gICAgcmV0dXJuIHBhcmFtZXRlcnMuc3RvcHNbaW5kZXhdWzFdO1xufVxuZnVuY3Rpb24gZXZhbHVhdGVFeHBvbmVudGlhbEZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgaW5wdXQpIHtcbiAgICBjb25zdCBiYXNlID0gcGFyYW1ldGVycy5iYXNlICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmJhc2UgOiAxO1xuICAgIGlmIChnZXRUeXBlKGlucHV0KSAhPT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBjb2FsZXNjZSQxKHBhcmFtZXRlcnMuZGVmYXVsdCwgcHJvcGVydHlTcGVjLmRlZmF1bHQpO1xuICAgIGNvbnN0IG4gPSBwYXJhbWV0ZXJzLnN0b3BzLmxlbmd0aDtcbiAgICBpZiAobiA9PT0gMSlcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMuc3RvcHNbMF1bMV07XG4gICAgaWYgKGlucHV0IDw9IHBhcmFtZXRlcnMuc3RvcHNbMF1bMF0pXG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLnN0b3BzWzBdWzFdO1xuICAgIGlmIChpbnB1dCA+PSBwYXJhbWV0ZXJzLnN0b3BzW24gLSAxXVswXSlcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMuc3RvcHNbbiAtIDFdWzFdO1xuICAgIGNvbnN0IGluZGV4ID0gZmluZFN0b3BMZXNzVGhhbk9yRXF1YWxUbyhwYXJhbWV0ZXJzLnN0b3BzLm1hcChzdG9wID0+IHN0b3BbMF0pLCBpbnB1dCk7XG4gICAgY29uc3QgdCA9IGludGVycG9sYXRpb25GYWN0b3IoaW5wdXQsIGJhc2UsIHBhcmFtZXRlcnMuc3RvcHNbaW5kZXhdWzBdLCBwYXJhbWV0ZXJzLnN0b3BzW2luZGV4ICsgMV1bMF0pO1xuICAgIGNvbnN0IG91dHB1dExvd2VyID0gcGFyYW1ldGVycy5zdG9wc1tpbmRleF1bMV07XG4gICAgY29uc3Qgb3V0cHV0VXBwZXIgPSBwYXJhbWV0ZXJzLnN0b3BzW2luZGV4ICsgMV1bMV07XG4gICAgbGV0IGludGVycCA9IGludGVycG9sYXRlW3Byb3BlcnR5U3BlYy50eXBlXSB8fCBpZGVudGl0eUZ1bmN0aW9uO1xuICAgIGlmIChwYXJhbWV0ZXJzLmNvbG9yU3BhY2UgJiYgcGFyYW1ldGVycy5jb2xvclNwYWNlICE9PSAncmdiJykge1xuICAgICAgICBjb25zdCBjb2xvcnNwYWNlID0gY29sb3JTcGFjZXNbcGFyYW1ldGVycy5jb2xvclNwYWNlXTtcbiAgICAgICAgaW50ZXJwID0gKGEsIGIpID0+IGNvbG9yc3BhY2UucmV2ZXJzZShjb2xvcnNwYWNlLmludGVycG9sYXRlKGNvbG9yc3BhY2UuZm9yd2FyZChhKSwgY29sb3JzcGFjZS5mb3J3YXJkKGIpLCB0KSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3V0cHV0TG93ZXIuZXZhbHVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV2YWx1YXRlKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBldmFsdWF0ZWRMb3dlciA9IG91dHB1dExvd2VyLmV2YWx1YXRlLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZhbHVhdGVkVXBwZXIgPSBvdXRwdXRVcHBlci5ldmFsdWF0ZS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmIChldmFsdWF0ZWRMb3dlciA9PT0gdW5kZWZpbmVkIHx8IGV2YWx1YXRlZFVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGludGVycChldmFsdWF0ZWRMb3dlciwgZXZhbHVhdGVkVXBwZXIsIHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJwKG91dHB1dExvd2VyLCBvdXRwdXRVcHBlciwgdCk7XG59XG5mdW5jdGlvbiBldmFsdWF0ZUlkZW50aXR5RnVuY3Rpb24ocGFyYW1ldGVycywgcHJvcGVydHlTcGVjLCBpbnB1dCkge1xuICAgIGlmIChwcm9wZXJ0eVNwZWMudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgICAgICBpbnB1dCA9IENvbG9yJDEucGFyc2UoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAocHJvcGVydHlTcGVjLnR5cGUgPT09ICdmb3JtYXR0ZWQnKSB7XG4gICAgICAgIGlucHV0ID0gRm9ybWF0dGVkLmZyb21TdHJpbmcoaW5wdXQudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eVNwZWMudHlwZSA9PT0gJ3Jlc29sdmVkSW1hZ2UnKSB7XG4gICAgICAgIGlucHV0ID0gUmVzb2x2ZWRJbWFnZS5mcm9tU3RyaW5nKGlucHV0LnRvU3RyaW5nKCkpO1xuICAgIH0gZWxzZSBpZiAoZ2V0VHlwZShpbnB1dCkgIT09IHByb3BlcnR5U3BlYy50eXBlICYmIChwcm9wZXJ0eVNwZWMudHlwZSAhPT0gJ2VudW0nIHx8ICFwcm9wZXJ0eVNwZWMudmFsdWVzW2lucHV0XSkpIHtcbiAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBjb2FsZXNjZSQxKGlucHV0LCBwYXJhbWV0ZXJzLmRlZmF1bHQsIHByb3BlcnR5U3BlYy5kZWZhdWx0KTtcbn1cbmZ1bmN0aW9uIGludGVycG9sYXRpb25GYWN0b3IoaW5wdXQsIGJhc2UsIGxvd2VyVmFsdWUsIHVwcGVyVmFsdWUpIHtcbiAgICBjb25zdCBkaWZmZXJlbmNlID0gdXBwZXJWYWx1ZSAtIGxvd2VyVmFsdWU7XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBpbnB1dCAtIGxvd2VyVmFsdWU7XG4gICAgaWYgKGRpZmZlcmVuY2UgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmIChiYXNlID09PSAxKSB7XG4gICAgICAgIHJldHVybiBwcm9ncmVzcyAvIGRpZmZlcmVuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChNYXRoLnBvdyhiYXNlLCBwcm9ncmVzcykgLSAxKSAvIChNYXRoLnBvdyhiYXNlLCBkaWZmZXJlbmNlKSAtIDEpO1xuICAgIH1cbn1cblxuY2xhc3MgU3R5bGVFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihleHByZXNzaW9uLCBwcm9wZXJ0eVNwZWMpIHtcbiAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICAgICAgdGhpcy5fd2FybmluZ0hpc3RvcnkgPSB7fTtcbiAgICAgICAgdGhpcy5fZXZhbHVhdG9yID0gbmV3IEV2YWx1YXRpb25Db250ZXh0JDEoKTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gcHJvcGVydHlTcGVjID8gZ2V0RGVmYXVsdFZhbHVlKHByb3BlcnR5U3BlYykgOiBudWxsO1xuICAgICAgICB0aGlzLl9lbnVtVmFsdWVzID0gcHJvcGVydHlTcGVjICYmIHByb3BlcnR5U3BlYy50eXBlID09PSAnZW51bScgPyBwcm9wZXJ0eVNwZWMudmFsdWVzIDogbnVsbDtcbiAgICB9XG4gICAgZXZhbHVhdGVXaXRob3V0RXJyb3JIYW5kbGluZyhnbG9iYWxzLCBmZWF0dXJlLCBmZWF0dXJlU3RhdGUsIGNhbm9uaWNhbCwgYXZhaWxhYmxlSW1hZ2VzLCBmb3JtYXR0ZWRTZWN0aW9uLCBmZWF0dXJlVGlsZUNvb3JkLCBmZWF0dXJlRGlzdGFuY2VEYXRhKSB7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRvci5nbG9iYWxzID0gZ2xvYmFscztcbiAgICAgICAgdGhpcy5fZXZhbHVhdG9yLmZlYXR1cmUgPSBmZWF0dXJlO1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IuZmVhdHVyZVN0YXRlID0gZmVhdHVyZVN0YXRlO1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IuY2Fub25pY2FsID0gY2Fub25pY2FsIHx8IG51bGw7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRvci5hdmFpbGFibGVJbWFnZXMgPSBhdmFpbGFibGVJbWFnZXMgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fZXZhbHVhdG9yLmZvcm1hdHRlZFNlY3Rpb24gPSBmb3JtYXR0ZWRTZWN0aW9uO1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IuZmVhdHVyZVRpbGVDb29yZCA9IGZlYXR1cmVUaWxlQ29vcmQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fZXZhbHVhdG9yLmZlYXR1cmVEaXN0YW5jZURhdGEgPSBmZWF0dXJlRGlzdGFuY2VEYXRhIHx8IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb24uZXZhbHVhdGUodGhpcy5fZXZhbHVhdG9yKTtcbiAgICB9XG4gICAgZXZhbHVhdGUoZ2xvYmFscywgZmVhdHVyZSwgZmVhdHVyZVN0YXRlLCBjYW5vbmljYWwsIGF2YWlsYWJsZUltYWdlcywgZm9ybWF0dGVkU2VjdGlvbiwgZmVhdHVyZVRpbGVDb29yZCwgZmVhdHVyZURpc3RhbmNlRGF0YSkge1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IuZ2xvYmFscyA9IGdsb2JhbHM7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRvci5mZWF0dXJlID0gZmVhdHVyZSB8fCBudWxsO1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IuZmVhdHVyZVN0YXRlID0gZmVhdHVyZVN0YXRlIHx8IG51bGw7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRvci5jYW5vbmljYWwgPSBjYW5vbmljYWwgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fZXZhbHVhdG9yLmF2YWlsYWJsZUltYWdlcyA9IGF2YWlsYWJsZUltYWdlcyB8fCBudWxsO1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IuZm9ybWF0dGVkU2VjdGlvbiA9IGZvcm1hdHRlZFNlY3Rpb24gfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fZXZhbHVhdG9yLmZlYXR1cmVUaWxlQ29vcmQgPSBmZWF0dXJlVGlsZUNvb3JkIHx8IG51bGw7XG4gICAgICAgIHRoaXMuX2V2YWx1YXRvci5mZWF0dXJlRGlzdGFuY2VEYXRhID0gZmVhdHVyZURpc3RhbmNlRGF0YSB8fCBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5leHByZXNzaW9uLmV2YWx1YXRlKHRoaXMuX2V2YWx1YXRvcik7XG4gICAgICAgICAgICBpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmIHZhbCAhPT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9lbnVtVmFsdWVzICYmICEodmFsIGluIHRoaXMuX2VudW1WYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvciQxKGBFeHBlY3RlZCB2YWx1ZSB0byBiZSBvbmUgb2YgJHsgT2JqZWN0LmtleXModGhpcy5fZW51bVZhbHVlcykubWFwKHYgPT4gSlNPTi5zdHJpbmdpZnkodikpLmpvaW4oJywgJykgfSwgYnV0IGZvdW5kICR7IEpTT04uc3RyaW5naWZ5KHZhbCkgfSBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl93YXJuaW5nSGlzdG9yeVtlLm1lc3NhZ2VdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2FybmluZ0hpc3RvcnlbZS5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShleHByZXNzaW9uKSAmJiBleHByZXNzaW9uLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGV4cHJlc3Npb25bMF0gPT09ICdzdHJpbmcnICYmIGV4cHJlc3Npb25bMF0gaW4gZGVmaW5pdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24sIHByb3BlcnR5U3BlYykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzaW5nQ29udGV4dCQxKGRlZmluaXRpb25zLCBbXSwgcHJvcGVydHlTcGVjID8gZ2V0RXhwZWN0ZWRUeXBlKHByb3BlcnR5U3BlYykgOiB1bmRlZmluZWQpO1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlci5wYXJzZShleHByZXNzaW9uLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBwcm9wZXJ0eVNwZWMgJiYgcHJvcGVydHlTcGVjLnR5cGUgPT09ICdzdHJpbmcnID8geyB0eXBlQW5ub3RhdGlvbjogJ2NvZXJjZScgfSA6IHVuZGVmaW5lZCk7XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKHBhcnNlci5lcnJvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gc3VjY2VzcyhuZXcgU3R5bGVFeHByZXNzaW9uKHBhcnNlZCwgcHJvcGVydHlTcGVjKSk7XG59XG5jbGFzcyBab29tQ29uc3RhbnRFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihraW5kLCBleHByZXNzaW9uKSB7XG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMuX3N0eWxlRXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICAgIHRoaXMuaXNTdGF0ZURlcGVuZGVudCA9IGtpbmQgIT09ICdjb25zdGFudCcgJiYgIWlzU3RhdGVDb25zdGFudChleHByZXNzaW9uLmV4cHJlc3Npb24pO1xuICAgIH1cbiAgICBldmFsdWF0ZVdpdGhvdXRFcnJvckhhbmRsaW5nKGdsb2JhbHMsIGZlYXR1cmUsIGZlYXR1cmVTdGF0ZSwgY2Fub25pY2FsLCBhdmFpbGFibGVJbWFnZXMsIGZvcm1hdHRlZFNlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlRXhwcmVzc2lvbi5ldmFsdWF0ZVdpdGhvdXRFcnJvckhhbmRsaW5nKGdsb2JhbHMsIGZlYXR1cmUsIGZlYXR1cmVTdGF0ZSwgY2Fub25pY2FsLCBhdmFpbGFibGVJbWFnZXMsIGZvcm1hdHRlZFNlY3Rpb24pO1xuICAgIH1cbiAgICBldmFsdWF0ZShnbG9iYWxzLCBmZWF0dXJlLCBmZWF0dXJlU3RhdGUsIGNhbm9uaWNhbCwgYXZhaWxhYmxlSW1hZ2VzLCBmb3JtYXR0ZWRTZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZUV4cHJlc3Npb24uZXZhbHVhdGUoZ2xvYmFscywgZmVhdHVyZSwgZmVhdHVyZVN0YXRlLCBjYW5vbmljYWwsIGF2YWlsYWJsZUltYWdlcywgZm9ybWF0dGVkU2VjdGlvbik7XG4gICAgfVxufVxuY2xhc3MgWm9vbURlcGVuZGVudEV4cHJlc3Npb24ge1xuICAgIGNvbnN0cnVjdG9yKGtpbmQsIGV4cHJlc3Npb24sIHpvb21TdG9wcywgaW50ZXJwb2xhdGlvblR5cGUpIHtcbiAgICAgICAgdGhpcy5raW5kID0ga2luZDtcbiAgICAgICAgdGhpcy56b29tU3RvcHMgPSB6b29tU3RvcHM7XG4gICAgICAgIHRoaXMuX3N0eWxlRXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICAgIHRoaXMuaXNTdGF0ZURlcGVuZGVudCA9IGtpbmQgIT09ICdjYW1lcmEnICYmICFpc1N0YXRlQ29uc3RhbnQoZXhwcmVzc2lvbi5leHByZXNzaW9uKTtcbiAgICAgICAgdGhpcy5pbnRlcnBvbGF0aW9uVHlwZSA9IGludGVycG9sYXRpb25UeXBlO1xuICAgIH1cbiAgICBldmFsdWF0ZVdpdGhvdXRFcnJvckhhbmRsaW5nKGdsb2JhbHMsIGZlYXR1cmUsIGZlYXR1cmVTdGF0ZSwgY2Fub25pY2FsLCBhdmFpbGFibGVJbWFnZXMsIGZvcm1hdHRlZFNlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlRXhwcmVzc2lvbi5ldmFsdWF0ZVdpdGhvdXRFcnJvckhhbmRsaW5nKGdsb2JhbHMsIGZlYXR1cmUsIGZlYXR1cmVTdGF0ZSwgY2Fub25pY2FsLCBhdmFpbGFibGVJbWFnZXMsIGZvcm1hdHRlZFNlY3Rpb24pO1xuICAgIH1cbiAgICBldmFsdWF0ZShnbG9iYWxzLCBmZWF0dXJlLCBmZWF0dXJlU3RhdGUsIGNhbm9uaWNhbCwgYXZhaWxhYmxlSW1hZ2VzLCBmb3JtYXR0ZWRTZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHlsZUV4cHJlc3Npb24uZXZhbHVhdGUoZ2xvYmFscywgZmVhdHVyZSwgZmVhdHVyZVN0YXRlLCBjYW5vbmljYWwsIGF2YWlsYWJsZUltYWdlcywgZm9ybWF0dGVkU2VjdGlvbik7XG4gICAgfVxuICAgIGludGVycG9sYXRpb25GYWN0b3IoaW5wdXQsIGxvd2VyLCB1cHBlcikge1xuICAgICAgICBpZiAodGhpcy5pbnRlcnBvbGF0aW9uVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIEludGVycG9sYXRlJDEuaW50ZXJwb2xhdGlvbkZhY3Rvcih0aGlzLmludGVycG9sYXRpb25UeXBlLCBpbnB1dCwgbG93ZXIsIHVwcGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlFeHByZXNzaW9uKGV4cHJlc3Npb24sIHByb3BlcnR5U3BlYykge1xuICAgIGV4cHJlc3Npb24gPSBjcmVhdGVFeHByZXNzaW9uKGV4cHJlc3Npb24sIHByb3BlcnR5U3BlYyk7XG4gICAgaWYgKGV4cHJlc3Npb24ucmVzdWx0ID09PSAnZXJyb3InKSB7XG4gICAgICAgIHJldHVybiBleHByZXNzaW9uO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZWQgPSBleHByZXNzaW9uLnZhbHVlLmV4cHJlc3Npb247XG4gICAgY29uc3QgaXNGZWF0dXJlQ29uc3RhbnQkMSA9IGlzRmVhdHVyZUNvbnN0YW50KHBhcnNlZCk7XG4gICAgaWYgKCFpc0ZlYXR1cmVDb25zdGFudCQxICYmICFzdXBwb3J0c1Byb3BlcnR5RXhwcmVzc2lvbihwcm9wZXJ0eVNwZWMpKSB7XG4gICAgICAgIHJldHVybiBlcnJvcihbbmV3IFBhcnNpbmdFcnJvciQyKCcnLCAnZGF0YSBleHByZXNzaW9ucyBub3Qgc3VwcG9ydGVkJyldKTtcbiAgICB9XG4gICAgY29uc3QgaXNab29tQ29uc3RhbnQgPSBpc0dsb2JhbFByb3BlcnR5Q29uc3RhbnQocGFyc2VkLCBbXG4gICAgICAgICd6b29tJyxcbiAgICAgICAgJ3BpdGNoJyxcbiAgICAgICAgJ2Rpc3RhbmNlLWZyb20tY2VudGVyJ1xuICAgIF0pO1xuICAgIGlmICghaXNab29tQ29uc3RhbnQgJiYgIXN1cHBvcnRzWm9vbUV4cHJlc3Npb24ocHJvcGVydHlTcGVjKSkge1xuICAgICAgICByZXR1cm4gZXJyb3IoW25ldyBQYXJzaW5nRXJyb3IkMignJywgJ3pvb20gZXhwcmVzc2lvbnMgbm90IHN1cHBvcnRlZCcpXSk7XG4gICAgfVxuICAgIGNvbnN0IHpvb21DdXJ2ZSA9IGZpbmRab29tQ3VydmUocGFyc2VkKTtcbiAgICBpZiAoIXpvb21DdXJ2ZSAmJiAhaXNab29tQ29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yKFtuZXcgUGFyc2luZ0Vycm9yJDIoJycsICdcInpvb21cIiBleHByZXNzaW9uIG1heSBvbmx5IGJlIHVzZWQgYXMgaW5wdXQgdG8gYSB0b3AtbGV2ZWwgXCJzdGVwXCIgb3IgXCJpbnRlcnBvbGF0ZVwiIGV4cHJlc3Npb24uJyldKTtcbiAgICB9IGVsc2UgaWYgKHpvb21DdXJ2ZSBpbnN0YW5jZW9mIFBhcnNpbmdFcnJvciQyKSB7XG4gICAgICAgIHJldHVybiBlcnJvcihbem9vbUN1cnZlXSk7XG4gICAgfSBlbHNlIGlmICh6b29tQ3VydmUgaW5zdGFuY2VvZiBJbnRlcnBvbGF0ZSQxICYmICFzdXBwb3J0c0ludGVycG9sYXRpb24ocHJvcGVydHlTcGVjKSkge1xuICAgICAgICByZXR1cm4gZXJyb3IoW25ldyBQYXJzaW5nRXJyb3IkMignJywgJ1wiaW50ZXJwb2xhdGVcIiBleHByZXNzaW9ucyBjYW5ub3QgYmUgdXNlZCB3aXRoIHRoaXMgcHJvcGVydHknKV0pO1xuICAgIH1cbiAgICBpZiAoIXpvb21DdXJ2ZSkge1xuICAgICAgICByZXR1cm4gc3VjY2Vzcyhpc0ZlYXR1cmVDb25zdGFudCQxID8gbmV3IFpvb21Db25zdGFudEV4cHJlc3Npb24oJ2NvbnN0YW50JywgZXhwcmVzc2lvbi52YWx1ZSkgOiBuZXcgWm9vbUNvbnN0YW50RXhwcmVzc2lvbignc291cmNlJywgZXhwcmVzc2lvbi52YWx1ZSkpO1xuICAgIH1cbiAgICBjb25zdCBpbnRlcnBvbGF0aW9uVHlwZSA9IHpvb21DdXJ2ZSBpbnN0YW5jZW9mIEludGVycG9sYXRlJDEgPyB6b29tQ3VydmUuaW50ZXJwb2xhdGlvbiA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3VjY2Vzcyhpc0ZlYXR1cmVDb25zdGFudCQxID8gbmV3IFpvb21EZXBlbmRlbnRFeHByZXNzaW9uKCdjYW1lcmEnLCBleHByZXNzaW9uLnZhbHVlLCB6b29tQ3VydmUubGFiZWxzLCBpbnRlcnBvbGF0aW9uVHlwZSkgOiBuZXcgWm9vbURlcGVuZGVudEV4cHJlc3Npb24oJ2NvbXBvc2l0ZScsIGV4cHJlc3Npb24udmFsdWUsIHpvb21DdXJ2ZS5sYWJlbHMsIGludGVycG9sYXRpb25UeXBlKSk7XG59XG5jbGFzcyBTdHlsZVByb3BlcnR5RnVuY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMsIHNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMuX3NwZWNpZmljYXRpb24gPSBzcGVjaWZpY2F0aW9uO1xuICAgICAgICBleHRlbmQodGhpcywgY3JlYXRlRnVuY3Rpb24odGhpcy5fcGFyYW1ldGVycywgdGhpcy5fc3BlY2lmaWNhdGlvbikpO1xuICAgIH1cbiAgICBzdGF0aWMgZGVzZXJpYWxpemUoc2VyaWFsaXplZCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0eWxlUHJvcGVydHlGdW5jdGlvbihzZXJpYWxpemVkLl9wYXJhbWV0ZXJzLCBzZXJpYWxpemVkLl9zcGVjaWZpY2F0aW9uKTtcbiAgICB9XG4gICAgc3RhdGljIHNlcmlhbGl6ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX3BhcmFtZXRlcnM6IGlucHV0Ll9wYXJhbWV0ZXJzLFxuICAgICAgICAgICAgX3NwZWNpZmljYXRpb246IGlucHV0Ll9zcGVjaWZpY2F0aW9uXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydHlFeHByZXNzaW9uKHZhbHVlLCBzcGVjaWZpY2F0aW9uKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3R5bGVQcm9wZXJ0eUZ1bmN0aW9uKHZhbHVlLCBzcGVjaWZpY2F0aW9uKTtcbiAgICB9IGVsc2UgaWYgKGlzRXhwcmVzc2lvbih2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGNyZWF0ZVByb3BlcnR5RXhwcmVzc2lvbih2YWx1ZSwgc3BlY2lmaWNhdGlvbik7XG4gICAgICAgIGlmIChleHByZXNzaW9uLnJlc3VsdCA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGV4cHJlc3Npb24udmFsdWUubWFwKGVyciA9PiBgJHsgZXJyLmtleSB9OiAkeyBlcnIubWVzc2FnZSB9YCkuam9pbignLCAnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb24udmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGNvbnN0YW50ID0gdmFsdWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHNwZWNpZmljYXRpb24udHlwZSA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgICAgY29uc3RhbnQgPSBDb2xvciQxLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogJ2NvbnN0YW50JyxcbiAgICAgICAgICAgIGV2YWx1YXRlOiAoKSA9PiBjb25zdGFudFxuICAgICAgICB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbmRab29tQ3VydmUoZXhwcmVzc2lvbikge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTGV0JDEpIHtcbiAgICAgICAgcmVzdWx0ID0gZmluZFpvb21DdXJ2ZShleHByZXNzaW9uLnJlc3VsdCk7XG4gICAgfSBlbHNlIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgQ29hbGVzY2UkMSkge1xuICAgICAgICBmb3IgKGNvbnN0IGFyZyBvZiBleHByZXNzaW9uLmFyZ3MpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZpbmRab29tQ3VydmUoYXJnKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBTdGVwJDEgfHwgZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEludGVycG9sYXRlJDEpICYmIGV4cHJlc3Npb24uaW5wdXQgaW5zdGFuY2VvZiBDb21wb3VuZEV4cHJlc3Npb24kMSAmJiBleHByZXNzaW9uLmlucHV0Lm5hbWUgPT09ICd6b29tJykge1xuICAgICAgICByZXN1bHQgPSBleHByZXNzaW9uO1xuICAgIH1cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUGFyc2luZ0Vycm9yJDIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZXhwcmVzc2lvbi5lYWNoQ2hpbGQoY2hpbGQgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZFJlc3VsdCA9IGZpbmRab29tQ3VydmUoY2hpbGQpO1xuICAgICAgICBpZiAoY2hpbGRSZXN1bHQgaW5zdGFuY2VvZiBQYXJzaW5nRXJyb3IkMikge1xuICAgICAgICAgICAgcmVzdWx0ID0gY2hpbGRSZXN1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXJlc3VsdCAmJiBjaGlsZFJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFBhcnNpbmdFcnJvciQyKCcnLCAnXCJ6b29tXCIgZXhwcmVzc2lvbiBtYXkgb25seSBiZSB1c2VkIGFzIGlucHV0IHRvIGEgdG9wLWxldmVsIFwic3RlcFwiIG9yIFwiaW50ZXJwb2xhdGVcIiBleHByZXNzaW9uLicpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAmJiBjaGlsZFJlc3VsdCAmJiByZXN1bHQgIT09IGNoaWxkUmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgUGFyc2luZ0Vycm9yJDIoJycsICdPbmx5IG9uZSB6b29tLWJhc2VkIFwic3RlcFwiIG9yIFwiaW50ZXJwb2xhdGVcIiBzdWJleHByZXNzaW9uIG1heSBiZSB1c2VkIGluIGFuIGV4cHJlc3Npb24uJyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0RXhwZWN0ZWRUeXBlKHNwZWMpIHtcbiAgICBjb25zdCB0eXBlcyA9IHtcbiAgICAgICAgY29sb3I6IENvbG9yVHlwZSxcbiAgICAgICAgc3RyaW5nOiBTdHJpbmdUeXBlLFxuICAgICAgICBudW1iZXI6IE51bWJlclR5cGUsXG4gICAgICAgIGVudW06IFN0cmluZ1R5cGUsXG4gICAgICAgIGJvb2xlYW46IEJvb2xlYW5UeXBlLFxuICAgICAgICBmb3JtYXR0ZWQ6IEZvcm1hdHRlZFR5cGUsXG4gICAgICAgIHJlc29sdmVkSW1hZ2U6IFJlc29sdmVkSW1hZ2VUeXBlXG4gICAgfTtcbiAgICBpZiAoc3BlYy50eXBlID09PSAnYXJyYXknKSB7XG4gICAgICAgIHJldHVybiBhcnJheSQxKHR5cGVzW3NwZWMudmFsdWVdIHx8IFZhbHVlVHlwZSwgc3BlYy5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZXNbc3BlYy50eXBlXTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRWYWx1ZShzcGVjKSB7XG4gICAgaWYgKHNwZWMudHlwZSA9PT0gJ2NvbG9yJyAmJiAoaXNGdW5jdGlvbihzcGVjLmRlZmF1bHQpIHx8IEFycmF5LmlzQXJyYXkoc3BlYy5kZWZhdWx0KSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvciQxKDAsIDAsIDAsIDApO1xuICAgIH0gZWxzZSBpZiAoc3BlYy50eXBlID09PSAnY29sb3InKSB7XG4gICAgICAgIHJldHVybiBDb2xvciQxLnBhcnNlKHNwZWMuZGVmYXVsdCkgfHwgbnVsbDtcbiAgICB9IGVsc2UgaWYgKHNwZWMuZGVmYXVsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzcGVjLmRlZmF1bHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0TGl0ZXJhbCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gW1xuICAgICAgICAnbGl0ZXJhbCcsXG4gICAgICAgIHZhbHVlXG4gICAgXSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydEZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYykge1xuICAgIGxldCBzdG9wcyA9IHBhcmFtZXRlcnMuc3RvcHM7XG4gICAgaWYgKCFzdG9wcykge1xuICAgICAgICByZXR1cm4gY29udmVydElkZW50aXR5RnVuY3Rpb24ocGFyYW1ldGVycywgcHJvcGVydHlTcGVjKTtcbiAgICB9XG4gICAgY29uc3Qgem9vbUFuZEZlYXR1cmVEZXBlbmRlbnQgPSBzdG9wcyAmJiB0eXBlb2Ygc3RvcHNbMF1bMF0gPT09ICdvYmplY3QnO1xuICAgIGNvbnN0IGZlYXR1cmVEZXBlbmRlbnQgPSB6b29tQW5kRmVhdHVyZURlcGVuZGVudCB8fCBwYXJhbWV0ZXJzLnByb3BlcnR5ICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgem9vbURlcGVuZGVudCA9IHpvb21BbmRGZWF0dXJlRGVwZW5kZW50IHx8ICFmZWF0dXJlRGVwZW5kZW50O1xuICAgIHN0b3BzID0gc3RvcHMubWFwKHN0b3AgPT4ge1xuICAgICAgICBpZiAoIWZlYXR1cmVEZXBlbmRlbnQgJiYgcHJvcGVydHlTcGVjLnRva2VucyAmJiB0eXBlb2Ygc3RvcFsxXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgc3RvcFswXSxcbiAgICAgICAgICAgICAgICBjb252ZXJ0VG9rZW5TdHJpbmcoc3RvcFsxXSlcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHN0b3BbMF0sXG4gICAgICAgICAgICBjb252ZXJ0TGl0ZXJhbChzdG9wWzFdKVxuICAgICAgICBdO1xuICAgIH0pO1xuICAgIGlmICh6b29tQW5kRmVhdHVyZURlcGVuZGVudCkge1xuICAgICAgICByZXR1cm4gY29udmVydFpvb21BbmRQcm9wZXJ0eUZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgc3RvcHMpO1xuICAgIH0gZWxzZSBpZiAoem9vbURlcGVuZGVudCkge1xuICAgICAgICByZXR1cm4gY29udmVydFpvb21GdW5jdGlvbihwYXJhbWV0ZXJzLCBwcm9wZXJ0eVNwZWMsIHN0b3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udmVydFByb3BlcnR5RnVuY3Rpb24ocGFyYW1ldGVycywgcHJvcGVydHlTcGVjLCBzdG9wcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29udmVydElkZW50aXR5RnVuY3Rpb24ocGFyYW1ldGVycywgcHJvcGVydHlTcGVjKSB7XG4gICAgY29uc3QgZ2V0ID0gW1xuICAgICAgICAnZ2V0JyxcbiAgICAgICAgcGFyYW1ldGVycy5wcm9wZXJ0eVxuICAgIF07XG4gICAgaWYgKHBhcmFtZXRlcnMuZGVmYXVsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eVNwZWMudHlwZSA9PT0gJ3N0cmluZycgPyBbXG4gICAgICAgICAgICAnc3RyaW5nJyxcbiAgICAgICAgICAgIGdldFxuICAgICAgICBdIDogZ2V0O1xuICAgIH0gZWxzZSBpZiAocHJvcGVydHlTcGVjLnR5cGUgPT09ICdlbnVtJykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ21hdGNoJyxcbiAgICAgICAgICAgIGdldCxcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BlcnR5U3BlYy52YWx1ZXMpLFxuICAgICAgICAgICAgZ2V0LFxuICAgICAgICAgICAgcGFyYW1ldGVycy5kZWZhdWx0XG4gICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IFtcbiAgICAgICAgICAgIHByb3BlcnR5U3BlYy50eXBlID09PSAnY29sb3InID8gJ3RvLWNvbG9yJyA6IHByb3BlcnR5U3BlYy50eXBlLFxuICAgICAgICAgICAgZ2V0LFxuICAgICAgICAgICAgY29udmVydExpdGVyYWwocGFyYW1ldGVycy5kZWZhdWx0KVxuICAgICAgICBdO1xuICAgICAgICBpZiAocHJvcGVydHlTcGVjLnR5cGUgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgIGV4cHJlc3Npb24uc3BsaWNlKDEsIDAsIHByb3BlcnR5U3BlYy52YWx1ZSwgcHJvcGVydHlTcGVjLmxlbmd0aCB8fCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZU9wZXJhdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzd2l0Y2ggKHBhcmFtZXRlcnMuY29sb3JTcGFjZSkge1xuICAgIGNhc2UgJ2hjbCc6XG4gICAgICAgIHJldHVybiAnaW50ZXJwb2xhdGUtaGNsJztcbiAgICBjYXNlICdsYWInOlxuICAgICAgICByZXR1cm4gJ2ludGVycG9sYXRlLWxhYic7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdpbnRlcnBvbGF0ZSc7XG4gICAgfVxufVxuZnVuY3Rpb24gY29udmVydFpvb21BbmRQcm9wZXJ0eUZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgc3RvcHMpIHtcbiAgICBjb25zdCBmZWF0dXJlRnVuY3Rpb25QYXJhbWV0ZXJzID0ge307XG4gICAgY29uc3QgZmVhdHVyZUZ1bmN0aW9uU3RvcHMgPSB7fTtcbiAgICBjb25zdCB6b29tU3RvcHMgPSBbXTtcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IHN0b3BzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgIGNvbnN0IHN0b3AgPSBzdG9wc1tzXTtcbiAgICAgICAgY29uc3Qgem9vbSA9IHN0b3BbMF0uem9vbTtcbiAgICAgICAgaWYgKGZlYXR1cmVGdW5jdGlvblBhcmFtZXRlcnNbem9vbV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmVhdHVyZUZ1bmN0aW9uUGFyYW1ldGVyc1t6b29tXSA9IHtcbiAgICAgICAgICAgICAgICB6b29tLFxuICAgICAgICAgICAgICAgIHR5cGU6IHBhcmFtZXRlcnMudHlwZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogcGFyYW1ldGVycy5wcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBwYXJhbWV0ZXJzLmRlZmF1bHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmZWF0dXJlRnVuY3Rpb25TdG9wc1t6b29tXSA9IFtdO1xuICAgICAgICAgICAgem9vbVN0b3BzLnB1c2goem9vbSk7XG4gICAgICAgIH1cbiAgICAgICAgZmVhdHVyZUZ1bmN0aW9uU3RvcHNbem9vbV0ucHVzaChbXG4gICAgICAgICAgICBzdG9wWzBdLnZhbHVlLFxuICAgICAgICAgICAgc3RvcFsxXVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY29uc3QgZnVuY3Rpb25UeXBlID0gZ2V0RnVuY3Rpb25UeXBlKHt9LCBwcm9wZXJ0eVNwZWMpO1xuICAgIGlmIChmdW5jdGlvblR5cGUgPT09ICdleHBvbmVudGlhbCcpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IFtcbiAgICAgICAgICAgIGdldEludGVycG9sYXRlT3BlcmF0b3IocGFyYW1ldGVycyksXG4gICAgICAgICAgICBbJ2xpbmVhciddLFxuICAgICAgICAgICAgWyd6b29tJ11cbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChjb25zdCB6IG9mIHpvb21TdG9wcykge1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gY29udmVydFByb3BlcnR5RnVuY3Rpb24oZmVhdHVyZUZ1bmN0aW9uUGFyYW1ldGVyc1t6XSwgcHJvcGVydHlTcGVjLCBmZWF0dXJlRnVuY3Rpb25TdG9wc1t6XSk7XG4gICAgICAgICAgICBhcHBlbmRTdG9wUGFpcihleHByZXNzaW9uLCB6LCBvdXRwdXQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gW1xuICAgICAgICAgICAgJ3N0ZXAnLFxuICAgICAgICAgICAgWyd6b29tJ11cbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChjb25zdCB6IG9mIHpvb21TdG9wcykge1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gY29udmVydFByb3BlcnR5RnVuY3Rpb24oZmVhdHVyZUZ1bmN0aW9uUGFyYW1ldGVyc1t6XSwgcHJvcGVydHlTcGVjLCBmZWF0dXJlRnVuY3Rpb25TdG9wc1t6XSk7XG4gICAgICAgICAgICBhcHBlbmRTdG9wUGFpcihleHByZXNzaW9uLCB6LCBvdXRwdXQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZpeHVwRGVnZW5lcmF0ZVN0ZXBDdXJ2ZShleHByZXNzaW9uKTtcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb247XG4gICAgfVxufVxuZnVuY3Rpb24gY29hbGVzY2UoYSwgYikge1xuICAgIGlmIChhICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBhO1xuICAgIGlmIChiICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBiO1xufVxuZnVuY3Rpb24gZ2V0RmFsbGJhY2socGFyYW1ldGVycywgcHJvcGVydHlTcGVjKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gY29udmVydExpdGVyYWwoY29hbGVzY2UocGFyYW1ldGVycy5kZWZhdWx0LCBwcm9wZXJ0eVNwZWMuZGVmYXVsdCkpO1xuICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCAmJiBwcm9wZXJ0eVNwZWMudHlwZSA9PT0gJ3Jlc29sdmVkSW1hZ2UnKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRQcm9wZXJ0eUZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgc3RvcHMpIHtcbiAgICBjb25zdCB0eXBlID0gZ2V0RnVuY3Rpb25UeXBlKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYyk7XG4gICAgY29uc3QgZ2V0ID0gW1xuICAgICAgICAnZ2V0JyxcbiAgICAgICAgcGFyYW1ldGVycy5wcm9wZXJ0eVxuICAgIF07XG4gICAgaWYgKHR5cGUgPT09ICdjYXRlZ29yaWNhbCcgJiYgdHlwZW9mIHN0b3BzWzBdWzBdID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IFsnY2FzZSddO1xuICAgICAgICBmb3IgKGNvbnN0IHN0b3Agb2Ygc3RvcHMpIHtcbiAgICAgICAgICAgIGV4cHJlc3Npb24ucHVzaChbXG4gICAgICAgICAgICAgICAgJz09JyxcbiAgICAgICAgICAgICAgICBnZXQsXG4gICAgICAgICAgICAgICAgc3RvcFswXVxuICAgICAgICAgICAgXSwgc3RvcFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwcmVzc2lvbi5wdXNoKGdldEZhbGxiYWNrKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYykpO1xuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjYXRlZ29yaWNhbCcpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IFtcbiAgICAgICAgICAgICdtYXRjaCcsXG4gICAgICAgICAgICBnZXRcbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChjb25zdCBzdG9wIG9mIHN0b3BzKSB7XG4gICAgICAgICAgICBhcHBlbmRTdG9wUGFpcihleHByZXNzaW9uLCBzdG9wWzBdLCBzdG9wWzFdLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwcmVzc2lvbi5wdXNoKGdldEZhbGxiYWNrKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYykpO1xuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbnRlcnZhbCcpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IFtcbiAgICAgICAgICAgICdzdGVwJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBnZXRcbiAgICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICAgICAgZm9yIChjb25zdCBzdG9wIG9mIHN0b3BzKSB7XG4gICAgICAgICAgICBhcHBlbmRTdG9wUGFpcihleHByZXNzaW9uLCBzdG9wWzBdLCBzdG9wWzFdLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmaXh1cERlZ2VuZXJhdGVTdGVwQ3VydmUoZXhwcmVzc2lvbik7XG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLmRlZmF1bHQgPT09IHVuZGVmaW5lZCA/IGV4cHJlc3Npb24gOiBbXG4gICAgICAgICAgICAnY2FzZScsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJz09JyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICd0eXBlb2YnLFxuICAgICAgICAgICAgICAgICAgICBnZXRcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdudW1iZXInXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICAgIGNvbnZlcnRMaXRlcmFsKHBhcmFtZXRlcnMuZGVmYXVsdClcbiAgICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdleHBvbmVudGlhbCcpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHBhcmFtZXRlcnMuYmFzZSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5iYXNlIDogMTtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IFtcbiAgICAgICAgICAgIGdldEludGVycG9sYXRlT3BlcmF0b3IocGFyYW1ldGVycyksXG4gICAgICAgICAgICBiYXNlID09PSAxID8gWydsaW5lYXInXSA6IFtcbiAgICAgICAgICAgICAgICAnZXhwb25lbnRpYWwnLFxuICAgICAgICAgICAgICAgIGJhc2VcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ251bWJlcicsXG4gICAgICAgICAgICAgICAgZ2V0XG4gICAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgICAgIGZvciAoY29uc3Qgc3RvcCBvZiBzdG9wcykge1xuICAgICAgICAgICAgYXBwZW5kU3RvcFBhaXIoZXhwcmVzc2lvbiwgc3RvcFswXSwgc3RvcFsxXSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJhbWV0ZXJzLmRlZmF1bHQgPT09IHVuZGVmaW5lZCA/IGV4cHJlc3Npb24gOiBbXG4gICAgICAgICAgICAnY2FzZScsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJz09JyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICd0eXBlb2YnLFxuICAgICAgICAgICAgICAgICAgICBnZXRcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICdudW1iZXInXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXhwcmVzc2lvbixcbiAgICAgICAgICAgIGNvbnZlcnRMaXRlcmFsKHBhcmFtZXRlcnMuZGVmYXVsdClcbiAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gcHJvcGVydHkgZnVuY3Rpb24gdHlwZSAkeyB0eXBlIH1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb252ZXJ0Wm9vbUZ1bmN0aW9uKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYywgc3RvcHMsIGlucHV0ID0gWyd6b29tJ10pIHtcbiAgICBjb25zdCB0eXBlID0gZ2V0RnVuY3Rpb25UeXBlKHBhcmFtZXRlcnMsIHByb3BlcnR5U3BlYyk7XG4gICAgbGV0IGV4cHJlc3Npb247XG4gICAgbGV0IGlzU3RlcCA9IGZhbHNlO1xuICAgIGlmICh0eXBlID09PSAnaW50ZXJ2YWwnKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSBbXG4gICAgICAgICAgICAnc3RlcCcsXG4gICAgICAgICAgICBpbnB1dFxuICAgICAgICBdO1xuICAgICAgICBpc1N0ZXAgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2V4cG9uZW50aWFsJykge1xuICAgICAgICBjb25zdCBiYXNlID0gcGFyYW1ldGVycy5iYXNlICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmJhc2UgOiAxO1xuICAgICAgICBleHByZXNzaW9uID0gW1xuICAgICAgICAgICAgZ2V0SW50ZXJwb2xhdGVPcGVyYXRvcihwYXJhbWV0ZXJzKSxcbiAgICAgICAgICAgIGJhc2UgPT09IDEgPyBbJ2xpbmVhciddIDogW1xuICAgICAgICAgICAgICAgICdleHBvbmVudGlhbCcsXG4gICAgICAgICAgICAgICAgYmFzZVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHpvb20gZnVuY3Rpb24gdHlwZSBcIiR7IHR5cGUgfVwiYCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc3RvcCBvZiBzdG9wcykge1xuICAgICAgICBhcHBlbmRTdG9wUGFpcihleHByZXNzaW9uLCBzdG9wWzBdLCBzdG9wWzFdLCBpc1N0ZXApO1xuICAgIH1cbiAgICBmaXh1cERlZ2VuZXJhdGVTdGVwQ3VydmUoZXhwcmVzc2lvbik7XG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG59XG5mdW5jdGlvbiBmaXh1cERlZ2VuZXJhdGVTdGVwQ3VydmUoZXhwcmVzc2lvbikge1xuICAgIGlmIChleHByZXNzaW9uWzBdID09PSAnc3RlcCcgJiYgZXhwcmVzc2lvbi5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgZXhwcmVzc2lvbi5wdXNoKDApO1xuICAgICAgICBleHByZXNzaW9uLnB1c2goZXhwcmVzc2lvblszXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwZW5kU3RvcFBhaXIoY3VydmUsIGlucHV0LCBvdXRwdXQsIGlzU3RlcCkge1xuICAgIGlmIChjdXJ2ZS5sZW5ndGggPiAzICYmIGlucHV0ID09PSBjdXJ2ZVtjdXJ2ZS5sZW5ndGggLSAyXSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKGlzU3RlcCAmJiBjdXJ2ZS5sZW5ndGggPT09IDIpKSB7XG4gICAgICAgIGN1cnZlLnB1c2goaW5wdXQpO1xuICAgIH1cbiAgICBjdXJ2ZS5wdXNoKG91dHB1dCk7XG59XG5mdW5jdGlvbiBnZXRGdW5jdGlvblR5cGUocGFyYW1ldGVycywgcHJvcGVydHlTcGVjKSB7XG4gICAgaWYgKHBhcmFtZXRlcnMudHlwZSkge1xuICAgICAgICByZXR1cm4gcGFyYW1ldGVycy50eXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eVNwZWMuZXhwcmVzc2lvbi5pbnRlcnBvbGF0ZWQgPyAnZXhwb25lbnRpYWwnIDogJ2ludGVydmFsJztcbiAgICB9XG59XG5mdW5jdGlvbiBjb252ZXJ0VG9rZW5TdHJpbmcocykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFsnY29uY2F0J107XG4gICAgY29uc3QgcmUgPSAveyhbXnt9XSspfS9nO1xuICAgIGxldCBwb3MgPSAwO1xuICAgIGZvciAobGV0IG1hdGNoID0gcmUuZXhlYyhzKTsgbWF0Y2ggIT09IG51bGw7IG1hdGNoID0gcmUuZXhlYyhzKSkge1xuICAgICAgICBjb25zdCBsaXRlcmFsID0gcy5zbGljZShwb3MsIHJlLmxhc3RJbmRleCAtIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIHBvcyA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxpdGVyYWwubGVuZ3RoID4gMClcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxpdGVyYWwpO1xuICAgICAgICByZXN1bHQucHVzaChbXG4gICAgICAgICAgICAnZ2V0JyxcbiAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKHBvcyA8IHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHMuc2xpY2UocG9zKSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAndG8tc3RyaW5nJyxcbiAgICAgICAgICAgIHJlc3VsdFsxXVxuICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB1bmJ1bmRsZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE51bWJlciB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZyB8fCB2YWx1ZSBpbnN0YW5jZW9mIEJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVlcFVuYnVuZGxlKHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZGVlcFVuYnVuZGxlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHwgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuKSkge1xuICAgICAgICBjb25zdCB1bmJ1bmRsZWRWYWx1ZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgdW5idW5kbGVkVmFsdWVba2V5XSA9IGRlZXBVbmJ1bmRsZSh2YWx1ZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5idW5kbGVkVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB1bmJ1bmRsZSh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRXhwcmVzc2lvbkZpbHRlcihmaWx0ZXIpIHtcbiAgICBpZiAoZmlsdGVyID09PSB0cnVlIHx8IGZpbHRlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWx0ZXIpIHx8IGZpbHRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKGZpbHRlclswXSkge1xuICAgIGNhc2UgJ2hhcyc6XG4gICAgICAgIHJldHVybiBmaWx0ZXIubGVuZ3RoID49IDIgJiYgZmlsdGVyWzFdICE9PSAnJGlkJyAmJiBmaWx0ZXJbMV0gIT09ICckdHlwZSc7XG4gICAgY2FzZSAnaW4nOlxuICAgICAgICByZXR1cm4gZmlsdGVyLmxlbmd0aCA+PSAzICYmICh0eXBlb2YgZmlsdGVyWzFdICE9PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGZpbHRlclsyXSkpO1xuICAgIGNhc2UgJyFpbic6XG4gICAgY2FzZSAnIWhhcyc6XG4gICAgY2FzZSAnbm9uZSc6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlICc9PSc6XG4gICAgY2FzZSAnIT0nOlxuICAgIGNhc2UgJz4nOlxuICAgIGNhc2UgJz49JzpcbiAgICBjYXNlICc8JzpcbiAgICBjYXNlICc8PSc6XG4gICAgICAgIHJldHVybiBmaWx0ZXIubGVuZ3RoICE9PSAzIHx8IChBcnJheS5pc0FycmF5KGZpbHRlclsxXSkgfHwgQXJyYXkuaXNBcnJheShmaWx0ZXJbMl0pKTtcbiAgICBjYXNlICdhbnknOlxuICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgIGZvciAoY29uc3QgZiBvZiBmaWx0ZXIuc2xpY2UoMSkpIHtcbiAgICAgICAgICAgIGlmICghaXNFeHByZXNzaW9uRmlsdGVyKGYpICYmIHR5cGVvZiBmICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlRmlsdGVyKGZpbHRlciwgbGF5ZXJUeXBlID0gJ2ZpbGwnKSB7XG4gICAgaWYgKGZpbHRlciA9PT0gbnVsbCB8fCBmaWx0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlsdGVyOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgbmVlZEdlb21ldHJ5OiBmYWxzZSxcbiAgICAgICAgICAgIG5lZWRGZWF0dXJlOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoIWlzRXhwcmVzc2lvbkZpbHRlcihmaWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IGNvbnZlcnRGaWx0ZXIkMShmaWx0ZXIpO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJFeHAgPSBmaWx0ZXI7XG4gICAgbGV0IHN0YXRpY0ZpbHRlciA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgICAgc3RhdGljRmlsdGVyID0gZXh0cmFjdFN0YXRpY0ZpbHRlcihmaWx0ZXJFeHApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gZXh0cmFjdCBzdGF0aWMgZmlsdGVyLiBGaWx0ZXIgd2lsbCBjb250aW51ZSB3b3JraW5nLCBidXQgYXQgaGlnaGVyIG1lbW9yeSB1c2FnZSBhbmQgc2xvd2VyIGZyYW1lcmF0ZS5cblRoaXMgaXMgbW9zdCBsaWtlbHkgYSBidWcsIHBsZWFzZSByZXBvcnQgdGhpcyB2aWEgaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvaXNzdWVzL25ldz9hc3NpZ25lZXM9JmxhYmVscz0mdGVtcGxhdGU9QnVnX3JlcG9ydC5tZFxuYW5kIHBhc3RlIHRoZSBjb250ZW50cyBvZiB0aGlzIG1lc3NhZ2UgaW4gdGhlIHJlcG9ydC5cblRoYW5rIHlvdSFcbkZpbHRlciBFeHByZXNzaW9uOlxuJHsgSlNPTi5zdHJpbmdpZnkoZmlsdGVyRXhwLCBudWxsLCAyKSB9XG4gICAgICAgIGApO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJTcGVjID0gdjhbYGZpbHRlcl8keyBsYXllclR5cGUgfWBdO1xuICAgIGNvbnN0IGNvbXBpbGVkU3RhdGljRmlsdGVyID0gY3JlYXRlRXhwcmVzc2lvbihzdGF0aWNGaWx0ZXIsIGZpbHRlclNwZWMpO1xuICAgIGxldCBmaWx0ZXJGdW5jID0gbnVsbDtcbiAgICBpZiAoY29tcGlsZWRTdGF0aWNGaWx0ZXIucmVzdWx0ID09PSAnZXJyb3InKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihjb21waWxlZFN0YXRpY0ZpbHRlci52YWx1ZS5tYXAoZXJyID0+IGAkeyBlcnIua2V5IH06ICR7IGVyci5tZXNzYWdlIH1gKS5qb2luKCcsICcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmaWx0ZXJGdW5jID0gKGdsb2JhbFByb3BlcnRpZXMsIGZlYXR1cmUsIGNhbm9uaWNhbCkgPT4gY29tcGlsZWRTdGF0aWNGaWx0ZXIudmFsdWUuZXZhbHVhdGUoZ2xvYmFsUHJvcGVydGllcywgZmVhdHVyZSwge30sIGNhbm9uaWNhbCk7XG4gICAgfVxuICAgIGxldCBkeW5hbWljRmlsdGVyRnVuYyA9IG51bGw7XG4gICAgbGV0IG5lZWRGZWF0dXJlID0gbnVsbDtcbiAgICBpZiAoc3RhdGljRmlsdGVyICE9PSBmaWx0ZXJFeHApIHtcbiAgICAgICAgY29uc3QgY29tcGlsZWREeW5hbWljRmlsdGVyID0gY3JlYXRlRXhwcmVzc2lvbihmaWx0ZXJFeHAsIGZpbHRlclNwZWMpO1xuICAgICAgICBpZiAoY29tcGlsZWREeW5hbWljRmlsdGVyLnJlc3VsdCA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbXBpbGVkRHluYW1pY0ZpbHRlci52YWx1ZS5tYXAoZXJyID0+IGAkeyBlcnIua2V5IH06ICR7IGVyci5tZXNzYWdlIH1gKS5qb2luKCcsICcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR5bmFtaWNGaWx0ZXJGdW5jID0gKGdsb2JhbFByb3BlcnRpZXMsIGZlYXR1cmUsIGNhbm9uaWNhbCwgZmVhdHVyZVRpbGVDb29yZCwgZmVhdHVyZURpc3RhbmNlRGF0YSkgPT4gY29tcGlsZWREeW5hbWljRmlsdGVyLnZhbHVlLmV2YWx1YXRlKGdsb2JhbFByb3BlcnRpZXMsIGZlYXR1cmUsIHt9LCBjYW5vbmljYWwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmZWF0dXJlVGlsZUNvb3JkLCBmZWF0dXJlRGlzdGFuY2VEYXRhKTtcbiAgICAgICAgICAgIG5lZWRGZWF0dXJlID0gIWlzRmVhdHVyZUNvbnN0YW50KGNvbXBpbGVkRHluYW1pY0ZpbHRlci52YWx1ZS5leHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaWx0ZXJGdW5jID0gZmlsdGVyRnVuYztcbiAgICBjb25zdCBuZWVkR2VvbWV0cnkgPSBnZW9tZXRyeU5lZWRlZChzdGF0aWNGaWx0ZXIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGZpbHRlcjogZmlsdGVyRnVuYyxcbiAgICAgICAgZHluYW1pY0ZpbHRlcjogZHluYW1pY0ZpbHRlckZ1bmMgPyBkeW5hbWljRmlsdGVyRnVuYyA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmVlZEdlb21ldHJ5LFxuICAgICAgICBuZWVkRmVhdHVyZTogISFuZWVkRmVhdHVyZVxuICAgIH07XG59XG5mdW5jdGlvbiBleHRyYWN0U3RhdGljRmlsdGVyKGZpbHRlcikge1xuICAgIGlmICghaXNEeW5hbWljRmlsdGVyKGZpbHRlcikpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcjtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGRlZXBVbmJ1bmRsZShmaWx0ZXIpO1xuICAgIHVuaW9uRHluYW1pY0JyYW5jaGVzKHJlc3VsdCk7XG4gICAgcmVzdWx0ID0gY29sbGFwc2VEeW5hbWljQm9vbGVhbkV4cHJlc3Npb25zKHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbGxhcHNlRHluYW1pY0Jvb2xlYW5FeHByZXNzaW9ucyhleHByZXNzaW9uKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV4cHJlc3Npb24pKSB7XG4gICAgICAgIHJldHVybiBleHByZXNzaW9uO1xuICAgIH1cbiAgICBjb25zdCBjb2xsYXBzZWQgPSBjb2xsYXBzZWRFeHByZXNzaW9uKGV4cHJlc3Npb24pO1xuICAgIGlmIChjb2xsYXBzZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxhcHNlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29sbGFwc2VkLm1hcChzdWJFeHByZXNzaW9uID0+IGNvbGxhcHNlRHluYW1pY0Jvb2xlYW5FeHByZXNzaW9ucyhzdWJFeHByZXNzaW9uKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdW5pb25EeW5hbWljQnJhbmNoZXMoZmlsdGVyKSB7XG4gICAgbGV0IGlzQnJhbmNoaW5nRHluYW1pY2FsbHkgPSBmYWxzZTtcbiAgICBjb25zdCBicmFuY2hlcyA9IFtdO1xuICAgIGlmIChmaWx0ZXJbMF0gPT09ICdjYXNlJykge1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGZpbHRlci5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGlzQnJhbmNoaW5nRHluYW1pY2FsbHkgPSBpc0JyYW5jaGluZ0R5bmFtaWNhbGx5IHx8IGlzRHluYW1pY0ZpbHRlcihmaWx0ZXJbaV0pO1xuICAgICAgICAgICAgYnJhbmNoZXMucHVzaChmaWx0ZXJbaSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICBicmFuY2hlcy5wdXNoKGZpbHRlcltmaWx0ZXIubGVuZ3RoIC0gMV0pO1xuICAgIH0gZWxzZSBpZiAoZmlsdGVyWzBdID09PSAnbWF0Y2gnKSB7XG4gICAgICAgIGlzQnJhbmNoaW5nRHluYW1pY2FsbHkgPSBpc0JyYW5jaGluZ0R5bmFtaWNhbGx5IHx8IGlzRHluYW1pY0ZpbHRlcihmaWx0ZXJbMV0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMjsgaSA8IGZpbHRlci5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGJyYW5jaGVzLnB1c2goZmlsdGVyW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJhbmNoZXMucHVzaChmaWx0ZXJbZmlsdGVyLmxlbmd0aCAtIDFdKTtcbiAgICB9IGVsc2UgaWYgKGZpbHRlclswXSA9PT0gJ3N0ZXAnKSB7XG4gICAgICAgIGlzQnJhbmNoaW5nRHluYW1pY2FsbHkgPSBpc0JyYW5jaGluZ0R5bmFtaWNhbGx5IHx8IGlzRHluYW1pY0ZpbHRlcihmaWx0ZXJbMV0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGZpbHRlci5sZW5ndGggLSAxOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGJyYW5jaGVzLnB1c2goZmlsdGVyW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQnJhbmNoaW5nRHluYW1pY2FsbHkpIHtcbiAgICAgICAgZmlsdGVyLmxlbmd0aCA9IDA7XG4gICAgICAgIGZpbHRlci5wdXNoKCdhbnknLCAuLi5icmFuY2hlcyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZmlsdGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVuaW9uRHluYW1pY0JyYW5jaGVzKGZpbHRlcltpXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNEeW5hbWljRmlsdGVyKGZpbHRlcikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzUm9vdEV4cHJlc3Npb25EeW5hbWljKGZpbHRlclswXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZmlsdGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gZmlsdGVyW2ldO1xuICAgICAgICBpZiAoaXNEeW5hbWljRmlsdGVyKGNoaWxkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNSb290RXhwcmVzc2lvbkR5bmFtaWMoZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBleHByZXNzaW9uID09PSAncGl0Y2gnIHx8IGV4cHJlc3Npb24gPT09ICdkaXN0YW5jZS1mcm9tLWNlbnRlcic7XG59XG5jb25zdCBkeW5hbWljQ29uZGl0aW9uRXhwcmVzc2lvbnMgPSBuZXcgU2V0KFtcbiAgICAnaW4nLFxuICAgICc9PScsXG4gICAgJyE9JyxcbiAgICAnPicsXG4gICAgJz49JyxcbiAgICAnPCcsXG4gICAgJzw9JyxcbiAgICAndG8tYm9vbGVhbidcbl0pO1xuZnVuY3Rpb24gY29sbGFwc2VkRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gICAgaWYgKGR5bmFtaWNDb25kaXRpb25FeHByZXNzaW9ucy5oYXMoZXhwcmVzc2lvblswXSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbSA9IGV4cHJlc3Npb25baV07XG4gICAgICAgICAgICBpZiAoaXNEeW5hbWljRmlsdGVyKHBhcmFtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHByZXNzaW9uO1xufVxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwO1xufVxuZnVuY3Rpb24gZ2VvbWV0cnlOZWVkZWQoZmlsdGVyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbHRlcikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZmlsdGVyWzBdID09PSAnd2l0aGluJylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IGZpbHRlci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgaWYgKGdlb21ldHJ5TmVlZGVkKGZpbHRlcltpbmRleF0pKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRGaWx0ZXIkMShmaWx0ZXIpIHtcbiAgICBpZiAoIWZpbHRlcilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgY29uc3Qgb3AgPSBmaWx0ZXJbMF07XG4gICAgaWYgKGZpbHRlci5sZW5ndGggPD0gMSlcbiAgICAgICAgcmV0dXJuIG9wICE9PSAnYW55JztcbiAgICBjb25zdCBjb252ZXJ0ZWQgPSBvcCA9PT0gJz09JyA/IGNvbnZlcnRDb21wYXJpc29uT3AkMShmaWx0ZXJbMV0sIGZpbHRlclsyXSwgJz09JykgOiBvcCA9PT0gJyE9JyA/IGNvbnZlcnROZWdhdGlvbihjb252ZXJ0Q29tcGFyaXNvbk9wJDEoZmlsdGVyWzFdLCBmaWx0ZXJbMl0sICc9PScpKSA6IG9wID09PSAnPCcgfHwgb3AgPT09ICc+JyB8fCBvcCA9PT0gJzw9JyB8fCBvcCA9PT0gJz49JyA/IGNvbnZlcnRDb21wYXJpc29uT3AkMShmaWx0ZXJbMV0sIGZpbHRlclsyXSwgb3ApIDogb3AgPT09ICdhbnknID8gY29udmVydERpc2p1bmN0aW9uT3AoZmlsdGVyLnNsaWNlKDEpKSA6IG9wID09PSAnYWxsJyA/IFsnYWxsJ10uY29uY2F0KGZpbHRlci5zbGljZSgxKS5tYXAoY29udmVydEZpbHRlciQxKSkgOiBvcCA9PT0gJ25vbmUnID8gWydhbGwnXS5jb25jYXQoZmlsdGVyLnNsaWNlKDEpLm1hcChjb252ZXJ0RmlsdGVyJDEpLm1hcChjb252ZXJ0TmVnYXRpb24pKSA6IG9wID09PSAnaW4nID8gY29udmVydEluT3AkMShmaWx0ZXJbMV0sIGZpbHRlci5zbGljZSgyKSkgOiBvcCA9PT0gJyFpbicgPyBjb252ZXJ0TmVnYXRpb24oY29udmVydEluT3AkMShmaWx0ZXJbMV0sIGZpbHRlci5zbGljZSgyKSkpIDogb3AgPT09ICdoYXMnID8gY29udmVydEhhc09wJDEoZmlsdGVyWzFdKSA6IG9wID09PSAnIWhhcycgPyBjb252ZXJ0TmVnYXRpb24oY29udmVydEhhc09wJDEoZmlsdGVyWzFdKSkgOiBvcCA9PT0gJ3dpdGhpbicgPyBmaWx0ZXIgOiB0cnVlO1xuICAgIHJldHVybiBjb252ZXJ0ZWQ7XG59XG5mdW5jdGlvbiBjb252ZXJ0Q29tcGFyaXNvbk9wJDEocHJvcGVydHksIHZhbHVlLCBvcCkge1xuICAgIHN3aXRjaCAocHJvcGVydHkpIHtcbiAgICBjYXNlICckdHlwZSc6XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBgZmlsdGVyLXR5cGUtJHsgb3AgfWAsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICBdO1xuICAgIGNhc2UgJyRpZCc6XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBgZmlsdGVyLWlkLSR7IG9wIH1gLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgXTtcbiAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgYGZpbHRlci0keyBvcCB9YCxcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgXTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb252ZXJ0RGlzanVuY3Rpb25PcChmaWx0ZXJzKSB7XG4gICAgcmV0dXJuIFsnYW55J10uY29uY2F0KGZpbHRlcnMubWFwKGNvbnZlcnRGaWx0ZXIkMSkpO1xufVxuZnVuY3Rpb24gY29udmVydEluT3AkMShwcm9wZXJ0eSwgdmFsdWVzKSB7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XG4gICAgY2FzZSAnJHR5cGUnOlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgYGZpbHRlci10eXBlLWluYCxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnbGl0ZXJhbCcsXG4gICAgICAgICAgICAgICAgdmFsdWVzXG4gICAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgY2FzZSAnJGlkJzpcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGBmaWx0ZXItaWQtaW5gLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICdsaXRlcmFsJyxcbiAgICAgICAgICAgICAgICB2YWx1ZXNcbiAgICAgICAgICAgIF1cbiAgICAgICAgXTtcbiAgICBkZWZhdWx0OlxuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA+IDIwMCAmJiAhdmFsdWVzLnNvbWUodiA9PiB0eXBlb2YgdiAhPT0gdHlwZW9mIHZhbHVlc1swXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ2ZpbHRlci1pbi1sYXJnZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAnbGl0ZXJhbCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5zb3J0KGNvbXBhcmUpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJ2ZpbHRlci1pbi1zbWFsbCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAnbGl0ZXJhbCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjb252ZXJ0SGFzT3AkMShwcm9wZXJ0eSkge1xuICAgIHN3aXRjaCAocHJvcGVydHkpIHtcbiAgICBjYXNlICckdHlwZSc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJyRpZCc6XG4gICAgICAgIHJldHVybiBbYGZpbHRlci1oYXMtaWRgXTtcbiAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgYGZpbHRlci1oYXNgLFxuICAgICAgICAgICAgcHJvcGVydHlcbiAgICAgICAgXTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb252ZXJ0TmVnYXRpb24oZmlsdGVyKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgJyEnLFxuICAgICAgICBmaWx0ZXJcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RmlsdGVyKGZpbHRlcikge1xuICAgIHJldHVybiBfY29udmVydEZpbHRlcihmaWx0ZXIsIHt9KTtcbn1cbmZ1bmN0aW9uIF9jb252ZXJ0RmlsdGVyKGZpbHRlciwgZXhwZWN0ZWRUeXBlcykge1xuICAgIGlmIChpc0V4cHJlc3Npb25GaWx0ZXIoZmlsdGVyKSkge1xuICAgICAgICByZXR1cm4gZmlsdGVyO1xuICAgIH1cbiAgICBpZiAoIWZpbHRlcilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgY29uc3Qgb3AgPSBmaWx0ZXJbMF07XG4gICAgaWYgKGZpbHRlci5sZW5ndGggPD0gMSlcbiAgICAgICAgcmV0dXJuIG9wICE9PSAnYW55JztcbiAgICBsZXQgY29udmVydGVkO1xuICAgIGlmIChvcCA9PT0gJz09JyB8fCBvcCA9PT0gJyE9JyB8fCBvcCA9PT0gJzwnIHx8IG9wID09PSAnPicgfHwgb3AgPT09ICc8PScgfHwgb3AgPT09ICc+PScpIHtcbiAgICAgICAgY29uc3QgWywgcHJvcGVydHksIHZhbHVlXSA9IGZpbHRlcjtcbiAgICAgICAgY29udmVydGVkID0gY29udmVydENvbXBhcmlzb25PcChwcm9wZXJ0eSwgdmFsdWUsIG9wLCBleHBlY3RlZFR5cGVzKTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnYW55Jykge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IGZpbHRlci5zbGljZSgxKS5tYXAoZiA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlcyA9IHt9O1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBfY29udmVydEZpbHRlcihmLCB0eXBlcyk7XG4gICAgICAgICAgICBjb25zdCB0eXBlY2hlY2tzID0gcnVudGltZVR5cGVDaGVja3ModHlwZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVjaGVja3MgPT09IHRydWUgPyBjaGlsZCA6IFtcbiAgICAgICAgICAgICAgICAnY2FzZScsXG4gICAgICAgICAgICAgICAgdHlwZWNoZWNrcyxcbiAgICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbJ2FueSddLmNvbmNhdChjaGlsZHJlbik7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJ2FsbCcpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBmaWx0ZXIuc2xpY2UoMSkubWFwKGYgPT4gX2NvbnZlcnRGaWx0ZXIoZiwgZXhwZWN0ZWRUeXBlcykpO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4ubGVuZ3RoID4gMSA/IFsnYWxsJ10uY29uY2F0KGNoaWxkcmVuKSA6IFtdLmNvbmNhdCguLi5jaGlsZHJlbik7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnIScsXG4gICAgICAgICAgICBfY29udmVydEZpbHRlcihbJ2FueSddLmNvbmNhdChmaWx0ZXIuc2xpY2UoMSkpLCB7fSlcbiAgICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnaW4nKSB7XG4gICAgICAgIGNvbnZlcnRlZCA9IGNvbnZlcnRJbk9wKGZpbHRlclsxXSwgZmlsdGVyLnNsaWNlKDIpKTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnIWluJykge1xuICAgICAgICBjb252ZXJ0ZWQgPSBjb252ZXJ0SW5PcChmaWx0ZXJbMV0sIGZpbHRlci5zbGljZSgyKSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJ2hhcycpIHtcbiAgICAgICAgY29udmVydGVkID0gY29udmVydEhhc09wKGZpbHRlclsxXSk7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJyFoYXMnKSB7XG4gICAgICAgIGNvbnZlcnRlZCA9IFtcbiAgICAgICAgICAgICchJyxcbiAgICAgICAgICAgIGNvbnZlcnRIYXNPcChmaWx0ZXJbMV0pXG4gICAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29udmVydGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbmZ1bmN0aW9uIHJ1bnRpbWVUeXBlQ2hlY2tzKGV4cGVjdGVkVHlwZXMpIHtcbiAgICBjb25zdCBjb25kaXRpb25zID0gW107XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBleHBlY3RlZFR5cGVzKSB7XG4gICAgICAgIGNvbnN0IGdldCA9IHByb3BlcnR5ID09PSAnJGlkJyA/IFsnaWQnXSA6IFtcbiAgICAgICAgICAgICdnZXQnLFxuICAgICAgICAgICAgcHJvcGVydHlcbiAgICAgICAgXTtcbiAgICAgICAgY29uZGl0aW9ucy5wdXNoKFtcbiAgICAgICAgICAgICc9PScsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ3R5cGVvZicsXG4gICAgICAgICAgICAgICAgZ2V0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlc1twcm9wZXJ0eV1cbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKGNvbmRpdGlvbnMubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gY29uZGl0aW9uc1swXTtcbiAgICByZXR1cm4gWydhbGwnXS5jb25jYXQoY29uZGl0aW9ucyk7XG59XG5mdW5jdGlvbiBjb252ZXJ0Q29tcGFyaXNvbk9wKHByb3BlcnR5LCB2YWx1ZSwgb3AsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBsZXQgZ2V0O1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJyR0eXBlJykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb3AsXG4gICAgICAgICAgICBbJ2dlb21ldHJ5LXR5cGUnXSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIF07XG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJyRpZCcpIHtcbiAgICAgICAgZ2V0ID0gWydpZCddO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldCA9IFtcbiAgICAgICAgICAgICdnZXQnLFxuICAgICAgICAgICAgcHJvcGVydHlcbiAgICAgICAgXTtcbiAgICB9XG4gICAgaWYgKGV4cGVjdGVkVHlwZXMgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgICAgZXhwZWN0ZWRUeXBlc1twcm9wZXJ0eV0gPSB0eXBlO1xuICAgIH1cbiAgICBpZiAob3AgPT09ICc9PScgJiYgcHJvcGVydHkgIT09ICckaWQnICYmIHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnYWxsJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnaGFzJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAnPT0nLFxuICAgICAgICAgICAgICAgIGdldCxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICBdXG4gICAgICAgIF07XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJyE9JyAmJiBwcm9wZXJ0eSAhPT0gJyRpZCcgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdhbnknLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICchJyxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICdoYXMnLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJyE9JyxcbiAgICAgICAgICAgICAgICBnZXQsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgXVxuICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgICBvcCxcbiAgICAgICAgZ2V0LFxuICAgICAgICB2YWx1ZVxuICAgIF07XG59XG5mdW5jdGlvbiBjb252ZXJ0SW5PcChwcm9wZXJ0eSwgdmFsdWVzLCBuZWdhdGUgPSBmYWxzZSkge1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gbmVnYXRlO1xuICAgIGxldCBnZXQ7XG4gICAgaWYgKHByb3BlcnR5ID09PSAnJHR5cGUnKSB7XG4gICAgICAgIGdldCA9IFsnZ2VvbWV0cnktdHlwZSddO1xuICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICckaWQnKSB7XG4gICAgICAgIGdldCA9IFsnaWQnXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXQgPSBbXG4gICAgICAgICAgICAnZ2V0JyxcbiAgICAgICAgICAgIHByb3BlcnR5XG4gICAgICAgIF07XG4gICAgfVxuICAgIGxldCB1bmlmb3JtVHlwZXMgPSB0cnVlO1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWVzWzBdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgIHVuaWZvcm1UeXBlcyA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVuaWZvcm1UeXBlcyAmJiAodHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgIGNvbnN0IHVuaXF1ZVZhbHVlcyA9IHZhbHVlcy5zb3J0KCkuZmlsdGVyKCh2LCBpKSA9PiBpID09PSAwIHx8IHZhbHVlc1tpIC0gMV0gIT09IHYpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ21hdGNoJyxcbiAgICAgICAgICAgIGdldCxcbiAgICAgICAgICAgIHVuaXF1ZVZhbHVlcyxcbiAgICAgICAgICAgICFuZWdhdGUsXG4gICAgICAgICAgICBuZWdhdGVcbiAgICAgICAgXTtcbiAgICB9XG4gICAgcmV0dXJuIFtuZWdhdGUgPyAnYWxsJyA6ICdhbnknXS5jb25jYXQodmFsdWVzLm1hcCh2ID0+IFtcbiAgICAgICAgbmVnYXRlID8gJyE9JyA6ICc9PScsXG4gICAgICAgIGdldCxcbiAgICAgICAgdlxuICAgIF0pKTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRIYXNPcChwcm9wZXJ0eSkge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJyR0eXBlJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHByb3BlcnR5ID09PSAnJGlkJykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJyE9JyxcbiAgICAgICAgICAgIFsnaWQnXSxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ2hhcycsXG4gICAgICAgICAgICBwcm9wZXJ0eVxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWlncmF0ZVRvRXhwcmVzc2lvbnMgKHN0eWxlKSB7XG4gICAgY29uc3QgY29udmVydGVkID0gW107XG4gICAgZWFjaExheWVyKHN0eWxlLCBsYXllciA9PiB7XG4gICAgICAgIGlmIChsYXllci5maWx0ZXIpIHtcbiAgICAgICAgICAgIGxheWVyLmZpbHRlciA9IGNvbnZlcnRGaWx0ZXIobGF5ZXIuZmlsdGVyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGVhY2hQcm9wZXJ0eShzdHlsZSwge1xuICAgICAgICBwYWludDogdHJ1ZSxcbiAgICAgICAgbGF5b3V0OiB0cnVlXG4gICAgfSwgKHtwYXRoLCB2YWx1ZSwgcmVmZXJlbmNlLCBzZXR9KSA9PiB7XG4gICAgICAgIGlmIChpc0V4cHJlc3Npb24odmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHNldChjb252ZXJ0RnVuY3Rpb24odmFsdWUsIHJlZmVyZW5jZSkpO1xuICAgICAgICAgICAgY29udmVydGVkLnB1c2gocGF0aC5qb2luKCcuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlZmVyZW5jZS50b2tlbnMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2V0KGNvbnZlcnRUb2tlblN0cmluZyh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBtaWdyYXRlIChzdHlsZSkge1xuICAgIGxldCBtaWdyYXRlZCA9IGZhbHNlO1xuICAgIGlmIChzdHlsZS52ZXJzaW9uID09PSA3KSB7XG4gICAgICAgIHN0eWxlID0gbWlncmF0ZVRvVjgoc3R5bGUpO1xuICAgICAgICBtaWdyYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChzdHlsZS52ZXJzaW9uID09PSA4KSB7XG4gICAgICAgIG1pZ3JhdGVkID0gbWlncmF0ZVRvRXhwcmVzc2lvbnMoc3R5bGUpO1xuICAgICAgICBtaWdyYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICghbWlncmF0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgbWlncmF0ZSBmcm9tJywgc3R5bGUudmVyc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY29tcG9zaXRlIChzdHlsZSkge1xuICAgIGNvbnN0IHN0eWxlSURzID0gW107XG4gICAgY29uc3Qgc291cmNlSURzID0gW107XG4gICAgY29uc3QgY29tcG9zaXRlZFNvdXJjZUxheWVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgaWQgaW4gc3R5bGUuc291cmNlcykge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBzdHlsZS5zb3VyY2VzW2lkXTtcbiAgICAgICAgaWYgKHNvdXJjZS50eXBlICE9PSAndmVjdG9yJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtYXRjaCA9IC9ebWFwYm94OlxcL1xcLyguKikvLmV4ZWMoc291cmNlLnVybCk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgc3R5bGVJRHMucHVzaChpZCk7XG4gICAgICAgIHNvdXJjZUlEcy5wdXNoKG1hdGNoWzFdKTtcbiAgICB9XG4gICAgaWYgKHN0eWxlSURzLmxlbmd0aCA8IDIpXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICBzdHlsZUlEcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgZGVsZXRlIHN0eWxlLnNvdXJjZXNbaWRdO1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbXBvc2l0ZUlEID0gc291cmNlSURzLmpvaW4oJywnKTtcbiAgICBzdHlsZS5zb3VyY2VzW2NvbXBvc2l0ZUlEXSA9IHtcbiAgICAgICAgJ3R5cGUnOiAndmVjdG9yJyxcbiAgICAgICAgJ3VybCc6IGBtYXBib3g6Ly8keyBjb21wb3NpdGVJRCB9YFxuICAgIH07XG4gICAgc3R5bGUubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xuICAgICAgICBpZiAoc3R5bGVJRHMuaW5kZXhPZihsYXllci5zb3VyY2UpID49IDApIHtcbiAgICAgICAgICAgIGxheWVyLnNvdXJjZSA9IGNvbXBvc2l0ZUlEO1xuICAgICAgICAgICAgaWYgKCdzb3VyY2UtbGF5ZXInIGluIGxheWVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvc2l0ZWRTb3VyY2VMYXllcnMuaW5kZXhPZihsYXllclsnc291cmNlLWxheWVyJ10pID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25mbGljdGluZyBzb3VyY2UgbGF5ZXIgbmFtZXMnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVkU291cmNlTGF5ZXJzLnB1c2gobGF5ZXJbJ3NvdXJjZS1sYXllciddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGU7XG59XG5cbnZhciByZWZQcm9wZXJ0aWVzID0gW1xuICAgICd0eXBlJyxcbiAgICAnc291cmNlJyxcbiAgICAnc291cmNlLWxheWVyJyxcbiAgICAnbWluem9vbScsXG4gICAgJ21heHpvb20nLFxuICAgICdmaWx0ZXInLFxuICAgICdsYXlvdXQnXG5dO1xuXG5mdW5jdGlvbiBkZXJlZihsYXllciwgcGFyZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIGxheWVyKSB7XG4gICAgICAgIGlmIChrICE9PSAncmVmJykge1xuICAgICAgICAgICAgcmVzdWx0W2tdID0gbGF5ZXJba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVmUHJvcGVydGllcy5mb3JFYWNoKGsgPT4ge1xuICAgICAgICBpZiAoayBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHBhcmVudFtrXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBkZXJlZkxheWVycyhsYXllcnMpIHtcbiAgICBsYXllcnMgPSBsYXllcnMuc2xpY2UoKTtcbiAgICBjb25zdCBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1hcFtsYXllcnNbaV0uaWRdID0gbGF5ZXJzW2ldO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoJ3JlZicgaW4gbGF5ZXJzW2ldKSB7XG4gICAgICAgICAgICBsYXllcnNbaV0gPSBkZXJlZihsYXllcnNbaV0sIG1hcFtsYXllcnNbaV0ucmVmXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxheWVycztcbn1cblxuZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYikgfHwgYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghZGVlcEVxdWFsKGFbaV0sIGJbaV0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBhICE9PSBudWxsICYmIGIgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIGIgPT09ICdvYmplY3QnKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgICAgICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmNvbnN0IG9wZXJhdGlvbnMgPSB7XG4gICAgc2V0U3R5bGU6ICdzZXRTdHlsZScsXG4gICAgYWRkTGF5ZXI6ICdhZGRMYXllcicsXG4gICAgcmVtb3ZlTGF5ZXI6ICdyZW1vdmVMYXllcicsXG4gICAgc2V0UGFpbnRQcm9wZXJ0eTogJ3NldFBhaW50UHJvcGVydHknLFxuICAgIHNldExheW91dFByb3BlcnR5OiAnc2V0TGF5b3V0UHJvcGVydHknLFxuICAgIHNldEZpbHRlcjogJ3NldEZpbHRlcicsXG4gICAgYWRkU291cmNlOiAnYWRkU291cmNlJyxcbiAgICByZW1vdmVTb3VyY2U6ICdyZW1vdmVTb3VyY2UnLFxuICAgIHNldEdlb0pTT05Tb3VyY2VEYXRhOiAnc2V0R2VvSlNPTlNvdXJjZURhdGEnLFxuICAgIHNldExheWVyWm9vbVJhbmdlOiAnc2V0TGF5ZXJab29tUmFuZ2UnLFxuICAgIHNldExheWVyUHJvcGVydHk6ICdzZXRMYXllclByb3BlcnR5JyxcbiAgICBzZXRDZW50ZXI6ICdzZXRDZW50ZXInLFxuICAgIHNldFpvb206ICdzZXRab29tJyxcbiAgICBzZXRCZWFyaW5nOiAnc2V0QmVhcmluZycsXG4gICAgc2V0UGl0Y2g6ICdzZXRQaXRjaCcsXG4gICAgc2V0U3ByaXRlOiAnc2V0U3ByaXRlJyxcbiAgICBzZXRHbHlwaHM6ICdzZXRHbHlwaHMnLFxuICAgIHNldFRyYW5zaXRpb246ICdzZXRUcmFuc2l0aW9uJyxcbiAgICBzZXRMaWdodDogJ3NldExpZ2h0JyxcbiAgICBzZXRUZXJyYWluOiAnc2V0VGVycmFpbicsXG4gICAgc2V0Rm9nOiAnc2V0Rm9nJyxcbiAgICBzZXRQcm9qZWN0aW9uOiAnc2V0UHJvamVjdGlvbidcbn07XG5mdW5jdGlvbiBhZGRTb3VyY2Uoc291cmNlSWQsIGFmdGVyLCBjb21tYW5kcykge1xuICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICBjb21tYW5kOiBvcGVyYXRpb25zLmFkZFNvdXJjZSxcbiAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgc291cmNlSWQsXG4gICAgICAgICAgICBhZnRlcltzb3VyY2VJZF1cbiAgICAgICAgXVxuICAgIH0pO1xufVxuZnVuY3Rpb24gcmVtb3ZlU291cmNlKHNvdXJjZUlkLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpIHtcbiAgICBjb21tYW5kcy5wdXNoKHtcbiAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVTb3VyY2UsXG4gICAgICAgIGFyZ3M6IFtzb3VyY2VJZF1cbiAgICB9KTtcbiAgICBzb3VyY2VzUmVtb3ZlZFtzb3VyY2VJZF0gPSB0cnVlO1xufVxuZnVuY3Rpb24gdXBkYXRlU291cmNlKHNvdXJjZUlkLCBhZnRlciwgY29tbWFuZHMsIHNvdXJjZXNSZW1vdmVkKSB7XG4gICAgcmVtb3ZlU291cmNlKHNvdXJjZUlkLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpO1xuICAgIGFkZFNvdXJjZShzb3VyY2VJZCwgYWZ0ZXIsIGNvbW1hbmRzKTtcbn1cbmZ1bmN0aW9uIGNhblVwZGF0ZUdlb0pTT04oYmVmb3JlLCBhZnRlciwgc291cmNlSWQpIHtcbiAgICBsZXQgcHJvcDtcbiAgICBmb3IgKHByb3AgaW4gYmVmb3JlW3NvdXJjZUlkXSkge1xuICAgICAgICBpZiAoIWJlZm9yZVtzb3VyY2VJZF0uaGFzT3duUHJvcGVydHkocHJvcCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHByb3AgIT09ICdkYXRhJyAmJiAhZGVlcEVxdWFsKGJlZm9yZVtzb3VyY2VJZF1bcHJvcF0sIGFmdGVyW3NvdXJjZUlkXVtwcm9wXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3AgaW4gYWZ0ZXJbc291cmNlSWRdKSB7XG4gICAgICAgIGlmICghYWZ0ZXJbc291cmNlSWRdLmhhc093blByb3BlcnR5KHByb3ApKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChwcm9wICE9PSAnZGF0YScgJiYgIWRlZXBFcXVhbChiZWZvcmVbc291cmNlSWRdW3Byb3BdLCBhZnRlcltzb3VyY2VJZF1bcHJvcF0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBkaWZmU291cmNlcyhiZWZvcmUsIGFmdGVyLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpIHtcbiAgICBiZWZvcmUgPSBiZWZvcmUgfHwge307XG4gICAgYWZ0ZXIgPSBhZnRlciB8fCB7fTtcbiAgICBsZXQgc291cmNlSWQ7XG4gICAgZm9yIChzb3VyY2VJZCBpbiBiZWZvcmUpIHtcbiAgICAgICAgaWYgKCFiZWZvcmUuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICghYWZ0ZXIuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSB7XG4gICAgICAgICAgICByZW1vdmVTb3VyY2Uoc291cmNlSWQsIGNvbW1hbmRzLCBzb3VyY2VzUmVtb3ZlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChzb3VyY2VJZCBpbiBhZnRlcikge1xuICAgICAgICBpZiAoIWFmdGVyLmhhc093blByb3BlcnR5KHNvdXJjZUlkKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWJlZm9yZS5oYXNPd25Qcm9wZXJ0eShzb3VyY2VJZCkpIHtcbiAgICAgICAgICAgIGFkZFNvdXJjZShzb3VyY2VJZCwgYWZ0ZXIsIGNvbW1hbmRzKTtcbiAgICAgICAgfSBlbHNlIGlmICghZGVlcEVxdWFsKGJlZm9yZVtzb3VyY2VJZF0sIGFmdGVyW3NvdXJjZUlkXSkpIHtcbiAgICAgICAgICAgIGlmIChiZWZvcmVbc291cmNlSWRdLnR5cGUgPT09ICdnZW9qc29uJyAmJiBhZnRlcltzb3VyY2VJZF0udHlwZSA9PT0gJ2dlb2pzb24nICYmIGNhblVwZGF0ZUdlb0pTT04oYmVmb3JlLCBhZnRlciwgc291cmNlSWQpKSB7XG4gICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0R2VvSlNPTlNvdXJjZURhdGEsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJbc291cmNlSWRdLmRhdGFcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVTb3VyY2Uoc291cmNlSWQsIGFmdGVyLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZGlmZkxheWVyUHJvcGVydHlDaGFuZ2VzKGJlZm9yZSwgYWZ0ZXIsIGNvbW1hbmRzLCBsYXllcklkLCBrbGFzcywgY29tbWFuZCkge1xuICAgIGJlZm9yZSA9IGJlZm9yZSB8fCB7fTtcbiAgICBhZnRlciA9IGFmdGVyIHx8IHt9O1xuICAgIGxldCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBiZWZvcmUpIHtcbiAgICAgICAgaWYgKCFiZWZvcmUuaGFzT3duUHJvcGVydHkocHJvcCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlW3Byb3BdLCBhZnRlcltwcm9wXSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICBsYXllcklkLFxuICAgICAgICAgICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBhZnRlcltwcm9wXSxcbiAgICAgICAgICAgICAgICAgICAga2xhc3NcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3AgaW4gYWZ0ZXIpIHtcbiAgICAgICAgaWYgKCFhZnRlci5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCBiZWZvcmUuaGFzT3duUHJvcGVydHkocHJvcCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlW3Byb3BdLCBhZnRlcltwcm9wXSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICBsYXllcklkLFxuICAgICAgICAgICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBhZnRlcltwcm9wXSxcbiAgICAgICAgICAgICAgICAgICAga2xhc3NcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHBsdWNrSWQobGF5ZXIpIHtcbiAgICByZXR1cm4gbGF5ZXIuaWQ7XG59XG5mdW5jdGlvbiBpbmRleEJ5SWQoZ3JvdXAsIGxheWVyKSB7XG4gICAgZ3JvdXBbbGF5ZXIuaWRdID0gbGF5ZXI7XG4gICAgcmV0dXJuIGdyb3VwO1xufVxuZnVuY3Rpb24gZGlmZkxheWVycyhiZWZvcmUsIGFmdGVyLCBjb21tYW5kcykge1xuICAgIGJlZm9yZSA9IGJlZm9yZSB8fCBbXTtcbiAgICBhZnRlciA9IGFmdGVyIHx8IFtdO1xuICAgIGNvbnN0IGJlZm9yZU9yZGVyID0gYmVmb3JlLm1hcChwbHVja0lkKTtcbiAgICBjb25zdCBhZnRlck9yZGVyID0gYWZ0ZXIubWFwKHBsdWNrSWQpO1xuICAgIGNvbnN0IGJlZm9yZUluZGV4ID0gYmVmb3JlLnJlZHVjZShpbmRleEJ5SWQsIHt9KTtcbiAgICBjb25zdCBhZnRlckluZGV4ID0gYWZ0ZXIucmVkdWNlKGluZGV4QnlJZCwge30pO1xuICAgIGNvbnN0IHRyYWNrZXIgPSBiZWZvcmVPcmRlci5zbGljZSgpO1xuICAgIGNvbnN0IGNsZWFuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBsZXQgaSwgZCwgbGF5ZXJJZCwgYmVmb3JlTGF5ZXIsIGFmdGVyTGF5ZXIsIGluc2VydEJlZm9yZUxheWVySWQsIHByb3A7XG4gICAgZm9yIChpID0gMCwgZCA9IDA7IGkgPCBiZWZvcmVPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsYXllcklkID0gYmVmb3JlT3JkZXJbaV07XG4gICAgICAgIGlmICghYWZ0ZXJJbmRleC5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllcixcbiAgICAgICAgICAgICAgICBhcmdzOiBbbGF5ZXJJZF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2tlci5zcGxpY2UodHJhY2tlci5pbmRleE9mKGxheWVySWQsIGQpLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBkID0gMDsgaSA8IGFmdGVyT3JkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGF5ZXJJZCA9IGFmdGVyT3JkZXJbYWZ0ZXJPcmRlci5sZW5ndGggLSAxIC0gaV07XG4gICAgICAgIGlmICh0cmFja2VyW3RyYWNrZXIubGVuZ3RoIC0gMSAtIGldID09PSBsYXllcklkKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChiZWZvcmVJbmRleC5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllcixcbiAgICAgICAgICAgICAgICBhcmdzOiBbbGF5ZXJJZF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2tlci5zcGxpY2UodHJhY2tlci5sYXN0SW5kZXhPZihsYXllcklkLCB0cmFja2VyLmxlbmd0aCAtIGQpLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGQrKztcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRCZWZvcmVMYXllcklkID0gdHJhY2tlclt0cmFja2VyLmxlbmd0aCAtIGldO1xuICAgICAgICBjb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMuYWRkTGF5ZXIsXG4gICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbmRleFtsYXllcklkXSxcbiAgICAgICAgICAgICAgICBpbnNlcnRCZWZvcmVMYXllcklkXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgICAgICB0cmFja2VyLnNwbGljZSh0cmFja2VyLmxlbmd0aCAtIGksIDAsIGxheWVySWQpO1xuICAgICAgICBjbGVhbltsYXllcklkXSA9IHRydWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhZnRlck9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxheWVySWQgPSBhZnRlck9yZGVyW2ldO1xuICAgICAgICBiZWZvcmVMYXllciA9IGJlZm9yZUluZGV4W2xheWVySWRdO1xuICAgICAgICBhZnRlckxheWVyID0gYWZ0ZXJJbmRleFtsYXllcklkXTtcbiAgICAgICAgaWYgKGNsZWFuW2xheWVySWRdIHx8IGRlZXBFcXVhbChiZWZvcmVMYXllciwgYWZ0ZXJMYXllcikpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlTGF5ZXIuc291cmNlLCBhZnRlckxheWVyLnNvdXJjZSkgfHwgIWRlZXBFcXVhbChiZWZvcmVMYXllclsnc291cmNlLWxheWVyJ10sIGFmdGVyTGF5ZXJbJ3NvdXJjZS1sYXllciddKSB8fCAhZGVlcEVxdWFsKGJlZm9yZUxheWVyLnR5cGUsIGFmdGVyTGF5ZXIudHlwZSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMucmVtb3ZlTGF5ZXIsXG4gICAgICAgICAgICAgICAgYXJnczogW2xheWVySWRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGluc2VydEJlZm9yZUxheWVySWQgPSB0cmFja2VyW3RyYWNrZXIubGFzdEluZGV4T2YobGF5ZXJJZCkgKyAxXTtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMuYWRkTGF5ZXIsXG4gICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICBhZnRlckxheWVyLFxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRCZWZvcmVMYXllcklkXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBkaWZmTGF5ZXJQcm9wZXJ0eUNoYW5nZXMoYmVmb3JlTGF5ZXIubGF5b3V0LCBhZnRlckxheWVyLmxheW91dCwgY29tbWFuZHMsIGxheWVySWQsIG51bGwsIG9wZXJhdGlvbnMuc2V0TGF5b3V0UHJvcGVydHkpO1xuICAgICAgICBkaWZmTGF5ZXJQcm9wZXJ0eUNoYW5nZXMoYmVmb3JlTGF5ZXIucGFpbnQsIGFmdGVyTGF5ZXIucGFpbnQsIGNvbW1hbmRzLCBsYXllcklkLCBudWxsLCBvcGVyYXRpb25zLnNldFBhaW50UHJvcGVydHkpO1xuICAgICAgICBpZiAoIWRlZXBFcXVhbChiZWZvcmVMYXllci5maWx0ZXIsIGFmdGVyTGF5ZXIuZmlsdGVyKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRGaWx0ZXIsXG4gICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICBsYXllcklkLFxuICAgICAgICAgICAgICAgICAgICBhZnRlckxheWVyLmZpbHRlclxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVlcEVxdWFsKGJlZm9yZUxheWVyLm1pbnpvb20sIGFmdGVyTGF5ZXIubWluem9vbSkgfHwgIWRlZXBFcXVhbChiZWZvcmVMYXllci5tYXh6b29tLCBhZnRlckxheWVyLm1heHpvb20pKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBvcGVyYXRpb25zLnNldExheWVyWm9vbVJhbmdlLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMYXllci5taW56b29tLFxuICAgICAgICAgICAgICAgICAgICBhZnRlckxheWVyLm1heHpvb21cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gYmVmb3JlTGF5ZXIpIHtcbiAgICAgICAgICAgIGlmICghYmVmb3JlTGF5ZXIuaGFzT3duUHJvcGVydHkocHJvcCkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2xheW91dCcgfHwgcHJvcCA9PT0gJ3BhaW50JyB8fCBwcm9wID09PSAnZmlsdGVyJyB8fCBwcm9wID09PSAnbWV0YWRhdGEnIHx8IHByb3AgPT09ICdtaW56b29tJyB8fCBwcm9wID09PSAnbWF4em9vbScpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAocHJvcC5pbmRleE9mKCdwYWludC4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyhiZWZvcmVMYXllcltwcm9wXSwgYWZ0ZXJMYXllcltwcm9wXSwgY29tbWFuZHMsIGxheWVySWQsIHByb3Auc2xpY2UoNiksIG9wZXJhdGlvbnMuc2V0UGFpbnRQcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFkZWVwRXF1YWwoYmVmb3JlTGF5ZXJbcHJvcF0sIGFmdGVyTGF5ZXJbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGF5ZXJQcm9wZXJ0eSxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlckxheWVyW3Byb3BdXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gYWZ0ZXJMYXllcikge1xuICAgICAgICAgICAgaWYgKCFhZnRlckxheWVyLmhhc093blByb3BlcnR5KHByb3ApIHx8IGJlZm9yZUxheWVyLmhhc093blByb3BlcnR5KHByb3ApKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdsYXlvdXQnIHx8IHByb3AgPT09ICdwYWludCcgfHwgcHJvcCA9PT0gJ2ZpbHRlcicgfHwgcHJvcCA9PT0gJ21ldGFkYXRhJyB8fCBwcm9wID09PSAnbWluem9vbScgfHwgcHJvcCA9PT0gJ21heHpvb20nKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHByb3AuaW5kZXhPZigncGFpbnQuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaWZmTGF5ZXJQcm9wZXJ0eUNoYW5nZXMoYmVmb3JlTGF5ZXJbcHJvcF0sIGFmdGVyTGF5ZXJbcHJvcF0sIGNvbW1hbmRzLCBsYXllcklkLCBwcm9wLnNsaWNlKDYpLCBvcGVyYXRpb25zLnNldFBhaW50UHJvcGVydHkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZGVlcEVxdWFsKGJlZm9yZUxheWVyW3Byb3BdLCBhZnRlckxheWVyW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBvcGVyYXRpb25zLnNldExheWVyUHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMYXllcltwcm9wXVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBkaWZmU3R5bGVzKGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICBpZiAoIWJlZm9yZSlcbiAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRTdHlsZSxcbiAgICAgICAgICAgICAgICBhcmdzOiBbYWZ0ZXJdXG4gICAgICAgICAgICB9XTtcbiAgICBsZXQgY29tbWFuZHMgPSBbXTtcbiAgICB0cnkge1xuICAgICAgICBpZiAoIWRlZXBFcXVhbChiZWZvcmUudmVyc2lvbiwgYWZ0ZXIudmVyc2lvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBvcGVyYXRpb25zLnNldFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbYWZ0ZXJdXG4gICAgICAgICAgICAgICAgfV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlLmNlbnRlciwgYWZ0ZXIuY2VudGVyKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRDZW50ZXIsXG4gICAgICAgICAgICAgICAgYXJnczogW2FmdGVyLmNlbnRlcl1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVlcEVxdWFsKGJlZm9yZS56b29tLCBhZnRlci56b29tKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRab29tLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFthZnRlci56b29tXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlLmJlYXJpbmcsIGFmdGVyLmJlYXJpbmcpKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBvcGVyYXRpb25zLnNldEJlYXJpbmcsXG4gICAgICAgICAgICAgICAgYXJnczogW2FmdGVyLmJlYXJpbmddXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlZXBFcXVhbChiZWZvcmUucGl0Y2gsIGFmdGVyLnBpdGNoKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRQaXRjaCxcbiAgICAgICAgICAgICAgICBhcmdzOiBbYWZ0ZXIucGl0Y2hdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlZXBFcXVhbChiZWZvcmUuc3ByaXRlLCBhZnRlci5zcHJpdGUpKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBvcGVyYXRpb25zLnNldFNwcml0ZSxcbiAgICAgICAgICAgICAgICBhcmdzOiBbYWZ0ZXIuc3ByaXRlXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlLmdseXBocywgYWZ0ZXIuZ2x5cGhzKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRHbHlwaHMsXG4gICAgICAgICAgICAgICAgYXJnczogW2FmdGVyLmdseXBoc11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVlcEVxdWFsKGJlZm9yZS50cmFuc2l0aW9uLCBhZnRlci50cmFuc2l0aW9uKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRUcmFuc2l0aW9uLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFthZnRlci50cmFuc2l0aW9uXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlLmxpZ2h0LCBhZnRlci5saWdodCkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGlnaHQsXG4gICAgICAgICAgICAgICAgYXJnczogW2FmdGVyLmxpZ2h0XVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWVwRXF1YWwoYmVmb3JlLmZvZywgYWZ0ZXIuZm9nKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRGb2csXG4gICAgICAgICAgICAgICAgYXJnczogW2FmdGVyLmZvZ11cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVlcEVxdWFsKGJlZm9yZS5wcm9qZWN0aW9uLCBhZnRlci5wcm9qZWN0aW9uKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRQcm9qZWN0aW9uLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFthZnRlci5wcm9qZWN0aW9uXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc291cmNlc1JlbW92ZWQgPSB7fTtcbiAgICAgICAgY29uc3QgcmVtb3ZlT3JBZGRTb3VyY2VDb21tYW5kcyA9IFtdO1xuICAgICAgICBkaWZmU291cmNlcyhiZWZvcmUuc291cmNlcywgYWZ0ZXIuc291cmNlcywgcmVtb3ZlT3JBZGRTb3VyY2VDb21tYW5kcywgc291cmNlc1JlbW92ZWQpO1xuICAgICAgICBjb25zdCBiZWZvcmVMYXllcnMgPSBbXTtcbiAgICAgICAgaWYgKGJlZm9yZS5sYXllcnMpIHtcbiAgICAgICAgICAgIGJlZm9yZS5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLnNvdXJjZSAmJiBzb3VyY2VzUmVtb3ZlZFtsYXllci5zb3VyY2VdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtsYXllci5pZF1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlTGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBiZWZvcmVUZXJyYWluID0gYmVmb3JlLnRlcnJhaW47XG4gICAgICAgIGlmIChiZWZvcmVUZXJyYWluKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlc1JlbW92ZWRbYmVmb3JlVGVycmFpbi5zb3VyY2VdKSB7XG4gICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0VGVycmFpbixcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW3VuZGVmaW5lZF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBiZWZvcmVUZXJyYWluID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbW1hbmRzID0gY29tbWFuZHMuY29uY2F0KHJlbW92ZU9yQWRkU291cmNlQ29tbWFuZHMpO1xuICAgICAgICBpZiAoIWRlZXBFcXVhbChiZWZvcmVUZXJyYWluLCBhZnRlci50ZXJyYWluKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRUZXJyYWluLFxuICAgICAgICAgICAgICAgIGFyZ3M6IFthZnRlci50ZXJyYWluXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZGlmZkxheWVycyhiZWZvcmVMYXllcnMsIGFmdGVyLmxheWVycywgY29tbWFuZHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gY29tcHV0ZSBzdHlsZSBkaWZmOicsIGUpO1xuICAgICAgICBjb21tYW5kcyA9IFt7XG4gICAgICAgICAgICAgICAgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRTdHlsZSxcbiAgICAgICAgICAgICAgICBhcmdzOiBbYWZ0ZXJdXG4gICAgICAgICAgICB9XTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1hbmRzO1xufVxuXG5jbGFzcyBWYWxpZGF0aW9uRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUsIG1lc3NhZ2UsIGlkZW50aWZpZXIpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gKGtleSA/IGAkeyBrZXkgfTogYCA6ICcnKSArIG1lc3NhZ2U7XG4gICAgICAgIGlmIChpZGVudGlmaWVyKVxuICAgICAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUuX19saW5lX18pIHtcbiAgICAgICAgICAgIHRoaXMubGluZSA9IHZhbHVlLl9fbGluZV9fO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBQYXJzaW5nRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBlcnJvci5tZXNzYWdlLm1hdGNoKC9saW5lIChcXGQrKS8pO1xuICAgICAgICB0aGlzLmxpbmUgPSBtYXRjaCA/IHBhcnNlSW50KG1hdGNoWzFdLCAxMCkgOiAwO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVPYmplY3Qob3B0aW9ucykge1xuICAgIGNvbnN0IGtleSA9IG9wdGlvbnMua2V5O1xuICAgIGNvbnN0IG9iamVjdCA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3QgZWxlbWVudFNwZWNzID0gb3B0aW9ucy52YWx1ZVNwZWMgfHwge307XG4gICAgY29uc3QgZWxlbWVudFZhbGlkYXRvcnMgPSBvcHRpb25zLm9iamVjdEVsZW1lbnRWYWxpZGF0b3JzIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlID0gb3B0aW9ucy5zdHlsZTtcbiAgICBjb25zdCBzdHlsZVNwZWMgPSBvcHRpb25zLnN0eWxlU3BlYztcbiAgICBsZXQgZXJyb3JzID0gW107XG4gICAgY29uc3QgdHlwZSA9IGdldFR5cGUob2JqZWN0KTtcbiAgICBpZiAodHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgb2JqZWN0LCBgb2JqZWN0IGV4cGVjdGVkLCAkeyB0eXBlIH0gZm91bmRgKV07XG4gICAgfVxuICAgIGZvciAoY29uc3Qgb2JqZWN0S2V5IGluIG9iamVjdCkge1xuICAgICAgICBjb25zdCBlbGVtZW50U3BlY0tleSA9IG9iamVjdEtleS5zcGxpdCgnLicpWzBdO1xuICAgICAgICBjb25zdCBlbGVtZW50U3BlYyA9IGVsZW1lbnRTcGVjc1tlbGVtZW50U3BlY0tleV0gfHwgZWxlbWVudFNwZWNzWycqJ107XG4gICAgICAgIGxldCB2YWxpZGF0ZUVsZW1lbnQ7XG4gICAgICAgIGlmIChlbGVtZW50VmFsaWRhdG9yc1tlbGVtZW50U3BlY0tleV0pIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRWxlbWVudCA9IGVsZW1lbnRWYWxpZGF0b3JzW2VsZW1lbnRTcGVjS2V5XTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50U3BlY3NbZWxlbWVudFNwZWNLZXldKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUVsZW1lbnQgPSB2YWxpZGF0ZTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50VmFsaWRhdG9yc1snKiddKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUVsZW1lbnQgPSBlbGVtZW50VmFsaWRhdG9yc1snKiddO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnRTcGVjc1snKiddKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUVsZW1lbnQgPSB2YWxpZGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkYXRlRWxlbWVudCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihrZXksIG9iamVjdFtvYmplY3RLZXldLCBgdW5rbm93biBwcm9wZXJ0eSBcIiR7IG9iamVjdEtleSB9XCJgKSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlRWxlbWVudCh7XG4gICAgICAgICAgICBrZXk6IChrZXkgPyBgJHsga2V5IH0uYCA6IGtleSkgKyBvYmplY3RLZXksXG4gICAgICAgICAgICB2YWx1ZTogb2JqZWN0W29iamVjdEtleV0sXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IGVsZW1lbnRTcGVjLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdHlsZVNwZWMsXG4gICAgICAgICAgICBvYmplY3QsXG4gICAgICAgICAgICBvYmplY3RLZXlcbiAgICAgICAgfSwgb2JqZWN0KSk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZWxlbWVudFNwZWNLZXkgaW4gZWxlbWVudFNwZWNzKSB7XG4gICAgICAgIGlmIChlbGVtZW50VmFsaWRhdG9yc1tlbGVtZW50U3BlY0tleV0pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtZW50U3BlY3NbZWxlbWVudFNwZWNLZXldLnJlcXVpcmVkICYmIGVsZW1lbnRTcGVjc1tlbGVtZW50U3BlY0tleV1bJ2RlZmF1bHQnXSA9PT0gdW5kZWZpbmVkICYmIG9iamVjdFtlbGVtZW50U3BlY0tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihrZXksIG9iamVjdCwgYG1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgXCIkeyBlbGVtZW50U3BlY0tleSB9XCJgKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBcnJheShvcHRpb25zKSB7XG4gICAgY29uc3QgYXJyYXkgPSBvcHRpb25zLnZhbHVlO1xuICAgIGNvbnN0IGFycmF5U3BlYyA9IG9wdGlvbnMudmFsdWVTcGVjO1xuICAgIGNvbnN0IHN0eWxlID0gb3B0aW9ucy5zdHlsZTtcbiAgICBjb25zdCBzdHlsZVNwZWMgPSBvcHRpb25zLnN0eWxlU3BlYztcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zLmtleTtcbiAgICBjb25zdCB2YWxpZGF0ZUFycmF5RWxlbWVudCA9IG9wdGlvbnMuYXJyYXlFbGVtZW50VmFsaWRhdG9yIHx8IHZhbGlkYXRlO1xuICAgIGlmIChnZXRUeXBlKGFycmF5KSAhPT0gJ2FycmF5Jykge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBhcnJheSwgYGFycmF5IGV4cGVjdGVkLCAkeyBnZXRUeXBlKGFycmF5KSB9IGZvdW5kYCldO1xuICAgIH1cbiAgICBpZiAoYXJyYXlTcGVjLmxlbmd0aCAmJiBhcnJheS5sZW5ndGggIT09IGFycmF5U3BlYy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgYXJyYXksIGBhcnJheSBsZW5ndGggJHsgYXJyYXlTcGVjLmxlbmd0aCB9IGV4cGVjdGVkLCBsZW5ndGggJHsgYXJyYXkubGVuZ3RoIH0gZm91bmRgKV07XG4gICAgfVxuICAgIGlmIChhcnJheVNwZWNbJ21pbi1sZW5ndGgnXSAmJiBhcnJheS5sZW5ndGggPCBhcnJheVNwZWNbJ21pbi1sZW5ndGgnXSkge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBhcnJheSwgYGFycmF5IGxlbmd0aCBhdCBsZWFzdCAkeyBhcnJheVNwZWNbJ21pbi1sZW5ndGgnXSB9IGV4cGVjdGVkLCBsZW5ndGggJHsgYXJyYXkubGVuZ3RoIH0gZm91bmRgKV07XG4gICAgfVxuICAgIGxldCBhcnJheUVsZW1lbnRTcGVjID0ge1xuICAgICAgICAndHlwZSc6IGFycmF5U3BlYy52YWx1ZSxcbiAgICAgICAgJ3ZhbHVlcyc6IGFycmF5U3BlYy52YWx1ZXMsXG4gICAgICAgICdtaW5pbXVtJzogYXJyYXlTcGVjLm1pbmltdW0sXG4gICAgICAgICdtYXhpbXVtJzogYXJyYXlTcGVjLm1heGltdW0sXG4gICAgICAgIGZ1bmN0aW9uOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIGlmIChzdHlsZVNwZWMuJHZlcnNpb24gPCA3KSB7XG4gICAgICAgIGFycmF5RWxlbWVudFNwZWMuZnVuY3Rpb24gPSBhcnJheVNwZWMuZnVuY3Rpb247XG4gICAgfVxuICAgIGlmIChnZXRUeXBlKGFycmF5U3BlYy52YWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGFycmF5RWxlbWVudFNwZWMgPSBhcnJheVNwZWMudmFsdWU7XG4gICAgfVxuICAgIGxldCBlcnJvcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodmFsaWRhdGVBcnJheUVsZW1lbnQoe1xuICAgICAgICAgICAgYXJyYXksXG4gICAgICAgICAgICBhcnJheUluZGV4OiBpLFxuICAgICAgICAgICAgdmFsdWU6IGFycmF5W2ldLFxuICAgICAgICAgICAgdmFsdWVTcGVjOiBhcnJheUVsZW1lbnRTcGVjLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdHlsZVNwZWMsXG4gICAgICAgICAgICBrZXk6IGAkeyBrZXkgfVskeyBpIH1dYFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyKG9wdGlvbnMpIHtcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zLmtleTtcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3QgdmFsdWVTcGVjID0gb3B0aW9ucy52YWx1ZVNwZWM7XG4gICAgbGV0IHR5cGUgPSBnZXRUeXBlKHZhbHVlKTtcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHR5cGUgPSAnTmFOJztcbiAgICB9XG4gICAgaWYgKHR5cGUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihrZXksIHZhbHVlLCBgbnVtYmVyIGV4cGVjdGVkLCAkeyB0eXBlIH0gZm91bmRgKV07XG4gICAgfVxuICAgIGlmICgnbWluaW11bScgaW4gdmFsdWVTcGVjKSB7XG4gICAgICAgIGxldCBzcGVjTWluID0gdmFsdWVTcGVjLm1pbmltdW07XG4gICAgICAgIGlmIChnZXRUeXBlKHZhbHVlU3BlYy5taW5pbXVtKSA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgY29uc3QgaSA9IG9wdGlvbnMuYXJyYXlJbmRleDtcbiAgICAgICAgICAgIHNwZWNNaW4gPSB2YWx1ZVNwZWMubWluaW11bVtpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPCBzcGVjTWluKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYCR7IHZhbHVlIH0gaXMgbGVzcyB0aGFuIHRoZSBtaW5pbXVtIHZhbHVlICR7IHNwZWNNaW4gfWApXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoJ21heGltdW0nIGluIHZhbHVlU3BlYykge1xuICAgICAgICBsZXQgc3BlY01heCA9IHZhbHVlU3BlYy5tYXhpbXVtO1xuICAgICAgICBpZiAoZ2V0VHlwZSh2YWx1ZVNwZWMubWF4aW11bSkgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBvcHRpb25zLmFycmF5SW5kZXg7XG4gICAgICAgICAgICBzcGVjTWF4ID0gdmFsdWVTcGVjLm1heGltdW1baV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID4gc3BlY01heCkge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGAkeyB2YWx1ZSB9IGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4aW11bSB2YWx1ZSAkeyBzcGVjTWF4IH1gKV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCBmdW5jdGlvblZhbHVlU3BlYyA9IG9wdGlvbnMudmFsdWVTcGVjO1xuICAgIGNvbnN0IGZ1bmN0aW9uVHlwZSA9IHVuYnVuZGxlKG9wdGlvbnMudmFsdWUudHlwZSk7XG4gICAgbGV0IHN0b3BLZXlUeXBlO1xuICAgIGxldCBzdG9wRG9tYWluVmFsdWVzID0ge307XG4gICAgbGV0IHByZXZpb3VzU3RvcERvbWFpblZhbHVlO1xuICAgIGxldCBwcmV2aW91c1N0b3BEb21haW5ab29tO1xuICAgIGNvbnN0IGlzWm9vbUZ1bmN0aW9uID0gZnVuY3Rpb25UeXBlICE9PSAnY2F0ZWdvcmljYWwnICYmIG9wdGlvbnMudmFsdWUucHJvcGVydHkgPT09IHVuZGVmaW5lZDtcbiAgICBjb25zdCBpc1Byb3BlcnR5RnVuY3Rpb24gPSAhaXNab29tRnVuY3Rpb247XG4gICAgY29uc3QgaXNab29tQW5kUHJvcGVydHlGdW5jdGlvbiA9IGdldFR5cGUob3B0aW9ucy52YWx1ZS5zdG9wcykgPT09ICdhcnJheScgJiYgZ2V0VHlwZShvcHRpb25zLnZhbHVlLnN0b3BzWzBdKSA9PT0gJ2FycmF5JyAmJiBnZXRUeXBlKG9wdGlvbnMudmFsdWUuc3RvcHNbMF1bMF0pID09PSAnb2JqZWN0JztcbiAgICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZU9iamVjdCh7XG4gICAgICAgIGtleTogb3B0aW9ucy5rZXksXG4gICAgICAgIHZhbHVlOiBvcHRpb25zLnZhbHVlLFxuICAgICAgICB2YWx1ZVNwZWM6IG9wdGlvbnMuc3R5bGVTcGVjLmZ1bmN0aW9uLFxuICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgc3R5bGVTcGVjOiBvcHRpb25zLnN0eWxlU3BlYyxcbiAgICAgICAgb2JqZWN0RWxlbWVudFZhbGlkYXRvcnM6IHtcbiAgICAgICAgICAgIHN0b3BzOiB2YWxpZGF0ZUZ1bmN0aW9uU3RvcHMsXG4gICAgICAgICAgICBkZWZhdWx0OiB2YWxpZGF0ZUZ1bmN0aW9uRGVmYXVsdFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGZ1bmN0aW9uVHlwZSA9PT0gJ2lkZW50aXR5JyAmJiBpc1pvb21GdW5jdGlvbikge1xuICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKG9wdGlvbnMua2V5LCBvcHRpb25zLnZhbHVlLCAnbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBcInByb3BlcnR5XCInKSk7XG4gICAgfVxuICAgIGlmIChmdW5jdGlvblR5cGUgIT09ICdpZGVudGl0eScgJiYgIW9wdGlvbnMudmFsdWUuc3RvcHMpIHtcbiAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgb3B0aW9ucy52YWx1ZSwgJ21pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgXCJzdG9wc1wiJykpO1xuICAgIH1cbiAgICBpZiAoZnVuY3Rpb25UeXBlID09PSAnZXhwb25lbnRpYWwnICYmIG9wdGlvbnMudmFsdWVTcGVjLmV4cHJlc3Npb24gJiYgIXN1cHBvcnRzSW50ZXJwb2xhdGlvbihvcHRpb25zLnZhbHVlU3BlYykpIHtcbiAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgb3B0aW9ucy52YWx1ZSwgJ2V4cG9uZW50aWFsIGZ1bmN0aW9ucyBub3Qgc3VwcG9ydGVkJykpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zdHlsZVNwZWMuJHZlcnNpb24gPj0gOCkge1xuICAgICAgICBpZiAoaXNQcm9wZXJ0eUZ1bmN0aW9uICYmICFzdXBwb3J0c1Byb3BlcnR5RXhwcmVzc2lvbihvcHRpb25zLnZhbHVlU3BlYykpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Iob3B0aW9ucy5rZXksIG9wdGlvbnMudmFsdWUsICdwcm9wZXJ0eSBmdW5jdGlvbnMgbm90IHN1cHBvcnRlZCcpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1pvb21GdW5jdGlvbiAmJiAhc3VwcG9ydHNab29tRXhwcmVzc2lvbihvcHRpb25zLnZhbHVlU3BlYykpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Iob3B0aW9ucy5rZXksIG9wdGlvbnMudmFsdWUsICd6b29tIGZ1bmN0aW9ucyBub3Qgc3VwcG9ydGVkJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgoZnVuY3Rpb25UeXBlID09PSAnY2F0ZWdvcmljYWwnIHx8IGlzWm9vbUFuZFByb3BlcnR5RnVuY3Rpb24pICYmIG9wdGlvbnMudmFsdWUucHJvcGVydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKG9wdGlvbnMua2V5LCBvcHRpb25zLnZhbHVlLCAnXCJwcm9wZXJ0eVwiIHByb3BlcnR5IGlzIHJlcXVpcmVkJykpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRnVuY3Rpb25TdG9wcyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChmdW5jdGlvblR5cGUgPT09ICdpZGVudGl0eScpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgb3B0aW9ucy52YWx1ZSwgJ2lkZW50aXR5IGZ1bmN0aW9uIG1heSBub3QgaGF2ZSBhIFwic3RvcHNcIiBwcm9wZXJ0eScpXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZXJyb3JzID0gW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZUFycmF5KHtcbiAgICAgICAgICAgIGtleTogb3B0aW9ucy5rZXksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHZhbHVlU3BlYzogb3B0aW9ucy52YWx1ZVNwZWMsXG4gICAgICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgICAgIHN0eWxlU3BlYzogb3B0aW9ucy5zdHlsZVNwZWMsXG4gICAgICAgICAgICBhcnJheUVsZW1lbnRWYWxpZGF0b3I6IHZhbGlkYXRlRnVuY3Rpb25TdG9wXG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKGdldFR5cGUodmFsdWUpID09PSAnYXJyYXknICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgdmFsdWUsICdhcnJheSBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIHN0b3AnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVGdW5jdGlvblN0b3Aob3B0aW9ucykge1xuICAgICAgICBsZXQgZXJyb3JzID0gW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICAgICAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgICAgIGlmIChnZXRUeXBlKHZhbHVlKSAhPT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGBhcnJheSBleHBlY3RlZCwgJHsgZ2V0VHlwZSh2YWx1ZSkgfSBmb3VuZGApXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYGFycmF5IGxlbmd0aCAyIGV4cGVjdGVkLCBsZW5ndGggJHsgdmFsdWUubGVuZ3RoIH0gZm91bmRgKV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzWm9vbUFuZFByb3BlcnR5RnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChnZXRUeXBlKHZhbHVlWzBdKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYG9iamVjdCBleHBlY3RlZCwgJHsgZ2V0VHlwZSh2YWx1ZVswXSkgfSBmb3VuZGApXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZVswXS56b29tID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgJ29iamVjdCBzdG9wIGtleSBtdXN0IGhhdmUgem9vbScpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZVswXS52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsICdvYmplY3Qgc3RvcCBrZXkgbXVzdCBoYXZlIHZhbHVlJyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV4dFN0b3BEb21haW5ab29tID0gdW5idW5kbGUodmFsdWVbMF0uem9vbSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5leHRTdG9wRG9tYWluWm9vbSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZVswXS56b29tLCAnc3RvcCB6b29tIHZhbHVlcyBtdXN0IGJlIG51bWJlcnMnKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldmlvdXNTdG9wRG9tYWluWm9vbSAmJiBwcmV2aW91c1N0b3BEb21haW5ab29tID4gbmV4dFN0b3BEb21haW5ab29tKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWVbMF0uem9vbSwgJ3N0b3Agem9vbSB2YWx1ZXMgbXVzdCBhcHBlYXIgaW4gYXNjZW5kaW5nIG9yZGVyJyldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHRTdG9wRG9tYWluWm9vbSAhPT0gcHJldmlvdXNTdG9wRG9tYWluWm9vbSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzU3RvcERvbWFpblpvb20gPSBuZXh0U3RvcERvbWFpblpvb207XG4gICAgICAgICAgICAgICAgcHJldmlvdXNTdG9wRG9tYWluVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgc3RvcERvbWFpblZhbHVlcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZU9iamVjdCh7XG4gICAgICAgICAgICAgICAga2V5OiBgJHsga2V5IH1bMF1gLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVswXSxcbiAgICAgICAgICAgICAgICB2YWx1ZVNwZWM6IHsgem9vbToge30gfSxcbiAgICAgICAgICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgICAgICAgICBzdHlsZVNwZWM6IG9wdGlvbnMuc3R5bGVTcGVjLFxuICAgICAgICAgICAgICAgIG9iamVjdEVsZW1lbnRWYWxpZGF0b3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIHpvb206IHZhbGlkYXRlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsaWRhdGVTdG9wRG9tYWluVmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlU3RvcERvbWFpblZhbHVlKHtcbiAgICAgICAgICAgICAgICBrZXk6IGAkeyBrZXkgfVswXWAsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlU3BlYzoge30sXG4gICAgICAgICAgICAgICAgc3R5bGU6IG9wdGlvbnMuc3R5bGUsXG4gICAgICAgICAgICAgICAgc3R5bGVTcGVjOiBvcHRpb25zLnN0eWxlU3BlY1xuICAgICAgICAgICAgfSwgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNFeHByZXNzaW9uKGRlZXBVbmJ1bmRsZSh2YWx1ZVsxXSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JzLmNvbmNhdChbbmV3IFZhbGlkYXRpb25FcnJvcihgJHsga2V5IH1bMV1gLCB2YWx1ZVsxXSwgJ2V4cHJlc3Npb25zIGFyZSBub3QgYWxsb3dlZCBpbiBmdW5jdGlvbiBzdG9wcy4nKV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvcnMuY29uY2F0KHZhbGlkYXRlKHtcbiAgICAgICAgICAgIGtleTogYCR7IGtleSB9WzFdYCxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVsxXSxcbiAgICAgICAgICAgIHZhbHVlU3BlYzogZnVuY3Rpb25WYWx1ZVNwZWMsXG4gICAgICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgICAgIHN0eWxlU3BlYzogb3B0aW9ucy5zdHlsZVNwZWNcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVN0b3BEb21haW5WYWx1ZShvcHRpb25zLCBzdG9wKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBnZXRUeXBlKG9wdGlvbnMudmFsdWUpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHVuYnVuZGxlKG9wdGlvbnMudmFsdWUpO1xuICAgICAgICBjb25zdCByZXBvcnRWYWx1ZSA9IG9wdGlvbnMudmFsdWUgIT09IG51bGwgPyBvcHRpb25zLnZhbHVlIDogc3RvcDtcbiAgICAgICAgaWYgKCFzdG9wS2V5VHlwZSkge1xuICAgICAgICAgICAgc3RvcEtleVR5cGUgPSB0eXBlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IHN0b3BLZXlUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Iob3B0aW9ucy5rZXksIHJlcG9ydFZhbHVlLCBgJHsgdHlwZSB9IHN0b3AgZG9tYWluIHR5cGUgbXVzdCBtYXRjaCBwcmV2aW91cyBzdG9wIGRvbWFpbiB0eXBlICR7IHN0b3BLZXlUeXBlIH1gKV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgIT09ICdudW1iZXInICYmIHR5cGUgIT09ICdzdHJpbmcnICYmIHR5cGUgIT09ICdib29sZWFuJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgcmVwb3J0VmFsdWUsICdzdG9wIGRvbWFpbiB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLCBzdHJpbmcsIG9yIGJvb2xlYW4nKV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgIT09ICdudW1iZXInICYmIGZ1bmN0aW9uVHlwZSAhPT0gJ2NhdGVnb3JpY2FsJykge1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBgbnVtYmVyIGV4cGVjdGVkLCAkeyB0eXBlIH0gZm91bmRgO1xuICAgICAgICAgICAgaWYgKHN1cHBvcnRzUHJvcGVydHlFeHByZXNzaW9uKGZ1bmN0aW9uVmFsdWVTcGVjKSAmJiBmdW5jdGlvblR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gJ1xcbklmIHlvdSBpbnRlbmRlZCB0byB1c2UgYSBjYXRlZ29yaWNhbCBmdW5jdGlvbiwgc3BlY2lmeSBgXCJ0eXBlXCI6IFwiY2F0ZWdvcmljYWxcImAuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgcmVwb3J0VmFsdWUsIG1lc3NhZ2UpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVuY3Rpb25UeXBlID09PSAnY2F0ZWdvcmljYWwnICYmIHR5cGUgPT09ICdudW1iZXInICYmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8ICFpc0Zpbml0ZSh2YWx1ZSkgfHwgTWF0aC5mbG9vcih2YWx1ZSkgIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKG9wdGlvbnMua2V5LCByZXBvcnRWYWx1ZSwgYGludGVnZXIgZXhwZWN0ZWQsIGZvdW5kICR7IFN0cmluZyh2YWx1ZSkgfWApXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVuY3Rpb25UeXBlICE9PSAnY2F0ZWdvcmljYWwnICYmIHR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHByZXZpb3VzU3RvcERvbWFpblZhbHVlID09PSAnbnVtYmVyJyAmJiBwcmV2aW91c1N0b3BEb21haW5WYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlIDwgcHJldmlvdXNTdG9wRG9tYWluVmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgcmVwb3J0VmFsdWUsICdzdG9wIGRvbWFpbiB2YWx1ZXMgbXVzdCBhcHBlYXIgaW4gYXNjZW5kaW5nIG9yZGVyJyldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldmlvdXNTdG9wRG9tYWluVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVuY3Rpb25UeXBlID09PSAnY2F0ZWdvcmljYWwnICYmIHZhbHVlIGluIHN0b3BEb21haW5WYWx1ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgcmVwb3J0VmFsdWUsICdzdG9wIGRvbWFpbiB2YWx1ZXMgbXVzdCBiZSB1bmlxdWUnKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdG9wRG9tYWluVmFsdWVzW3ZhbHVlXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uRGVmYXVsdChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh7XG4gICAgICAgICAgICBrZXk6IG9wdGlvbnMua2V5LFxuICAgICAgICAgICAgdmFsdWU6IG9wdGlvbnMudmFsdWUsXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IGZ1bmN0aW9uVmFsdWVTcGVjLFxuICAgICAgICAgICAgc3R5bGU6IG9wdGlvbnMuc3R5bGUsXG4gICAgICAgICAgICBzdHlsZVNwZWM6IG9wdGlvbnMuc3R5bGVTcGVjXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFeHByZXNzaW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCBleHByZXNzaW9uID0gKG9wdGlvbnMuZXhwcmVzc2lvbkNvbnRleHQgPT09ICdwcm9wZXJ0eScgPyBjcmVhdGVQcm9wZXJ0eUV4cHJlc3Npb24gOiBjcmVhdGVFeHByZXNzaW9uKShkZWVwVW5idW5kbGUob3B0aW9ucy52YWx1ZSksIG9wdGlvbnMudmFsdWVTcGVjKTtcbiAgICBpZiAoZXhwcmVzc2lvbi5yZXN1bHQgPT09ICdlcnJvcicpIHtcbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb24udmFsdWUubWFwKGVycm9yID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmFsaWRhdGlvbkVycm9yKGAkeyBvcHRpb25zLmtleSB9JHsgZXJyb3Iua2V5IH1gLCBvcHRpb25zLnZhbHVlLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGV4cHJlc3Npb25PYmogPSBleHByZXNzaW9uLnZhbHVlLmV4cHJlc3Npb24gfHwgZXhwcmVzc2lvbi52YWx1ZS5fc3R5bGVFeHByZXNzaW9uLmV4cHJlc3Npb247XG4gICAgaWYgKG9wdGlvbnMuZXhwcmVzc2lvbkNvbnRleHQgPT09ICdwcm9wZXJ0eScgJiYgb3B0aW9ucy5wcm9wZXJ0eUtleSA9PT0gJ3RleHQtZm9udCcgJiYgIWV4cHJlc3Npb25PYmoub3V0cHV0RGVmaW5lZCgpKSB7XG4gICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgb3B0aW9ucy52YWx1ZSwgYEludmFsaWQgZGF0YSBleHByZXNzaW9uIGZvciBcIiR7IG9wdGlvbnMucHJvcGVydHlLZXkgfVwiLiBPdXRwdXQgdmFsdWVzIG11c3QgYmUgY29udGFpbmVkIGFzIGxpdGVyYWxzIHdpdGhpbiB0aGUgZXhwcmVzc2lvbi5gKV07XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV4cHJlc3Npb25Db250ZXh0ID09PSAncHJvcGVydHknICYmIG9wdGlvbnMucHJvcGVydHlUeXBlID09PSAnbGF5b3V0JyAmJiAhaXNTdGF0ZUNvbnN0YW50KGV4cHJlc3Npb25PYmopKSB7XG4gICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgb3B0aW9ucy52YWx1ZSwgJ1wiZmVhdHVyZS1zdGF0ZVwiIGRhdGEgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBsYXlvdXQgcHJvcGVydGllcy4nKV07XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV4cHJlc3Npb25Db250ZXh0ID09PSAnZmlsdGVyJykge1xuICAgICAgICByZXR1cm4gZGlzYWxsb3dlZEZpbHRlclBhcmFtZXRlcnMoZXhwcmVzc2lvbk9iaiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmV4cHJlc3Npb25Db250ZXh0ICYmIG9wdGlvbnMuZXhwcmVzc2lvbkNvbnRleHQuaW5kZXhPZignY2x1c3RlcicpID09PSAwKSB7XG4gICAgICAgIGlmICghaXNHbG9iYWxQcm9wZXJ0eUNvbnN0YW50KGV4cHJlc3Npb25PYmosIFtcbiAgICAgICAgICAgICAgICAnem9vbScsXG4gICAgICAgICAgICAgICAgJ2ZlYXR1cmUtc3RhdGUnXG4gICAgICAgICAgICBdKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKG9wdGlvbnMua2V5LCBvcHRpb25zLnZhbHVlLCAnXCJ6b29tXCIgYW5kIFwiZmVhdHVyZS1zdGF0ZVwiIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggY2x1c3RlciBwcm9wZXJ0aWVzLicpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5leHByZXNzaW9uQ29udGV4dCA9PT0gJ2NsdXN0ZXItaW5pdGlhbCcgJiYgIWlzRmVhdHVyZUNvbnN0YW50KGV4cHJlc3Npb25PYmopKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Iob3B0aW9ucy5rZXksIG9wdGlvbnMudmFsdWUsICdGZWF0dXJlIGRhdGEgZXhwcmVzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBpbml0aWFsIGV4cHJlc3Npb24gcGFydCBvZiBjbHVzdGVyIHByb3BlcnRpZXMuJyldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIGRpc2FsbG93ZWRGaWx0ZXJQYXJhbWV0ZXJzKGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkaXNhbGxvd2VkUGFyYW1ldGVycyA9IG5ldyBTZXQoW1xuICAgICAgICAnem9vbScsXG4gICAgICAgICdmZWF0dXJlLXN0YXRlJyxcbiAgICAgICAgJ3BpdGNoJyxcbiAgICAgICAgJ2Rpc3RhbmNlLWZyb20tY2VudGVyJ1xuICAgIF0pO1xuICAgIGlmIChvcHRpb25zLnZhbHVlU3BlYyAmJiBvcHRpb25zLnZhbHVlU3BlYy5leHByZXNzaW9uKSB7XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2Ygb3B0aW9ucy52YWx1ZVNwZWMuZXhwcmVzc2lvbi5wYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBkaXNhbGxvd2VkUGFyYW1ldGVycy5kZWxldGUocGFyYW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkaXNhbGxvd2VkUGFyYW1ldGVycy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBDb21wb3VuZEV4cHJlc3Npb24kMSkge1xuICAgICAgICBpZiAoZGlzYWxsb3dlZFBhcmFtZXRlcnMuaGFzKGUubmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihvcHRpb25zLmtleSwgb3B0aW9ucy52YWx1ZSwgYFtcIiR7IGUubmFtZSB9XCJdIGV4cHJlc3Npb24gaXMgbm90IHN1cHBvcnRlZCBpbiBhIGZpbHRlciBmb3IgYSAkeyBvcHRpb25zLm9iamVjdC50eXBlIH0gbGF5ZXIgd2l0aCBpZDogJHsgb3B0aW9ucy5vYmplY3QuaWQgfWApXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlLmVhY2hDaGlsZChhcmcgPT4ge1xuICAgICAgICBlcnJvcnMucHVzaCguLi5kaXNhbGxvd2VkRmlsdGVyUGFyYW1ldGVycyhhcmcsIG9wdGlvbnMpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXJyb3JzO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUJvb2xlYW4ob3B0aW9ucykge1xuICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zLmtleTtcbiAgICBjb25zdCB0eXBlID0gZ2V0VHlwZSh2YWx1ZSk7XG4gICAgaWYgKHR5cGUgIT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYGJvb2xlYW4gZXhwZWN0ZWQsICR7IHR5cGUgfSBmb3VuZGApXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zLmtleTtcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3QgdHlwZSA9IGdldFR5cGUodmFsdWUpO1xuICAgIGlmICh0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYGNvbG9yIGV4cGVjdGVkLCAkeyB0eXBlIH0gZm91bmRgKV07XG4gICAgfVxuICAgIGlmIChjc3Njb2xvcnBhcnNlci5wYXJzZUNTU0NvbG9yKHZhbHVlKSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYGNvbG9yIGV4cGVjdGVkLCBcIiR7IHZhbHVlIH1cIiBmb3VuZGApXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUVudW0ob3B0aW9ucykge1xuICAgIGNvbnN0IGtleSA9IG9wdGlvbnMua2V5O1xuICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICBjb25zdCB2YWx1ZVNwZWMgPSBvcHRpb25zLnZhbHVlU3BlYztcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVNwZWMudmFsdWVzKSkge1xuICAgICAgICBpZiAodmFsdWVTcGVjLnZhbHVlcy5pbmRleE9mKHVuYnVuZGxlKHZhbHVlKSkgPT09IC0xKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGBleHBlY3RlZCBvbmUgb2YgWyR7IHZhbHVlU3BlYy52YWx1ZXMuam9pbignLCAnKSB9XSwgJHsgSlNPTi5zdHJpbmdpZnkodmFsdWUpIH0gZm91bmRgKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXModmFsdWVTcGVjLnZhbHVlcykuaW5kZXhPZih1bmJ1bmRsZSh2YWx1ZSkpID09PSAtMSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihrZXksIHZhbHVlLCBgZXhwZWN0ZWQgb25lIG9mIFskeyBPYmplY3Qua2V5cyh2YWx1ZVNwZWMudmFsdWVzKS5qb2luKCcsICcpIH1dLCAkeyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgfSBmb3VuZGApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZpbHRlcihvcHRpb25zKSB7XG4gICAgaWYgKGlzRXhwcmVzc2lvbkZpbHRlcihkZWVwVW5idW5kbGUob3B0aW9ucy52YWx1ZSkpKSB7XG4gICAgICAgIGNvbnN0IGxheWVyVHlwZSA9IG9wdGlvbnMubGF5ZXJUeXBlIHx8ICdmaWxsJztcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlRXhwcmVzc2lvbihleHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIGV4cHJlc3Npb25Db250ZXh0OiAnZmlsdGVyJyxcbiAgICAgICAgICAgIHZhbHVlU3BlYzogb3B0aW9ucy5zdHlsZVNwZWNbYGZpbHRlcl8keyBsYXllclR5cGUgfWBdXG4gICAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVOb25FeHByZXNzaW9uRmlsdGVyKG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlTm9uRXhwcmVzc2lvbkZpbHRlcihvcHRpb25zKSB7XG4gICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgIGNvbnN0IGtleSA9IG9wdGlvbnMua2V5O1xuICAgIGlmIChnZXRUeXBlKHZhbHVlKSAhPT0gJ2FycmF5Jykge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYGFycmF5IGV4cGVjdGVkLCAkeyBnZXRUeXBlKHZhbHVlKSB9IGZvdW5kYCldO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZVNwZWMgPSBvcHRpb25zLnN0eWxlU3BlYztcbiAgICBsZXQgdHlwZTtcbiAgICBsZXQgZXJyb3JzID0gW107XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsICdmaWx0ZXIgYXJyYXkgbXVzdCBoYXZlIGF0IGxlYXN0IDEgZWxlbWVudCcpXTtcbiAgICB9XG4gICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZUVudW0oe1xuICAgICAgICBrZXk6IGAkeyBrZXkgfVswXWAsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVswXSxcbiAgICAgICAgdmFsdWVTcGVjOiBzdHlsZVNwZWMuZmlsdGVyX29wZXJhdG9yLFxuICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgc3R5bGVTcGVjOiBvcHRpb25zLnN0eWxlU3BlY1xuICAgIH0pKTtcbiAgICBzd2l0Y2ggKHVuYnVuZGxlKHZhbHVlWzBdKSkge1xuICAgIGNhc2UgJzwnOlxuICAgIGNhc2UgJzw9JzpcbiAgICBjYXNlICc+JzpcbiAgICBjYXNlICc+PSc6XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPj0gMiAmJiB1bmJ1bmRsZSh2YWx1ZVsxXSkgPT09ICckdHlwZScpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYFwiJHR5cGVcIiBjYW5ub3QgYmUgdXNlIHdpdGggb3BlcmF0b3IgXCIkeyB2YWx1ZVswXSB9XCJgKSk7XG4gICAgICAgIH1cbiAgICBjYXNlICc9PSc6XG4gICAgY2FzZSAnIT0nOlxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGBmaWx0ZXIgYXJyYXkgZm9yIG9wZXJhdG9yIFwiJHsgdmFsdWVbMF0gfVwiIG11c3QgaGF2ZSAzIGVsZW1lbnRzYCkpO1xuICAgICAgICB9XG4gICAgY2FzZSAnaW4nOlxuICAgIGNhc2UgJyFpbic6XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgdHlwZSA9IGdldFR5cGUodmFsdWVbMV0pO1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihgJHsga2V5IH1bMV1gLCB2YWx1ZVsxXSwgYHN0cmluZyBleHBlY3RlZCwgJHsgdHlwZSB9IGZvdW5kYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAyOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHR5cGUgPSBnZXRUeXBlKHZhbHVlW2ldKTtcbiAgICAgICAgICAgIGlmICh1bmJ1bmRsZSh2YWx1ZVsxXSkgPT09ICckdHlwZScpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlRW51bSh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogYCR7IGtleSB9WyR7IGkgfV1gLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVbaV0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlU3BlYzogc3R5bGVTcGVjLmdlb21ldHJ5X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBvcHRpb25zLnN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNwZWM6IG9wdGlvbnMuc3R5bGVTcGVjXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlICE9PSAnc3RyaW5nJyAmJiB0eXBlICE9PSAnbnVtYmVyJyAmJiB0eXBlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGAkeyBrZXkgfVskeyBpIH1dYCwgdmFsdWVbaV0sIGBzdHJpbmcsIG51bWJlciwgb3IgYm9vbGVhbiBleHBlY3RlZCwgJHsgdHlwZSB9IGZvdW5kYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FueSc6XG4gICAgY2FzZSAnYWxsJzpcbiAgICBjYXNlICdub25lJzpcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZU5vbkV4cHJlc3Npb25GaWx0ZXIoe1xuICAgICAgICAgICAgICAgIGtleTogYCR7IGtleSB9WyR7IGkgfV1gLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVtpXSxcbiAgICAgICAgICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgICAgICAgICBzdHlsZVNwZWM6IG9wdGlvbnMuc3R5bGVTcGVjXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaGFzJzpcbiAgICBjYXNlICchaGFzJzpcbiAgICAgICAgdHlwZSA9IGdldFR5cGUodmFsdWVbMV0pO1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGBmaWx0ZXIgYXJyYXkgZm9yIFwiJHsgdmFsdWVbMF0gfVwiIG9wZXJhdG9yIG11c3QgaGF2ZSAyIGVsZW1lbnRzYCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGAkeyBrZXkgfVsxXWAsIHZhbHVlWzFdLCBgc3RyaW5nIGV4cGVjdGVkLCAkeyB0eXBlIH0gZm91bmRgKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAnd2l0aGluJzpcbiAgICAgICAgdHlwZSA9IGdldFR5cGUodmFsdWVbMV0pO1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGBmaWx0ZXIgYXJyYXkgZm9yIFwiJHsgdmFsdWVbMF0gfVwiIG9wZXJhdG9yIG11c3QgaGF2ZSAyIGVsZW1lbnRzYCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGAkeyBrZXkgfVsxXWAsIHZhbHVlWzFdLCBgb2JqZWN0IGV4cGVjdGVkLCAkeyB0eXBlIH0gZm91bmRgKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHkob3B0aW9ucywgcHJvcGVydHlUeXBlKSB7XG4gICAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnN0eWxlO1xuICAgIGNvbnN0IHN0eWxlU3BlYyA9IG9wdGlvbnMuc3R5bGVTcGVjO1xuICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICBjb25zdCBwcm9wZXJ0eUtleSA9IG9wdGlvbnMub2JqZWN0S2V5O1xuICAgIGNvbnN0IGxheWVyU3BlYyA9IHN0eWxlU3BlY1tgJHsgcHJvcGVydHlUeXBlIH1fJHsgb3B0aW9ucy5sYXllclR5cGUgfWBdO1xuICAgIGlmICghbGF5ZXJTcGVjKVxuICAgICAgICByZXR1cm4gW107XG4gICAgY29uc3QgdHJhbnNpdGlvbk1hdGNoID0gcHJvcGVydHlLZXkubWF0Y2goL14oLiopLXRyYW5zaXRpb24kLyk7XG4gICAgaWYgKHByb3BlcnR5VHlwZSA9PT0gJ3BhaW50JyAmJiB0cmFuc2l0aW9uTWF0Y2ggJiYgbGF5ZXJTcGVjW3RyYW5zaXRpb25NYXRjaFsxXV0gJiYgbGF5ZXJTcGVjW3RyYW5zaXRpb25NYXRjaFsxXV0udHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlYy50cmFuc2l0aW9uLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdHlsZVNwZWNcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlU3BlYyA9IG9wdGlvbnMudmFsdWVTcGVjIHx8IGxheWVyU3BlY1twcm9wZXJ0eUtleV07XG4gICAgaWYgKCF2YWx1ZVNwZWMpIHtcbiAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGB1bmtub3duIHByb3BlcnR5IFwiJHsgcHJvcGVydHlLZXkgfVwiYCldO1xuICAgIH1cbiAgICBsZXQgdG9rZW5NYXRjaDtcbiAgICBpZiAoZ2V0VHlwZSh2YWx1ZSkgPT09ICdzdHJpbmcnICYmIHN1cHBvcnRzUHJvcGVydHlFeHByZXNzaW9uKHZhbHVlU3BlYykgJiYgIXZhbHVlU3BlYy50b2tlbnMgJiYgKHRva2VuTWF0Y2ggPSAvXnsoW159XSspfSQvLmV4ZWModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgYFwiJHsgcHJvcGVydHlLZXkgfVwiIGRvZXMgbm90IHN1cHBvcnQgaW50ZXJwb2xhdGlvbiBzeW50YXhcXG5gICsgYFVzZSBhbiBpZGVudGl0eSBwcm9wZXJ0eSBmdW5jdGlvbiBpbnN0ZWFkOiBcXGB7IFwidHlwZVwiOiBcImlkZW50aXR5XCIsIFwicHJvcGVydHlcIjogJHsgSlNPTi5zdHJpbmdpZnkodG9rZW5NYXRjaFsxXSkgfSB9XFxgLmApXTtcbiAgICB9XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgaWYgKG9wdGlvbnMubGF5ZXJUeXBlID09PSAnc3ltYm9sJykge1xuICAgICAgICBpZiAocHJvcGVydHlLZXkgPT09ICd0ZXh0LWZpZWxkJyAmJiBzdHlsZSAmJiAhc3R5bGUuZ2x5cGhzKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsICd1c2Ugb2YgXCJ0ZXh0LWZpZWxkXCIgcmVxdWlyZXMgYSBzdHlsZSBcImdseXBoc1wiIHByb3BlcnR5JykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUtleSA9PT0gJ3RleHQtZm9udCcgJiYgaXNGdW5jdGlvbihkZWVwVW5idW5kbGUodmFsdWUpKSAmJiB1bmJ1bmRsZSh2YWx1ZS50eXBlKSA9PT0gJ2lkZW50aXR5Jykge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihrZXksIHZhbHVlLCAnXCJ0ZXh0LWZvbnRcIiBkb2VzIG5vdCBzdXBwb3J0IGlkZW50aXR5IGZ1bmN0aW9ucycpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZSh7XG4gICAgICAgIGtleTogb3B0aW9ucy5rZXksXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZVNwZWMsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICBzdHlsZVNwZWMsXG4gICAgICAgIGV4cHJlc3Npb25Db250ZXh0OiAncHJvcGVydHknLFxuICAgICAgICBwcm9wZXJ0eVR5cGUsXG4gICAgICAgIHByb3BlcnR5S2V5XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVBhaW50UHJvcGVydHkob3B0aW9ucykge1xuICAgIHJldHVybiB2YWxpZGF0ZVByb3BlcnR5KG9wdGlvbnMsICdwYWludCcpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUxheW91dFByb3BlcnR5KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVQcm9wZXJ0eShvcHRpb25zLCAnbGF5b3V0Jyk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlTGF5ZXIob3B0aW9ucykge1xuICAgIGxldCBlcnJvcnMgPSBbXTtcbiAgICBjb25zdCBsYXllciA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnN0eWxlO1xuICAgIGNvbnN0IHN0eWxlU3BlYyA9IG9wdGlvbnMuc3R5bGVTcGVjO1xuICAgIGlmICghbGF5ZXIudHlwZSAmJiAhbGF5ZXIucmVmKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBsYXllciwgJ2VpdGhlciBcInR5cGVcIiBvciBcInJlZlwiIGlzIHJlcXVpcmVkJykpO1xuICAgIH1cbiAgICBsZXQgdHlwZSA9IHVuYnVuZGxlKGxheWVyLnR5cGUpO1xuICAgIGNvbnN0IHJlZiA9IHVuYnVuZGxlKGxheWVyLnJlZik7XG4gICAgaWYgKGxheWVyLmlkKSB7XG4gICAgICAgIGNvbnN0IGxheWVySWQgPSB1bmJ1bmRsZShsYXllci5pZCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5hcnJheUluZGV4OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyTGF5ZXIgPSBzdHlsZS5sYXllcnNbaV07XG4gICAgICAgICAgICBpZiAodW5idW5kbGUob3RoZXJMYXllci5pZCkgPT09IGxheWVySWQpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXIuaWQsIGBkdXBsaWNhdGUgbGF5ZXIgaWQgXCIkeyBsYXllci5pZCB9XCIsIHByZXZpb3VzbHkgdXNlZCBhdCBsaW5lICR7IG90aGVyTGF5ZXIuaWQuX19saW5lX18gfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoJ3JlZicgaW4gbGF5ZXIpIHtcbiAgICAgICAgW1xuICAgICAgICAgICAgJ3R5cGUnLFxuICAgICAgICAgICAgJ3NvdXJjZScsXG4gICAgICAgICAgICAnc291cmNlLWxheWVyJyxcbiAgICAgICAgICAgICdmaWx0ZXInLFxuICAgICAgICAgICAgJ2xheW91dCdcbiAgICAgICAgXS5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgaWYgKHAgaW4gbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXJbcF0sIGBcIiR7IHAgfVwiIGlzIHByb2hpYml0ZWQgZm9yIHJlZiBsYXllcnNgKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgcGFyZW50O1xuICAgICAgICBzdHlsZS5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XG4gICAgICAgICAgICBpZiAodW5idW5kbGUobGF5ZXIuaWQpID09PSByZWYpXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gbGF5ZXI7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBsYXllci5yZWYsIGByZWYgbGF5ZXIgXCIkeyByZWYgfVwiIG5vdCBmb3VuZGApKTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJlbnQucmVmKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXIucmVmLCAncmVmIGNhbm5vdCByZWZlcmVuY2UgYW5vdGhlciByZWYgbGF5ZXInKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0eXBlID0gdW5idW5kbGUocGFyZW50LnR5cGUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghKHR5cGUgPT09ICdiYWNrZ3JvdW5kJyB8fCB0eXBlID09PSAnc2t5JykpIHtcbiAgICAgICAgaWYgKCFsYXllci5zb3VyY2UpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBsYXllciwgJ21pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgXCJzb3VyY2VcIicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHN0eWxlLnNvdXJjZXMgJiYgc3R5bGUuc291cmNlc1tsYXllci5zb3VyY2VdO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlVHlwZSA9IHNvdXJjZSAmJiB1bmJ1bmRsZShzb3VyY2UudHlwZSk7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBsYXllci5zb3VyY2UsIGBzb3VyY2UgXCIkeyBsYXllci5zb3VyY2UgfVwiIG5vdCBmb3VuZGApKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlVHlwZSA9PT0gJ3ZlY3RvcicgJiYgdHlwZSA9PT0gJ3Jhc3RlcicpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXIuc291cmNlLCBgbGF5ZXIgXCIkeyBsYXllci5pZCB9XCIgcmVxdWlyZXMgYSByYXN0ZXIgc291cmNlYCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VUeXBlID09PSAncmFzdGVyJyAmJiB0eXBlICE9PSAncmFzdGVyJykge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBsYXllci5zb3VyY2UsIGBsYXllciBcIiR7IGxheWVyLmlkIH1cIiByZXF1aXJlcyBhIHZlY3RvciBzb3VyY2VgKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZVR5cGUgPT09ICd2ZWN0b3InICYmICFsYXllclsnc291cmNlLWxheWVyJ10pIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXIsIGBsYXllciBcIiR7IGxheWVyLmlkIH1cIiBtdXN0IHNwZWNpZnkgYSBcInNvdXJjZS1sYXllclwiYCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VUeXBlID09PSAncmFzdGVyLWRlbScgJiYgdHlwZSAhPT0gJ2hpbGxzaGFkZScpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXIuc291cmNlLCAncmFzdGVyLWRlbSBzb3VyY2UgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGxheWVyIHR5cGUgXFwnaGlsbHNoYWRlXFwnLicpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2xpbmUnICYmIGxheWVyLnBhaW50ICYmIChsYXllci5wYWludFsnbGluZS1ncmFkaWVudCddIHx8IGxheWVyLnBhaW50WydsaW5lLXRyaW0tb2Zmc2V0J10pICYmIChzb3VyY2VUeXBlICE9PSAnZ2VvanNvbicgfHwgIXNvdXJjZS5saW5lTWV0cmljcykpIHtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgbGF5ZXIsIGBsYXllciBcIiR7IGxheWVyLmlkIH1cIiBzcGVjaWZpZXMgYSBsaW5lLWdyYWRpZW50LCB3aGljaCByZXF1aXJlcyBhIEdlb0pTT04gc291cmNlIHdpdGggXFxgbGluZU1ldHJpY3NcXGAgZW5hYmxlZC5gKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZU9iamVjdCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgdmFsdWU6IGxheWVyLFxuICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlYy5sYXllcixcbiAgICAgICAgc3R5bGU6IG9wdGlvbnMuc3R5bGUsXG4gICAgICAgIHN0eWxlU3BlYzogb3B0aW9ucy5zdHlsZVNwZWMsXG4gICAgICAgIG9iamVjdEVsZW1lbnRWYWxpZGF0b3JzOiB7XG4gICAgICAgICAgICAnKicoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBgJHsga2V5IH0udHlwZWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBsYXllci50eXBlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlYy5sYXllci50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTcGVjOiBvcHRpb25zLnN0eWxlU3BlYyxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0S2V5OiAndHlwZSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWx0ZXIob3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZUZpbHRlcihleHRlbmQoeyBsYXllclR5cGU6IHR5cGUgfSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxheW91dChvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlT2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIGtleTogb3B0aW9ucy5rZXksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBvcHRpb25zLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVNwZWM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogb3B0aW9ucy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTcGVjOiBvcHRpb25zLnN0eWxlU3BlYyxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0RWxlbWVudFZhbGlkYXRvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICcqJyhvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlTGF5b3V0UHJvcGVydHkoZXh0ZW5kKHsgbGF5ZXJUeXBlOiB0eXBlIH0sIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhaW50KG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVPYmplY3Qoe1xuICAgICAgICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgICAgICAga2V5OiBvcHRpb25zLmtleSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG9wdGlvbnMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlU3BlYzoge30sXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBvcHRpb25zLnN0eWxlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNwZWM6IG9wdGlvbnMuc3R5bGVTcGVjLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3RFbGVtZW50VmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJyonKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVQYWludFByb3BlcnR5KGV4dGVuZCh7IGxheWVyVHlwZTogdHlwZSB9LCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gZXJyb3JzO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhvcHRpb25zKSB7XG4gICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgIGNvbnN0IGtleSA9IG9wdGlvbnMua2V5O1xuICAgIGNvbnN0IHR5cGUgPSBnZXRUeXBlKHZhbHVlKTtcbiAgICBpZiAodHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdmFsdWUsIGBzdHJpbmcgZXhwZWN0ZWQsICR7IHR5cGUgfSBmb3VuZGApXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuXG5jb25zdCBvYmplY3RFbGVtZW50VmFsaWRhdG9ycyA9IHsgcHJvbW90ZUlkOiB2YWxpZGF0ZVByb21vdGVJZCB9O1xuZnVuY3Rpb24gdmFsaWRhdGVTb3VyY2Uob3B0aW9ucykge1xuICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zLmtleTtcbiAgICBjb25zdCBzdHlsZVNwZWMgPSBvcHRpb25zLnN0eWxlU3BlYztcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMuc3R5bGU7XG4gICAgaWYgKCF2YWx1ZS50eXBlKSB7XG4gICAgICAgIHJldHVybiBbbmV3IFZhbGlkYXRpb25FcnJvcihrZXksIHZhbHVlLCAnXCJ0eXBlXCIgaXMgcmVxdWlyZWQnKV07XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB1bmJ1bmRsZSh2YWx1ZS50eXBlKTtcbiAgICBsZXQgZXJyb3JzO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3ZlY3Rvcic6XG4gICAgY2FzZSAncmFzdGVyJzpcbiAgICBjYXNlICdyYXN0ZXItZGVtJzpcbiAgICAgICAgZXJyb3JzID0gdmFsaWRhdGVPYmplY3Qoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlY1tgc291cmNlXyR7IHR5cGUucmVwbGFjZSgnLScsICdfJykgfWBdLFxuICAgICAgICAgICAgc3R5bGU6IG9wdGlvbnMuc3R5bGUsXG4gICAgICAgICAgICBzdHlsZVNwZWMsXG4gICAgICAgICAgICBvYmplY3RFbGVtZW50VmFsaWRhdG9yc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICBjYXNlICdnZW9qc29uJzpcbiAgICAgICAgZXJyb3JzID0gdmFsaWRhdGVPYmplY3Qoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlYy5zb3VyY2VfZ2VvanNvbixcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgc3R5bGVTcGVjLFxuICAgICAgICAgICAgb2JqZWN0RWxlbWVudFZhbGlkYXRvcnNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh2YWx1ZS5jbHVzdGVyKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gdmFsdWUuY2x1c3RlclByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbb3BlcmF0b3IsIG1hcEV4cHJdID0gdmFsdWUuY2x1c3RlclByb3BlcnRpZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVkdWNlRXhwciA9IHR5cGVvZiBvcGVyYXRvciA9PT0gJ3N0cmluZycgPyBbXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICBbJ2FjY3VtdWxhdGVkJ10sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdnZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXSA6IG9wZXJhdG9yO1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKC4uLnZhbGlkYXRlRXhwcmVzc2lvbih7XG4gICAgICAgICAgICAgICAgICAgIGtleTogYCR7IGtleSB9LiR7IHByb3AgfS5tYXBgLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbWFwRXhwcixcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbkNvbnRleHQ6ICdjbHVzdGVyLW1hcCdcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goLi4udmFsaWRhdGVFeHByZXNzaW9uKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBgJHsga2V5IH0uJHsgcHJvcCB9LnJlZHVjZWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZWR1Y2VFeHByLFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uQ29udGV4dDogJ2NsdXN0ZXItcmVkdWNlJ1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlT2JqZWN0KHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdmFsdWVTcGVjOiBzdHlsZVNwZWMuc291cmNlX3ZpZGVvLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBzdHlsZVNwZWNcbiAgICAgICAgfSk7XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgICByZXR1cm4gdmFsaWRhdGVPYmplY3Qoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlYy5zb3VyY2VfaW1hZ2UsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHN0eWxlU3BlY1xuICAgICAgICB9KTtcbiAgICBjYXNlICdjYW52YXMnOlxuICAgICAgICByZXR1cm4gW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBudWxsLCBgUGxlYXNlIHVzZSBydW50aW1lIEFQSXMgdG8gYWRkIGNhbnZhcyBzb3VyY2VzLCByYXRoZXIgdGhhbiBpbmNsdWRpbmcgdGhlbSBpbiBzdHlsZXNoZWV0cy5gLCAnc291cmNlLmNhbnZhcycpXTtcbiAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdmFsaWRhdGVFbnVtKHtcbiAgICAgICAgICAgIGtleTogYCR7IGtleSB9LnR5cGVgLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICB2YWx1ZVNwZWM6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3ZlY3RvcicsXG4gICAgICAgICAgICAgICAgICAgICdyYXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICAncmFzdGVyLWRlbScsXG4gICAgICAgICAgICAgICAgICAgICdnZW9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgJ3ZpZGVvJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ltYWdlJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHN0eWxlU3BlY1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb21vdGVJZCh7a2V5LCB2YWx1ZX0pIHtcbiAgICBpZiAoZ2V0VHlwZSh2YWx1ZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZVN0cmluZyh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHZhbHVlKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0ZVN0cmluZyh7XG4gICAgICAgICAgICAgICAga2V5OiBgJHsga2V5IH0uJHsgcHJvcCB9YCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVbcHJvcF1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVMaWdodChvcHRpb25zKSB7XG4gICAgY29uc3QgbGlnaHQgPSBvcHRpb25zLnZhbHVlO1xuICAgIGNvbnN0IHN0eWxlU3BlYyA9IG9wdGlvbnMuc3R5bGVTcGVjO1xuICAgIGNvbnN0IGxpZ2h0U3BlYyA9IHN0eWxlU3BlYy5saWdodDtcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMuc3R5bGU7XG4gICAgbGV0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IHJvb3RUeXBlID0gZ2V0VHlwZShsaWdodCk7XG4gICAgaWYgKGxpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9IGVsc2UgaWYgKHJvb3RUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KFtuZXcgVmFsaWRhdGlvbkVycm9yKCdsaWdodCcsIGxpZ2h0LCBgb2JqZWN0IGV4cGVjdGVkLCAkeyByb290VHlwZSB9IGZvdW5kYCldKTtcbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbGlnaHQpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbk1hdGNoID0ga2V5Lm1hdGNoKC9eKC4qKS10cmFuc2l0aW9uJC8pO1xuICAgICAgICBpZiAodHJhbnNpdGlvbk1hdGNoICYmIGxpZ2h0U3BlY1t0cmFuc2l0aW9uTWF0Y2hbMV1dICYmIGxpZ2h0U3BlY1t0cmFuc2l0aW9uTWF0Y2hbMV1dLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodmFsaWRhdGUoe1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbGlnaHRba2V5XSxcbiAgICAgICAgICAgICAgICB2YWx1ZVNwZWM6IHN0eWxlU3BlYy50cmFuc2l0aW9uLFxuICAgICAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgICAgIHN0eWxlU3BlY1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpZ2h0U3BlY1trZXldKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGxpZ2h0W2tleV0sXG4gICAgICAgICAgICAgICAgdmFsdWVTcGVjOiBsaWdodFNwZWNba2V5XSxcbiAgICAgICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgICAgICBzdHlsZVNwZWNcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoW25ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCBsaWdodFtrZXldLCBgdW5rbm93biBwcm9wZXJ0eSBcIiR7IGtleSB9XCJgKV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGVycmFpbihvcHRpb25zKSB7XG4gICAgY29uc3QgdGVycmFpbiA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgY29uc3Qgc3R5bGUgPSBvcHRpb25zLnN0eWxlO1xuICAgIGNvbnN0IHN0eWxlU3BlYyA9IG9wdGlvbnMuc3R5bGVTcGVjO1xuICAgIGNvbnN0IHRlcnJhaW5TcGVjID0gc3R5bGVTcGVjLnRlcnJhaW47XG4gICAgbGV0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IHJvb3RUeXBlID0gZ2V0VHlwZSh0ZXJyYWluKTtcbiAgICBpZiAodGVycmFpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfSBlbHNlIGlmIChyb290VHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChbbmV3IFZhbGlkYXRpb25FcnJvcigndGVycmFpbicsIHRlcnJhaW4sIGBvYmplY3QgZXhwZWN0ZWQsICR7IHJvb3RUeXBlIH0gZm91bmRgKV0pO1xuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0ZXJyYWluKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25NYXRjaCA9IGtleS5tYXRjaCgvXiguKiktdHJhbnNpdGlvbiQvKTtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25NYXRjaCAmJiB0ZXJyYWluU3BlY1t0cmFuc2l0aW9uTWF0Y2hbMV1dICYmIHRlcnJhaW5TcGVjW3RyYW5zaXRpb25NYXRjaFsxXV0udHJhbnNpdGlvbikge1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh2YWxpZGF0ZSh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0ZXJyYWluW2tleV0sXG4gICAgICAgICAgICAgICAgdmFsdWVTcGVjOiBzdHlsZVNwZWMudHJhbnNpdGlvbixcbiAgICAgICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgICAgICBzdHlsZVNwZWNcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXJyYWluU3BlY1trZXldKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRlcnJhaW5ba2V5XSxcbiAgICAgICAgICAgICAgICB2YWx1ZVNwZWM6IHRlcnJhaW5TcGVjW2tleV0sXG4gICAgICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICAgICAgc3R5bGVTcGVjXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KFtuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdGVycmFpbltrZXldLCBgdW5rbm93biBwcm9wZXJ0eSBcIiR7IGtleSB9XCJgKV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghdGVycmFpbi5zb3VyY2UpIHtcbiAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihrZXksIHRlcnJhaW4sIGB0ZXJyYWluIGlzIG1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgXCJzb3VyY2VcImApKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBzdHlsZS5zb3VyY2VzICYmIHN0eWxlLnNvdXJjZXNbdGVycmFpbi5zb3VyY2VdO1xuICAgICAgICBjb25zdCBzb3VyY2VUeXBlID0gc291cmNlICYmIHVuYnVuZGxlKHNvdXJjZS50eXBlKTtcbiAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB0ZXJyYWluLnNvdXJjZSwgYHNvdXJjZSBcIiR7IHRlcnJhaW4uc291cmNlIH1cIiBub3QgZm91bmRgKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlVHlwZSAhPT0gJ3Jhc3Rlci1kZW0nKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGtleSwgdGVycmFpbi5zb3VyY2UsIGB0ZXJyYWluIGNhbm5vdCBiZSB1c2VkIHdpdGggYSBzb3VyY2Ugb2YgdHlwZSAkeyBTdHJpbmcoc291cmNlVHlwZSkgfSwgaXQgb25seSBiZSB1c2VkIHdpdGggYSBcInJhc3Rlci1kZW1cIiBzb3VyY2UgdHlwZWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZvZyhvcHRpb25zKSB7XG4gICAgY29uc3QgZm9nID0gb3B0aW9ucy52YWx1ZTtcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMuc3R5bGU7XG4gICAgY29uc3Qgc3R5bGVTcGVjID0gb3B0aW9ucy5zdHlsZVNwZWM7XG4gICAgY29uc3QgZm9nU3BlYyA9IHN0eWxlU3BlYy5mb2c7XG4gICAgbGV0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IHJvb3RUeXBlID0gZ2V0VHlwZShmb2cpO1xuICAgIGlmIChmb2cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH0gZWxzZSBpZiAocm9vdFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoW25ldyBWYWxpZGF0aW9uRXJyb3IoJ2ZvZycsIGZvZywgYG9iamVjdCBleHBlY3RlZCwgJHsgcm9vdFR5cGUgfSBmb3VuZGApXSk7XG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGZvZykge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uTWF0Y2ggPSBrZXkubWF0Y2goL14oLiopLXRyYW5zaXRpb24kLyk7XG4gICAgICAgIGlmICh0cmFuc2l0aW9uTWF0Y2ggJiYgZm9nU3BlY1t0cmFuc2l0aW9uTWF0Y2hbMV1dICYmIGZvZ1NwZWNbdHJhbnNpdGlvbk1hdGNoWzFdXS50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZvZ1trZXldLFxuICAgICAgICAgICAgICAgIHZhbHVlU3BlYzogc3R5bGVTcGVjLnRyYW5zaXRpb24sXG4gICAgICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICAgICAgc3R5bGVTcGVjXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9nU3BlY1trZXldKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHZhbGlkYXRlKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZvZ1trZXldLFxuICAgICAgICAgICAgICAgIHZhbHVlU3BlYzogZm9nU3BlY1trZXldLFxuICAgICAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgICAgIHN0eWxlU3BlY1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdChbbmV3IFZhbGlkYXRpb25FcnJvcihrZXksIGZvZ1trZXldLCBgdW5rbm93biBwcm9wZXJ0eSBcIiR7IGtleSB9XCJgKV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0dGVkKG9wdGlvbnMpIHtcbiAgICBpZiAodmFsaWRhdGVTdHJpbmcob3B0aW9ucykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkYXRlRXhwcmVzc2lvbihvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJbWFnZShvcHRpb25zKSB7XG4gICAgaWYgKHZhbGlkYXRlU3RyaW5nKG9wdGlvbnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiB2YWxpZGF0ZUV4cHJlc3Npb24ob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvamVjdGlvbihvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvamVjdGlvbiA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3Qgc3R5bGVTcGVjID0gb3B0aW9ucy5zdHlsZVNwZWM7XG4gICAgY29uc3QgcHJvamVjdGlvblNwZWMgPSBzdHlsZVNwZWMucHJvamVjdGlvbjtcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMuc3R5bGU7XG4gICAgbGV0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IHJvb3RUeXBlID0gZ2V0VHlwZShwcm9qZWN0aW9uKTtcbiAgICBpZiAocm9vdFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb2plY3Rpb24pIHtcbiAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodmFsaWRhdGUoe1xuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvamVjdGlvbltrZXldLFxuICAgICAgICAgICAgICAgIHZhbHVlU3BlYzogcHJvamVjdGlvblNwZWNba2V5XSxcbiAgICAgICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgICAgICBzdHlsZVNwZWNcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocm9vdFR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoW25ldyBWYWxpZGF0aW9uRXJyb3IoJ3Byb2plY3Rpb24nLCBwcm9qZWN0aW9uLCBgb2JqZWN0IG9yIHN0cmluZyBleHBlY3RlZCwgJHsgcm9vdFR5cGUgfSBmb3VuZGApXSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG5cbmNvbnN0IFZBTElEQVRPUlMgPSB7XG4gICAgJyonKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICAnYXJyYXknOiB2YWxpZGF0ZUFycmF5LFxuICAgICdib29sZWFuJzogdmFsaWRhdGVCb29sZWFuLFxuICAgICdudW1iZXInOiB2YWxpZGF0ZU51bWJlcixcbiAgICAnY29sb3InOiB2YWxpZGF0ZUNvbG9yLFxuICAgICdlbnVtJzogdmFsaWRhdGVFbnVtLFxuICAgICdmaWx0ZXInOiB2YWxpZGF0ZUZpbHRlcixcbiAgICAnZnVuY3Rpb24nOiB2YWxpZGF0ZUZ1bmN0aW9uLFxuICAgICdsYXllcic6IHZhbGlkYXRlTGF5ZXIsXG4gICAgJ29iamVjdCc6IHZhbGlkYXRlT2JqZWN0LFxuICAgICdzb3VyY2UnOiB2YWxpZGF0ZVNvdXJjZSxcbiAgICAnbGlnaHQnOiB2YWxpZGF0ZUxpZ2h0LFxuICAgICd0ZXJyYWluJzogdmFsaWRhdGVUZXJyYWluLFxuICAgICdmb2cnOiB2YWxpZGF0ZUZvZyxcbiAgICAnc3RyaW5nJzogdmFsaWRhdGVTdHJpbmcsXG4gICAgJ2Zvcm1hdHRlZCc6IHZhbGlkYXRlRm9ybWF0dGVkLFxuICAgICdyZXNvbHZlZEltYWdlJzogdmFsaWRhdGVJbWFnZSxcbiAgICAncHJvamVjdGlvbic6IHZhbGlkYXRlUHJvamVjdGlvblxufTtcbmZ1bmN0aW9uIHZhbGlkYXRlKG9wdGlvbnMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3QgdmFsdWVTcGVjID0gb3B0aW9ucy52YWx1ZVNwZWM7XG4gICAgY29uc3Qgc3R5bGVTcGVjID0gb3B0aW9ucy5zdHlsZVNwZWM7XG4gICAgaWYgKHZhbHVlU3BlYy5leHByZXNzaW9uICYmIGlzRnVuY3Rpb24odW5idW5kbGUodmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVGdW5jdGlvbihvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlU3BlYy5leHByZXNzaW9uICYmIGlzRXhwcmVzc2lvbihkZWVwVW5idW5kbGUodmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVFeHByZXNzaW9uKG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodmFsdWVTcGVjLnR5cGUgJiYgVkFMSURBVE9SU1t2YWx1ZVNwZWMudHlwZV0pIHtcbiAgICAgICAgcmV0dXJuIFZBTElEQVRPUlNbdmFsdWVTcGVjLnR5cGVdKG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gdmFsaWRhdGVPYmplY3QoZXh0ZW5kKHt9LCBvcHRpb25zLCB7IHZhbHVlU3BlYzogdmFsdWVTcGVjLnR5cGUgPyBzdHlsZVNwZWNbdmFsdWVTcGVjLnR5cGVdIDogdmFsdWVTcGVjIH0pKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVHbHlwaHNVUkwgKG9wdGlvbnMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGVTdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGVycm9ycy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJ3tmb250c3RhY2t9JykgPT09IC0xKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3Ioa2V5LCB2YWx1ZSwgJ1wiZ2x5cGhzXCIgdXJsIG11c3QgaW5jbHVkZSBhIFwie2ZvbnRzdGFja31cIiB0b2tlbicpKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJ3tyYW5nZX0nKSA9PT0gLTEpIHtcbiAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihrZXksIHZhbHVlLCAnXCJnbHlwaHNcIiB1cmwgbXVzdCBpbmNsdWRlIGEgXCJ7cmFuZ2V9XCIgdG9rZW4nKSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcnM7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3R5bGUkMShzdHlsZSwgc3R5bGVTcGVjID0gdjgpIHtcbiAgICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZSh7XG4gICAgICAgIGtleTogJycsXG4gICAgICAgIHZhbHVlOiBzdHlsZSxcbiAgICAgICAgdmFsdWVTcGVjOiBzdHlsZVNwZWMuJHJvb3QsXG4gICAgICAgIHN0eWxlU3BlYyxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIG9iamVjdEVsZW1lbnRWYWxpZGF0b3JzOiB7XG4gICAgICAgICAgICBnbHlwaHM6IHZhbGlkYXRlR2x5cGhzVVJMLFxuICAgICAgICAgICAgJyonOiAoKSA9PiBbXVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvcnRFcnJvcnMoZXJyb3JzKTtcbn1cbmZ1bmN0aW9uIHNvcnRFcnJvcnMoZXJyb3JzKSB7XG4gICAgcmV0dXJuIGVycm9ycy5zbGljZSgpLnNvcnQoKGEsIGIpID0+IGEubGluZSAmJiBiLmxpbmUgPyBhLmxpbmUgLSBiLmxpbmUgOiAwKTtcbn1cblxuLyogcGFyc2VyIGdlbmVyYXRlZCBieSBqaXNvbiAwLjQuMTUgKi9cblxudmFyIGpzb25saW50ID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuLypcbiAgUmV0dXJucyBhIFBhcnNlciBvYmplY3Qgb2YgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG5cbiAgUGFyc2VyOiB7XG4gICAgeXk6IHt9XG4gIH1cblxuICBQYXJzZXIucHJvdG90eXBlOiB7XG4gICAgeXk6IHt9LFxuICAgIHRyYWNlOiBmdW5jdGlvbigpLFxuICAgIHN5bWJvbHNfOiB7YXNzb2NpYXRpdmUgbGlzdDogbmFtZSA9PT4gbnVtYmVyfSxcbiAgICB0ZXJtaW5hbHNfOiB7YXNzb2NpYXRpdmUgbGlzdDogbnVtYmVyID09PiBuYW1lfSxcbiAgICBwcm9kdWN0aW9uc186IFsuLi5dLFxuICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlLCAkJCwgXyQpLFxuICAgIHRhYmxlOiBbLi4uXSxcbiAgICBkZWZhdWx0QWN0aW9uczogey4uLn0sXG4gICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoKSxcbiAgICBwYXJzZTogZnVuY3Rpb24oaW5wdXQpLFxuXG4gICAgbGV4ZXI6IHtcbiAgICAgICAgRU9GOiAxLFxuICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbihzdHIsIGhhc2gpLFxuICAgICAgICBzZXRJbnB1dDogZnVuY3Rpb24oaW5wdXQpLFxuICAgICAgICBpbnB1dDogZnVuY3Rpb24oKSxcbiAgICAgICAgdW5wdXQ6IGZ1bmN0aW9uKHN0ciksXG4gICAgICAgIG1vcmU6IGZ1bmN0aW9uKCksXG4gICAgICAgIGxlc3M6IGZ1bmN0aW9uKG4pLFxuICAgICAgICBwYXN0SW5wdXQ6IGZ1bmN0aW9uKCksXG4gICAgICAgIHVwY29taW5nSW5wdXQ6IGZ1bmN0aW9uKCksXG4gICAgICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24oKSxcbiAgICAgICAgdGVzdF9tYXRjaDogZnVuY3Rpb24ocmVnZXhfbWF0Y2hfYXJyYXksIHJ1bGVfaW5kZXgpLFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpLFxuICAgICAgICBsZXg6IGZ1bmN0aW9uKCksXG4gICAgICAgIGJlZ2luOiBmdW5jdGlvbihjb25kaXRpb24pLFxuICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAgICAgICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24oKSxcbiAgICAgICAgdG9wU3RhdGU6IGZ1bmN0aW9uKCksXG4gICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24oY29uZGl0aW9uKSxcblxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICByYW5nZXM6IGJvb2xlYW4gICAgICAgICAgIChvcHRpb25hbDogdHJ1ZSA9PT4gdG9rZW4gbG9jYXRpb24gaW5mbyB3aWxsIGluY2x1ZGUgYSAucmFuZ2VbXSBtZW1iZXIpXG4gICAgICAgICAgICBmbGV4OiBib29sZWFuICAgICAgICAgICAgIChvcHRpb25hbDogdHJ1ZSA9PT4gZmxleC1saWtlIGxleGluZyBiZWhhdmlvdXIgd2hlcmUgdGhlIHJ1bGVzIGFyZSB0ZXN0ZWQgZXhoYXVzdGl2ZWx5IHRvIGZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gpXG4gICAgICAgICAgICBiYWNrdHJhY2tfbGV4ZXI6IGJvb2xlYW4gIChvcHRpb25hbDogdHJ1ZSA9PT4gbGV4ZXIgcmVnZXhlcyBhcmUgdGVzdGVkIGluIG9yZGVyIGFuZCBmb3IgZWFjaCBtYXRjaGluZyByZWdleCB0aGUgYWN0aW9uIGNvZGUgaXMgaW52b2tlZDsgdGhlIGxleGVyIHRlcm1pbmF0ZXMgdGhlIHNjYW4gd2hlbiBhIHRva2VuIGlzIHJldHVybmVkIGJ5IHRoZSBhY3Rpb24gY29kZSlcbiAgICAgICAgfSxcblxuICAgICAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbih5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVCksXG4gICAgICAgIHJ1bGVzOiBbLi4uXSxcbiAgICAgICAgY29uZGl0aW9uczoge2Fzc29jaWF0aXZlIGxpc3Q6IG5hbWUgPT0+IHNldH0sXG4gICAgfVxuICB9XG5cblxuICB0b2tlbiBsb2NhdGlvbiBpbmZvIChAJCwgXyQsIGV0Yy4pOiB7XG4gICAgZmlyc3RfbGluZTogbixcbiAgICBsYXN0X2xpbmU6IG4sXG4gICAgZmlyc3RfY29sdW1uOiBuLFxuICAgIGxhc3RfY29sdW1uOiBuLFxuICAgIHJhbmdlOiBbc3RhcnRfbnVtYmVyLCBlbmRfbnVtYmVyXSAgICAgICAod2hlcmUgdGhlIG51bWJlcnMgYXJlIGluZGV4ZXMgaW50byB0aGUgaW5wdXQgc3RyaW5nLCByZWd1bGFyIHplcm8tYmFzZWQpXG4gIH1cblxuXG4gIHRoZSBwYXJzZUVycm9yIGZ1bmN0aW9uIHJlY2VpdmVzIGEgJ2hhc2gnIG9iamVjdCB3aXRoIHRoZXNlIG1lbWJlcnMgZm9yIGxleGVyIGFuZCBwYXJzZXIgZXJyb3JzOiB7XG4gICAgdGV4dDogICAgICAgIChtYXRjaGVkIHRleHQpXG4gICAgdG9rZW46ICAgICAgICh0aGUgcHJvZHVjZWQgdGVybWluYWwgdG9rZW4sIGlmIGFueSlcbiAgICBsaW5lOiAgICAgICAgKHl5bGluZW5vKVxuICB9XG4gIHdoaWxlIHBhcnNlciAoZ3JhbW1hcikgZXJyb3JzIHdpbGwgYWxzbyBwcm92aWRlIHRoZXNlIG1lbWJlcnMsIGkuZS4gcGFyc2VyIGVycm9ycyBkZWxpdmVyIGEgc3VwZXJzZXQgb2YgYXR0cmlidXRlczoge1xuICAgIGxvYzogICAgICAgICAoeXlsbG9jKVxuICAgIGV4cGVjdGVkOiAgICAoc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHNldCBvZiBleHBlY3RlZCB0b2tlbnMpXG4gICAgcmVjb3ZlcmFibGU6IChib29sZWFuOiBUUlVFIHdoZW4gdGhlIHBhcnNlciBoYXMgYSBlcnJvciByZWNvdmVyeSBydWxlIGF2YWlsYWJsZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVycm9yKVxuICB9XG4qL1xudmFyIHBhcnNlciA9IChmdW5jdGlvbigpe1xudmFyIG89ZnVuY3Rpb24oayx2LG8sbCl7Zm9yKG89b3x8e30sbD1rLmxlbmd0aDtsLS07b1trW2xdXT12KTtyZXR1cm4gb30sJFYwPVsxLDEyXSwkVjE9WzEsMTNdLCRWMj1bMSw5XSwkVjM9WzEsMTBdLCRWND1bMSwxMV0sJFY1PVsxLDE0XSwkVjY9WzEsMTVdLCRWNz1bMTQsMTgsMjIsMjRdLCRWOD1bMTgsMjJdLCRWOT1bMjIsMjRdO1xudmFyIHBhcnNlciA9IHt0cmFjZTogZnVuY3Rpb24gdHJhY2UoKSB7IH0sXG55eToge30sXG5zeW1ib2xzXzoge1wiZXJyb3JcIjoyLFwiSlNPTlN0cmluZ1wiOjMsXCJTVFJJTkdcIjo0LFwiSlNPTk51bWJlclwiOjUsXCJOVU1CRVJcIjo2LFwiSlNPTk51bGxMaXRlcmFsXCI6NyxcIk5VTExcIjo4LFwiSlNPTkJvb2xlYW5MaXRlcmFsXCI6OSxcIlRSVUVcIjoxMCxcIkZBTFNFXCI6MTEsXCJKU09OVGV4dFwiOjEyLFwiSlNPTlZhbHVlXCI6MTMsXCJFT0ZcIjoxNCxcIkpTT05PYmplY3RcIjoxNSxcIkpTT05BcnJheVwiOjE2LFwie1wiOjE3LFwifVwiOjE4LFwiSlNPTk1lbWJlckxpc3RcIjoxOSxcIkpTT05NZW1iZXJcIjoyMCxcIjpcIjoyMSxcIixcIjoyMixcIltcIjoyMyxcIl1cIjoyNCxcIkpTT05FbGVtZW50TGlzdFwiOjI1LFwiJGFjY2VwdFwiOjAsXCIkZW5kXCI6MX0sXG50ZXJtaW5hbHNfOiB7MjpcImVycm9yXCIsNDpcIlNUUklOR1wiLDY6XCJOVU1CRVJcIiw4OlwiTlVMTFwiLDEwOlwiVFJVRVwiLDExOlwiRkFMU0VcIiwxNDpcIkVPRlwiLDE3Olwie1wiLDE4OlwifVwiLDIxOlwiOlwiLDIyOlwiLFwiLDIzOlwiW1wiLDI0OlwiXVwifSxcbnByb2R1Y3Rpb25zXzogWzAsWzMsMV0sWzUsMV0sWzcsMV0sWzksMV0sWzksMV0sWzEyLDJdLFsxMywxXSxbMTMsMV0sWzEzLDFdLFsxMywxXSxbMTMsMV0sWzEzLDFdLFsxNSwyXSxbMTUsM10sWzIwLDNdLFsxOSwxXSxbMTksM10sWzE2LDJdLFsxNiwzXSxbMjUsMV0sWzI1LDNdXSxcbnBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5LCB5eXN0YXRlIC8qIGFjdGlvblsxXSAqLywgJCQgLyogdnN0YWNrICovLCBfJCAvKiBsc3RhY2sgKi8pIHtcbi8qIHRoaXMgPT0geXl2YWwgKi9cblxudmFyICQwID0gJCQubGVuZ3RoIC0gMTtcbnN3aXRjaCAoeXlzdGF0ZSkge1xuY2FzZSAxOlxuIC8vIHJlcGxhY2UgZXNjYXBlZCBjaGFyYWN0ZXJzIHdpdGggYWN0dWFsIGNoYXJhY3RlclxuICAgICAgICAgIHRoaXMuJCA9IG5ldyBTdHJpbmcoeXl0ZXh0LnJlcGxhY2UoL1xcXFwoXFxcXHxcIikvZywgXCIkXCIrXCIxXCIpXG4gICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXG4vZywnXFxuJylcbiAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcci9nLCdcXHInKVxuICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFx0L2csJ1xcdCcpXG4gICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXHYvZywnXFx2JylcbiAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcZi9nLCdcXGYnKVxuICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxiL2csJ1xcYicpKTtcbiAgICAgICAgICB0aGlzLiQuX19saW5lX18gPSAgdGhpcy5fJC5maXJzdF9saW5lO1xuICAgICAgICBcbmJyZWFrO1xuY2FzZSAyOlxuXG4gICAgICAgICAgICB0aGlzLiQgPSBuZXcgTnVtYmVyKHl5dGV4dCk7XG4gICAgICAgICAgICB0aGlzLiQuX19saW5lX18gPSAgdGhpcy5fJC5maXJzdF9saW5lO1xuICAgICAgICBcbmJyZWFrO1xuY2FzZSAzOlxuXG4gICAgICAgICAgICB0aGlzLiQgPSBudWxsO1xuICAgICAgICBcbmJyZWFrO1xuY2FzZSA0OlxuXG4gICAgICAgICAgICB0aGlzLiQgPSBuZXcgQm9vbGVhbih0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuJC5fX2xpbmVfXyA9IHRoaXMuXyQuZmlyc3RfbGluZTtcbiAgICAgICAgXG5icmVhaztcbmNhc2UgNTpcblxuICAgICAgICAgICAgdGhpcy4kID0gbmV3IEJvb2xlYW4oZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy4kLl9fbGluZV9fID0gdGhpcy5fJC5maXJzdF9saW5lO1xuICAgICAgICBcbmJyZWFrO1xuY2FzZSA2OlxucmV0dXJuIHRoaXMuJCA9ICQkWyQwLTFdO1xuY2FzZSAxMzpcbnRoaXMuJCA9IHt9OyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy4kLCAnX19saW5lX18nLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5fJC5maXJzdF9saW5lLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG5icmVhaztcbmNhc2UgMTQ6IGNhc2UgMTk6XG50aGlzLiQgPSAkJFskMC0xXTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuJCwgJ19fbGluZV9fJywge1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuXyQuZmlyc3RfbGluZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuYnJlYWs7XG5jYXNlIDE1OlxudGhpcy4kID0gWyQkWyQwLTJdLCAkJFskMF1dO1xuYnJlYWs7XG5jYXNlIDE2OlxudGhpcy4kID0ge307IHRoaXMuJFskJFskMF1bMF1dID0gJCRbJDBdWzFdO1xuYnJlYWs7XG5jYXNlIDE3OlxudGhpcy4kID0gJCRbJDAtMl07ICQkWyQwLTJdWyQkWyQwXVswXV0gPSAkJFskMF1bMV07XG5icmVhaztcbmNhc2UgMTg6XG50aGlzLiQgPSBbXTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuJCwgJ19fbGluZV9fJywge1xuICAgICAgICAgICAgdmFsdWU6IHRoaXMuXyQuZmlyc3RfbGluZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuYnJlYWs7XG5jYXNlIDIwOlxudGhpcy4kID0gWyQkWyQwXV07XG5icmVhaztcbmNhc2UgMjE6XG50aGlzLiQgPSAkJFskMC0yXTsgJCRbJDAtMl0ucHVzaCgkJFskMF0pO1xuYnJlYWs7XG59XG59LFxudGFibGU6IFt7Mzo1LDQ6JFYwLDU6Niw2OiRWMSw3OjMsODokVjIsOTo0LDEwOiRWMywxMTokVjQsMTI6MSwxMzoyLDE1OjcsMTY6OCwxNzokVjUsMjM6JFY2fSx7MTpbM119LHsxNDpbMSwxNl19LG8oJFY3LFsyLDddKSxvKCRWNyxbMiw4XSksbygkVjcsWzIsOV0pLG8oJFY3LFsyLDEwXSksbygkVjcsWzIsMTFdKSxvKCRWNyxbMiwxMl0pLG8oJFY3LFsyLDNdKSxvKCRWNyxbMiw0XSksbygkVjcsWzIsNV0pLG8oWzE0LDE4LDIxLDIyLDI0XSxbMiwxXSksbygkVjcsWzIsMl0pLHszOjIwLDQ6JFYwLDE4OlsxLDE3XSwxOToxOCwyMDoxOX0sezM6NSw0OiRWMCw1OjYsNjokVjEsNzozLDg6JFYyLDk6NCwxMDokVjMsMTE6JFY0LDEzOjIzLDE1OjcsMTY6OCwxNzokVjUsMjM6JFY2LDI0OlsxLDIxXSwyNToyMn0sezE6WzIsNl19LG8oJFY3LFsyLDEzXSksezE4OlsxLDI0XSwyMjpbMSwyNV19LG8oJFY4LFsyLDE2XSksezIxOlsxLDI2XX0sbygkVjcsWzIsMThdKSx7MjI6WzEsMjhdLDI0OlsxLDI3XX0sbygkVjksWzIsMjBdKSxvKCRWNyxbMiwxNF0pLHszOjIwLDQ6JFYwLDIwOjI5fSx7Mzo1LDQ6JFYwLDU6Niw2OiRWMSw3OjMsODokVjIsOTo0LDEwOiRWMywxMTokVjQsMTM6MzAsMTU6NywxNjo4LDE3OiRWNSwyMzokVjZ9LG8oJFY3LFsyLDE5XSksezM6NSw0OiRWMCw1OjYsNjokVjEsNzozLDg6JFYyLDk6NCwxMDokVjMsMTE6JFY0LDEzOjMxLDE1OjcsMTY6OCwxNzokVjUsMjM6JFY2fSxvKCRWOCxbMiwxN10pLG8oJFY4LFsyLDE1XSksbygkVjksWzIsMjFdKV0sXG5kZWZhdWx0QWN0aW9uczogezE2OlsyLDZdfSxcbnBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgaWYgKGhhc2gucmVjb3ZlcmFibGUpIHtcbiAgICAgICAgdGhpcy50cmFjZShzdHIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xuICAgIH1cbn0sXG5wYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsIHN0YWNrID0gWzBdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9ICcnLCB5eWxpbmVubyA9IDAsIHl5bGVuZyA9IDAsIFRFUlJPUiA9IDIsIEVPRiA9IDE7XG4gICAgdmFyIGFyZ3MgPSBsc3RhY2suc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBsZXhlciA9IE9iamVjdC5jcmVhdGUodGhpcy5sZXhlcik7XG4gICAgdmFyIHNoYXJlZFN0YXRlID0geyB5eToge30gfTtcbiAgICBmb3IgKHZhciBrIGluIHRoaXMueXkpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLnl5LCBrKSkge1xuICAgICAgICAgICAgc2hhcmVkU3RhdGUueXlba10gPSB0aGlzLnl5W2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxleGVyLnNldElucHV0KGlucHV0LCBzaGFyZWRTdGF0ZS55eSk7XG4gICAgc2hhcmVkU3RhdGUueXkubGV4ZXIgPSBsZXhlcjtcbiAgICBzaGFyZWRTdGF0ZS55eS5wYXJzZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgbGV4ZXIueXlsbG9jID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGxleGVyLnl5bGxvYyA9IHt9O1xuICAgIH1cbiAgICB2YXIgeXlsb2MgPSBsZXhlci55eWxsb2M7XG4gICAgbHN0YWNrLnB1c2goeXlsb2MpO1xuICAgIHZhciByYW5nZXMgPSBsZXhlci5vcHRpb25zICYmIGxleGVyLm9wdGlvbnMucmFuZ2VzO1xuICAgIGlmICh0eXBlb2Ygc2hhcmVkU3RhdGUueXkucGFyc2VFcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSBzaGFyZWRTdGF0ZS55eS5wYXJzZUVycm9yO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5wYXJzZUVycm9yO1xuICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICAgICAgdG9rZW4gPSBsZXhlci5sZXgoKSB8fCBFT0Y7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cbiAgICB2YXIgc3ltYm9sLCBzdGF0ZSwgYWN0aW9uLCByLCB5eXZhbCA9IHt9LCBwLCBsZW4sIG5ld1N0YXRlLCBleHBlY3RlZDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBzdGF0ZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV0pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN5bWJvbCA9PT0gbnVsbCB8fCB0eXBlb2Ygc3ltYm9sID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbGV4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb24gPSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICd1bmRlZmluZWQnIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyU3RyID0gJyc7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHAgaW4gdGFibGVbc3RhdGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IFRFUlJPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaCgnXFwnJyArIHRoaXMudGVybWluYWxzX1twXSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGV4ZXIuc2hvd1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyclN0ciA9ICdQYXJzZSBlcnJvciBvbiBsaW5lICcgKyAoeXlsaW5lbm8gKyAxKSArICc6XFxuJyArIGxleGVyLnNob3dQb3NpdGlvbigpICsgJ1xcbkV4cGVjdGluZyAnICsgZXhwZWN0ZWQuam9pbignLCAnKSArICcsIGdvdCBcXCcnICsgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCkgKyAnXFwnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSAnUGFyc2UgZXJyb3Igb24gbGluZSAnICsgKHl5bGluZW5vICsgMSkgKyAnOiBVbmV4cGVjdGVkICcgKyAoc3ltYm9sID09IEVPRiA/ICdlbmQgb2YgaW5wdXQnIDogJ1xcJycgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArICdcXCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsZXhlci5tYXRjaCxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGV4ZXIueXlsaW5lbm8sXG4gICAgICAgICAgICAgICAgICAgIGxvYzogeXlsb2MsXG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uWzBdIGluc3RhbmNlb2YgQXJyYXkgJiYgYWN0aW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6ICcgKyBzdGF0ZSArICcsIHRva2VuOiAnICsgc3ltYm9sKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGFjdGlvblswXSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaChsZXhlci55eXRleHQpO1xuICAgICAgICAgICAgbHN0YWNrLnB1c2gobGV4ZXIueXlsbG9jKTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYWN0aW9uWzFdKTtcbiAgICAgICAgICAgIHN5bWJvbCA9IG51bGw7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgeXlsZW5nID0gbGV4ZXIueXlsZW5nO1xuICAgICAgICAgICAgICAgIHl5dGV4dCA9IGxleGVyLnl5dGV4dDtcbiAgICAgICAgICAgICAgICB5eWxpbmVubyA9IGxleGVyLnl5bGluZW5vO1xuICAgICAgICAgICAgICAgIHl5bG9jID0gbGV4ZXIueXlsbG9jO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG4gICAgICAgICAgICB5eXZhbC4kID0gdnN0YWNrW3ZzdGFjay5sZW5ndGggLSBsZW5dO1xuICAgICAgICAgICAgeXl2YWwuXyQgPSB7XG4gICAgICAgICAgICAgICAgZmlyc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5maXJzdF9saW5lLFxuICAgICAgICAgICAgICAgIGxhc3RfbGluZTogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2xpbmUsXG4gICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgICAgICBsYXN0X2NvbHVtbjogbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5sYXN0X2NvbHVtblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB5eXZhbC5fJC5yYW5nZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAobGVuIHx8IDEpXS5yYW5nZVswXSxcbiAgICAgICAgICAgICAgICAgICAgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5yYW5nZVsxXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmFwcGx5KHl5dmFsLCBbXG4gICAgICAgICAgICAgICAgeXl0ZXh0LFxuICAgICAgICAgICAgICAgIHl5bGVuZyxcbiAgICAgICAgICAgICAgICB5eWxpbmVubyxcbiAgICAgICAgICAgICAgICBzaGFyZWRTdGF0ZS55eSxcbiAgICAgICAgICAgICAgICBhY3Rpb25bMV0sXG4gICAgICAgICAgICAgICAgdnN0YWNrLFxuICAgICAgICAgICAgICAgIGxzdGFja1xuICAgICAgICAgICAgXS5jb25jYXQoYXJncykpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcbiAgICAgICAgICAgICAgICB2c3RhY2sgPSB2c3RhY2suc2xpY2UoMCwgLTEgKiBsZW4pO1xuICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMF0pO1xuICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7XG4gICAgICAgICAgICBsc3RhY2sucHVzaCh5eXZhbC5fJCk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IHRhYmxlW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDJdXVtzdGFja1tzdGFjay5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn19O1xuLyogZ2VuZXJhdGVkIGJ5IGppc29uLWxleCAwLjMuNCAqL1xudmFyIGxleGVyID0gKGZ1bmN0aW9uKCl7XG52YXIgbGV4ZXIgPSAoe1xuXG5FT0Y6MSxcblxucGFyc2VFcnJvcjpmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkge1xuICAgICAgICBpZiAodGhpcy55eS5wYXJzZXIpIHtcbiAgICAgICAgICAgIHRoaXMueXkucGFyc2VyLnBhcnNlRXJyb3Ioc3RyLCBoYXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzdHIpO1xuICAgICAgICB9XG4gICAgfSxcblxuLy8gcmVzZXRzIHRoZSBsZXhlciwgc2V0cyBuZXcgaW5wdXRcbnNldElucHV0OmZ1bmN0aW9uIChpbnB1dCwgeXkpIHtcbiAgICAgICAgdGhpcy55eSA9IHl5IHx8IHRoaXMueXkgfHwge307XG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0aGlzLl9iYWNrdHJhY2sgPSB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55eWxpbmVubyA9IHRoaXMueXlsZW5nID0gMDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgICAgICBmaXJzdF9saW5lOiAxLFxuICAgICAgICAgICAgZmlyc3RfY29sdW1uOiAwLFxuICAgICAgICAgICAgbGFzdF9saW5lOiAxLFxuICAgICAgICAgICAgbGFzdF9jb2x1bW46IDBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gWzAsMF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4vLyBjb25zdW1lcyBhbmQgcmV0dXJucyBvbmUgY2hhciBmcm9tIHRoZSBpbnB1dFxuaW5wdXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgICAgdGhpcy55eXRleHQgKz0gY2g7XG4gICAgICAgIHRoaXMueXlsZW5nKys7XG4gICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgIHRoaXMubWF0Y2ggKz0gY2g7XG4gICAgICAgIHRoaXMubWF0Y2hlZCArPSBjaDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2gubWF0Y2goLyg/Olxcclxcbj98XFxuKS4qL2cpO1xuICAgICAgICBpZiAobGluZXMpIHtcbiAgICAgICAgICAgIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4rKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2VbMV0rKztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UoMSk7XG4gICAgICAgIHJldHVybiBjaDtcbiAgICB9LFxuXG4vLyB1bnNoaWZ0cyBvbmUgY2hhciAob3IgYSBzdHJpbmcpIGludG8gdGhlIGlucHV0XG51bnB1dDpmdW5jdGlvbiAoY2gpIHtcbiAgICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcbiAgICAgICAgdmFyIGxpbmVzID0gY2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aCAtIGxlbik7XG4gICAgICAgIC8vdGhpcy55eWxlbmcgLT0gbGVuO1xuICAgICAgICB0aGlzLm9mZnNldCAtPSBsZW47XG4gICAgICAgIHZhciBvbGRMaW5lcyA9IHRoaXMubWF0Y2guc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guc3Vic3RyKDAsIHRoaXMubWF0Y2gubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMubWF0Y2hlZCA9IHRoaXMubWF0Y2hlZC5zdWJzdHIoMCwgdGhpcy5tYXRjaGVkLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSB0aGlzLnl5bGxvYy5yYW5nZTtcblxuICAgICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgICAgIGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgP1xuICAgICAgICAgICAgICAgIChsaW5lcy5sZW5ndGggPT09IG9sZExpbmVzLmxlbmd0aCA/IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiA6IDApXG4gICAgICAgICAgICAgICAgICsgb2xkTGluZXNbb2xkTGluZXMubGVuZ3RoIC0gbGluZXMubGVuZ3RoXS5sZW5ndGggLSBsaW5lc1swXS5sZW5ndGggOlxuICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbclswXSwgclswXSArIHRoaXMueXlsZW5nIC0gbGVuXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnl5bGVuZyA9IHRoaXMueXl0ZXh0Lmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuLy8gV2hlbiBjYWxsZWQgZnJvbSBhY3Rpb24sIGNhY2hlcyBtYXRjaGVkIHRleHQgYW5kIGFwcGVuZHMgaXQgb24gbmV4dCBhY3Rpb25cbm1vcmU6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9tb3JlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuLy8gV2hlbiBjYWxsZWQgZnJvbSBhY3Rpb24sIHNpZ25hbHMgdGhlIGxleGVyIHRoYXQgdGhpcyBydWxlIGZhaWxzIHRvIG1hdGNoIHRoZSBpbnB1dCwgc28gdGhlIG5leHQgbWF0Y2hpbmcgcnVsZSAocmVnZXgpIHNob3VsZCBiZSB0ZXN0ZWQgaW5zdGVhZC5cbnJlamVjdDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9iYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VFcnJvcignTGV4aWNhbCBlcnJvciBvbiBsaW5lICcgKyAodGhpcy55eWxpbmVubyArIDEpICsgJy4gWW91IGNhbiBvbmx5IGludm9rZSByZWplY3QoKSBpbiB0aGUgbGV4ZXIgd2hlbiB0aGUgbGV4ZXIgaXMgb2YgdGhlIGJhY2t0cmFja2luZyBwZXJzdWFzaW9uIChvcHRpb25zLmJhY2t0cmFja19sZXhlciA9IHRydWUpLlxcbicgKyB0aGlzLnNob3dQb3NpdGlvbigpLCB7XG4gICAgICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLnl5bGluZW5vXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbi8vIHJldGFpbiBmaXJzdCBuIGNoYXJhY3RlcnMgb2YgdGhlIG1hdGNoXG5sZXNzOmZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHRoaXMudW5wdXQodGhpcy5tYXRjaC5zbGljZShuKSk7XG4gICAgfSxcblxuLy8gZGlzcGxheXMgYWxyZWFkeSBtYXRjaGVkIGlucHV0LCBpLmUuIGZvciBlcnJvciBtZXNzYWdlc1xucGFzdElucHV0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhc3QgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSB0aGlzLm1hdGNoLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiAocGFzdC5sZW5ndGggPiAyMCA/ICcuLi4nOicnKSArIHBhc3Quc3Vic3RyKC0yMCkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgIH0sXG5cbi8vIGRpc3BsYXlzIHVwY29taW5nIGlucHV0LCBpLmUuIGZvciBlcnJvciBtZXNzYWdlc1xudXBjb21pbmdJbnB1dDpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5tYXRjaDtcbiAgICAgICAgaWYgKG5leHQubGVuZ3RoIDwgMjApIHtcbiAgICAgICAgICAgIG5leHQgKz0gdGhpcy5faW5wdXQuc3Vic3RyKDAsIDIwLW5leHQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKG5leHQuc3Vic3RyKDAsMjApICsgKG5leHQubGVuZ3RoID4gMjAgPyAnLi4uJyA6ICcnKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgIH0sXG5cbi8vIGRpc3BsYXlzIHRoZSBjaGFyYWN0ZXIgcG9zaXRpb24gd2hlcmUgdGhlIGxleGluZyBlcnJvciBvY2N1cnJlZCwgaS5lLiBmb3IgZXJyb3IgbWVzc2FnZXNcbnNob3dQb3NpdGlvbjpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xuICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XG4gICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjICsgXCJeXCI7XG4gICAgfSxcblxuLy8gdGVzdCB0aGUgbGV4ZWQgdG9rZW46IHJldHVybiBGQUxTRSB3aGVuIG5vdCBhIG1hdGNoLCBvdGhlcndpc2UgcmV0dXJuIHRva2VuXG50ZXN0X21hdGNoOmZ1bmN0aW9uIChtYXRjaCwgaW5kZXhlZF9ydWxlKSB7XG4gICAgICAgIHZhciB0b2tlbixcbiAgICAgICAgICAgIGxpbmVzLFxuICAgICAgICAgICAgYmFja3VwO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgICAvLyBzYXZlIGNvbnRleHRcbiAgICAgICAgICAgIGJhY2t1cCA9IHtcbiAgICAgICAgICAgICAgICB5eWxpbmVubzogdGhpcy55eWxpbmVubyxcbiAgICAgICAgICAgICAgICB5eWxsb2M6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdF9saW5lOiB0aGlzLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeXl0ZXh0OiB0aGlzLnl5dGV4dCxcbiAgICAgICAgICAgICAgICBtYXRjaDogdGhpcy5tYXRjaCxcbiAgICAgICAgICAgICAgICBtYXRjaGVzOiB0aGlzLm1hdGNoZXMsXG4gICAgICAgICAgICAgICAgbWF0Y2hlZDogdGhpcy5tYXRjaGVkLFxuICAgICAgICAgICAgICAgIHl5bGVuZzogdGhpcy55eWxlbmcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICBfbW9yZTogdGhpcy5fbW9yZSxcbiAgICAgICAgICAgICAgICBfaW5wdXQ6IHRoaXMuX2lucHV0LFxuICAgICAgICAgICAgICAgIHl5OiB0aGlzLnl5LFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvblN0YWNrOiB0aGlzLmNvbmRpdGlvblN0YWNrLnNsaWNlKDApLFxuICAgICAgICAgICAgICAgIGRvbmU6IHRoaXMuZG9uZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgYmFja3VwLnl5bGxvYy5yYW5nZSA9IHRoaXMueXlsbG9jLnJhbmdlLnNsaWNlKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XG4gICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgICAgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgICAgICBmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5sYXN0X2xpbmUsXG4gICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoIC0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1xccj9cXG4/LylbMF0ubGVuZ3RoIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gbWF0Y2g7XG4gICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2UgPSBbdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICs9IHRoaXMueXlsZW5nXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2JhY2t0cmFjayA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubWF0Y2hlZCArPSBtYXRjaFswXTtcbiAgICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh0aGlzLCB0aGlzLnl5LCB0aGlzLCBpbmRleGVkX3J1bGUsIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSk7XG4gICAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2t0cmFjaykge1xuICAgICAgICAgICAgLy8gcmVjb3ZlciBjb250ZXh0XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGJhY2t1cCkge1xuICAgICAgICAgICAgICAgIHRoaXNba10gPSBiYWNrdXBba107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIHJ1bGUgYWN0aW9uIGNhbGxlZCByZWplY3QoKSBpbXBseWluZyB0aGUgbmV4dCBydWxlIHNob3VsZCBiZSB0ZXN0ZWQgaW5zdGVhZC5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuLy8gcmV0dXJuIG5leHQgbWF0Y2ggaW4gaW5wdXRcbm5leHQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pbnB1dCkge1xuICAgICAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b2tlbixcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgdGVtcE1hdGNoLFxuICAgICAgICAgICAgaW5kZXg7XG4gICAgICAgIGlmICghdGhpcy5fbW9yZSkge1xuICAgICAgICAgICAgdGhpcy55eXRleHQgPSAnJztcbiAgICAgICAgICAgIHRoaXMubWF0Y2ggPSAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLl9jdXJyZW50UnVsZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pO1xuICAgICAgICAgICAgaWYgKHRlbXBNYXRjaCAmJiAoIW1hdGNoIHx8IHRlbXBNYXRjaFswXS5sZW5ndGggPiBtYXRjaFswXS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy50ZXN0X21hdGNoKHRlbXBNYXRjaCwgcnVsZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYmFja3RyYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHJ1bGUgYWN0aW9uIGNhbGxlZCByZWplY3QoKSBpbXBseWluZyBhIHJ1bGUgTUlTbWF0Y2guXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlOiB0aGlzIGlzIGEgbGV4ZXIgcnVsZSB3aGljaCBjb25zdW1lcyBpbnB1dCB3aXRob3V0IHByb2R1Y2luZyBhIHRva2VuIChlLmcuIHdoaXRlc3BhY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMudGVzdF9tYXRjaChtYXRjaCwgcnVsZXNbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmICh0b2tlbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbHNlOiB0aGlzIGlzIGEgbGV4ZXIgcnVsZSB3aGljaCBjb25zdW1lcyBpbnB1dCB3aXRob3V0IHByb2R1Y2luZyBhIHRva2VuIChlLmcuIHdoaXRlc3BhY2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKCdMZXhpY2FsIGVycm9yIG9uIGxpbmUgJyArICh0aGlzLnl5bGluZW5vICsgMSkgKyAnLiBVbnJlY29nbml6ZWQgdGV4dC5cXG4nICsgdGhpcy5zaG93UG9zaXRpb24oKSwge1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgdG9rZW46IG51bGwsXG4gICAgICAgICAgICAgICAgbGluZTogdGhpcy55eWxpbmVub1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4vLyByZXR1cm4gbmV4dCBtYXRjaCB0aGF0IGhhcyBhIHRva2VuXG5sZXg6ZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgciA9IHRoaXMubmV4dCgpO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZXgoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIGFjdGl2YXRlcyBhIG5ldyBsZXhlciBjb25kaXRpb24gc3RhdGUgKHB1c2hlcyB0aGUgbmV3IGxleGVyIGNvbmRpdGlvbiBzdGF0ZSBvbnRvIHRoZSBjb25kaXRpb24gc3RhY2spXG5iZWdpbjpmdW5jdGlvbiBiZWdpbihjb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgfSxcblxuLy8gcG9wIHRoZSBwcmV2aW91c2x5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGUgb2ZmIHRoZSBjb25kaXRpb24gc3RhY2tcbnBvcFN0YXRlOmZ1bmN0aW9uIHBvcFN0YXRlKCkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5wb3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrWzBdO1xuICAgICAgICB9XG4gICAgfSxcblxuLy8gcHJvZHVjZSB0aGUgbGV4ZXIgcnVsZSBzZXQgd2hpY2ggaXMgYWN0aXZlIGZvciB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGVcbl9jdXJyZW50UnVsZXM6ZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoICYmIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV1dLnJ1bGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1tcIklOSVRJQUxcIl0ucnVsZXM7XG4gICAgICAgIH1cbiAgICB9LFxuXG4vLyByZXR1cm4gdGhlIGN1cnJlbnRseSBhY3RpdmUgbGV4ZXIgY29uZGl0aW9uIHN0YXRlOyB3aGVuIGFuIGluZGV4IGFyZ3VtZW50IGlzIHByb3ZpZGVkIGl0IHByb2R1Y2VzIHRoZSBOLXRoIHByZXZpb3VzIGNvbmRpdGlvbiBzdGF0ZSwgaWYgYXZhaWxhYmxlXG50b3BTdGF0ZTpmdW5jdGlvbiB0b3BTdGF0ZShuKSB7XG4gICAgICAgIG4gPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDEgLSBNYXRoLmFicyhuIHx8IDApO1xuICAgICAgICBpZiAobiA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFja1tuXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIklOSVRJQUxcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbi8vIGFsaWFzIGZvciBiZWdpbihjb25kaXRpb24pXG5wdXNoU3RhdGU6ZnVuY3Rpb24gcHVzaFN0YXRlKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG4gICAgfSxcblxuLy8gcmV0dXJuIHRoZSBudW1iZXIgb2Ygc3RhdGVzIGN1cnJlbnRseSBvbiB0aGUgc3RhY2tcbnN0YXRlU3RhY2tTaXplOmZ1bmN0aW9uIHN0YXRlU3RhY2tTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGg7XG4gICAgfSxcbm9wdGlvbnM6IHt9LFxucGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gYW5vbnltb3VzKHl5LHl5XywkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLFlZX1NUQVJUKSB7XG5zd2l0Y2goJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucykge1xuY2FzZSAwOi8qIHNraXAgd2hpdGVzcGFjZSAqL1xuYnJlYWs7XG5jYXNlIDE6cmV0dXJuIDZcbmNhc2UgMjp5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHIoMSx5eV8ueXlsZW5nLTIpOyByZXR1cm4gNFxuY2FzZSAzOnJldHVybiAxN1xuY2FzZSA0OnJldHVybiAxOFxuY2FzZSA1OnJldHVybiAyM1xuY2FzZSA2OnJldHVybiAyNFxuY2FzZSA3OnJldHVybiAyMlxuY2FzZSA4OnJldHVybiAyMVxuY2FzZSA5OnJldHVybiAxMFxuY2FzZSAxMDpyZXR1cm4gMTFcbmNhc2UgMTE6cmV0dXJuIDhcbmNhc2UgMTI6cmV0dXJuIDE0XG5jYXNlIDEzOnJldHVybiAnSU5WQUxJRCdcbn1cbn0sXG5ydWxlczogWy9eKD86XFxzKykvLC9eKD86KC0/KFswLTldfFsxLTldWzAtOV0rKSkoXFwuWzAtOV0rKT8oW2VFXVstK10/WzAtOV0rKT9cXGIpLywvXig/OlwiKD86XFxcXFtcXFxcXCJiZm5ydC9dfFxcXFx1W2EtZkEtRjAtOV17NH18W15cXFxcXFwwLVxceDA5XFx4MGEtXFx4MWZcIl0pKlwiKS8sL14oPzpcXHspLywvXig/OlxcfSkvLC9eKD86XFxbKS8sL14oPzpcXF0pLywvXig/OiwpLywvXig/OjopLywvXig/OnRydWVcXGIpLywvXig/OmZhbHNlXFxiKS8sL14oPzpudWxsXFxiKS8sL14oPzokKS8sL14oPzouKS9dLFxuY29uZGl0aW9uczoge1wiSU5JVElBTFwiOntcInJ1bGVzXCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTNdLFwiaW5jbHVzaXZlXCI6dHJ1ZX19XG59KTtcbnJldHVybiBsZXhlcjtcbn0pKCk7XG5wYXJzZXIubGV4ZXIgPSBsZXhlcjtcbmZ1bmN0aW9uIFBhcnNlciAoKSB7XG4gIHRoaXMueXkgPSB7fTtcbn1cblBhcnNlci5wcm90b3R5cGUgPSBwYXJzZXI7cGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcbnJldHVybiBuZXcgUGFyc2VyO1xufSkoKTtcblxuXG5pZiAodHlwZW9mIGNvbW1vbmpzUmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgJ29iamVjdCcgIT09ICd1bmRlZmluZWQnKSB7XG5leHBvcnRzLnBhcnNlciA9IHBhcnNlcjtcbmV4cG9ydHMuUGFyc2VyID0gcGFyc2VyLlBhcnNlcjtcbmV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZXIucGFyc2UuYXBwbHkocGFyc2VyLCBhcmd1bWVudHMpOyB9O1xufVxufSk7XG5cbnZhciBqc29ubGludCQxID0ganNvbmxpbnQ7XG5cbmZ1bmN0aW9uIHJlYWRTdHlsZShzdHlsZSkge1xuICAgIGlmIChzdHlsZSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2Ygc3R5bGUgPT09ICdzdHJpbmcnIHx8IHN0eWxlIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4ganNvbmxpbnQkMS5wYXJzZShzdHlsZS50b1N0cmluZygpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNpbmdFcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3R5bGUoc3R5bGUsIHN0eWxlU3BlYyA9IHY4KSB7XG4gICAgbGV0IHMgPSBzdHlsZTtcbiAgICB0cnkge1xuICAgICAgICBzID0gcmVhZFN0eWxlKHMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIFtlXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkYXRlU3R5bGUkMShzLCBzdHlsZVNwZWMpO1xufVxuXG5jb25zdCBTVVBQT1JURURfU1BFQ19WRVJTSU9OID0gODtcbmNvbnN0IE1BWF9TT1VSQ0VTX0lOX1NUWUxFID0gMTU7XG5mdW5jdGlvbiBpc1ZhbGlkKHZhbHVlLCByZWdleCkge1xuICAgIGlmICghdmFsdWUgfHwgZ2V0VHlwZSh2YWx1ZSkgIT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gISF2YWx1ZS5tYXRjaChyZWdleCk7XG59XG5mdW5jdGlvbiBnZXRTb3VyY2VDb3VudChzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLnVybCkge1xuICAgICAgICByZXR1cm4gc291cmNlLnVybC5zcGxpdCgnLCcpLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRBbGxvd2VkS2V5RXJyb3JzKG9iaiwga2V5cywgcGF0aCkge1xuICAgIGNvbnN0IGFsbG93ZWQgPSBuZXcgU2V0KGtleXMpO1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrID0+IHtcbiAgICAgICAgaWYgKCFhbGxvd2VkLmhhcyhrKSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHBhdGggPyBgJHsgcGF0aCB9LiR7IGsgfWAgOiBudWxsO1xuICAgICAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihwcm9wLCBvYmpba10sIGBVbnN1cHBvcnRlZCBwcm9wZXJ0eSBcIiR7IGsgfVwiYCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGVycm9ycztcbn1cbmNvbnN0IGFjY2VwdGVkU291cmNlVHlwZXMgPSBuZXcgU2V0KFtcbiAgICAndmVjdG9yJyxcbiAgICAncmFzdGVyJyxcbiAgICAncmFzdGVyLWRlbSdcbl0pO1xuZnVuY3Rpb24gZ2V0U291cmNlRXJyb3JzKHNvdXJjZSwgaSkge1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IHNvdXJjZUtleXMgPSBbXG4gICAgICAgICd0eXBlJyxcbiAgICAgICAgJ3VybCcsXG4gICAgICAgICd0aWxlU2l6ZSdcbiAgICBdO1xuICAgIGVycm9ycy5wdXNoKC4uLmdldEFsbG93ZWRLZXlFcnJvcnMoc291cmNlLCBzb3VyY2VLZXlzLCAnc291cmNlJykpO1xuICAgIGlmICghYWNjZXB0ZWRTb3VyY2VUeXBlcy5oYXMoU3RyaW5nKHNvdXJjZS50eXBlKSkpIHtcbiAgICAgICAgZXJyb3JzLnB1c2gobmV3IFZhbGlkYXRpb25FcnJvcihgc291cmNlc1skeyBpIH1dLnR5cGVgLCBzb3VyY2UudHlwZSwgYEV4cGVjdGVkIG9uZSBvZiBbJHsgQXJyYXkuZnJvbShhY2NlcHRlZFNvdXJjZVR5cGVzKS5qb2luKCcsICcpIH1dYCkpO1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2VVcmxQYXR0ZXJuID0gL15tYXBib3g6XFwvXFwvKFteL10qKSQvO1xuICAgIGlmICghc291cmNlLnVybCB8fCAhaXNWYWxpZChzb3VyY2UudXJsLCBzb3VyY2VVcmxQYXR0ZXJuKSkge1xuICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKGBzb3VyY2VzWyR7IGkgfV0udXJsYCwgc291cmNlLnVybCwgJ0V4cGVjdGVkIGEgdmFsaWQgTWFwYm94IHRpbGVzZXQgdXJsJykpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZnVuY3Rpb24gZ2V0U291cmNlc0Vycm9ycyhzb3VyY2VzKSB7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2VzKS5mb3JFYWNoKChzLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUVycm9ycyA9IGdldFNvdXJjZUVycm9ycyhzb3VyY2VzW3NdLCBpKTtcbiAgICAgICAgaWYgKCFzb3VyY2VFcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgZ2V0U291cmNlQ291bnQoc291cmNlc1tzXSk7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JzLnB1c2goLi4uc291cmNlRXJyb3JzKTtcbiAgICB9KTtcbiAgICBpZiAoY291bnQgPiBNQVhfU09VUkNFU19JTl9TVFlMRSkge1xuICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKCdzb3VyY2VzJywgbnVsbCwgYFN0eWxlcyBtdXN0IGNvbnRhaW4gJHsgTUFYX1NPVVJDRVNfSU5fU1RZTEUgfSBvciBmZXdlciBzb3VyY2VzYCkpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZnVuY3Rpb24gZ2V0Um9vdEVycm9ycyhzdHlsZSwgc3BlY0tleXMpIHtcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICBjb25zdCBvcHRpb25hbFJvb3RQcm9wZXJ0aWVzID0gW1xuICAgICAgICAnb3duZXInLFxuICAgICAgICAnaWQnLFxuICAgICAgICAnY2FjaGVDb250cm9sJyxcbiAgICAgICAgJ2RyYWZ0JyxcbiAgICAgICAgJ2NyZWF0ZWQnLFxuICAgICAgICAnbW9kaWZpZWQnLFxuICAgICAgICAndmlzaWJpbGl0eScsXG4gICAgICAgICdwcm90ZWN0ZWQnXG4gICAgXTtcbiAgICBjb25zdCBhbGxvd2VkS2V5RXJyb3JzID0gZ2V0QWxsb3dlZEtleUVycm9ycyhzdHlsZSwgW1xuICAgICAgICAuLi5zcGVjS2V5cyxcbiAgICAgICAgLi4ub3B0aW9uYWxSb290UHJvcGVydGllc1xuICAgIF0pO1xuICAgIGVycm9ycy5wdXNoKC4uLmFsbG93ZWRLZXlFcnJvcnMpO1xuICAgIGlmIChzdHlsZS52ZXJzaW9uID4gU1VQUE9SVEVEX1NQRUNfVkVSU0lPTiB8fCBzdHlsZS52ZXJzaW9uIDwgU1VQUE9SVEVEX1NQRUNfVkVSU0lPTikge1xuICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKCd2ZXJzaW9uJywgc3R5bGUudmVyc2lvbiwgYFN0eWxlIHZlcnNpb24gbXVzdCBiZSAkeyBTVVBQT1JURURfU1BFQ19WRVJTSU9OIH1gKSk7XG4gICAgfVxuICAgIGNvbnN0IGdseXBoVXJsUGF0dGVybiA9IC9ebWFwYm94OlxcL1xcL2ZvbnRzXFwvKFteL10qKVxcL3tmb250c3RhY2t9XFwve3JhbmdlfS5wYmYkLztcbiAgICBpZiAoIWlzVmFsaWQoc3R5bGUuZ2x5cGhzLCBnbHlwaFVybFBhdHRlcm4pKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3IoJ2dseXBocycsIHN0eWxlLmdseXBocywgJ1N0eWxlcyBtdXN0IHJlZmVyZW5jZSBnbHlwaHMgaG9zdGVkIGJ5IE1hcGJveCcpKTtcbiAgICB9XG4gICAgY29uc3Qgc3ByaXRlVXJsUGF0dGVybiA9IC9ebWFwYm94OlxcL1xcL3Nwcml0ZXNcXC8oW14vXSopXFwvKFteL10qKVxcLz8oW14vXSopPyQvO1xuICAgIGlmICghaXNWYWxpZChzdHlsZS5zcHJpdGUsIHNwcml0ZVVybFBhdHRlcm4pKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3IoJ3Nwcml0ZScsIHN0eWxlLnNwcml0ZSwgJ1N0eWxlcyBtdXN0IHJlZmVyZW5jZSBzcHJpdGVzIGhvc3RlZCBieSBNYXBib3gnKSk7XG4gICAgfVxuICAgIGNvbnN0IHZpc2liaWxpdHlQYXR0ZXJuID0gL14ocHVibGljfHByaXZhdGUpJC87XG4gICAgaWYgKCFpc1ZhbGlkKHN0eWxlLnZpc2liaWxpdHksIHZpc2liaWxpdHlQYXR0ZXJuKSkge1xuICAgICAgICBlcnJvcnMucHVzaChuZXcgVmFsaWRhdGlvbkVycm9yKCd2aXNpYmlsaXR5Jywgc3R5bGUudmlzaWJpbGl0eSwgJ1N0eWxlIHZpc2liaWxpdHkgbXVzdCBiZSBwdWJsaWMgb3IgcHJpdmF0ZScpKTtcbiAgICB9XG4gICAgaWYgKHN0eWxlLnByb3RlY3RlZCAhPT0gdW5kZWZpbmVkICYmIGdldFR5cGUoc3R5bGUucHJvdGVjdGVkKSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKG5ldyBWYWxpZGF0aW9uRXJyb3IoJ3Byb3RlY3RlZCcsIHN0eWxlLnByb3RlY3RlZCwgJ1N0eWxlIHByb3RlY3Rpb24gbXVzdCBiZSB0cnVlIG9yIGZhbHNlJykpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNYXBib3hBcGlTdXBwb3J0ZWQoc3R5bGUpIHtcbiAgICBsZXQgcyA9IHN0eWxlO1xuICAgIHRyeSB7XG4gICAgICAgIHMgPSByZWFkU3R5bGUocyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gW2VdO1xuICAgIH1cbiAgICBsZXQgZXJyb3JzID0gdmFsaWRhdGVTdHlsZSQxKHMsIHY4KS5jb25jYXQoZ2V0Um9vdEVycm9ycyhzLCBPYmplY3Qua2V5cyh2OC4kcm9vdCkpKTtcbiAgICBpZiAocy5zb3VyY2VzKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZ2V0U291cmNlc0Vycm9ycyhzLnNvdXJjZXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbn1cblxuY29uc3QgZXhwcmVzc2lvbiA9IHtcbiAgICBTdHlsZUV4cHJlc3Npb24sXG4gICAgaXNFeHByZXNzaW9uLFxuICAgIGlzRXhwcmVzc2lvbkZpbHRlcixcbiAgICBjcmVhdGVFeHByZXNzaW9uLFxuICAgIGNyZWF0ZVByb3BlcnR5RXhwcmVzc2lvbixcbiAgICBub3JtYWxpemVQcm9wZXJ0eUV4cHJlc3Npb24sXG4gICAgWm9vbUNvbnN0YW50RXhwcmVzc2lvbixcbiAgICBab29tRGVwZW5kZW50RXhwcmVzc2lvbixcbiAgICBTdHlsZVByb3BlcnR5RnVuY3Rpb25cbn07XG5jb25zdCBzdHlsZUZ1bmN0aW9uID0ge1xuICAgIGNvbnZlcnRGdW5jdGlvbixcbiAgICBjcmVhdGVGdW5jdGlvbixcbiAgICBpc0Z1bmN0aW9uXG59O1xuY29uc3QgdmlzaXQgPSB7XG4gICAgZWFjaFNvdXJjZSxcbiAgICBlYWNoTGF5ZXIsXG4gICAgZWFjaFByb3BlcnR5XG59O1xuXG5leHBvcnQgeyBDb2xvciQxIGFzIENvbG9yLCBQYXJzaW5nRXJyb3IsIFZhbGlkYXRpb25FcnJvciwgY29tcG9zaXRlLCBjb252ZXJ0RmlsdGVyLCBkZXJlZkxheWVycywgZGlmZlN0eWxlcyBhcyBkaWZmLCBleHByZXNzaW9uLCBjcmVhdGVGaWx0ZXIgYXMgZmVhdHVyZUZpbHRlciwgZm9ybWF0JDEgYXMgZm9ybWF0LCBzdHlsZUZ1bmN0aW9uIGFzIGZ1bmN0aW9uLCB2OCBhcyBsYXRlc3QsIG1pZ3JhdGUsIHY4LCB2YWxpZGF0ZVN0eWxlIGFzIHZhbGlkYXRlLCB2YWxpZGF0ZU1hcGJveEFwaVN1cHBvcnRlZCwgdmlzaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIiwiaW1wb3J0e2V4cHJlc3Npb24gYXMgdCxmdW5jdGlvbiBhcyBlLGxhdGVzdCBhcyByfWZyb21cIkBtYXBib3gvbWFwYm94LWdsLXN0eWxlLXNwZWNcIjtmdW5jdGlvbiBpKHQpe3ZhciBlPXQuZXhwcixyPXQubGF5ZXIsaT1NYXRoLm1pbihlKHIsXCJwYWludFwiLFwiY2lyY2xlLXJhZGl1c1wiKSw4KSxhPU1hdGgubWluKGUocixcInBhaW50XCIsXCJjaXJjbGUtc3Ryb2tlLXdpZHRoXCIpLDQpLG49ZShyLFwicGFpbnRcIixcImNpcmNsZS1jb2xvclwiKSxsPWUocixcInBhaW50XCIsXCJjaXJjbGUtb3BhY2l0eVwiKSxvPWUocixcInBhaW50XCIsXCJjaXJjbGUtc3Ryb2tlLWNvbG9yXCIpLHM9ZShyLFwicGFpbnRcIixcImNpcmNsZS1zdHJva2Utb3BhY2l0eVwiKSxjPWktYS8yO3JldHVybntlbGVtZW50Olwic3ZnXCIsYXR0cmlidXRlczp7dmlld0JveDpcIjAgMCAyMCAyMFwiLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixzdHlsZTp7ZmlsdGVyOlwiYmx1cihcIitlKHIsXCJwYWludFwiLFwiY2lyY2xlLWJsdXJcIikqYytcInB4KVwifX0sY2hpbGRyZW46W3tlbGVtZW50OlwiY2lyY2xlXCIsYXR0cmlidXRlczp7a2V5OlwibDFcIixjeDoxMCxjeToxMCxmaWxsOm4sb3BhY2l0eTpsLHI6Y319LHtlbGVtZW50OlwiY2lyY2xlXCIsYXR0cmlidXRlczp7a2V5OlwibDJcIixjeDoxMCxjeToxMCxmaWxsOlwidHJhbnNwYXJlbnRcIixvcGFjaXR5OnMscjppLFwic3Ryb2tlLXdpZHRoXCI6YSxzdHJva2U6b319XX19ZnVuY3Rpb24gYSh0KXt2YXIgZT10LmV4cHIscj10LmxheWVyO3JldHVybntlbGVtZW50OlwiZGl2XCIsYXR0cmlidXRlczp7c3R5bGU6e3dpZHRoOlwiMTAwJVwiLGhlaWdodDpcIjEwMCVcIixiYWNrZ3JvdW5kSW1hZ2U6XCJ1cmwoXCIrKDAsdC5pbWFnZSkoZShyLFwicGFpbnRcIixcImZpbGwtcGF0dGVyblwiKSkrXCIpXCIsYmFja2dyb3VuZENvbG9yOmUocixcInBhaW50XCIsXCJmaWxsLWNvbG9yXCIpLG9wYWNpdHk6ZShyLFwicGFpbnRcIixcImZpbGwtb3BhY2l0eVwiKSxiYWNrZ3JvdW5kU2l6ZTpcIjY2JSA2NiVcIixiYWNrZ3JvdW5kUG9zaXRpb246XCJjZW50ZXJcIn19fX1mdW5jdGlvbiBuKHQpe3ZhciBlPXQubGF5ZXIscj10LmV4cHIsaT0oMCx0LmltYWdlKShyKGUsXCJwYWludFwiLFwibGluZS1wYXR0ZXJuXCIpKSxhPXtzdHJva2U6aT9cInVybCgjaW1nMSlcIjpyKGUsXCJwYWludFwiLFwibGluZS1jb2xvclwiKSxzdHJva2VXaWR0aDpNYXRoLm1heCgyLE1hdGgubWluKHIoZSxcInBhaW50XCIsXCJsaW5lLXdpZHRoXCIpLDgpKSxzdHJva2VPcGFjaXR5OnIoZSxcInBhaW50XCIsXCJsaW5lLW9wYWNpdHlcIiksc3Ryb2tlRGFzaGFycmF5OnIoZSxcInBhaW50XCIsXCJsaW5lLWRhc2hhcnJheVwiKX0sbj1hLnN0cm9rZVdpZHRoLGw9XCJzdHJva2U6IFwiK2Euc3Ryb2tlK1wiO1wiO3JldHVybiBhLnN0cm9rZU9wYWNpdHkmJihsKz1cInN0cm9rZS1vcGFjaXR5OiBcIithLnN0cm9rZU9wYWNpdHkrXCI7XCIpLGEuc3Ryb2tlRGFzaGFycmF5JiYobCs9XCJzdHJva2UtZGFzaGFycmF5OiBcIithLnN0cm9rZURhc2hhcnJheStcIjtcIikse2VsZW1lbnQ6XCJzdmdcIixhdHRyaWJ1dGVzOnt2aWV3Qm94OlwiMCAwIDIwIDIwXCIseG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifSxjaGlsZHJlbjpbe2VsZW1lbnQ6XCJkZWZzXCIsYXR0cmlidXRlczp7a2V5OlwiZGVmc1wifSxjaGlsZHJlbjpbe2VsZW1lbnQ6XCJwYXR0ZXJuXCIsYXR0cmlidXRlczp7a2V5OlwicGF0dGVyblwiLGlkOlwiaW1nMVwiLHg6MCx5OjAsd2lkdGg6YS5zdHJva2VXaWR0aCxoZWlnaHQ6YS5zdHJva2VXaWR0aCxwYXR0ZXJuVW5pdHM6XCJ1c2VyU3BhY2VPblVzZVwiLHBhdHRlcm5UcmFuc2Zvcm06XCJ0cmFuc2xhdGUoXCIrLW4vMitcIiBcIistbi8yK1wiKSByb3RhdGUoNDUpXCJ9LGNoaWxkcmVuOlt7ZWxlbWVudDpcImltYWdlXCIsYXR0cmlidXRlczp7a2V5OlwiaW1nXCIseGxpbmtIcmVmOmkseDowLHk6MCx3aWR0aDphLnN0cm9rZVdpZHRoLGhlaWdodDphLnN0cm9rZVdpZHRofX1dfV19LHtlbGVtZW50OlwicGF0aFwiLGF0dHJpYnV0ZXM6e2tleTpcInBhdGhcIixzdHlsZTpsLGQ6XCJNMCAyMCBMIDIwIDBcIn19XX19ZnVuY3Rpb24gbCh0KXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5pbWFnZSxyPSgwLHQuZXhwcikodC5sYXllcixcImxheW91dFwiLFwiaWNvbi1pbWFnZVwiKTtpZighcilyZXR1cm4gbnVsbDt2YXIgaT1lKHIpO3JldHVybiBpP3tlbGVtZW50OlwiZGl2XCIsYXR0cmlidXRlczp7c3R5bGU6e2JhY2tncm91bmRJbWFnZTpcInVybChcIitpK1wiKVwiLGJhY2tncm91bmRTaXplOlwiY29udGFpblwiLGJhY2tncm91bmRQb3NpdGlvbjpcImNlbnRlclwiLGJhY2tncm91bmRSZXBlYXQ6XCJuby1yZXBlYXRcIix3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCIxMDAlXCJ9fX06bnVsbH0odCl8fChhPShyPShlPXQpLmV4cHIpKGk9ZS5sYXllcixcInBhaW50XCIsXCJ0ZXh0LWNvbG9yXCIpLG49cihpLFwicGFpbnRcIixcInRleHQtb3BhY2l0eVwiKSx7ZWxlbWVudDpcInN2Z1wiLGF0dHJpYnV0ZXM6e3ZpZXdCb3g6XCIwIDAgMjAgMjBcIix4bWxuczpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9LGNoaWxkcmVuOlt7ZWxlbWVudDpcInBhdGhcIixhdHRyaWJ1dGVzOntrZXk6XCJsMVwiLGQ6bD1cIk0gNCw0IEwgMTYsNCBMIDE2LDcgTCAxMS41IDcgTCAxMS41IDE2IEwgOC41IDE2IEwgOC41IDcgTCA0IDcgWlwiLHN0cm9rZTpyKGksXCJwYWludFwiLFwidGV4dC1oYWxvLWNvbG9yXCIpLFwic3Ryb2tlLXdpZHRoXCI6MipyKGksXCJwYWludFwiLFwidGV4dC1oYWxvLXdpZHRoXCIpLGZpbGw6XCJ0cmFuc3BhcmVudFwiLFwic3Ryb2tlLWxpbmVqb2luXCI6XCJyb3VuZFwifX0se2VsZW1lbnQ6XCJwYXRoXCIsYXR0cmlidXRlczp7a2V5OlwibDJcIixkOmwsZmlsbDpcIndoaXRlXCJ9fSx7ZWxlbWVudDpcInBhdGhcIixhdHRyaWJ1dGVzOntrZXk6XCJsM1wiLGQ6bCxmaWxsOmEsb3BhY2l0eTpufX1dfSk7dmFyIGUscixpLGEsbixsfXZhciBvPVtbXCJiYWNrZ3JvdW5kXCJdLFtcImNpcmNsZVwiXSxbXCJmaWxsLWV4dHJ1c2lvblwiXSxbXCJmaWxsXCJdLFtcImhlYXRtYXBcIl0sW1wiaGlsbHNoYWRlXCJdLFtcImxpbmVcIl0sW1wicmFzdGVyXCJdLFtcImljb25cIixcInN5bWJvbFwiXSxbXCJ0ZXh0XCIsXCJzeW1ib2xcIl1dO2Z1bmN0aW9uIHMocyl7dmFyIGMsdT1zLnNwcml0ZSxwPXMubGF5ZXIsaD17Y2lyY2xlOmksc3ltYm9sOmwsbGluZTpuLGZpbGw6YX1bcC50eXBlXSx5PShjPXMuem9vbSxmdW5jdGlvbihpLGEsbil7dmFyIGw9ZnVuY3Rpb24odCl7dmFyIGU9by5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiB0LnN0YXJ0c1dpdGgoZVswXSl9KTtyZXR1cm4gZT9lWzFdfHxlWzBdOm51bGx9KG4pLHM9clthK1wiX1wiK2xdW25dO2lmKCFpW2FdKXJldHVybiBzLmRlZmF1bHQ7dmFyIHU9aVthXVtuXTtpZih2b2lkIDA9PT11KXJldHVybiBzLmRlZmF1bHQ7aWYoXCJvYmplY3RcIj09dHlwZW9mIHUpe3ZhciBwO2lmKEFycmF5LmlzQXJyYXkodSkpe2lmKFwiYXJyYXlcIj09PXMudHlwZSlyZXR1cm4gdTtwPXQuY3JlYXRlRXhwcmVzc2lvbih1KS52YWx1ZX1lbHNlIHA9ZS5jcmVhdGVGdW5jdGlvbih1LHMpO2lmKCFwLmV2YWx1YXRlKXJldHVybiBudWxsO3ZhciBoPXAuZXZhbHVhdGUoe3pvb206Y30se30pO3JldHVybiBoP2gubmFtZXx8aDpudWxsfXJldHVybiB1fSk7cmV0dXJuIGg/aCh7bGF5ZXI6cCxleHByOnksaW1hZ2U6ZnVuY3Rpb24odCl7aWYodSYmdS5qc29uKXt2YXIgZT11Lmpzb25bdF07aWYoZSlyZXR1cm4gcj11LmltYWdlLGE9KGk9ZSkueCxuPWkueSxsPWkud2lkdGgsbz1pLmhlaWdodCwocz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpKS53aWR0aD0yKmwscy5oZWlnaHQ9MipvLHMuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShyLDIqYSwyKm4sMipsLDIqbywwLDAsMipsLDIqbykscy50b0RhdGFVUkwoKX12YXIgcixpLGEsbixsLG8scztyZXR1cm4gbnVsbH19KTpudWxsfWV4cG9ydCBkZWZhdWx0IHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tb2Rlcm4uanMubWFwXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG52YXIgcGFyc2VQcm90b2NvbCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgdmFyIHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgdmFyIG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpICYmIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBmdW5jdGlvbihjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IChjYW5jZWwgJiYgY2FuY2VsLnR5cGUpID8gbmV3IENhbmNlbGVkRXJyb3IoKSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgWyAnaHR0cCcsICdodHRwcycsICdmaWxlJyBdLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcbmF4aW9zLnRvRm9ybURhdGEgPSByZXF1aXJlKCcuL2hlbHBlcnMvdG9Gb3JtRGF0YScpO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2xpYi9jb3JlL0F4aW9zRXJyb3InKTtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVEKTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi9idWlsZEZ1bGxQYXRoJyk7XG52YXIgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0b3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxudmFyIHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xudmFyIGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGZ1bmN0aW9uKGNvZGUpIHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IGZ1bmN0aW9uKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykge1xuICB2YXIgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZCxcbiAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbWVyZ2VNYXAgPSB7XG4gICAgJ3VybCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ21ldGhvZCc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2RhdGEnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdiYXNlVVJMJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVxdWVzdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlc3BvbnNlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncGFyYW1zU2VyaWFsaXplcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0TWVzc2FnZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3dpdGhDcmVkZW50aWFscyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2FkYXB0ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZVR5cGUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmQ29va2llTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25VcGxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uRG93bmxvYWRQcm9ncmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2RlY29tcHJlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Qm9keUxlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2JlZm9yZVJlZGlyZWN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9BeGlvc0Vycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25hbCcpO1xudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgIHZhciBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgKGlzT2JqZWN0UGF5bG9hZCAmJiBjb250ZW50VHlwZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKSkge1xuICAgICAgdmFyIF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuICAgICAgcmV0dXJuIHRvRm9ybURhdGEoaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSwgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFBheWxvYWQgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiByZXF1aXJlKCcuL2Vudi9Gb3JtRGF0YScpXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwidmVyc2lvblwiOiBcIjAuMjcuMlwiXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5tb2R1bGUuZXhwb3J0cyA9IG51bGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIHZhciBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgRm9ybURhdGEoKTtcblxuICB2YXIgc3RhY2sgPSBbXTtcblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGQoZGF0YSwgcGFyZW50S2V5KSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoZGF0YSkgfHwgdXRpbHMuaXNBcnJheShkYXRhKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2YoZGF0YSkgIT09IC0xKSB7XG4gICAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhcmVudEtleSk7XG4gICAgICB9XG5cbiAgICAgIHN0YWNrLnB1c2goZGF0YSk7XG5cbiAgICAgIHV0aWxzLmZvckVhY2goZGF0YSwgZnVuY3Rpb24gZWFjaCh2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICh1dGlscy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgdmFyIGZ1bGxLZXkgPSBwYXJlbnRLZXkgPyBwYXJlbnRLZXkgKyAnLicgKyBrZXkgOiBrZXk7XG4gICAgICAgIHZhciBhcnI7XG5cbiAgICAgICAgaWYgKHZhbHVlICYmICFwYXJlbnRLZXkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgIXV0aWxzLmlzVW5kZWZpbmVkKGVsKSAmJiBmb3JtRGF0YS5hcHBlbmQoZnVsbEtleSwgY29udmVydFZhbHVlKGVsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBidWlsZCh2YWx1ZSwgZnVsbEtleSk7XG4gICAgICB9KTtcblxuICAgICAgc3RhY2sucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChwYXJlbnRLZXksIGNvbnZlcnRWYWx1ZShkYXRhKSk7XG4gICAgfVxuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Gb3JtRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIGtpbmRPZiA9IChmdW5jdGlvbihjYWNoZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odGhpbmcpIHtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xuICB9O1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmZ1bmN0aW9uIGtpbmRPZlRlc3QodHlwZSkge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gaXNLaW5kT2YodGhpbmcpIHtcbiAgICByZXR1cm4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHRoaW5nKSB7XG4gIHZhciBwYXR0ZXJuID0gJ1tvYmplY3QgRm9ybURhdGFdJztcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8XG4gICAgdG9TdHJpbmcuY2FsbCh0aGluZykgPT09IHBhdHRlcm4gfHxcbiAgICAoaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gcGF0dGVybilcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci50cmltID8gc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKi9cblxuZnVuY3Rpb24gaW5oZXJpdHMoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZmlsdGVyXVxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiB0b0ZsYXRPYmplY3Qoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIpIHtcbiAgdmFyIHByb3BzO1xuICB2YXIgaTtcbiAgdmFyIHByb3A7XG4gIHZhciBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICghbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qXG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICB2YXIgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0XG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSh0aGluZykge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgdmFyIGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmIChpc1VuZGVmaW5lZChpKSkgcmV0dXJuIG51bGw7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbnZhciBpc1R5cGVkQXJyYXkgPSAoZnVuY3Rpb24oVHlwZWRBcnJheSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTSxcbiAgaW5oZXJpdHM6IGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3Q6IHRvRmxhdE9iamVjdCxcbiAga2luZE9mOiBraW5kT2YsXG4gIGtpbmRPZlRlc3Q6IGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoOiBlbmRzV2l0aCxcbiAgdG9BcnJheTogdG9BcnJheSxcbiAgaXNUeXBlZEFycmF5OiBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3Q6IGlzRmlsZUxpc3Rcbn07XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgsPHN2ZyBoZWlnaHQ9XFxcIjUxMnB0XFxcIiB2aWV3Qm94PVxcXCIwIDAgNTEyIDUxMi4wMDA1XFxcIiB3aWR0aD1cXFwiNTEycHRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+PHBhdGggZD1cXFwibTIyMCAwaC0yMDBjLTExLjA0Njg3NSAwLTIwIDguOTUzMTI1LTIwIDIwdjIwMGMwIDExLjA0Njg3NSA4Ljk1MzEyNSAyMCAyMCAyMGgyMDBjMTEuMDQ2ODc1IDAgMjAtOC45NTMxMjUgMjAtMjB2LTIwMGMwLTExLjA0Njg3NS04Ljk1MzEyNS0yMC0yMC0yMHptLTIwIDIwMGgtMTYwdi0xNjBoMTYwem0yOTkuNjU2MjUgNzMuNTIzNDM4Yy03LjQ3MjY1Ni0zLjA5NzY1Ny0xNi4wNzgxMjUtMS4zODY3MTktMjEuNzk2ODc1IDQuMzMyMDMxbC0yMDAgMjAwYy01LjcyMjY1NiA1LjcyMjY1Ni03LjQzMzU5NCAxNC4zMjQyMTktNC4zMzU5MzcgMjEuNzk2ODc1IDMuMDk3NjU2IDcuNDc2NTYyIDEwLjM4NjcxOCAxMi4zNDc2NTYgMTguNDc2NTYyIDEyLjM0NzY1NmgyMDBjMTEuMDQ2ODc1IDAgMjAtOC45NTMxMjUgMjAtMjB2LTIwMGMwLTguMDg5ODQ0LTQuODcxMDk0LTE1LjM4MjgxMi0xMi4zNDM3NS0xOC40NzY1NjJ6bS0yNy42NTYyNSAxOTguNDc2NTYyaC0xMzEuNzE0ODQ0bDEzMS43MTQ4NDQtMTMxLjcxNDg0NHptLTgwLTIzMmM2Ni4xNjc5NjkgMCAxMjAtNTMuODMyMDMxIDEyMC0xMjBzLTUzLjgzMjAzMS0xMjAtMTIwLTEyMC0xMjAgNTMuODMyMDMxLTEyMCAxMjAgNTMuODMyMDMxIDEyMCAxMjAgMTIwem0wLTIwMGM0NC4xMTMyODEgMCA4MCAzNS44ODY3MTkgODAgODBzLTM1Ljg4NjcxOSA4MC04MCA4MC04MC0zNS44ODY3MTktODAtODAgMzUuODg2NzE5LTgwIDgwLTgwem0tMTU3Ljg1OTM3NSAyNjYuMTQ0NTMxLTg1Ljg1NTQ2OSA4NS44NTU0NjkgODUuODU1NDY5IDg1Ljg1NTQ2OWM3LjgxMjUgNy44MTI1IDcuODEyNSAyMC40NzY1NjIgMCAyOC4yODUxNTYtNy44MDg1OTQgNy44MDg1OTQtMjAuNDcyNjU2IDcuODEyNS0yOC4yODEyNSAwbC04NS44NTkzNzUtODUuODU1NDY5LTg1Ljg1OTM3NSA4NS44NTkzNzVjLTcuODA4NTk0IDcuODA4NTk0LTIwLjQ3MjY1NiA3LjgwODU5NC0yOC4yODEyNSAwLTcuODEyNS03LjgxMjUtNy44MTI1LTIwLjQ3NjU2MiAwLTI4LjI4NTE1Nmw4NS44NTU0NjktODUuODU5Mzc1LTg1Ljg1NTQ2OS04NS44NTU0NjljLTcuODEyNS03LjgxMjUtNy44MTI1LTIwLjQ3NjU2MiAwLTI4LjI4NTE1NiA3LjgwODU5NC03LjgxMjUgMjAuNDcyNjU2LTcuODEyNSAyOC4yODEyNSAwbDg1Ljg1OTM3NSA4NS44NTU0NjkgODUuODU5Mzc1LTg1Ljg1OTM3NWM3LjgwODU5NC03LjgwODU5NCAyMC40NzI2NTYtNy44MDg1OTQgMjguMjgxMjUgMCA3LjgxMjUgNy44MTI1IDcuODEyNSAyMC40NzY1NjIgMCAyOC4yODkwNjJ6bTAgMFxcXCIvPjwvc3ZnPlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tYXBib3hnbC1sZWdlbmQtbGlzdFxcbntcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC1saXN0e1xcbiAgICBvdmVyZmxvdy15OnNjcm9sbDtcXG4gICAgbWF4LWhlaWdodDogY2FsYygxMDB2aCAqIDAuNyk7XFxufVxcblxcbi5tYXBib3hnbC1jdHJsLWdyb3VwIC5tYXBib3hnbC1sZWdlbmQtbGlzdCBidXR0b25cXG57XFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgLyogcGFkZGluZzogOHB4IDhweCA2cHg7ICovXFxuICAgIC8qIHRleHQtYWxpZ246IHJpZ2h0OyAqL1xcbiAgICAvKiB3aWR0aDogMTAwJTsgKi9cXG4gICAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4ubWFwYm94Z2wtbGVnZW5kLWxpc3QgYnV0dG9uLmFjdGl2ZVxcbntcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5tYXBib3hnbC1sZWdlbmQtbGlzdCBidXR0b246aG92ZXJcXG57XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxufVxcblxcbi5tYXBib3hnbC1sZWdlbmQtbGlzdCBidXR0b24gKyBidXR0b25cXG57XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1xcbn1cXG5cXG4ubWFwYm94Z2wtbGVnZW5kLXN3aXRjaGVyXFxueyBcXG4gICAgYmFja2dyb3VuZDogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDcwJTtcXG59XFxuXFxudGFibGUubGVnZW5kLXRhYmxle1xcbiAgICBib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7XFxuICAgIG1hcmdpbjowIGF1dG87XFxuICAgIH1cXG50ZC5sZWdlbmQtdGFibGUtdGQsdGgubGVnZW5kLXRhYmxlLXRoe1xcbiAgICBib3JkZXI6MXB4IHNvbGlkICNmZmZmZmY7XFxuICAgIG1hcmdpbjogMTBweDtcXG4gICAgcGFkZGluZzoycHg7XFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcblxcbi5tYXBib3hnbC1sZWdlbmQtY2xvc2UtYnV0dG9ue1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgYm9yZGVyLXJhZGl1czogMCAzcHggMCAwO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBmb250LXNpemU6IDEzcHg7XFxuICAgIHBhZGRpbmctdG9wOiA1cHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC10aXRsZS1sYWJlbHtcXG4gICAgZm9udC1zaXplOiAxNHB4OyBcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7IFxcbiAgICBtYXJnaW46IDVweDtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC1vbmx5UmVuZGVyZWQtY2hlY2tib3h7XFxuICAgIG1hcmdpbjogNXB4O1xcbn1cXG5cXG4ubWFwYm94Z2wtbGVnZW5kLW9ubHlSZW5kZXJlZC1sYWJlbHtcXG4gICAgZm9udC1zaXplOiAxNHB4OyBcXG4gICAgbWFyZ2luOiA1cHg7XFxufVxcblxcbnRkLmxlZ2VuZC10YWJsZS10ZCA+IHN2Z3tcXG4gICAgaGVpZ2h0OiAxN3B4O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9jc3Mvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7SUFFSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLDZCQUE2QjtBQUNqQzs7QUFFQTs7SUFFSSxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGVBQWU7SUFDZixjQUFjO0lBQ2QsMEJBQTBCO0lBQzFCLHVCQUF1QjtJQUN2QixpQkFBaUI7SUFDakIsWUFBWTtBQUNoQjs7QUFFQTs7SUFFSSxpQkFBaUI7QUFDckI7O0FBRUE7O0lBRUkscUNBQXFDO0FBQ3pDOztBQUVBOztJQUVJLDBCQUEwQjtBQUM5Qjs7QUFFQTs7SUFFSSxtREFBNDVDO0lBQzU1QywyQkFBMkI7SUFDM0IsNEJBQTRCO0lBQzVCLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLHdCQUF3QjtJQUN4QixhQUFhO0lBQ2I7QUFDSjtJQUNJLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osV0FBVztJQUNYLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCx3QkFBd0I7SUFDeEIsZUFBZTtJQUNmLDZCQUE2QjtJQUM3QixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksZUFBZTtJQUNmLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFlBQVk7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1hcGJveGdsLWxlZ2VuZC1saXN0XFxue1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubWFwYm94Z2wtbGVnZW5kLWxpc3R7XFxuICAgIG92ZXJmbG93LXk6c2Nyb2xsO1xcbiAgICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoICogMC43KTtcXG59XFxuXFxuLm1hcGJveGdsLWN0cmwtZ3JvdXAgLm1hcGJveGdsLWxlZ2VuZC1saXN0IGJ1dHRvblxcbntcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAvKiBwYWRkaW5nOiA4cHggOHB4IDZweDsgKi9cXG4gICAgLyogdGV4dC1hbGlnbjogcmlnaHQ7ICovXFxuICAgIC8qIHdpZHRoOiAxMDAlOyAqL1xcbiAgICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi5tYXBib3hnbC1sZWdlbmQtbGlzdCBidXR0b24uYWN0aXZlXFxue1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC1saXN0IGJ1dHRvbjpob3ZlclxcbntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA1KTtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC1saXN0IGJ1dHRvbiArIGJ1dHRvblxcbntcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZGQ7XFxufVxcblxcbi5tYXBib3hnbC1sZWdlbmQtc3dpdGNoZXJcXG57IFxcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PVVURi04LDxzdmcgaGVpZ2h0PVxcXCI1MTJwdFxcXCIgdmlld0JveD1cXFwiMCAwIDUxMiA1MTIuMDAwNVxcXCIgd2lkdGg9XFxcIjUxMnB0XFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxwYXRoIGQ9XFxcIm0yMjAgMGgtMjAwYy0xMS4wNDY4NzUgMC0yMCA4Ljk1MzEyNS0yMCAyMHYyMDBjMCAxMS4wNDY4NzUgOC45NTMxMjUgMjAgMjAgMjBoMjAwYzExLjA0Njg3NSAwIDIwLTguOTUzMTI1IDIwLTIwdi0yMDBjMC0xMS4wNDY4NzUtOC45NTMxMjUtMjAtMjAtMjB6bS0yMCAyMDBoLTE2MHYtMTYwaDE2MHptMjk5LjY1NjI1IDczLjUyMzQzOGMtNy40NzI2NTYtMy4wOTc2NTctMTYuMDc4MTI1LTEuMzg2NzE5LTIxLjc5Njg3NSA0LjMzMjAzMWwtMjAwIDIwMGMtNS43MjI2NTYgNS43MjI2NTYtNy40MzM1OTQgMTQuMzI0MjE5LTQuMzM1OTM3IDIxLjc5Njg3NSAzLjA5NzY1NiA3LjQ3NjU2MiAxMC4zODY3MTggMTIuMzQ3NjU2IDE4LjQ3NjU2MiAxMi4zNDc2NTZoMjAwYzExLjA0Njg3NSAwIDIwLTguOTUzMTI1IDIwLTIwdi0yMDBjMC04LjA4OTg0NC00Ljg3MTA5NC0xNS4zODI4MTItMTIuMzQzNzUtMTguNDc2NTYyem0tMjcuNjU2MjUgMTk4LjQ3NjU2MmgtMTMxLjcxNDg0NGwxMzEuNzE0ODQ0LTEzMS43MTQ4NDR6bS04MC0yMzJjNjYuMTY3OTY5IDAgMTIwLTUzLjgzMjAzMSAxMjAtMTIwcy01My44MzIwMzEtMTIwLTEyMC0xMjAtMTIwIDUzLjgzMjAzMS0xMjAgMTIwIDUzLjgzMjAzMSAxMjAgMTIwIDEyMHptMC0yMDBjNDQuMTEzMjgxIDAgODAgMzUuODg2NzE5IDgwIDgwcy0zNS44ODY3MTkgODAtODAgODAtODAtMzUuODg2NzE5LTgwLTgwIDM1Ljg4NjcxOS04MCA4MC04MHptLTE1Ny44NTkzNzUgMjY2LjE0NDUzMS04NS44NTU0NjkgODUuODU1NDY5IDg1Ljg1NTQ2OSA4NS44NTU0NjljNy44MTI1IDcuODEyNSA3LjgxMjUgMjAuNDc2NTYyIDAgMjguMjg1MTU2LTcuODA4NTk0IDcuODA4NTk0LTIwLjQ3MjY1NiA3LjgxMjUtMjguMjgxMjUgMGwtODUuODU5Mzc1LTg1Ljg1NTQ2OS04NS44NTkzNzUgODUuODU5Mzc1Yy03LjgwODU5NCA3LjgwODU5NC0yMC40NzI2NTYgNy44MDg1OTQtMjguMjgxMjUgMC03LjgxMjUtNy44MTI1LTcuODEyNS0yMC40NzY1NjIgMC0yOC4yODUxNTZsODUuODU1NDY5LTg1Ljg1OTM3NS04NS44NTU0NjktODUuODU1NDY5Yy03LjgxMjUtNy44MTI1LTcuODEyNS0yMC40NzY1NjIgMC0yOC4yODUxNTYgNy44MDg1OTQtNy44MTI1IDIwLjQ3MjY1Ni03LjgxMjUgMjguMjgxMjUgMGw4NS44NTkzNzUgODUuODU1NDY5IDg1Ljg1OTM3NS04NS44NTkzNzVjNy44MDg1OTQtNy44MDg1OTQgMjAuNDcyNjU2LTcuODA4NTk0IDI4LjI4MTI1IDAgNy44MTI1IDcuODEyNSA3LjgxMjUgMjAuNDc2NTYyIDAgMjguMjg5MDYyem0wIDBcXFwiLz48L3N2Zz4nKTtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDcwJTtcXG59XFxuXFxudGFibGUubGVnZW5kLXRhYmxle1xcbiAgICBib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7XFxuICAgIG1hcmdpbjowIGF1dG87XFxuICAgIH1cXG50ZC5sZWdlbmQtdGFibGUtdGQsdGgubGVnZW5kLXRhYmxlLXRoe1xcbiAgICBib3JkZXI6MXB4IHNvbGlkICNmZmZmZmY7XFxuICAgIG1hcmdpbjogMTBweDtcXG4gICAgcGFkZGluZzoycHg7XFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcblxcbi5tYXBib3hnbC1sZWdlbmQtY2xvc2UtYnV0dG9ue1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgYm9yZGVyLXJhZGl1czogMCAzcHggMCAwO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBmb250LXNpemU6IDEzcHg7XFxuICAgIHBhZGRpbmctdG9wOiA1cHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC10aXRsZS1sYWJlbHtcXG4gICAgZm9udC1zaXplOiAxNHB4OyBcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7IFxcbiAgICBtYXJnaW46IDVweDtcXG59XFxuXFxuLm1hcGJveGdsLWxlZ2VuZC1vbmx5UmVuZGVyZWQtY2hlY2tib3h7XFxuICAgIG1hcmdpbjogNXB4O1xcbn1cXG5cXG4ubWFwYm94Z2wtbGVnZW5kLW9ubHlSZW5kZXJlZC1sYWJlbHtcXG4gICAgZm9udC1zaXplOiAxNHB4OyBcXG4gICAgbWFyZ2luOiA1cHg7XFxufVxcblxcbnRkLmxlZ2VuZC10YWJsZS10ZCA+IHN2Z3tcXG4gICAgaGVpZ2h0OiAxN3B4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJpbXBvcnQgbWFwYm94Z2wgZnJvbSAnbWFwYm94LWdsJztcbmltcG9ydCB7IE1hcGJveExlZ2VuZENvbnRyb2wsIExlZ2VuZE9wdGlvbnMgfSBmcm9tICcuLi9saWIvaW5kZXgnO1xuaW1wb3J0ICcuLi9jc3Mvc3R5bGVzLmNzcyc7XG5cbigoKT0+e1xuICAgIC8vIG1hcGJveGdsLmFjY2Vzc1Rva2VuPSd5b3VyIG1hcGJveCBhY2Nlc3MgdG9rZW4nXG4gICAgY29uc3QgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgIGNvbnRhaW5lcjogJ21hcCcsXG4gICAgICAgIC8vIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXYxMScsXG4gICAgICAgIHN0eWxlOidodHRwczovL25hcndhc3Njby5naXRodWIuaW8vbWFwYm94LXN0eWxlZmlsZXMvdW52dC9zdHlsZS5qc29uJyxcbiAgICAgICAgY2VudGVyOiBbMzUuODcwNjMsIC0xLjA4NTUxXSxcbiAgICAgICAgem9vbTogMTIsXG4gICAgICAgIGhhc2g6dHJ1ZSxcbiAgICB9KTtcbiAgICBtYXAuYWRkQ29udHJvbChuZXcgbWFwYm94Z2wuTmF2aWdhdGlvbkNvbnRyb2woKSwgJ3RvcC1yaWdodCcpO1xuXG4gICAgbWFwLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSB7XG4gICAgICAgICAgICAncGlwZWxpbmUnOiAnUGlwZWxpbmUnLFxuICAgICAgICAgICAgJ3BpcGVsaW5lX2Fubm90YXRpb24nOiAnUGlwZWxpbmUgTGFiZWwnLCBcbiAgICAgICAgICAgICdtZXRlcic6ICdXYXRlciBNZXRlcicsXG4gICAgICAgICAgICAnZmxvdyBtZXRlcic6ICdGbG93IE1ldGVyJywgXG4gICAgICAgICAgICAndmFsdmUnOiAnVmFsdmUnLCBcbiAgICAgICAgICAgICdmaXJlaHlkcmFudCc6ICdGaXJlIEh5ZHJhbnQnLCBcbiAgICAgICAgICAgICd3YXNob3V0JzogJ1dhc2hvdXQnLFxuICAgICAgICAgICAgJ3RhbmsnOiAnVGFuaycsIFxuICAgICAgICAgICAgJ3RhbmtfYW5ub3RhdGlvbic6ICdUYW5rIExhYmVsJywgXG4gICAgICAgICAgICAnd3RwJzogJ1dUUCcsIFxuICAgICAgICAgICAgJ3d0cF9hbm5vdGF0aW9uJzogJ1dUUCBMYWJlbCcsIFxuICAgICAgICAgICAgJ2ludGFrZSc6ICdJbnRha2UnLCBcbiAgICAgICAgICAgICdpbnRha2VfYW5ub3RhdGlvbic6ICdJbnRha2UgTGFiZWwnLCBcbiAgICAgICAgICAgICdwYXJjZWxzJzogJ1BhcmNlbHMnLCBcbiAgICAgICAgICAgICdwYXJjZWxzX2Fubm90YXRpb24nOiAnUGFyY2VscyBMYWJlbCcsIFxuICAgICAgICAgICAgJ3ZpbGxhZ2UnOiAnVmlsbGFnZScsIFxuICAgICAgICAgICAgJ3ZpbGxhZ2VfYW5ub3RhdGlvbic6ICdWaWxsYWdlIExhYmVsJywgXG4gICAgICAgICAgICAnZG1hJzogJ0RNQScsXG4gICAgICAgICAgICAnZG1hLWFubm90YXRpb24nOiAnRE1BIExhYmVsJywgXG4gICAgICAgICAgICAnY29udG91ci1saW5lJzogJ0NvdW50b3VyJyxcbiAgICAgICAgICAgICdjb250b3VyLWxhYmVsJzogJ0NvbnRvdXIgTGFiZWwnLFxuICAgICAgICAgICAgJ2hpbGxzaGFkZSc6ICdIaWxsc2hhZGUnXG4gICAgICAgIH07XG4gICAgICAgIC8vIGFkZCBsZWdlbmQgY29udHJvbCB3aXRob3V0IGNoZWNrYm94LCBhbmQgaXQgd2lsbCBiZSBoaWRlIGFzIGRlZmF1bHRcbiAgICAgICAgbGV0IG9wdGlvbnMgOiBMZWdlbmRPcHRpb25zID0ge1xuICAgICAgICAgICAgc2hvd0RlZmF1bHQ6IGZhbHNlLCBcbiAgICAgICAgICAgIHNob3dDaGVja2JveDogZmFsc2UsIFxuICAgICAgICAgICAgb25seVJlbmRlcmVkOiB0cnVlLFxuICAgICAgICAgICAgcmV2ZXJzZU9yZGVyOiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgbWFwLmFkZENvbnRyb2wobmV3IE1hcGJveExlZ2VuZENvbnRyb2wodGFyZ2V0cywgb3B0aW9ucyksICd0b3AtcmlnaHQnKTtcblxuICAgICAgICAvLyBhZGQgbGVnZW5kIGNvbnRyb2wgd2l0aCBjaGVja2JveCwgYW5kIGl0IHdpbGwgYmUgc2hvd24gYXMgZGVmYXVsdFxuICAgICAgICBvcHRpb25zICA9IHtcbiAgICAgICAgICAgIHNob3dEZWZhdWx0OiB0cnVlLCBcbiAgICAgICAgICAgIHNob3dDaGVja2JveDogdHJ1ZSwgXG4gICAgICAgICAgICBvbmx5UmVuZGVyZWQ6IHRydWUsXG4gICAgICAgICAgICByZXZlcnNlT3JkZXI6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgbWFwLmFkZENvbnRyb2wobmV3IE1hcGJveExlZ2VuZENvbnRyb2wodGFyZ2V0cywgb3B0aW9ucyksICdib3R0b20tcmlnaHQnKTtcblxuICAgICAgICAvLyBhZGQgbGVnZW5kIGNvbnRyb2wgd2l0aCBhbGwgbGF5ZXJzLCBhbmQgaXQgcmV2ZXJzZSBsYXllciBvcmRlclxuICAgICAgICBvcHRpb25zICA9IHtcbiAgICAgICAgICAgIHNob3dEZWZhdWx0OiB0cnVlLCBcbiAgICAgICAgICAgIHNob3dDaGVja2JveDogdHJ1ZSwgXG4gICAgICAgICAgICBvbmx5UmVuZGVyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmV2ZXJzZU9yZGVyOiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgbWFwLmFkZENvbnRyb2wobmV3IE1hcGJveExlZ2VuZENvbnRyb2woe30sIG9wdGlvbnMpLCAnYm90dG9tLWxlZnQnKTtcblxuICAgICAgICAvLyBhZGQgbGVnZW50IGNvbnRyb2wgd2l0aCBjdXN0b20gdGl0bGVcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNob3dEZWZhdWx0OiB0cnVlLCBcbiAgICAgICAgICAgIHNob3dDaGVja2JveDogdHJ1ZSwgXG4gICAgICAgICAgICBvbmx5UmVuZGVyZWQ6IHRydWUsXG4gICAgICAgICAgICByZXZlcnNlT3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgdGl0bGU6ICdDdXN0b20gTGVnZW5kJ1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwLmFkZENvbnRyb2wobmV3IE1hcGJveExlZ2VuZENvbnRyb2wodGFyZ2V0cywgb3B0aW9ucyksICd0b3AtcmlnaHQnKTtcbiAgICB9KTtcbn0pKCkiLCJleHBvcnQgeyBkZWZhdWx0IGFzIE1hcGJveExlZ2VuZENvbnRyb2wsIExlZ2VuZE9wdGlvbnMgfSBmcm9tICcuL2xlZ2VuZC1jb250cm9sJztcbiIsImltcG9ydCB7IGFjY2Vzc1Rva2VuLCBiYXNlQXBpVXJsLCBJQ29udHJvbCwgTWFwIGFzIE1hcGJveE1hcCB9IGZyb20gXCJtYXBib3gtZ2xcIjtcbmltcG9ydCBMZWdlbmRTeW1ib2wgZnJvbSAnQHdhdGVyZ2lzL2xlZ2VuZC1zeW1ib2wnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuXG5leHBvcnQgdHlwZSBMZWdlbmRPcHRpb25zID0ge1xuICAgIHNob3dEZWZhdWx0OiBib29sZWFuO1xuICAgIHNob3dDaGVja2JveDogYm9vbGVhbjtcbiAgICByZXZlcnNlT3JkZXI6IGJvb2xlYW47XG4gICAgb25seVJlbmRlcmVkOiBib29sZWFuO1xuICAgIGFjY2Vzc3Rva2VuPzogc3RyaW5nO1xuICAgIHRpdGxlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIE1hcGJveCBHTCBMZWdlbmQgQ29udHJvbC5cbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRzIC0gT2JqZWN0IG9mIGxheWVyLmlkIGFuZCB0aXRsZVxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLnNob3dEZWZhdWx0IHRydWU6IGl0IHNob3dzIGxlZ2VuZCBhcyBkZWZhdWx0LiBmYWxzZTogbGVnZW5kIHdpbGwgYmUgY2xvc2VkIGFzIGRlZmF1bHRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5zaG93Q2hlY2tib3ggdHJ1ZTogY2hlY2tib3ggd2lsbCBiZSBhZGRlZCBmb3Igc3dpdGNoaW5nIGxheWVyJ3MgdmlzaWJpbGl0eS4gZmFsc2U6IGNoZWNrYm94IHdpbGwgbm90IGJlIGFkZGVkLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLnJldmVyc2VPcmRlciB0cnVlOiBsYXllcnMgd2lsbCBiZSBvcmRlcmVkIGZyb20gdG9wLiBmYWxzZTogbGF5ZXJzIHdpbGwgYmUgb3JkZXJlZCBmcm9tIGJvdHRvbS4gSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHRydWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMub25seVJlbmRlcmVkIHRydWU6IG9ubHkgcmVuZGVyZWQgbGF5ZXJzIHdpbGwgYmUgc2hvd24gb24gbGVnZW5kIGFzIGRlZmF1bHQuIGZhbHNlOiBhbGwgbGF5ZXJzJyBsZWdlbmQgd2lsbCBiZSBzaG93biBhcyBkZWZhdWx0LiBJZiBub3Qgc3BlY2lmaWVkLCBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdHJ1ZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBib3hMZWdlbmRDb250cm9sIGltcGxlbWVudHMgSUNvbnRyb2xcbntcblxuICAgIHByaXZhdGUgY29udHJvbENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBtYXA/OiBNYXBib3hNYXA7XG4gICAgcHJpdmF0ZSBsZWdlbmRDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgbGVnZW5kQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIGNsb3NlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIGxlZ2VuZFRhYmxlOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHRhcmdldHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgcHJpdmF0ZSB1bmNoZWNrZWRMYXllcnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcbiAgICBwcml2YXRlIG9ubHlSZW5kZXJlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIG9wdGlvbnM6IExlZ2VuZE9wdGlvbnMgPSB7XG4gICAgICAgIHNob3dEZWZhdWx0OiB0cnVlLFxuICAgICAgICBzaG93Q2hlY2tib3g6IHRydWUsXG4gICAgICAgIHJldmVyc2VPcmRlcjogdHJ1ZSxcbiAgICAgICAgb25seVJlbmRlcmVkOiB0cnVlLFxuICAgICAgICBhY2Nlc3N0b2tlbjogdW5kZWZpbmVkLFxuICAgICAgICB0aXRsZTogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBwcml2YXRlIHNwcml0ZSA9IHtcbiAgICAgICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsXG4gICAgICAgIGpzb246IEpTT05cbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IodGFyZ2V0czp7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9LCBvcHRpb25zOiBMZWdlbmRPcHRpb25zKVxuICAgIHtcbiAgICAgIHRoaXMudGFyZ2V0cyA9IHRhcmdldHM7XG4gICAgICBpZiAob3B0aW9ucyl7XG4gICAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgdGhpcy5vbmx5UmVuZGVyZWQgPSB0aGlzLm9wdGlvbnMub25seVJlbmRlcmVkO1xuICAgICAgdGhpcy5vbkRvY3VtZW50Q2xpY2sgPSB0aGlzLm9uRG9jdW1lbnRDbGljay5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREZWZhdWx0UG9zaXRpb24oKTogc3RyaW5nXG4gICAge1xuICAgICAgICBjb25zdCBkZWZhdWx0UG9zaXRpb24gPSBcInRvcC1yaWdodFwiO1xuICAgICAgICByZXR1cm4gZGVmYXVsdFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hhbmdlTGF5ZXJWaXNpYmlsaXR5KGxheWVyX2lkOiBzdHJpbmcsIGNoZWNrZWQpXG4gICAge1xuICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudW5jaGVja2VkTGF5ZXJzW2xheWVyX2lkXSkgZGVsZXRlIHRoaXMudW5jaGVja2VkTGF5ZXJzW2xheWVyX2lkXTtcbiAgICAgICAgICAgIHRoaXMubWFwPy5zZXRMYXlvdXRQcm9wZXJ0eShsYXllcl9pZCwgJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRoaXMudW5jaGVja2VkTGF5ZXJzW2xheWVyX2lkXT1sYXllcl9pZDtcbiAgICAgICAgICAgIHRoaXMubWFwPy5zZXRMYXlvdXRQcm9wZXJ0eShsYXllcl9pZCwgJ3Zpc2liaWxpdHknLCAnbm9uZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ZXM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUobGF5ZXJfaWQpO1xuICAgICAgICBmb3IgKGxldCBpIGluIGNoZWNrYm94ZXMpe1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGVja2JveGVzW2ldID09PSAnbnVtYmVyJykgY29udGludWU7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjaGVja2JveGVzW2ldLmNoZWNrZWQgPSBjaGVja2VkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGNoZWNrYm94IGZvciBzd2l0Y2hpbmcgbGF5ZXIgdmlzaWJpbGl0eVxuICAgICAqIEBwYXJhbSBsYXllciBtYXBib3hnbC5MYXllciBvYmplY3RcbiAgICAgKiBAcmV0dXJucyBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCByZXR1cm4gVEQgRWxlbWVudFxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlTGF5ZXJDaGVja2JveChsYXllcjogbWFwYm94Z2wuTGF5ZXIpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZFxuICAgIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0NoZWNrYm94KSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRoaXNfID0gdGhpcztcblxuICAgICAgICAvLyBjcmVhdGUgY2hlY2tib3ggZm9yIHN3aXRjaGluZyBsYXllciB2aXNpYmlsaXR5XG4gICAgICAgIGNvbnN0IHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnVEQnKTtcbiAgICAgICAgdGQuY2xhc3NOYW1lPSdsZWdlbmQtdGFibGUtdGQnO1xuICAgICAgICBjb25zdCBjaGVja2xheWVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgY2hlY2tsYXllci5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnY2hlY2tib3gnKTtcbiAgICAgICAgY2hlY2tsYXllci5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBsYXllci5pZCk7XG4gICAgICAgIGNoZWNrbGF5ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGxheWVyLmlkKTtcbiAgICAgICAgY29uc3QgdmlzaWJpbGl0eSA9IHRoaXMubWFwPy5nZXRMYXlvdXRQcm9wZXJ0eShsYXllci5pZCwgJ3Zpc2liaWxpdHknKTtcbiAgICAgICAgaWYgKCF2aXNpYmlsaXR5KXtcbiAgICAgICAgICAgIGNoZWNrbGF5ZXIuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IF9jaGVja2VkID0gdHJ1ZTsgICAgICAgXG4gICAgICAgICAgICBzd2l0Y2godmlzaWJpbGl0eSl7XG4gICAgICAgICAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgICAgICAgICAgIF9jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3Zpc2libGUnOlxuICAgICAgICAgICAgICAgICAgICBfY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrbGF5ZXIuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc18uY2hhbmdlTGF5ZXJWaXNpYmlsaXR5KGxheWVyLmlkLCBfY2hlY2tlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGVja2xheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBfaWQgPSBlLnRhcmdldD8udmFsdWU7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBfY2hlY2tlZCA9IGUudGFyZ2V0Py5jaGVja2VkO1xuICAgICAgICAgICAgdGhpc18uY2hhbmdlTGF5ZXJWaXNpYmlsaXR5KF9pZCwgX2NoZWNrZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGQuYXBwZW5kQ2hpbGQoY2hlY2tsYXllcikgXG5cbiAgICAgICAgcmV0dXJuIHRkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbGF5ZXIncyBsZWdlbmQgcm93XG4gICAgICogQHBhcmFtIGxheWVyIG1hcGJveGdsLkxheWVyIG9iamVjdFxuICAgICAqIEByZXR1cm5zIEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIHJldHVybiBUUiBFbGVtZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRMYXllckxlZ2VuZChsYXllcjogbWFwYm94Z2wuTGF5ZXIpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZFxuICAgIHtcbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5tYXA7XG4gICAgICAgIGNvbnN0IHpvb20gPSBtYXA/LmdldFpvb20oKTtcbiAgICAgICAgY29uc3Qgc3ByaXRlID0gdGhpcy5zcHJpdGU7XG4gICAgICAgIGxldCBzeW1ib2wgPSBMZWdlbmRTeW1ib2woe3Nwcml0ZSwgem9vbSwgbGF5ZXJ9KTtcblxuICAgICAgICB2YXIgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdUUicpO1xuXG4gICAgICAgIGNvbnN0IHRkMCA9IHRoaXMuY3JlYXRlTGF5ZXJDaGVja2JveChsYXllcik7XG4gICAgICAgIGlmICh0ZDApIHRyLmFwcGVuZENoaWxkKHRkMCk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGxlZ2VuZCBzeW1ib2xcbiAgICAgICAgdmFyIHRkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1REJyk7XG4gICAgICAgIHRkMS5jbGFzc05hbWU9J2xlZ2VuZC10YWJsZS10ZCc7XG5cbiAgICAgICAgaWYgKCFzeW1ib2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGljb25TdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICAgICAgY29uc3QgaWNvblBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgICAgICAgICAncGF0aCdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBpY29uUGF0aDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcblxuICAgICAgICAgICAgaWNvblN2Zy5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnbm9uZScpO1xuICAgICAgICAgICAgaWNvblN2Zy5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCAnMCAwIDI0IDI0Jyk7XG4gICAgICAgICAgICBpY29uU3ZnLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XG4gICAgICAgICAgICBpY29uU3ZnLmNsYXNzTGlzdC5hZGQoJ3Bvc3QtaWNvbicpO1xuXG4gICAgICAgICAgICBpY29uUGF0aC5zZXRBdHRyaWJ1dGUoXG5cdFx0XHRcdCdkJyxcblx0XHRcdFx0J00yMSwwSDNBMywzLDAsMCwwLDAsM1YyMWEzLDMsMCwwLDAsMywzSDIxYTMsMywwLDAsMCwzLTNWM0EzLDMsMCwwLDAsMjEsMFpNMywySDIxYTEsMSwwLDAsMSwxLDFWMTUuODZMMTQuMTgsOS4zNWE1LjA2LDUuMDYsMCwwLDAtNi4zOS0uMDZMMiwxMy45MlYzQTEsMSwwLDAsMSwzLDJaTTIxLDIySDNhMSwxLDAsMCwxLTEtMVYxNi40OGw3LTUuNjNhMy4wNiwzLjA2LDAsMCwxLDMuODYsMEwyMiwxOC40N1YyMUExLDEsMCwwLDEsMjEsMjJaJ1xuXHRcdFx0KTtcblx0XHRcdFxuXHRcdFx0aWNvblBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsICdyb3VuZCcpO1xuXHRcdFx0aWNvblBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCAncm91bmQnKTtcblx0XHRcdGljb25QYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzInKTtcblxuXHRcdFx0aWNvblBhdGgyLnNldEF0dHJpYnV0ZShcblx0XHRcdFx0J2QnLFxuXHRcdFx0XHQnTTE4LDlhMywzLDAsMSwwLTMtM0EzLDMsMCwwLDAsMTgsOVptMC00YTEsMSwwLDEsMS0xLDFBMSwxLDAsMCwxLDE4LDVaJ1xuXHRcdFx0KTtcblx0XHRcdGljb25QYXRoMi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgJ3JvdW5kJyk7XG5cdFx0XHRpY29uUGF0aDIuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCAncm91bmQnKTtcblx0XHRcdGljb25QYXRoMi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcyJyk7XG5cblx0XHRcdGljb25TdmcuYXBwZW5kQ2hpbGQoaWNvblBhdGgpO1xuXHRcdFx0aWNvblN2Zy5hcHBlbmRDaGlsZChpY29uUGF0aDIpO1xuXG4gICAgICAgICAgICB2YXIgbGFiZWwyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgICAgICAgIGxhYmVsMi50ZXh0Q29udGVudCA9ICh0aGlzLnRhcmdldHMgJiYgdGhpcy50YXJnZXRzW2xheWVyLmlkXSk/dGhpcy50YXJnZXRzW2xheWVyLmlkXTpsYXllci5pZDtcbiAgICAgICAgICAgIHRkMS5hcHBlbmRDaGlsZChpY29uU3ZnKVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2goc3ltYm9sLmVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpdic6XG4gICAgICAgICAgICAgICAgICAgIGlmICgoc3ltYm9sLmF0dHJpYnV0ZXMuc3R5bGUuYmFja2dyb3VuZEltYWdlICYmICFbXCJ1cmwodW5kZWZpbmVkKVwiLFwidXJsKG51bGwpXCJdLmluY2x1ZGVzKHN5bWJvbC5hdHRyaWJ1dGVzLnN0eWxlLmJhY2tncm91bmRJbWFnZSkpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSBzeW1ib2wuYXR0cmlidXRlcy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UucmVwbGFjZSgndXJsKCcsJycpLnJlcGxhY2UoJyknLCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5hbHQgPSBsYXllci5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zdHlsZS5jc3NUZXh0ID0gYGhlaWdodDogMTdweDtgXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZDEuYXBwZW5kQ2hpbGQoaW1nKSAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRkMS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzeW1ib2wuYXR0cmlidXRlcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHRkMS5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSBzeW1ib2wuYXR0cmlidXRlcy5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgIHRkMS5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IHN5bWJvbC5hdHRyaWJ1dGVzLnN0eWxlLmJhY2tncm91bmRTaXplO1xuICAgICAgICAgICAgICAgICAgICB0ZDEuc3R5bGUuYmFja2dyb3VuZFJlcGVhdCA9IHN5bWJvbC5hdHRyaWJ1dGVzLnN0eWxlLmJhY2tncm91bmRSZXBlYXQ7XG4gICAgICAgICAgICAgICAgICAgIHRkMS5zdHlsZS5vcGFjaXR5ID0gc3ltYm9sLmF0dHJpYnV0ZXMuc3R5bGUub3BhY2l0eTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3ZnJzpcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgICAgICAgICAgICAgIHN2Zy5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDogMTdweDsnXG4gICAgICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAndmVyc2lvbicsICcxLjEnKVxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzeW1ib2wuYXR0cmlidXRlcykuZm9yRWFjaChrPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKGssIHN5bWJvbC5hdHRyaWJ1dGVzW2tdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sLmNoaWxkcmVuLmZvckVhY2goY2hpbGQ9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBjaGlsZC5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjaGlsZC5hdHRyaWJ1dGVzKS5mb3JFYWNoKGsyPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc2V0QXR0cmlidXRlTlMobnVsbCwgazIsIGNoaWxkLmF0dHJpYnV0ZXNbazJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZENoaWxkKGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChncm91cCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDIudGV4dENvbnRlbnQgPSAodGhpcy50YXJnZXRzICYmIHRoaXMudGFyZ2V0c1tsYXllci5pZF0pP3RoaXMudGFyZ2V0c1tsYXllci5pZF06bGF5ZXIuaWQ7XG4gICAgICAgICAgICAgICAgICAgIHRkMS5hcHBlbmRDaGlsZChzdmcpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN5bWJvbC5lbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGNyZWF0ZSBsYXllciBsYWJlbFxuICAgICAgICB2YXIgdGQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnVEQnKTtcbiAgICAgICAgdGQyLmNsYXNzTmFtZT0nbGVnZW5kLXRhYmxlLXRkJztcbiAgICAgICAgbGV0IGxhYmVsMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGxhYmVsMS50ZXh0Q29udGVudCA9ICh0aGlzLnRhcmdldHMgJiYgdGhpcy50YXJnZXRzW2xheWVyLmlkXSk/dGhpcy50YXJnZXRzW2xheWVyLmlkXTpsYXllci5pZDtcbiAgICAgICAgdGQyLmFwcGVuZENoaWxkKGxhYmVsMSlcblxuICAgICAgICAvLyB0ci5hcHBlbmRDaGlsZCh0ZDApO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZDEpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZDIpO1xuICAgICAgICByZXR1cm4gdHI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgdXBkYXRlIGxlZ2VuZCBjb250ZW50c1xuICAgICovXG4gICAgcHJpdmF0ZSB1cGRhdGVMZWdlbmRDb250cm9sKClcbiAgICB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMubWFwO1xuXG4gICAgICAgIC8vIGdldCBjdXJyZW50IHJlbmRlcmVkIGxheWVyc1xuICAgICAgICBjb25zdCB2aXNpYmxlTGF5ZXJzID0ge307XG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gbWFwLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcygpO1xuICAgICAgICAgICAgZm9yIChsZXQgZmVhdHVyZSBvZiBmZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIHZpc2libGVMYXllcnNbZmVhdHVyZS5sYXllci5pZF0gPSBmZWF0dXJlLmxheWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxheWVycyA9IG1hcD8uZ2V0U3R5bGUoKS5sYXllcnM7XG4gICAgICAgIGlmIChsYXllcnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5sZWdlbmRUYWJsZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1RBQkxFJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRUYWJsZS5jbGFzc05hbWUgPSAnbGVnZW5kLXRhYmxlJztcbiAgICAgICAgICAgICAgICB0aGlzLmxlZ2VuZENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmxlZ2VuZFRhYmxlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZSAodGhpcy5sZWdlbmRUYWJsZS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRUYWJsZS5yZW1vdmVDaGlsZCh0aGlzLmxlZ2VuZFRhYmxlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlT3JkZXIpe1xuICAgICAgICAgICAgICAgIGxheWVycyA9IGxheWVycy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXllcnMuZm9yRWFjaChsPT57XG4gICAgICAgICAgICAgICAgaWYgKHZpc2libGVMYXllcnNbbC5pZF0gJiYgdGhpcy51bmNoZWNrZWRMYXllcnNbbC5pZF0pe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy51bmNoZWNrZWRMYXllcnNbbC5pZF07XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYgKHRoaXMudW5jaGVja2VkTGF5ZXJzW2wuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVMYXllcnNbbC5pZF09bFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoKHRoaXMudGFyZ2V0cyA9PT0gdW5kZWZpbmVkKSBcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGFyZ2V0IG9wdGlvbiBpcyB1bmRlZmluZWQsIHNob3cgYWxsIGxheWVycy5cbiAgICAgICAgICAgICAgICAgICAgfHwgKHRoaXMudGFyZ2V0cyAmJiBPYmplY3Qua2V5cyh0aGlzLnRhcmdldHMpLmxlbmd0aCA9PT0gMCkgXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vIGxheWVyIGlzIHNwZWNpZmllZCwgc2hvdyBhbGwgbGF5ZXJzLlxuICAgICAgICAgICAgICAgICAgICB8fCAodGhpcy50YXJnZXRzICYmIE9iamVjdC5rZXlzKHRoaXMudGFyZ2V0cykubWFwKChpZDpzdHJpbmcpPT57cmV0dXJuIGlkO30pLmluY2x1ZGVzKGwuaWQpKVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBsYXllcnMgYXJlIHNwZWZpY2llZCwgb25seSBzaG93IHRoZXNlIHNwZWNpZmljIGxheWVycy5cbiAgICAgICAgICAgICAgICApe1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vbmx5UmVuZGVyZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBzaG93IHJlbmRlcmVkIGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZpc2libGVMYXllcnNbbC5pZF0pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ciA9IHRoaXMuZ2V0TGF5ZXJMZWdlbmQobCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHIpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWdlbmRUYWJsZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uQWRkKG1hcDogTWFwYm94TWFwKTogSFRNTEVsZW1lbnRcbiAgICB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmNvbnRyb2xDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm1hcGJveGdsLWN0cmxcIik7XG4gICAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWFwYm94Z2wtY3RybC1ncm91cFwiKTtcbiAgICAgICAgdGhpcy5sZWdlbmRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmxlZ2VuZENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWFwYm94Z2wtbGVnZW5kLWxpc3RcIik7XG4gICAgICAgIHRoaXMubGVnZW5kQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgdGhpcy5sZWdlbmRCdXR0b24uY2xhc3NMaXN0LmFkZChcIm1hcGJveGdsLWN0cmwtaWNvblwiKTtcbiAgICAgICAgdGhpcy5sZWdlbmRCdXR0b24uY2xhc3NMaXN0LmFkZChcIm1hcGJveGdsLWxlZ2VuZC1zd2l0Y2hlclwiKTtcbiAgICAgICAgdGhpcy5sZWdlbmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmxlZ2VuZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgdGhpcy5sZWdlbmRDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uRG9jdW1lbnRDbGljayk7XG4gICAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmxlZ2VuZEJ1dHRvbik7XG4gICAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmxlZ2VuZENvbnRhaW5lcik7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwieFwiO1xuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJtYXBib3hnbC1sZWdlbmQtY2xvc2UtYnV0dG9uXCIpO1xuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxlZ2VuZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgdGhpcy5sZWdlbmRDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxlZ2VuZENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNsb3NlQnV0dG9uKTtcblxuICAgICAgICBjb25zdCBsZWdlbmRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgICAgIGxlZ2VuZExhYmVsLmNsYXNzTGlzdC5hZGQoXCJtYXBib3hnbC1sZWdlbmQtdGl0bGUtbGFiZWxcIik7XG4gICAgICAgIGxlZ2VuZExhYmVsLnRleHRDb250ZW50ID0gdGhpcy5vcHRpb25zLnRpdGxlIHx8ICdMZWdlbmQnO1xuICAgICAgICB0aGlzLmxlZ2VuZENvbnRhaW5lci5hcHBlbmRDaGlsZChsZWdlbmRMYWJlbClcbiAgICAgICAgdGhpcy5sZWdlbmRDb250YWluZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcblxuICAgICAgICBjb25zdCBjaGVja09ubHlSZW5kZXJlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNoZWNrT25seVJlbmRlcmVkLnNldEF0dHJpYnV0ZSgndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgICBjb25zdCBjaGVja2JveE9ubHlSZW5kZXJlZElkID0gYG1hcGJveGdsLWxlZ2VuZC1vbmx5cmVuZGVyZWQtY2hlY2tib3gtJHtNYXRoLnJhbmRvbSgpKjEwMH1gXG4gICAgICAgIGNoZWNrT25seVJlbmRlcmVkLnNldEF0dHJpYnV0ZSgnaWQnLCBjaGVja2JveE9ubHlSZW5kZXJlZElkKTtcbiAgICAgICAgY2hlY2tPbmx5UmVuZGVyZWQuY2xhc3NMaXN0LmFkZChcIm1hcGJveGdsLWxlZ2VuZC1vbmx5UmVuZGVyZWQtY2hlY2tib3hcIik7XG4gICAgICAgIGNoZWNrT25seVJlbmRlcmVkLmNoZWNrZWQgPSB0aGlzLm9ubHlSZW5kZXJlZDtcbiAgICAgICAgY29uc3QgdGhpc18gPSB0aGlzO1xuICAgICAgICBjaGVja09ubHlSZW5kZXJlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgX2NoZWNrZWQgPSBlLnRhcmdldD8uY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXNfLm9ubHlSZW5kZXJlZCA9IChfY2hlY2tlZCk/dHJ1ZTpmYWxzZTtcbiAgICAgICAgICAgIHRoaXNfLnVwZGF0ZUxlZ2VuZENvbnRyb2woKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGVnZW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrT25seVJlbmRlcmVkKTtcbiAgICAgICAgY29uc3Qgb25seVJlbmRlcmVkTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICBvbmx5UmVuZGVyZWRMYWJlbC5jbGFzc0xpc3QuYWRkKFwibWFwYm94Z2wtbGVnZW5kLW9ubHlSZW5kZXJlZC1sYWJlbFwiKTtcbiAgICAgICAgb25seVJlbmRlcmVkTGFiZWwudGV4dENvbnRlbnQgPSBcIk9ubHkgcmVuZGVyZWRcIjtcbiAgICAgICAgb25seVJlbmRlcmVkTGFiZWwuaHRtbEZvciA9IGNoZWNrYm94T25seVJlbmRlcmVkSWQ7XG4gICAgICAgIHRoaXMubGVnZW5kQ29udGFpbmVyLmFwcGVuZENoaWxkKG9ubHlSZW5kZXJlZExhYmVsKTtcbiAgICAgICAgdGhpcy5sZWdlbmRDb250YWluZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcblxuICAgICAgICB0aGlzLm1hcC5vbignbW92ZWVuZCcsIChldmVudERhdGEpPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVMZWdlbmRDb250cm9sKCk7XG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGFmdGVyTG9hZExpc3RlbmVyID0gYXN5bmMoKSA9PntcbiAgICAgICAgICAgIGlmIChtYXAubG9hZGVkKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1hcC5nZXRTdHlsZSgpO1xuICAgICAgICAgICAgICAgIGxldCBzdHlsZVVybCA9IHN0eWxlLnNwcml0ZTtcbiAgICAgICAgICAgICAgICBsZXQgc3RyVG9rZW4gPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVVcmwgJiYgc3R5bGVVcmwuaW5jbHVkZXMoJ21hcGJveDovLycpKXtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVVcmwgPSBzdHlsZVVybFxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbWFwYm94OlxcL1xcLy9nLCBiYXNlQXBpVXJsKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvc3ByaXRlcy9nLCcvc3R5bGVzL3YxJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlVXJsID0gYCR7c3R5bGVVcmx9L3Nwcml0ZWA7XG4gICAgICAgICAgICAgICAgICAgIHN0clRva2VuID0gYD9hY2Nlc3NfdG9rZW49JHt0aGlzLm9wdGlvbnMuYWNjZXNzdG9rZW4gfHwgYWNjZXNzVG9rZW59YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkSW1hZ2UoYCR7c3R5bGVVcmx9QDJ4LnBuZyR7c3RyVG9rZW59YCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZEpzb24oYCR7c3R5bGVVcmx9Lmpzb24ke3N0clRva2VufWApLFxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IHByb21pc2UudGhlbigoW2ltYWdlLCBqc29uXSkgPT4ge3RoaXMuc2V0U3ByaXRlKGltYWdlLCBqc29uKX0pO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTGVnZW5kQ29udHJvbCgpO1xuICAgICAgICAgICAgICAgIG1hcC5vZmYoJ2lkbGUnLCBhZnRlckxvYWRMaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXAub24oJ2lkbGUnLCBhZnRlckxvYWRMaXN0ZW5lcik7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5zaG93RGVmYXVsdCA9PSB0cnVlKXtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICB0aGlzLmxlZ2VuZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblJlbW92ZSgpOiB2b2lkXG4gICAge1xuICAgICAgaWYgKCF0aGlzLmNvbnRyb2xDb250YWluZXIgfHwgIXRoaXMuY29udHJvbENvbnRhaW5lci5wYXJlbnROb2RlIHx8ICF0aGlzLm1hcCB8fCAhdGhpcy5sZWdlbmRCdXR0b24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sZWdlbmRCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25Eb2N1bWVudENsaWNrKTtcbiAgICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY29udHJvbENvbnRhaW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuICAgICAgdGhpcy5tYXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZHJhdygpOiB2b2lkXG4gICAge1xuICAgICAgICB0aGlzLnVwZGF0ZUxlZ2VuZENvbnRyb2woKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRG9jdW1lbnRDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWR7XG4gICAgICBpZiAodGhpcy5jb250cm9sQ29udGFpbmVyICYmICF0aGlzLmNvbnRyb2xDb250YWluZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQpICYmIHRoaXMubGVnZW5kQ29udGFpbmVyICYmIHRoaXMubGVnZW5kQnV0dG9uKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLnNob3dEZWZhdWx0ICE9PSB0cnVlKXtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIHRoaXMubGVnZW5kQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFNwcml0ZShpbWFnZSwganNvbil7XG4gICAgICAgIHRoaXMuc3ByaXRlID0ge1xuICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICBqc29uXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRJbWFnZSh1cmw6c3RyaW5nKXtcbiAgICAgICAgbGV0IGNhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xuICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2FuY2VsbGVkKSByZXNvbHZlKGltZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbWcub25lcnJvciA9IGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFjYW5jZWxsZWQpIHJlamVjdChlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICB9KTtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIHByb21pc2UuY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICAgICAgY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRKc29uICh1cmw6c3RyaW5nKXtcbiAgICAgICAgcmV0dXJuIGF4aW9zLmdldCh1cmwsIHsgcmVzcG9uc2VUeXBlOiAnanNvbid9KS50aGVuKHJlcz0+IHJlcy5kYXRhKVxuICAgIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IG1hcGJveGdsOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTg4KTtcbiJdLCJuYW1lcyI6WyJ2OCIsIiR2ZXJzaW9uIiwiJHJvb3QiLCJ2ZXJzaW9uIiwicmVxdWlyZWQiLCJ0eXBlIiwidmFsdWVzIiwiZG9jIiwiZXhhbXBsZSIsIm5hbWUiLCJtZXRhZGF0YSIsImNlbnRlciIsInZhbHVlIiwiem9vbSIsImJlYXJpbmciLCJwZXJpb2QiLCJ1bml0cyIsInBpdGNoIiwibGlnaHQiLCJhbmNob3IiLCJjb2xvciIsImludGVuc2l0eSIsInRlcnJhaW4iLCJmb2ciLCJzb3VyY2VzIiwidXJsIiwic3ByaXRlIiwiZ2x5cGhzIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiZGVsYXkiLCJwcm9qZWN0aW9uIiwicGFyYWxsZWxzIiwibGF5ZXJzIiwiaWQiLCJzb3VyY2UiLCJwYWludCIsInNvdXJjZV92ZWN0b3IiLCJ2ZWN0b3IiLCJ0aWxlcyIsImJvdW5kcyIsImxlbmd0aCIsInNjaGVtZSIsInh5eiIsInRtcyIsIm1pbnpvb20iLCJtYXh6b29tIiwiYXR0cmlidXRpb24iLCJwcm9tb3RlSWQiLCJ2b2xhdGlsZSIsImFuZHJvaWQiLCJpb3MiLCJzb3VyY2VfcmFzdGVyIiwicmFzdGVyIiwidGlsZVNpemUiLCJzb3VyY2VfcmFzdGVyX2RlbSIsImVuY29kaW5nIiwidGVycmFyaXVtIiwibWFwYm94Iiwic291cmNlX2dlb2pzb24iLCJnZW9qc29uIiwiZGF0YSIsImJ1ZmZlciIsIm1heGltdW0iLCJtaW5pbXVtIiwiZmlsdGVyIiwidG9sZXJhbmNlIiwiY2x1c3RlciIsImNsdXN0ZXJSYWRpdXMiLCJjbHVzdGVyTWF4Wm9vbSIsImNsdXN0ZXJNaW5Qb2ludHMiLCJjbHVzdGVyUHJvcGVydGllcyIsImxpbmVNZXRyaWNzIiwiZ2VuZXJhdGVJZCIsInNvdXJjZV92aWRlbyIsInZpZGVvIiwidXJscyIsImNvb3JkaW5hdGVzIiwic291cmNlX2ltYWdlIiwiaW1hZ2UiLCJsYXllciIsImZpbGwiLCJqcyIsIm1hY29zIiwibGluZSIsInN5bWJvbCIsImNpcmNsZSIsImhlYXRtYXAiLCJoaWxsc2hhZGUiLCJiYWNrZ3JvdW5kIiwic2t5IiwibGF5b3V0IiwibGF5b3V0X2JhY2tncm91bmQiLCJ2aXNpYmlsaXR5IiwidmlzaWJsZSIsIm5vbmUiLCJsYXlvdXRfc2t5IiwibGF5b3V0X2ZpbGwiLCJleHByZXNzaW9uIiwiaW50ZXJwb2xhdGVkIiwicGFyYW1ldGVycyIsImxheW91dF9jaXJjbGUiLCJsYXlvdXRfaGVhdG1hcCIsImxheW91dF9saW5lIiwiYnV0dCIsInJvdW5kIiwic3F1YXJlIiwiYmV2ZWwiLCJtaXRlciIsInJlcXVpcmVzIiwibGF5b3V0X3N5bWJvbCIsInBvaW50IiwiYXV0byIsIm1hcCIsInZpZXdwb3J0Iiwid2lkdGgiLCJoZWlnaHQiLCJib3RoIiwidG9rZW5zIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwidXBwZXJjYXNlIiwibG93ZXJjYXNlIiwibGF5b3V0X3Jhc3RlciIsImxheW91dF9oaWxsc2hhZGUiLCJmaWx0ZXJfc3ltYm9sIiwiZmlsdGVyX2ZpbGwiLCJmaWx0ZXJfbGluZSIsImZpbHRlcl9jaXJjbGUiLCJmaWx0ZXJfaGVhdG1hcCIsImZpbHRlcl9vcGVyYXRvciIsImFsbCIsImFueSIsImhhcyIsIndpdGhpbiIsImdlb21ldHJ5X3R5cGUiLCJQb2ludCIsIkxpbmVTdHJpbmciLCJQb2x5Z29uIiwic3RvcHMiLCJiYXNlIiwicHJvcGVydHkiLCJpZGVudGl0eSIsImV4cG9uZW50aWFsIiwiaW50ZXJ2YWwiLCJjYXRlZ29yaWNhbCIsImNvbG9yU3BhY2UiLCJyZ2IiLCJsYWIiLCJoY2wiLCJmdW5jdGlvbl9zdG9wIiwiZXhwcmVzc2lvbl9uYW1lIiwiZ3JvdXAiLCJsaXRlcmFsIiwiYXJyYXkiLCJhdCIsInNsaWNlIiwibWF0Y2giLCJjb2FsZXNjZSIsInN0ZXAiLCJpbnRlcnBvbGF0ZSIsImxuMiIsInBpIiwiZSIsInN0cmluZyIsIm51bWJlciIsImJvb2xlYW4iLCJvYmplY3QiLCJjb2xsYXRvciIsImZvcm1hdCIsInJnYmEiLCJnZXQiLCJwcm9wZXJ0aWVzIiwiYWNjdW11bGF0ZWQiLCJzcXJ0IiwibG9nMTAiLCJsbiIsImxvZzIiLCJzaW4iLCJjb3MiLCJ0YW4iLCJhc2luIiwiYWNvcyIsImF0YW4iLCJtaW4iLCJtYXgiLCJhYnMiLCJjZWlsIiwiZmxvb3IiLCJkaXN0YW5jZSIsInVwY2FzZSIsImRvd25jYXNlIiwiY29uY2F0IiwicmFuZ2UiLCJwb3NpdGlvbiIsImFsYmVycyIsImVxdWFsRWFydGgiLCJlcXVpcmVjdGFuZ3VsYXIiLCJsYW1iZXJ0Q29uZm9ybWFsQ29uaWMiLCJtZXJjYXRvciIsIm5hdHVyYWxFYXJ0aCIsIndpbmtlbFRyaXBlbCIsImdsb2JlIiwiZXhhZ2dlcmF0aW9uIiwicGFpbnRfZmlsbCIsInBhaW50X2xpbmUiLCJwYWludF9jaXJjbGUiLCJwYWludF9oZWF0bWFwIiwicGFpbnRfc3ltYm9sIiwib3ZlcnJpZGFibGUiLCJwYWludF9yYXN0ZXIiLCJsaW5lYXIiLCJuZWFyZXN0IiwicGFpbnRfaGlsbHNoYWRlIiwicGFpbnRfYmFja2dyb3VuZCIsInBhaW50X3NreSIsImdyYWRpZW50IiwiYXRtb3NwaGVyZSIsImNvbnN0YW50IiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZm4iLCJtb2R1bGUiLCJleHBvcnRzIiwicHVueWNvZGUiLCJyb290IiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJmcmVlR2xvYmFsIiwia2V5IiwibWF4SW50IiwicmVnZXhQdW55Y29kZSIsInJlZ2V4Tm9uQVNDSUkiLCJyZWdleFNlcGFyYXRvcnMiLCJlcnJvcnMiLCJNYXRoIiwic3RyaW5nRnJvbUNoYXJDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZXJyb3IiLCJSYW5nZUVycm9yIiwicmVzdWx0IiwibWFwRG9tYWluIiwicGFydHMiLCJzcGxpdCIsInJlcGxhY2UiLCJqb2luIiwidWNzMmRlY29kZSIsImV4dHJhIiwib3V0cHV0IiwiY291bnRlciIsImNoYXJDb2RlQXQiLCJwdXNoIiwidWNzMmVuY29kZSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiZmxhZyIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJrIiwiYmFzZU1pbnVzVE1pbiIsImRlY29kZSIsImlucHV0Iiwib3V0IiwiYmFzaWMiLCJqIiwiaW5kZXgiLCJvbGRpIiwidyIsInQiLCJiYXNlTWludXNUIiwiY29kZVBvaW50IiwiaW5wdXRMZW5ndGgiLCJpIiwibiIsImJpYXMiLCJsYXN0SW5kZXhPZiIsInNwbGljZSIsImVuY29kZSIsImhhbmRsZWRDUENvdW50IiwiYmFzaWNMZW5ndGgiLCJtIiwicSIsImN1cnJlbnRWYWx1ZSIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInFNaW51c1QiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJoYXNPd25Qcm9wZXJ0eSIsInV0aWwiLCJhcmciLCJvYmoiLCJwcm9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsInFzIiwic2VwIiwiZXEiLCJvcHRpb25zIiwicmVnZXhwIiwibWF4S2V5cyIsImxlbiIsImtzdHIiLCJ2c3RyIiwidiIsIngiLCJpZHgiLCJpbmRleE9mIiwic3Vic3RyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiQXJyYXkiLCJpc0FycmF5Iiwic3RyaW5naWZ5UHJpbWl0aXZlIiwiaXNGaW5pdGUiLCJ1bmRlZmluZWQiLCJrZXlzIiwia3MiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZyIsInBhcnNlIiwic3RyaW5naWZ5IiwiVXJsIiwidGhpcyIsInByb3RvY29sIiwic2xhc2hlcyIsImF1dGgiLCJob3N0IiwicG9ydCIsImhvc3RuYW1lIiwiaGFzaCIsInNlYXJjaCIsInF1ZXJ5IiwicGF0aG5hbWUiLCJwYXRoIiwiaHJlZiIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwidW5zYWZlUHJvdG9jb2wiLCJob3N0bGVzc1Byb3RvY29sIiwic2xhc2hlZFByb3RvY29sIiwiZXh0ZW5kIiwiaW5wdXRzIiwicGFyc2VRdWVyeVN0cmluZyIsInNsYXNoZXNEZW5vdGVIb3N0IiwiVHlwZUVycm9yIiwicXVlcnlJbmRleCIsInNwbGl0dGVyIiwidVNwbGl0IiwicmVzdCIsInRyaW0iLCJzaW1wbGVQYXRoIiwiZXhlYyIsInByb3RvIiwibG93ZXJQcm90byIsImF0U2lnbiIsImhvc3RFbmQiLCJoZWMiLCJwYXJzZUhvc3QiLCJpcHY2SG9zdG5hbWUiLCJob3N0cGFydHMiLCJsIiwicGFydCIsIm5ld3BhcnQiLCJ2YWxpZFBhcnRzIiwibm90SG9zdCIsImJpdCIsInVuc2hpZnQiLCJ0b0FTQ0lJIiwicCIsImgiLCJhZSIsImVzYyIsImVzY2FwZSIsInFtIiwicyIsImNoYXJBdCIsInJlc29sdmUiLCJyZWxhdGl2ZSIsInJlc29sdmVPYmplY3QiLCJ1IiwidXJsUGFyc2UiLCJyZWwiLCJ0a2V5cyIsInRrIiwidGtleSIsInJrZXlzIiwicmsiLCJya2V5IiwicmVsUGF0aCIsInNoaWZ0IiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsInBvcCIsImF1dGhJbkhvc3QiLCJsYXN0IiwiaGFzVHJhaWxpbmdTbGFzaCIsInVwIiwiaXNBYnNvbHV0ZSIsIlBhcnNpbmdFcnJvciQxIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJzdXBlciIsIlBhcnNpbmdFcnJvciQyIiwiU2NvcGUiLCJwYXJlbnQiLCJiaW5kaW5ncyIsIlNjb3BlJDEiLCJOdWxsVHlwZSIsImtpbmQiLCJOdW1iZXJUeXBlIiwiU3RyaW5nVHlwZSIsIkJvb2xlYW5UeXBlIiwiQ29sb3JUeXBlIiwiT2JqZWN0VHlwZSIsIlZhbHVlVHlwZSIsIkNvbGxhdG9yVHlwZSIsIkZvcm1hdHRlZFR5cGUiLCJSZXNvbHZlZEltYWdlVHlwZSIsImFycmF5JDEiLCJpdGVtVHlwZSIsIk4iLCJ0b1N0cmluZyQxIiwidmFsdWVNZW1iZXJUeXBlcyIsImNoZWNrU3VidHlwZSIsImV4cGVjdGVkIiwibWVtYmVyVHlwZSIsImlzVmFsaWRUeXBlIiwicHJvdmlkZWQiLCJhbGxvd2VkVHlwZXMiLCJzb21lIiwiaXNWYWxpZE5hdGl2ZVR5cGUiLCJjc3Njb2xvcnBhcnNlciIsImtDU1NDb2xvclRhYmxlIiwiY2xhbXBfY3NzX2J5dGUiLCJjbGFtcF9jc3NfZmxvYXQiLCJmIiwicGFyc2VfY3NzX2ludCIsInN0ciIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsInBhcnNlX2Nzc19mbG9hdCIsImNzc19odWVfdG9fcmdiIiwibTEiLCJtMiIsInBhcnNlQ1NTQ29sb3IiLCJjc3Nfc3RyIiwiaXYiLCJvcCIsImVwIiwiZm5hbWUiLCJwYXJhbXMiLCJhbHBoYSIsIkNvbG9yIiwiciIsImciLCJiIiwiYSIsInN0YXRpYyIsInRvU3RyaW5nIiwidG9BcnJheSIsInRvQXJyYXkwMSIsInRvQXJyYXkwMVByZW11bHRpcGxpZWRBbHBoYSIsImJsYWNrIiwid2hpdGUiLCJ0cmFuc3BhcmVudCIsInJlZCIsImJsdWUiLCJDb2xvciQxIiwiQ29sbGF0b3IiLCJjYXNlU2Vuc2l0aXZlIiwiZGlhY3JpdGljU2Vuc2l0aXZlIiwibG9jYWxlIiwic2Vuc2l0aXZpdHkiLCJJbnRsIiwidXNhZ2UiLCJjb21wYXJlIiwibGhzIiwicmhzIiwicmVzb2x2ZWRMb2NhbGUiLCJyZXNvbHZlZE9wdGlvbnMiLCJGb3JtYXR0ZWRTZWN0aW9uIiwidGV4dCIsInNjYWxlIiwiZm9udFN0YWNrIiwidGV4dENvbG9yIiwibm9ybWFsaXplIiwiRm9ybWF0dGVkIiwic2VjdGlvbnMiLCJ1bmZvcm1hdHRlZCIsImlzRW1wdHkiLCJzZWN0aW9uIiwiZnJvbVN0cmluZyIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZWQiLCJSZXNvbHZlZEltYWdlIiwiYXZhaWxhYmxlIiwidmFsaWRhdGVSR0JBIiwiaXNWYWx1ZSIsIm1peGVkIiwiaXRlbSIsInR5cGVPZiIsIkpTT04iLCJMaXRlcmFsIiwiYXJncyIsImNvbnRleHQiLCJleHBlY3RlZFR5cGUiLCJldmFsdWF0ZSIsImVhY2hDaGlsZCIsIm91dHB1dERlZmluZWQiLCJMaXRlcmFsJDEiLCJSdW50aW1lRXJyb3IkMSIsInRvSlNPTiIsInR5cGVzJDEiLCJBc3NlcnRpb24iLCJwYXJzZWQiLCJjdHgiLCJmb3JFYWNoIiwiZXZlcnkiLCJBc3NlcnRpb24kMSIsIkZvcm1hdEV4cHJlc3Npb24iLCJmaXJzdEFyZyIsIm5leHRUb2tlbk1heUJlT2JqZWN0IiwiZm9udCIsImxhc3RFeHByZXNzaW9uIiwiY29udGVudCIsImV2YWx1YXRlZENvbnRlbnQiLCJJbWFnZUV4cHJlc3Npb24iLCJldmFsdWF0ZWRJbWFnZU5hbWUiLCJhdmFpbGFibGVJbWFnZXMiLCJ0eXBlcyIsIkNvZXJjaW9uIiwiQm9vbGVhbiIsImMiLCJwYXJzZUNvbG9yIiwibnVtIiwiTnVtYmVyIiwiaXNOYU4iLCJjaGlsZCIsIkNvZXJjaW9uJDEiLCJnZW9tZXRyeVR5cGVzIiwiRXZhbHVhdGlvbkNvbnRleHQkMSIsImdsb2JhbHMiLCJmZWF0dXJlIiwiZmVhdHVyZVN0YXRlIiwiZm9ybWF0dGVkU2VjdGlvbiIsIl9wYXJzZUNvbG9yQ2FjaGUiLCJjYW5vbmljYWwiLCJmZWF0dXJlVGlsZUNvb3JkIiwiZmVhdHVyZURpc3RhbmNlRGF0YSIsImdlb21ldHJ5VHlwZSIsImdlb21ldHJ5IiwiY2Fub25pY2FsSUQiLCJkaXN0YW5jZUZyb21DZW50ZXIiLCJ5IiwiZFgiLCJkWSIsImNhY2hlZCIsIkNvbXBvdW5kRXhwcmVzc2lvbiIsIl9ldmFsdWF0ZSIsImRlZmluaXRpb24iLCJkZWZpbml0aW9ucyIsImF2YWlsYWJsZU92ZXJsb2FkcyIsIm92ZXJsb2FkcyIsInNpZ25hdHVyZSIsInNpZ25hdHVyZUNvbnRleHQiLCJQYXJzaW5nQ29udGV4dCQxIiwicmVnaXN0cnkiLCJzY29wZSIsInBhcnNlZEFyZ3MiLCJhcmdQYXJzZUZhaWxlZCIsInNpZ25hdHVyZXMiLCJzdHJpbmdpZnlTaWduYXR1cmUiLCJhY3R1YWxUeXBlcyIsIkNvbXBvdW5kRXhwcmVzc2lvbiQxIiwiQ29sbGF0b3JFeHByZXNzaW9uIiwiRVhURU5UIiwidXBkYXRlQkJveCIsImJib3giLCJjb29yZCIsImJveFdpdGhpbkJveCIsImJib3gxIiwiYmJveDIiLCJnZXRUaWxlQ29vcmRpbmF0ZXMiLCJsYXQiLCJQSSIsImxvZyIsInRpbGVzQXRab29tIiwicG93IiwieiIsIm9uQm91bmRhcnkiLCJwMSIsInAyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb2ludFdpdGhpblBvbHlnb24iLCJyaW5ncyIsImluc2lkZSIsInJpbmciLCJsZW4yIiwicG9pbnRXaXRoaW5Qb2x5Z29ucyIsInBvbHlnb25zIiwidHdvU2lkZWQiLCJxMSIsInEyIiwieDMiLCJ5MyIsImRldDEiLCJkZXQyIiwibGluZUludGVyc2VjdExpbmUiLCJkIiwidmVjdG9yUCIsInYxIiwidjIiLCJsaW5lSW50ZXJzZWN0UG9seWdvbiIsInBvbHlnb24iLCJsaW5lU3RyaW5nV2l0aGluUG9seWdvbiIsImxpbmVTdHJpbmdXaXRoaW5Qb2x5Z29ucyIsImdldFRpbGVQb2x5Z29uIiwiZ2V0VGlsZVBvbHlnb25zIiwidXBkYXRlUG9pbnQiLCJwb2x5QkJveCIsIndvcmxkU2l6ZSIsImhhbGZXb3JsZFNpemUiLCJnZXRUaWxlUG9pbnRzIiwicG9pbnRCQm94Iiwic2hpZnRzIiwidGlsZVBvaW50cyIsInBvaW50cyIsImdldFRpbGVMaW5lcyIsImxpbmVCQm94IiwidGlsZUxpbmVzIiwidGlsZUxpbmUiLCJJbmZpbml0eSIsIldpdGhpbiIsImdlb21ldHJpZXMiLCJmZWF0dXJlcyIsInBvbHlnb25HZW9tZXRyeSIsInRpbGVQb2x5Z29uIiwidGlsZVBvbHlnb25zIiwicG9pbnRzV2l0aGluUG9seWdvbnMiLCJsaW5lc1dpdGhpblBvbHlnb25zIiwiV2l0aGluJDEiLCJpc0ZlYXR1cmVDb25zdGFudCIsImlzU3RhdGVDb25zdGFudCIsImlzR2xvYmFsUHJvcGVydHlDb25zdGFudCIsIlZhciIsImJvdW5kRXhwcmVzc2lvbiIsIlZhciQxIiwiUGFyc2luZ0NvbnRleHQiLCJleHByIiwiX3BhcnNlIiwiYW5ub3RhdGUiLCJ0eXBlQW5ub3RhdGlvbiIsIkV4cHIiLCJhY3R1YWwiLCJpc0NvbnN0YW50IiwiZWMiLCJpc1R5cGVBbm5vdGF0aW9uIiwiY2hpbGRyZW5Db25zdGFudCIsImZpbmRTdG9wTGVzc1RoYW5PckVxdWFsVG8iLCJsYXN0SW5kZXgiLCJuZXh0VmFsdWUiLCJsb3dlckluZGV4IiwidXBwZXJJbmRleCIsImN1cnJlbnRJbmRleCIsIlN0ZXAiLCJsYWJlbHMiLCJvdXRwdXRzIiwibGFiZWwiLCJvdXRwdXRUeXBlIiwibGFiZWxLZXkiLCJ2YWx1ZUtleSIsInN0b3BDb3VudCIsIlN0ZXAkMSIsInVuaXRiZXppZXIiLCJVbml0QmV6aWVyIiwicDF4IiwicDF5IiwicDJ4IiwicDJ5IiwiY3giLCJieCIsImF4IiwiY3kiLCJieSIsImF5Iiwic2FtcGxlQ3VydmVYIiwic2FtcGxlQ3VydmVZIiwic2FtcGxlQ3VydmVEZXJpdmF0aXZlWCIsInNvbHZlQ3VydmVYIiwiZXBzaWxvbiIsInQwIiwidDEiLCJ0MiIsImQyIiwic29sdmUiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJmcm9tIiwidG8iLCJYbiIsIlpuIiwiZGVnMnJhZCIsInJhZDJkZWciLCJ4eXoybGFiIiwibGFiMnh5eiIsInh5ejJyZ2IiLCJyZ2IyeHl6IiwicmdiVG9MYWIiLCJyZ2JDb2xvciIsImxhYlRvUmdiIiwibGFiQ29sb3IiLCJpbnRlcnBvbGF0ZUh1ZSIsImZvcndhcmQiLCJyZXZlcnNlIiwiYXRhbjIiLCJoY2xDb2xvciIsImNvbG9yU3BhY2VzIiwiSW50ZXJwb2xhdGUiLCJvcGVyYXRvciIsImludGVycG9sYXRpb24iLCJsb3dlciIsInVwcGVyIiwiZXhwb25lbnRpYWxJbnRlcnBvbGF0aW9uIiwiY29udHJvbFBvaW50cyIsImludGVycG9sYXRpb25GYWN0b3IiLCJvdXRwdXRMb3dlciIsIm91dHB1dFVwcGVyIiwibG93ZXJWYWx1ZSIsInVwcGVyVmFsdWUiLCJkaWZmZXJlbmNlIiwicHJvZ3Jlc3MiLCJJbnRlcnBvbGF0ZSQxIiwiQ29hbGVzY2UiLCJuZWVkc0Fubm90YXRpb24iLCJmaXJzdEltYWdlIiwiYXJnQ291bnQiLCJDb2FsZXNjZSQxIiwiTGV0IiwiYmluZGluZyIsIkxldCQxIiwiQXQiLCJBdCQxIiwiSW4iLCJuZWVkbGUiLCJoYXlzdGFjayIsIkluJDEiLCJJbmRleE9mIiwiZnJvbUluZGV4IiwiSW5kZXhPZiQxIiwiTWF0Y2giLCJpbnB1dFR5cGUiLCJjYXNlcyIsIm90aGVyd2lzZSIsImxhYmVsQ29udGV4dCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJzb3J0ZWRMYWJlbHMiLCJzb3J0IiwiZ3JvdXBlZEJ5T3V0cHV0Iiwib3V0cHV0TG9va3VwIiwib3V0cHV0SW5kZXgiLCJjb2VyY2VMYWJlbCIsIk1hdGNoJDEiLCJDYXNlIiwiYnJhbmNoZXMiLCJfIiwiQ2FzZSQxIiwiU2xpY2UiLCJiZWdpbkluZGV4IiwiZW5kSW5kZXgiLCJTbGljZSQxIiwiaXNDb21wYXJhYmxlVHlwZSIsImVxQ29sbGF0ZSIsIm1ha2VDb21wYXJpc29uIiwiY29tcGFyZUJhc2ljIiwiY29tcGFyZVdpdGhDb2xsYXRvciIsImlzT3JkZXJDb21wYXJpc29uIiwiQ29tcGFyaXNvbiIsImhhc1VudHlwZWRBcmd1bWVudCIsImx0IiwicnQiLCJFcXVhbHMiLCJOb3RFcXVhbHMiLCJMZXNzVGhhbiIsIkdyZWF0ZXJUaGFuIiwiTGVzc1RoYW5PckVxdWFsIiwiR3JlYXRlclRoYW5PckVxdWFsIiwiTnVtYmVyRm9ybWF0IiwiY3VycmVuY3kiLCJtaW5GcmFjdGlvbkRpZ2l0cyIsIm1heEZyYWN0aW9uRGlnaXRzIiwic3R5bGUiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJMZW5ndGgiLCJleHByZXNzaW9ucyIsInZhcmFyZ3MiLCJyZWdpc3RlciIsImhlYXRtYXBEZW5zaXR5IiwibGluZVByb2dyZXNzIiwic2t5UmFkaWFsUHJvZ3Jlc3MiLCJMTjIiLCJFIiwiTE4xMCIsImJpbmFyeVNlYXJjaCIsImlzU3VwcG9ydGVkU2NyaXB0IiwidG9VcHBlckNhc2UiLCJzdWNjZXNzIiwic3VwcG9ydHNJbnRlcnBvbGF0aW9uIiwic3BlYyIsImdldFR5cGUiLCJ2YWwiLCJpc0Z1bmN0aW9uIiwiaWRlbnRpdHlGdW5jdGlvbiIsImNyZWF0ZUZ1bmN0aW9uIiwicHJvcGVydHlTcGVjIiwiaXNDb2xvciIsInpvb21BbmRGZWF0dXJlRGVwZW5kZW50IiwiZmVhdHVyZURlcGVuZGVudCIsInpvb21EZXBlbmRlbnQiLCJzdG9wIiwiZGVmYXVsdCIsImlubmVyRnVuIiwiaGFzaGVkU3RvcHMiLCJjYXRlZ29yaWNhbEtleVR5cGUiLCJldmFsdWF0ZUV4cG9uZW50aWFsRnVuY3Rpb24iLCJldmFsdWF0ZUludGVydmFsRnVuY3Rpb24iLCJldmFsdWF0ZUNhdGVnb3JpY2FsRnVuY3Rpb24iLCJjcmVhdGUiLCJldmFsdWF0ZUlkZW50aXR5RnVuY3Rpb24iLCJmZWF0dXJlRnVuY3Rpb25zIiwiem9vbVN0b3BzIiwiZmVhdHVyZUZ1bmN0aW9uU3RvcHMiLCJpbnRlcnBvbGF0aW9uVHlwZSIsImJpbmQiLCJjb2FsZXNjZSQxIiwia2V5VHlwZSIsImludGVycCIsImNvbG9yc3BhY2UiLCJldmFsdWF0ZWRMb3dlciIsImFwcGx5IiwiZXZhbHVhdGVkVXBwZXIiLCJTdHlsZUV4cHJlc3Npb24iLCJfd2FybmluZ0hpc3RvcnkiLCJfZXZhbHVhdG9yIiwiX2RlZmF1bHRWYWx1ZSIsIl9lbnVtVmFsdWVzIiwiZXZhbHVhdGVXaXRob3V0RXJyb3JIYW5kbGluZyIsImNvbnNvbGUiLCJ3YXJuIiwiaXNFeHByZXNzaW9uIiwiY3JlYXRlRXhwcmVzc2lvbiIsInBhcnNlciIsImVudW0iLCJmb3JtYXR0ZWQiLCJyZXNvbHZlZEltYWdlIiwiZ2V0RXhwZWN0ZWRUeXBlIiwiWm9vbUNvbnN0YW50RXhwcmVzc2lvbiIsIl9zdHlsZUV4cHJlc3Npb24iLCJpc1N0YXRlRGVwZW5kZW50IiwiWm9vbURlcGVuZGVudEV4cHJlc3Npb24iLCJjcmVhdGVQcm9wZXJ0eUV4cHJlc3Npb24iLCJpc0ZlYXR1cmVDb25zdGFudCQxIiwiaXNab29tQ29uc3RhbnQiLCJzdXBwb3J0c1pvb21FeHByZXNzaW9uIiwiem9vbUN1cnZlIiwiZmluZFpvb21DdXJ2ZSIsIlN0eWxlUHJvcGVydHlGdW5jdGlvbiIsInNwZWNpZmljYXRpb24iLCJfcGFyYW1ldGVycyIsIl9zcGVjaWZpY2F0aW9uIiwiY2hpbGRSZXN1bHQiLCJjb252ZXJ0TGl0ZXJhbCIsImdldEludGVycG9sYXRlT3BlcmF0b3IiLCJnZXRGYWxsYmFjayIsImRlZmF1bHRWYWx1ZSIsImNvbnZlcnRQcm9wZXJ0eUZ1bmN0aW9uIiwiZ2V0RnVuY3Rpb25UeXBlIiwiYXBwZW5kU3RvcFBhaXIiLCJmaXh1cERlZ2VuZXJhdGVTdGVwQ3VydmUiLCJjdXJ2ZSIsImlzU3RlcCIsImNvbnZlcnRUb2tlblN0cmluZyIsInJlIiwicG9zIiwiU2V0IiwibyIsIiRWMCIsIiRWMSIsIiRWMiIsIiRWMyIsIiRWNCIsIiRWNSIsIiRWNiIsIiRWNyIsIiRWOCIsIiRWOSIsInRyYWNlIiwieXkiLCJzeW1ib2xzXyIsInRlcm1pbmFsc18iLCJwcm9kdWN0aW9uc18iLCJwZXJmb3JtQWN0aW9uIiwieXl0ZXh0IiwieXlsZW5nIiwieXlsaW5lbm8iLCJ5eXN0YXRlIiwiJCQiLCJfJCIsIiQwIiwiJCIsIl9fbGluZV9fIiwiZmlyc3RfbGluZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsInRhYmxlIiwiZGVmYXVsdEFjdGlvbnMiLCJwYXJzZUVycm9yIiwicmVjb3ZlcmFibGUiLCJzdGFjayIsInZzdGFjayIsImxzdGFjayIsIlRFUlJPUiIsIkVPRiIsImFyZ3VtZW50cyIsImxleGVyIiwic2hhcmVkU3RhdGUiLCJzZXRJbnB1dCIsInl5bGxvYyIsInl5bG9jIiwicmFuZ2VzIiwibGV4IiwidG9rZW4iLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwiYWN0aW9uIiwibmV3U3RhdGUiLCJ5eXZhbCIsImVyclN0ciIsInNob3dQb3NpdGlvbiIsImxvYyIsImxhc3RfbGluZSIsImZpcnN0X2NvbHVtbiIsImxhc3RfY29sdW1uIiwiX2lucHV0IiwiX21vcmUiLCJfYmFja3RyYWNrIiwiZG9uZSIsIm1hdGNoZWQiLCJjb25kaXRpb25TdGFjayIsIm9mZnNldCIsImNoIiwidW5wdXQiLCJsaW5lcyIsIm9sZExpbmVzIiwibW9yZSIsInJlamVjdCIsImJhY2t0cmFja19sZXhlciIsImxlc3MiLCJwYXN0SW5wdXQiLCJwYXN0IiwidXBjb21pbmdJbnB1dCIsIm5leHQiLCJwcmUiLCJ0ZXN0X21hdGNoIiwiaW5kZXhlZF9ydWxlIiwiYmFja3VwIiwibWF0Y2hlcyIsInRlbXBNYXRjaCIsInJ1bGVzIiwiX2N1cnJlbnRSdWxlcyIsImZsZXgiLCJiZWdpbiIsImNvbmRpdGlvbiIsInBvcFN0YXRlIiwiY29uZGl0aW9ucyIsInRvcFN0YXRlIiwicHVzaFN0YXRlIiwic3RhdGVTdGFja1NpemUiLCJ5eV8iLCIkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zIiwiWVlfU1RBUlQiLCJQYXJzZXIiLCJpc0V4cHJlc3Npb25GaWx0ZXIiLCJub3JtYWxpemVQcm9wZXJ0eUV4cHJlc3Npb24iLCJlcnIiLCJzdHlsZUZ1bmN0aW9uIiwiY29udmVydEZ1bmN0aW9uIiwiY29udmVydElkZW50aXR5RnVuY3Rpb24iLCJmZWF0dXJlRnVuY3Rpb25QYXJhbWV0ZXJzIiwiY29udmVydFpvb21BbmRQcm9wZXJ0eUZ1bmN0aW9uIiwiY29udmVydFpvb21GdW5jdGlvbiIsImVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwidmlld0JveCIsInhtbG5zIiwiY2hpbGRyZW4iLCJvcGFjaXR5Iiwic3Ryb2tlIiwiYmFja2dyb3VuZEltYWdlIiwiYmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJzdHJva2VXaWR0aCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJwYXR0ZXJuVW5pdHMiLCJwYXR0ZXJuVHJhbnNmb3JtIiwieGxpbmtIcmVmIiwiYmFja2dyb3VuZFJlcGVhdCIsImZpbmQiLCJzdGFydHNXaXRoIiwianNvbiIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJ0b0RhdGFVUkwiLCJ1dGlscyIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsIkF4aW9zRXJyb3IiLCJDYW5jZWxlZEVycm9yIiwicGFyc2VQcm90b2NvbCIsImNvbmZpZyIsIlByb21pc2UiLCJvbkNhbmNlbGVkIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJjYW5jZWxUb2tlbiIsInVuc3Vic2NyaWJlIiwic2lnbmFsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRm9ybURhdGEiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0Iiwib3BlbiIsIm1ldGhvZCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwic2V0VGltZW91dCIsIm9uYWJvcnQiLCJFQ09OTkFCT1JURUQiLCJvbmVycm9yIiwiRVJSX05FVFdPUksiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsIkVUSU1FRE9VVCIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInhzcmZIZWFkZXJOYW1lIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJFUlJfQkFEX1JFUVVFU1QiLCJzZW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2UiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkNhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJ0aGVuIiwiX2xpc3RlbmVycyIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJFUlJfQ0FOQ0VMRUQiLCJpbmhlcml0cyIsIl9fQ0FOQ0VMX18iLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiZGVmYXVsdHMiLCJpbnRlcmNlcHRvcnMiLCJjb25maWdPclVybCIsImFzc2VydE9wdGlvbnMiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJ1bldoZW4iLCJzeW5jaHJvbm91cyIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZXRVcmkiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJjb2RlIiwiZGVzY3JpcHRpb24iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJkZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJ0b0ZsYXRPYmplY3QiLCJhc3NpZ24iLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0IiwiaXNQbGFpbk9iamVjdCIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwiY29uZmlnVmFsdWUiLCJ2YWxpZGF0ZVN0YXR1cyIsIkVSUl9CQURfUkVTUE9OU0UiLCJmbnMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJwcm9jZXNzIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNGaWxlTGlzdCIsImlzT2JqZWN0UGF5bG9hZCIsImlzT2JqZWN0IiwiY29udGVudFR5cGUiLCJfRm9ybURhdGEiLCJlbnYiLCJGb3JtRGF0YSIsInJhd1ZhbHVlIiwiZW5jb2RlciIsImlzU3RyaW5nIiwic3RyaW5naWZ5U2FmZWx5Iiwic3RyaWN0SlNPTlBhcnNpbmciLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJzZXJpYWxpemVkUGFyYW1zIiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsIlJlZ0V4cCIsInJlbW92ZSIsIm5vdyIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwic2V0QXR0cmlidXRlIiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsImNhbGxiYWNrIiwiYXJyIiwiZm9ybURhdGEiLCJjb252ZXJ0VmFsdWUiLCJpc1R5cGVkQXJyYXkiLCJCbG9iIiwiQnVmZmVyIiwiYnVpbGQiLCJwYXJlbnRLZXkiLCJmdWxsS2V5IiwiZW5kc1dpdGgiLCJlbCIsImFwcGVuZCIsInRoaW5nIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiRVJSX0RFUFJFQ0FURUQiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJFUlJfQkFEX09QVElPTl9WQUxVRSIsIkVSUl9CQURfT1BUSU9OIiwiY2FjaGUiLCJraW5kT2YiLCJraW5kT2ZUZXN0IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJwYXR0ZXJuIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwic3RyaXBCT00iLCJzdXBlckNvbnN0cnVjdG9yIiwicHJvcHMiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwibWVyZ2VkIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNlYXJjaFN0cmluZyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfayIsIl9fZXNNb2R1bGUiLCJuZWVkUXVvdGVzIiwiY3NzTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsInVwZGF0ZSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJNYXAiLCJjb250YWluZXIiLCJhZGRDb250cm9sIiwiTmF2aWdhdGlvbkNvbnRyb2wiLCJvbiIsInRhcmdldHMiLCJzaG93RGVmYXVsdCIsInNob3dDaGVja2JveCIsIm9ubHlSZW5kZXJlZCIsInJldmVyc2VPcmRlciIsIk1hcGJveExlZ2VuZENvbnRyb2wiLCJ0aXRsZSIsInVuY2hlY2tlZExheWVycyIsImFjY2Vzc3Rva2VuIiwiSFRNTEltYWdlRWxlbWVudCIsIm9uRG9jdW1lbnRDbGljayIsImdldERlZmF1bHRQb3NpdGlvbiIsImNoYW5nZUxheWVyVmlzaWJpbGl0eSIsImxheWVyX2lkIiwiY2hlY2tlZCIsInNldExheW91dFByb3BlcnR5IiwiY2hlY2tib3hlcyIsImdldEVsZW1lbnRzQnlOYW1lIiwiY3JlYXRlTGF5ZXJDaGVja2JveCIsInRoaXNfIiwidGQiLCJjbGFzc05hbWUiLCJjaGVja2xheWVyIiwiZ2V0TGF5b3V0UHJvcGVydHkiLCJfY2hlY2tlZCIsIl9pZCIsImdldExheWVyTGVnZW5kIiwiZ2V0Wm9vbSIsInRyIiwidGQwIiwidGQxIiwiaW5jbHVkZXMiLCJpbWciLCJzcmMiLCJhbHQiLCJzdmciLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImsyIiwidGV4dENvbnRlbnQiLCJpY29uU3ZnIiwiaWNvblBhdGgiLCJpY29uUGF0aDIiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZDIiLCJsYWJlbDEiLCJ1cGRhdGVMZWdlbmRDb250cm9sIiwidmlzaWJsZUxheWVycyIsInF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyIsImdldFN0eWxlIiwibGVnZW5kVGFibGUiLCJsZWdlbmRDb250YWluZXIiLCJvbkFkZCIsImNvbnRyb2xDb250YWluZXIiLCJsZWdlbmRCdXR0b24iLCJkaXNwbGF5IiwiY2xvc2VCdXR0b24iLCJsZWdlbmRMYWJlbCIsImNoZWNrT25seVJlbmRlcmVkIiwiY2hlY2tib3hPbmx5UmVuZGVyZWRJZCIsInJhbmRvbSIsIm9ubHlSZW5kZXJlZExhYmVsIiwiaHRtbEZvciIsImV2ZW50RGF0YSIsImFmdGVyTG9hZExpc3RlbmVyIiwibG9hZGVkIiwic3R5bGVVcmwiLCJzdHJUb2tlbiIsImJhc2VBcGlVcmwiLCJhY2Nlc3NUb2tlbiIsImxvYWRJbWFnZSIsImxvYWRKc29uIiwic2V0U3ByaXRlIiwib2ZmIiwib25SZW1vdmUiLCJyZWRyYXciLCJldmVudCIsImNvbnRhaW5zIiwiY2FuY2VsbGVkIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsIm9ubG9hZCIsInJlcyIsIm1hcGJveGdsIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiYmFzZVVSSSIsIm5jIl0sInNvdXJjZVJvb3QiOiIifQ==